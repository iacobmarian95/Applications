   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "timers.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .bss.xActiveTimerList1,"aw",%nobits
  20              	 .align 2
  23              	xActiveTimerList1:
  24 0000 00000000 	 .space 20
  24      00000000 
  24      00000000 
  24      00000000 
  24      00000000 
  25              	 .section .bss.xActiveTimerList2,"aw",%nobits
  26              	 .align 2
  29              	xActiveTimerList2:
  30 0000 00000000 	 .space 20
  30      00000000 
  30      00000000 
  30      00000000 
  30      00000000 
  31              	 .section .bss.pxCurrentTimerList,"aw",%nobits
  32              	 .align 2
  35              	pxCurrentTimerList:
  36 0000 00000000 	 .space 4
  37              	 .section .bss.pxOverflowTimerList,"aw",%nobits
  38              	 .align 2
  41              	pxOverflowTimerList:
  42 0000 00000000 	 .space 4
  43              	 .section .bss.xTimerQueue,"aw",%nobits
  44              	 .align 2
  47              	xTimerQueue:
  48 0000 00000000 	 .space 4
  49              	 .section .bss.xTimerTaskHandle,"aw",%nobits
  50              	 .align 2
  53              	xTimerTaskHandle:
  54 0000 00000000 	 .space 4
  55              	 .section .rodata
  56              	 .align 2
  57              	.LC0:
  58 0000 546D7220 	 .ascii "Tmr Svc\000"
  58      53766300 
  59              	 .section .text.xTimerCreateTimerTask,"ax",%progbits
  60              	 .align 2
  61              	 .global xTimerCreateTimerTask
  62              	 .thumb
  63              	 .thumb_func
  65              	xTimerCreateTimerTask:
  66              	.LFB135:
  67              	 .file 1 "../Dave/Generated/FREERTOS/timers.c"
   1:../Dave/Generated/FREERTOS/timers.c **** /*
   2:../Dave/Generated/FREERTOS/timers.c ****  * FreeRTOS Kernel V10.0.1
   3:../Dave/Generated/FREERTOS/timers.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../Dave/Generated/FREERTOS/timers.c ****  *
   5:../Dave/Generated/FREERTOS/timers.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../Dave/Generated/FREERTOS/timers.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../Dave/Generated/FREERTOS/timers.c ****  * the Software without restriction, including without limitation the rights to
   8:../Dave/Generated/FREERTOS/timers.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../Dave/Generated/FREERTOS/timers.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../Dave/Generated/FREERTOS/timers.c ****  * subject to the following conditions:
  11:../Dave/Generated/FREERTOS/timers.c ****  *
  12:../Dave/Generated/FREERTOS/timers.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../Dave/Generated/FREERTOS/timers.c ****  * copies or substantial portions of the Software.
  14:../Dave/Generated/FREERTOS/timers.c ****  *
  15:../Dave/Generated/FREERTOS/timers.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../Dave/Generated/FREERTOS/timers.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../Dave/Generated/FREERTOS/timers.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../Dave/Generated/FREERTOS/timers.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../Dave/Generated/FREERTOS/timers.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../Dave/Generated/FREERTOS/timers.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../Dave/Generated/FREERTOS/timers.c ****  *
  22:../Dave/Generated/FREERTOS/timers.c ****  * http://www.FreeRTOS.org
  23:../Dave/Generated/FREERTOS/timers.c ****  * http://aws.amazon.com/freertos
  24:../Dave/Generated/FREERTOS/timers.c ****  *
  25:../Dave/Generated/FREERTOS/timers.c ****  * 1 tab == 4 spaces!
  26:../Dave/Generated/FREERTOS/timers.c ****  */
  27:../Dave/Generated/FREERTOS/timers.c **** 
  28:../Dave/Generated/FREERTOS/timers.c **** /* Standard includes. */
  29:../Dave/Generated/FREERTOS/timers.c **** #include <stdlib.h>
  30:../Dave/Generated/FREERTOS/timers.c **** 
  31:../Dave/Generated/FREERTOS/timers.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:../Dave/Generated/FREERTOS/timers.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:../Dave/Generated/FREERTOS/timers.c **** task.h is included from an application file. */
  34:../Dave/Generated/FREERTOS/timers.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:../Dave/Generated/FREERTOS/timers.c **** 
  36:../Dave/Generated/FREERTOS/timers.c **** #include "FreeRTOS.h"
  37:../Dave/Generated/FREERTOS/timers.c **** #include "task.h"
  38:../Dave/Generated/FREERTOS/timers.c **** #include "queue.h"
  39:../Dave/Generated/FREERTOS/timers.c **** #include "timers.h"
  40:../Dave/Generated/FREERTOS/timers.c **** 
  41:../Dave/Generated/FREERTOS/timers.c **** #if ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 0 )
  42:../Dave/Generated/FREERTOS/timers.c **** 	#error configUSE_TIMERS must be set to 1 to make the xTimerPendFunctionCall() function available.
  43:../Dave/Generated/FREERTOS/timers.c **** #endif
  44:../Dave/Generated/FREERTOS/timers.c **** 
  45:../Dave/Generated/FREERTOS/timers.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  46:../Dave/Generated/FREERTOS/timers.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  47:../Dave/Generated/FREERTOS/timers.c **** header files above, but not in this file, in order to generate the correct
  48:../Dave/Generated/FREERTOS/timers.c **** privileged Vs unprivileged linkage and placement. */
  49:../Dave/Generated/FREERTOS/timers.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  50:../Dave/Generated/FREERTOS/timers.c **** 
  51:../Dave/Generated/FREERTOS/timers.c **** 
  52:../Dave/Generated/FREERTOS/timers.c **** /* This entire source file will be skipped if the application is not configured
  53:../Dave/Generated/FREERTOS/timers.c **** to include software timer functionality.  This #if is closed at the very bottom
  54:../Dave/Generated/FREERTOS/timers.c **** of this file.  If you want to include software timer functionality then ensure
  55:../Dave/Generated/FREERTOS/timers.c **** configUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
  56:../Dave/Generated/FREERTOS/timers.c **** #if ( configUSE_TIMERS == 1 )
  57:../Dave/Generated/FREERTOS/timers.c **** 
  58:../Dave/Generated/FREERTOS/timers.c **** /* Misc definitions. */
  59:../Dave/Generated/FREERTOS/timers.c **** #define tmrNO_DELAY		( TickType_t ) 0U
  60:../Dave/Generated/FREERTOS/timers.c **** 
  61:../Dave/Generated/FREERTOS/timers.c **** /* The name assigned to the timer service task.  This can be overridden by
  62:../Dave/Generated/FREERTOS/timers.c **** defining trmTIMER_SERVICE_TASK_NAME in FreeRTOSConfig.h. */
  63:../Dave/Generated/FREERTOS/timers.c **** #ifndef configTIMER_SERVICE_TASK_NAME
  64:../Dave/Generated/FREERTOS/timers.c **** 	#define configTIMER_SERVICE_TASK_NAME "Tmr Svc"
  65:../Dave/Generated/FREERTOS/timers.c **** #endif
  66:../Dave/Generated/FREERTOS/timers.c **** 
  67:../Dave/Generated/FREERTOS/timers.c **** /* The definition of the timers themselves. */
  68:../Dave/Generated/FREERTOS/timers.c **** typedef struct tmrTimerControl
  69:../Dave/Generated/FREERTOS/timers.c **** {
  70:../Dave/Generated/FREERTOS/timers.c **** 	const char				*pcTimerName;		/*<< Text name.  This is not used by the kernel, it is included simpl
  71:../Dave/Generated/FREERTOS/timers.c **** 	ListItem_t				xTimerListItem;		/*<< Standard linked list item as used by all kernel features for e
  72:../Dave/Generated/FREERTOS/timers.c **** 	TickType_t				xTimerPeriodInTicks;/*<< How quickly and often the timer expires. */
  73:../Dave/Generated/FREERTOS/timers.c **** 	UBaseType_t				uxAutoReload;		/*<< Set to pdTRUE if the timer should be automatically restarted on
  74:../Dave/Generated/FREERTOS/timers.c **** 	void 					*pvTimerID;			/*<< An ID to identify the timer.  This allows the timer to be identified 
  75:../Dave/Generated/FREERTOS/timers.c **** 	TimerCallbackFunction_t	pxCallbackFunction;	/*<< The function that will be called when the timer e
  76:../Dave/Generated/FREERTOS/timers.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
  77:../Dave/Generated/FREERTOS/timers.c **** 		UBaseType_t			uxTimerNumber;		/*<< An ID assigned by trace tools such as FreeRTOS+Trace */
  78:../Dave/Generated/FREERTOS/timers.c **** 	#endif
  79:../Dave/Generated/FREERTOS/timers.c **** 
  80:../Dave/Generated/FREERTOS/timers.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
  81:../Dave/Generated/FREERTOS/timers.c **** 		uint8_t 			ucStaticallyAllocated; /*<< Set to pdTRUE if the timer was created statically so no at
  82:../Dave/Generated/FREERTOS/timers.c **** 	#endif
  83:../Dave/Generated/FREERTOS/timers.c **** } xTIMER;
  84:../Dave/Generated/FREERTOS/timers.c **** 
  85:../Dave/Generated/FREERTOS/timers.c **** /* The old xTIMER name is maintained above then typedefed to the new Timer_t
  86:../Dave/Generated/FREERTOS/timers.c **** name below to enable the use of older kernel aware debuggers. */
  87:../Dave/Generated/FREERTOS/timers.c **** typedef xTIMER Timer_t;
  88:../Dave/Generated/FREERTOS/timers.c **** 
  89:../Dave/Generated/FREERTOS/timers.c **** /* The definition of messages that can be sent and received on the timer queue.
  90:../Dave/Generated/FREERTOS/timers.c **** Two types of message can be queued - messages that manipulate a software timer,
  91:../Dave/Generated/FREERTOS/timers.c **** and messages that request the execution of a non-timer related callback.  The
  92:../Dave/Generated/FREERTOS/timers.c **** two message types are defined in two separate structures, xTimerParametersType
  93:../Dave/Generated/FREERTOS/timers.c **** and xCallbackParametersType respectively. */
  94:../Dave/Generated/FREERTOS/timers.c **** typedef struct tmrTimerParameters
  95:../Dave/Generated/FREERTOS/timers.c **** {
  96:../Dave/Generated/FREERTOS/timers.c **** 	TickType_t			xMessageValue;		/*<< An optional value used by a subset of commands, for example, whe
  97:../Dave/Generated/FREERTOS/timers.c **** 	Timer_t *			pxTimer;			/*<< The timer to which the command will be applied. */
  98:../Dave/Generated/FREERTOS/timers.c **** } TimerParameter_t;
  99:../Dave/Generated/FREERTOS/timers.c **** 
 100:../Dave/Generated/FREERTOS/timers.c **** 
 101:../Dave/Generated/FREERTOS/timers.c **** typedef struct tmrCallbackParameters
 102:../Dave/Generated/FREERTOS/timers.c **** {
 103:../Dave/Generated/FREERTOS/timers.c **** 	PendedFunction_t	pxCallbackFunction;	/* << The callback function to execute. */
 104:../Dave/Generated/FREERTOS/timers.c **** 	void *pvParameter1;						/* << The value that will be used as the callback functions first paramet
 105:../Dave/Generated/FREERTOS/timers.c **** 	uint32_t ulParameter2;					/* << The value that will be used as the callback functions second para
 106:../Dave/Generated/FREERTOS/timers.c **** } CallbackParameters_t;
 107:../Dave/Generated/FREERTOS/timers.c **** 
 108:../Dave/Generated/FREERTOS/timers.c **** /* The structure that contains the two message types, along with an identifier
 109:../Dave/Generated/FREERTOS/timers.c **** that is used to determine which message type is valid. */
 110:../Dave/Generated/FREERTOS/timers.c **** typedef struct tmrTimerQueueMessage
 111:../Dave/Generated/FREERTOS/timers.c **** {
 112:../Dave/Generated/FREERTOS/timers.c **** 	BaseType_t			xMessageID;			/*<< The command being sent to the timer service task. */
 113:../Dave/Generated/FREERTOS/timers.c **** 	union
 114:../Dave/Generated/FREERTOS/timers.c **** 	{
 115:../Dave/Generated/FREERTOS/timers.c **** 		TimerParameter_t xTimerParameters;
 116:../Dave/Generated/FREERTOS/timers.c **** 
 117:../Dave/Generated/FREERTOS/timers.c **** 		/* Don't include xCallbackParameters if it is not going to be used as
 118:../Dave/Generated/FREERTOS/timers.c **** 		it makes the structure (and therefore the timer queue) larger. */
 119:../Dave/Generated/FREERTOS/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 120:../Dave/Generated/FREERTOS/timers.c **** 			CallbackParameters_t xCallbackParameters;
 121:../Dave/Generated/FREERTOS/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 122:../Dave/Generated/FREERTOS/timers.c **** 	} u;
 123:../Dave/Generated/FREERTOS/timers.c **** } DaemonTaskMessage_t;
 124:../Dave/Generated/FREERTOS/timers.c **** 
 125:../Dave/Generated/FREERTOS/timers.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 126:../Dave/Generated/FREERTOS/timers.c **** which static variables must be declared volatile. */
 127:../Dave/Generated/FREERTOS/timers.c **** 
 128:../Dave/Generated/FREERTOS/timers.c **** /* The list in which active timers are stored.  Timers are referenced in expire
 129:../Dave/Generated/FREERTOS/timers.c **** time order, with the nearest expiry time at the front of the list.  Only the
 130:../Dave/Generated/FREERTOS/timers.c **** timer service task is allowed to access these lists. */
 131:../Dave/Generated/FREERTOS/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList1;
 132:../Dave/Generated/FREERTOS/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList2;
 133:../Dave/Generated/FREERTOS/timers.c **** PRIVILEGED_DATA static List_t *pxCurrentTimerList;
 134:../Dave/Generated/FREERTOS/timers.c **** PRIVILEGED_DATA static List_t *pxOverflowTimerList;
 135:../Dave/Generated/FREERTOS/timers.c **** 
 136:../Dave/Generated/FREERTOS/timers.c **** /* A queue that is used to send commands to the timer service task. */
 137:../Dave/Generated/FREERTOS/timers.c **** PRIVILEGED_DATA static QueueHandle_t xTimerQueue = NULL;
 138:../Dave/Generated/FREERTOS/timers.c **** PRIVILEGED_DATA static TaskHandle_t xTimerTaskHandle = NULL;
 139:../Dave/Generated/FREERTOS/timers.c **** 
 140:../Dave/Generated/FREERTOS/timers.c **** /*lint -restore */
 141:../Dave/Generated/FREERTOS/timers.c **** 
 142:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 143:../Dave/Generated/FREERTOS/timers.c **** 
 144:../Dave/Generated/FREERTOS/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 145:../Dave/Generated/FREERTOS/timers.c **** 
 146:../Dave/Generated/FREERTOS/timers.c **** 	/* If static allocation is supported then the application must provide the
 147:../Dave/Generated/FREERTOS/timers.c **** 	following callback function - which enables the application to optionally
 148:../Dave/Generated/FREERTOS/timers.c **** 	provide the memory that will be used by the timer task as the task's stack
 149:../Dave/Generated/FREERTOS/timers.c **** 	and TCB. */
 150:../Dave/Generated/FREERTOS/timers.c **** 	extern void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **pp
 151:../Dave/Generated/FREERTOS/timers.c **** 
 152:../Dave/Generated/FREERTOS/timers.c **** #endif
 153:../Dave/Generated/FREERTOS/timers.c **** 
 154:../Dave/Generated/FREERTOS/timers.c **** /*
 155:../Dave/Generated/FREERTOS/timers.c ****  * Initialise the infrastructure used by the timer service task if it has not
 156:../Dave/Generated/FREERTOS/timers.c ****  * been initialised already.
 157:../Dave/Generated/FREERTOS/timers.c ****  */
 158:../Dave/Generated/FREERTOS/timers.c **** static void prvCheckForValidListAndQueue( void ) PRIVILEGED_FUNCTION;
 159:../Dave/Generated/FREERTOS/timers.c **** 
 160:../Dave/Generated/FREERTOS/timers.c **** /*
 161:../Dave/Generated/FREERTOS/timers.c ****  * The timer service task (daemon).  Timer functionality is controlled by this
 162:../Dave/Generated/FREERTOS/timers.c ****  * task.  Other tasks communicate with the timer service task using the
 163:../Dave/Generated/FREERTOS/timers.c ****  * xTimerQueue queue.
 164:../Dave/Generated/FREERTOS/timers.c ****  */
 165:../Dave/Generated/FREERTOS/timers.c **** static void prvTimerTask( void *pvParameters ) PRIVILEGED_FUNCTION;
 166:../Dave/Generated/FREERTOS/timers.c **** 
 167:../Dave/Generated/FREERTOS/timers.c **** /*
 168:../Dave/Generated/FREERTOS/timers.c ****  * Called by the timer service task to interpret and process a command it
 169:../Dave/Generated/FREERTOS/timers.c ****  * received on the timer queue.
 170:../Dave/Generated/FREERTOS/timers.c ****  */
 171:../Dave/Generated/FREERTOS/timers.c **** static void prvProcessReceivedCommands( void ) PRIVILEGED_FUNCTION;
 172:../Dave/Generated/FREERTOS/timers.c **** 
 173:../Dave/Generated/FREERTOS/timers.c **** /*
 174:../Dave/Generated/FREERTOS/timers.c ****  * Insert the timer into either xActiveTimerList1, or xActiveTimerList2,
 175:../Dave/Generated/FREERTOS/timers.c ****  * depending on if the expire time causes a timer counter overflow.
 176:../Dave/Generated/FREERTOS/timers.c ****  */
 177:../Dave/Generated/FREERTOS/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 178:../Dave/Generated/FREERTOS/timers.c **** 
 179:../Dave/Generated/FREERTOS/timers.c **** /*
 180:../Dave/Generated/FREERTOS/timers.c ****  * An active timer has reached its expire time.  Reload the timer if it is an
 181:../Dave/Generated/FREERTOS/timers.c ****  * auto reload timer, then call its callback.
 182:../Dave/Generated/FREERTOS/timers.c ****  */
 183:../Dave/Generated/FREERTOS/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow ) P
 184:../Dave/Generated/FREERTOS/timers.c **** 
 185:../Dave/Generated/FREERTOS/timers.c **** /*
 186:../Dave/Generated/FREERTOS/timers.c ****  * The tick count has overflowed.  Switch the timer lists after ensuring the
 187:../Dave/Generated/FREERTOS/timers.c ****  * current timer list does not still reference some timers.
 188:../Dave/Generated/FREERTOS/timers.c ****  */
 189:../Dave/Generated/FREERTOS/timers.c **** static void prvSwitchTimerLists( void ) PRIVILEGED_FUNCTION;
 190:../Dave/Generated/FREERTOS/timers.c **** 
 191:../Dave/Generated/FREERTOS/timers.c **** /*
 192:../Dave/Generated/FREERTOS/timers.c ****  * Obtain the current tick count, setting *pxTimerListsWereSwitched to pdTRUE
 193:../Dave/Generated/FREERTOS/timers.c ****  * if a tick count overflow occurred since prvSampleTimeNow() was last called.
 194:../Dave/Generated/FREERTOS/timers.c ****  */
 195:../Dave/Generated/FREERTOS/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched ) PRIVILEGED_FUNCTI
 196:../Dave/Generated/FREERTOS/timers.c **** 
 197:../Dave/Generated/FREERTOS/timers.c **** /*
 198:../Dave/Generated/FREERTOS/timers.c ****  * If the timer list contains any active timers then return the expire time of
 199:../Dave/Generated/FREERTOS/timers.c ****  * the timer that will expire first and set *pxListWasEmpty to false.  If the
 200:../Dave/Generated/FREERTOS/timers.c ****  * timer list does not contain any timers then return 0 and set *pxListWasEmpty
 201:../Dave/Generated/FREERTOS/timers.c ****  * to pdTRUE.
 202:../Dave/Generated/FREERTOS/timers.c ****  */
 203:../Dave/Generated/FREERTOS/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty ) PRIVILEGED_FUNCTION;
 204:../Dave/Generated/FREERTOS/timers.c **** 
 205:../Dave/Generated/FREERTOS/timers.c **** /*
 206:../Dave/Generated/FREERTOS/timers.c ****  * If a timer has expired, process it.  Otherwise, block the timer service task
 207:../Dave/Generated/FREERTOS/timers.c ****  * until either a timer does expire or a command is received.
 208:../Dave/Generated/FREERTOS/timers.c ****  */
 209:../Dave/Generated/FREERTOS/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 210:../Dave/Generated/FREERTOS/timers.c **** 
 211:../Dave/Generated/FREERTOS/timers.c **** /*
 212:../Dave/Generated/FREERTOS/timers.c ****  * Called after a Timer_t structure has been allocated either statically or
 213:../Dave/Generated/FREERTOS/timers.c ****  * dynamically to fill in the structure's members.
 214:../Dave/Generated/FREERTOS/timers.c ****  */
 215:../Dave/Generated/FREERTOS/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,			/*lint !e971 Unqualified char 
 216:../Dave/Generated/FREERTOS/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 217:../Dave/Generated/FREERTOS/timers.c **** 									const UBaseType_t uxAutoReload,
 218:../Dave/Generated/FREERTOS/timers.c **** 									void * const pvTimerID,
 219:../Dave/Generated/FREERTOS/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 220:../Dave/Generated/FREERTOS/timers.c **** 									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
 221:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 222:../Dave/Generated/FREERTOS/timers.c **** 
 223:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xTimerCreateTimerTask( void )
 224:../Dave/Generated/FREERTOS/timers.c **** {
  68              	 .loc 1 224 0
  69              	 .cfi_startproc
  70              	 
  71              	 
  72 0000 80B5     	 push {r7,lr}
  73              	.LCFI0:
  74              	 .cfi_def_cfa_offset 8
  75              	 .cfi_offset 7,-8
  76              	 .cfi_offset 14,-4
  77 0002 84B0     	 sub sp,sp,#16
  78              	.LCFI1:
  79              	 .cfi_def_cfa_offset 24
  80 0004 02AF     	 add r7,sp,#8
  81              	.LCFI2:
  82              	 .cfi_def_cfa 7,16
 225:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xReturn = pdFAIL;
  83              	 .loc 1 225 0
  84 0006 0023     	 movs r3,#0
  85 0008 7B60     	 str r3,[r7,#4]
 226:../Dave/Generated/FREERTOS/timers.c **** 
 227:../Dave/Generated/FREERTOS/timers.c **** 	/* This function is called when the scheduler is started if
 228:../Dave/Generated/FREERTOS/timers.c **** 	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
 229:../Dave/Generated/FREERTOS/timers.c **** 	timer service task has been created/initialised.  If timers have already
 230:../Dave/Generated/FREERTOS/timers.c **** 	been created then the initialisation will already have been performed. */
 231:../Dave/Generated/FREERTOS/timers.c **** 	prvCheckForValidListAndQueue();
  86              	 .loc 1 231 0
  87 000a FFF7FEFF 	 bl prvCheckForValidListAndQueue
 232:../Dave/Generated/FREERTOS/timers.c **** 
 233:../Dave/Generated/FREERTOS/timers.c **** 	if( xTimerQueue != NULL )
  88              	 .loc 1 233 0
  89 000e 114B     	 ldr r3,.L6
  90 0010 1B68     	 ldr r3,[r3]
  91 0012 002B     	 cmp r3,#0
  92 0014 0BD0     	 beq .L2
 234:../Dave/Generated/FREERTOS/timers.c **** 	{
 235:../Dave/Generated/FREERTOS/timers.c **** 		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 236:../Dave/Generated/FREERTOS/timers.c **** 		{
 237:../Dave/Generated/FREERTOS/timers.c **** 			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 238:../Dave/Generated/FREERTOS/timers.c **** 			StackType_t *pxTimerTaskStackBuffer = NULL;
 239:../Dave/Generated/FREERTOS/timers.c **** 			uint32_t ulTimerTaskStackSize;
 240:../Dave/Generated/FREERTOS/timers.c **** 
 241:../Dave/Generated/FREERTOS/timers.c **** 			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStac
 242:../Dave/Generated/FREERTOS/timers.c **** 			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 243:../Dave/Generated/FREERTOS/timers.c **** 													configTIMER_SERVICE_TASK_NAME,
 244:../Dave/Generated/FREERTOS/timers.c **** 													ulTimerTaskStackSize,
 245:../Dave/Generated/FREERTOS/timers.c **** 													NULL,
 246:../Dave/Generated/FREERTOS/timers.c **** 													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 247:../Dave/Generated/FREERTOS/timers.c **** 													pxTimerTaskStackBuffer,
 248:../Dave/Generated/FREERTOS/timers.c **** 													pxTimerTaskTCBBuffer );
 249:../Dave/Generated/FREERTOS/timers.c **** 
 250:../Dave/Generated/FREERTOS/timers.c **** 			if( xTimerTaskHandle != NULL )
 251:../Dave/Generated/FREERTOS/timers.c **** 			{
 252:../Dave/Generated/FREERTOS/timers.c **** 				xReturn = pdPASS;
 253:../Dave/Generated/FREERTOS/timers.c **** 			}
 254:../Dave/Generated/FREERTOS/timers.c **** 		}
 255:../Dave/Generated/FREERTOS/timers.c **** 		#else
 256:../Dave/Generated/FREERTOS/timers.c **** 		{
 257:../Dave/Generated/FREERTOS/timers.c **** 			xReturn = xTaskCreate(	prvTimerTask,
  93              	 .loc 1 257 0
  94 0016 0223     	 movs r3,#2
  95 0018 0093     	 str r3,[sp]
  96 001a 0F4B     	 ldr r3,.L6+4
  97 001c 0193     	 str r3,[sp,#4]
  98 001e 0F48     	 ldr r0,.L6+8
  99 0020 0F49     	 ldr r1,.L6+12
 100 0022 4FF48272 	 mov r2,#260
 101 0026 0023     	 movs r3,#0
 102 0028 FFF7FEFF 	 bl xTaskCreate
 103 002c 7860     	 str r0,[r7,#4]
 104              	.L2:
 258:../Dave/Generated/FREERTOS/timers.c **** 									configTIMER_SERVICE_TASK_NAME,
 259:../Dave/Generated/FREERTOS/timers.c **** 									configTIMER_TASK_STACK_DEPTH,
 260:../Dave/Generated/FREERTOS/timers.c **** 									NULL,
 261:../Dave/Generated/FREERTOS/timers.c **** 									( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 262:../Dave/Generated/FREERTOS/timers.c **** 									&xTimerTaskHandle );
 263:../Dave/Generated/FREERTOS/timers.c **** 		}
 264:../Dave/Generated/FREERTOS/timers.c **** 		#endif /* configSUPPORT_STATIC_ALLOCATION */
 265:../Dave/Generated/FREERTOS/timers.c **** 	}
 266:../Dave/Generated/FREERTOS/timers.c **** 	else
 267:../Dave/Generated/FREERTOS/timers.c **** 	{
 268:../Dave/Generated/FREERTOS/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 269:../Dave/Generated/FREERTOS/timers.c **** 	}
 270:../Dave/Generated/FREERTOS/timers.c **** 
 271:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xReturn );
 105              	 .loc 1 271 0
 106 002e 7B68     	 ldr r3,[r7,#4]
 107 0030 002B     	 cmp r3,#0
 108 0032 09D1     	 bne .L3
 109              	.LBB35:
 110              	.LBB36:
 111              	 .file 2 "../Dave/Generated/FREERTOS/portable/GCC/portmacro.h"
   1:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*
   2:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
   5:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * subject to the following conditions:
  11:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  12:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * copies or substantial portions of the Software.
  14:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  15:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  22:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * http://www.FreeRTOS.org
  23:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * http://aws.amazon.com/freertos
  24:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  25:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * 1 tab == 4 spaces!
  26:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  */
  27:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  28:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  29:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifndef PORTMACRO_H
  30:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define PORTMACRO_H
  31:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  32:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifdef __cplusplus
  33:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** extern "C" {
  34:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
  35:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  36:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------
  37:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * Port specific definitions.
  38:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  39:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * given hardware and compiler.
  41:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  42:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * These settings should not be altered.
  43:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *-----------------------------------------------------------
  44:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  */
  45:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  46:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Type definitions. */
  47:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portCHAR		char
  48:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portFLOAT		float
  49:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portDOUBLE		double
  50:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portLONG		long
  51:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portSHORT		short
  52:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portBASE_TYPE	long
  54:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  55:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** typedef long BaseType_t;
  57:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** typedef unsigned long UBaseType_t;
  58:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  59:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	typedef uint16_t TickType_t;
  61:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #else
  63:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	typedef uint32_t TickType_t;
  64:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  66:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	not need to be guarded with a critical section. */
  68:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
  70:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
  71:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  72:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Architecture specifics. */
  73:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
  77:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  78:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Scheduler utilities. */
  79:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portYIELD() 															\
  80:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** {																				\
  81:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 																				\
  84:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile( "isb" );													\
  88:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
  89:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  90:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
  95:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  96:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Critical section management. */
  97:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** extern void vPortEnterCritical( void );
  98:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** extern void vPortExitCritical( void );
  99:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 106:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 107:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 108:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** (which build with all the ports) will build. */
 111:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 114:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 115:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Tickless idle/low power functionality. */
 116:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
 120:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 121:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 122:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Architecture specific optimisations. */
 123:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
 126:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 127:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 129:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Generic helper function. */
 130:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	{
 132:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	uint8_t ucReturn;
 133:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 134:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		return ucReturn;
 136:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	}
 137:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 138:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Check the configuration. */
 139:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#endif
 142:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 143:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 147:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 149:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 151:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 153:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 154:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 155:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifdef configASSERT
 156:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
 159:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 160:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* portNOP() is not required by this port. */
 161:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portNOP()
 162:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 163:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portINLINE	__inline
 164:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 165:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifndef portFORCE_INLINE
 166:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
 168:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 169:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** {
 171:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** BaseType_t xReturn;
 173:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 174:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 177:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	{
 179:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		xReturn = pdFALSE;
 180:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	}
 181:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	else
 182:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	{
 183:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		xReturn = pdTRUE;
 184:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	}
 185:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 186:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	return xReturn;
 187:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
 188:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 189:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 190:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 191:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** {
 193:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** uint32_t ulNewBASEPRI;
 194:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile
 112              	 .loc 2 195 0 discriminator 1
 113              	
 114 0034 4FF0FC03 	 mov r3,#252
 115 0038 83F31188 	 msr basepri,r3
 116 003c BFF36F8F 	 isb 
 117 0040 BFF34F8F 	 dsb 
 118              	
 119              	
 120              	 .thumb
 121 0044 3B60     	 str r3,[r7]
 122              	.L4:
 123              	.LBE36:
 124              	.LBE35:
 125              	 .loc 1 271 0 discriminator 1
 126 0046 FEE7     	 b .L4
 127              	.L3:
 272:../Dave/Generated/FREERTOS/timers.c **** 	return xReturn;
 128              	 .loc 1 272 0
 129 0048 7B68     	 ldr r3,[r7,#4]
 273:../Dave/Generated/FREERTOS/timers.c **** }
 130              	 .loc 1 273 0
 131 004a 1846     	 mov r0,r3
 132 004c 0837     	 adds r7,r7,#8
 133              	.LCFI3:
 134              	 .cfi_def_cfa_offset 8
 135 004e BD46     	 mov sp,r7
 136              	.LCFI4:
 137              	 .cfi_def_cfa_register 13
 138              	 
 139 0050 80BD     	 pop {r7,pc}
 140              	.L7:
 141 0052 00BF     	 .align 2
 142              	.L6:
 143 0054 00000000 	 .word xTimerQueue
 144 0058 00000000 	 .word xTimerTaskHandle
 145 005c 00000000 	 .word prvTimerTask
 146 0060 00000000 	 .word .LC0
 147              	 .cfi_endproc
 148              	.LFE135:
 150              	 .section .text.xTimerCreate,"ax",%progbits
 151              	 .align 2
 152              	 .global xTimerCreate
 153              	 .thumb
 154              	 .thumb_func
 156              	xTimerCreate:
 157              	.LFB136:
 274:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 275:../Dave/Generated/FREERTOS/timers.c **** 
 276:../Dave/Generated/FREERTOS/timers.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 277:../Dave/Generated/FREERTOS/timers.c **** 
 278:../Dave/Generated/FREERTOS/timers.c **** 	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types 
 279:../Dave/Generated/FREERTOS/timers.c **** 								const TickType_t xTimerPeriodInTicks,
 280:../Dave/Generated/FREERTOS/timers.c **** 								const UBaseType_t uxAutoReload,
 281:../Dave/Generated/FREERTOS/timers.c **** 								void * const pvTimerID,
 282:../Dave/Generated/FREERTOS/timers.c **** 								TimerCallbackFunction_t pxCallbackFunction )
 283:../Dave/Generated/FREERTOS/timers.c **** 	{
 158              	 .loc 1 283 0
 159              	 .cfi_startproc
 160              	 
 161              	 
 162 0000 80B5     	 push {r7,lr}
 163              	.LCFI5:
 164              	 .cfi_def_cfa_offset 8
 165              	 .cfi_offset 7,-8
 166              	 .cfi_offset 14,-4
 167 0002 88B0     	 sub sp,sp,#32
 168              	.LCFI6:
 169              	 .cfi_def_cfa_offset 40
 170 0004 02AF     	 add r7,sp,#8
 171              	.LCFI7:
 172              	 .cfi_def_cfa 7,32
 173 0006 F860     	 str r0,[r7,#12]
 174 0008 B960     	 str r1,[r7,#8]
 175 000a 7A60     	 str r2,[r7,#4]
 176 000c 3B60     	 str r3,[r7]
 284:../Dave/Generated/FREERTOS/timers.c **** 	Timer_t *pxNewTimer;
 285:../Dave/Generated/FREERTOS/timers.c **** 
 286:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 177              	 .loc 1 286 0
 178 000e 2C20     	 movs r0,#44
 179 0010 FFF7FEFF 	 bl pvPortMalloc
 180 0014 7861     	 str r0,[r7,#20]
 287:../Dave/Generated/FREERTOS/timers.c **** 
 288:../Dave/Generated/FREERTOS/timers.c **** 		if( pxNewTimer != NULL )
 181              	 .loc 1 288 0
 182 0016 7B69     	 ldr r3,[r7,#20]
 183 0018 002B     	 cmp r3,#0
 184 001a 09D0     	 beq .L9
 289:../Dave/Generated/FREERTOS/timers.c **** 		{
 290:../Dave/Generated/FREERTOS/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 185              	 .loc 1 290 0
 186 001c 3B6A     	 ldr r3,[r7,#32]
 187 001e 0093     	 str r3,[sp]
 188 0020 7B69     	 ldr r3,[r7,#20]
 189 0022 0193     	 str r3,[sp,#4]
 190 0024 F868     	 ldr r0,[r7,#12]
 191 0026 B968     	 ldr r1,[r7,#8]
 192 0028 7A68     	 ldr r2,[r7,#4]
 193 002a 3B68     	 ldr r3,[r7]
 194 002c FFF7FEFF 	 bl prvInitialiseNewTimer
 195              	.L9:
 291:../Dave/Generated/FREERTOS/timers.c **** 
 292:../Dave/Generated/FREERTOS/timers.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 293:../Dave/Generated/FREERTOS/timers.c **** 			{
 294:../Dave/Generated/FREERTOS/timers.c **** 				/* Timers can be created statically or dynamically, so note this
 295:../Dave/Generated/FREERTOS/timers.c **** 				timer was created dynamically in case the timer is later
 296:../Dave/Generated/FREERTOS/timers.c **** 				deleted. */
 297:../Dave/Generated/FREERTOS/timers.c **** 				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 298:../Dave/Generated/FREERTOS/timers.c **** 			}
 299:../Dave/Generated/FREERTOS/timers.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 300:../Dave/Generated/FREERTOS/timers.c **** 		}
 301:../Dave/Generated/FREERTOS/timers.c **** 
 302:../Dave/Generated/FREERTOS/timers.c **** 		return pxNewTimer;
 196              	 .loc 1 302 0
 197 0030 7B69     	 ldr r3,[r7,#20]
 303:../Dave/Generated/FREERTOS/timers.c **** 	}
 198              	 .loc 1 303 0
 199 0032 1846     	 mov r0,r3
 200 0034 1837     	 adds r7,r7,#24
 201              	.LCFI8:
 202              	 .cfi_def_cfa_offset 8
 203 0036 BD46     	 mov sp,r7
 204              	.LCFI9:
 205              	 .cfi_def_cfa_register 13
 206              	 
 207 0038 80BD     	 pop {r7,pc}
 208              	 .cfi_endproc
 209              	.LFE136:
 211 003a 00BF     	 .section .text.prvInitialiseNewTimer,"ax",%progbits
 212              	 .align 2
 213              	 .thumb
 214              	 .thumb_func
 216              	prvInitialiseNewTimer:
 217              	.LFB137:
 304:../Dave/Generated/FREERTOS/timers.c **** 
 305:../Dave/Generated/FREERTOS/timers.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 306:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 307:../Dave/Generated/FREERTOS/timers.c **** 
 308:../Dave/Generated/FREERTOS/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 309:../Dave/Generated/FREERTOS/timers.c **** 
 310:../Dave/Generated/FREERTOS/timers.c **** 	TimerHandle_t xTimerCreateStatic(	const char * const pcTimerName,		/*lint !e971 Unqualified char t
 311:../Dave/Generated/FREERTOS/timers.c **** 										const TickType_t xTimerPeriodInTicks,
 312:../Dave/Generated/FREERTOS/timers.c **** 										const UBaseType_t uxAutoReload,
 313:../Dave/Generated/FREERTOS/timers.c **** 										void * const pvTimerID,
 314:../Dave/Generated/FREERTOS/timers.c **** 										TimerCallbackFunction_t pxCallbackFunction,
 315:../Dave/Generated/FREERTOS/timers.c **** 										StaticTimer_t *pxTimerBuffer )
 316:../Dave/Generated/FREERTOS/timers.c **** 	{
 317:../Dave/Generated/FREERTOS/timers.c **** 	Timer_t *pxNewTimer;
 318:../Dave/Generated/FREERTOS/timers.c **** 
 319:../Dave/Generated/FREERTOS/timers.c **** 		#if( configASSERT_DEFINED == 1 )
 320:../Dave/Generated/FREERTOS/timers.c **** 		{
 321:../Dave/Generated/FREERTOS/timers.c **** 			/* Sanity check that the size of the structure used to declare a
 322:../Dave/Generated/FREERTOS/timers.c **** 			variable of type StaticTimer_t equals the size of the real timer
 323:../Dave/Generated/FREERTOS/timers.c **** 			structure. */
 324:../Dave/Generated/FREERTOS/timers.c **** 			volatile size_t xSize = sizeof( StaticTimer_t );
 325:../Dave/Generated/FREERTOS/timers.c **** 			configASSERT( xSize == sizeof( Timer_t ) );
 326:../Dave/Generated/FREERTOS/timers.c **** 		}
 327:../Dave/Generated/FREERTOS/timers.c **** 		#endif /* configASSERT_DEFINED */
 328:../Dave/Generated/FREERTOS/timers.c **** 
 329:../Dave/Generated/FREERTOS/timers.c **** 		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
 330:../Dave/Generated/FREERTOS/timers.c **** 		configASSERT( pxTimerBuffer );
 331:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are d
 332:../Dave/Generated/FREERTOS/timers.c **** 
 333:../Dave/Generated/FREERTOS/timers.c **** 		if( pxNewTimer != NULL )
 334:../Dave/Generated/FREERTOS/timers.c **** 		{
 335:../Dave/Generated/FREERTOS/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 336:../Dave/Generated/FREERTOS/timers.c **** 
 337:../Dave/Generated/FREERTOS/timers.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 338:../Dave/Generated/FREERTOS/timers.c **** 			{
 339:../Dave/Generated/FREERTOS/timers.c **** 				/* Timers can be created statically or dynamically so note this
 340:../Dave/Generated/FREERTOS/timers.c **** 				timer was created statically in case it is later deleted. */
 341:../Dave/Generated/FREERTOS/timers.c **** 				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 342:../Dave/Generated/FREERTOS/timers.c **** 			}
 343:../Dave/Generated/FREERTOS/timers.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 344:../Dave/Generated/FREERTOS/timers.c **** 		}
 345:../Dave/Generated/FREERTOS/timers.c **** 
 346:../Dave/Generated/FREERTOS/timers.c **** 		return pxNewTimer;
 347:../Dave/Generated/FREERTOS/timers.c **** 	}
 348:../Dave/Generated/FREERTOS/timers.c **** 
 349:../Dave/Generated/FREERTOS/timers.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 350:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 351:../Dave/Generated/FREERTOS/timers.c **** 
 352:../Dave/Generated/FREERTOS/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,			/*lint !e971 Unqualified char 
 353:../Dave/Generated/FREERTOS/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 354:../Dave/Generated/FREERTOS/timers.c **** 									const UBaseType_t uxAutoReload,
 355:../Dave/Generated/FREERTOS/timers.c **** 									void * const pvTimerID,
 356:../Dave/Generated/FREERTOS/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 357:../Dave/Generated/FREERTOS/timers.c **** 									Timer_t *pxNewTimer )
 358:../Dave/Generated/FREERTOS/timers.c **** {
 218              	 .loc 1 358 0
 219              	 .cfi_startproc
 220              	 
 221              	 
 222 0000 80B5     	 push {r7,lr}
 223              	.LCFI10:
 224              	 .cfi_def_cfa_offset 8
 225              	 .cfi_offset 7,-8
 226              	 .cfi_offset 14,-4
 227 0002 86B0     	 sub sp,sp,#24
 228              	.LCFI11:
 229              	 .cfi_def_cfa_offset 32
 230 0004 00AF     	 add r7,sp,#0
 231              	.LCFI12:
 232              	 .cfi_def_cfa_register 7
 233 0006 F860     	 str r0,[r7,#12]
 234 0008 B960     	 str r1,[r7,#8]
 235 000a 7A60     	 str r2,[r7,#4]
 236 000c 3B60     	 str r3,[r7]
 359:../Dave/Generated/FREERTOS/timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 360:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 237              	 .loc 1 360 0
 238 000e BB68     	 ldr r3,[r7,#8]
 239 0010 002B     	 cmp r3,#0
 240 0012 09D1     	 bne .L12
 241              	.LBB37:
 242              	.LBB38:
 243              	 .loc 2 195 0 discriminator 1
 244              	
 245 0014 4FF0FC03 	 mov r3,#252
 246 0018 83F31188 	 msr basepri,r3
 247 001c BFF36F8F 	 isb 
 248 0020 BFF34F8F 	 dsb 
 249              	
 250              	
 251              	 .thumb
 252 0024 7B61     	 str r3,[r7,#20]
 253              	.L13:
 254              	.LBE38:
 255              	.LBE37:
 256              	 .loc 1 360 0 discriminator 1
 257 0026 FEE7     	 b .L13
 258              	.L12:
 361:../Dave/Generated/FREERTOS/timers.c **** 
 362:../Dave/Generated/FREERTOS/timers.c **** 	if( pxNewTimer != NULL )
 259              	 .loc 1 362 0
 260 0028 7B6A     	 ldr r3,[r7,#36]
 261 002a 002B     	 cmp r3,#0
 262 002c 15D0     	 beq .L11
 363:../Dave/Generated/FREERTOS/timers.c **** 	{
 364:../Dave/Generated/FREERTOS/timers.c **** 		/* Ensure the infrastructure used by the timer service task has been
 365:../Dave/Generated/FREERTOS/timers.c **** 		created/initialised. */
 366:../Dave/Generated/FREERTOS/timers.c **** 		prvCheckForValidListAndQueue();
 263              	 .loc 1 366 0
 264 002e FFF7FEFF 	 bl prvCheckForValidListAndQueue
 367:../Dave/Generated/FREERTOS/timers.c **** 
 368:../Dave/Generated/FREERTOS/timers.c **** 		/* Initialise the timer structure members using the function
 369:../Dave/Generated/FREERTOS/timers.c **** 		parameters. */
 370:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer->pcTimerName = pcTimerName;
 265              	 .loc 1 370 0
 266 0032 7B6A     	 ldr r3,[r7,#36]
 267 0034 FA68     	 ldr r2,[r7,#12]
 268 0036 1A60     	 str r2,[r3]
 371:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 269              	 .loc 1 371 0
 270 0038 7B6A     	 ldr r3,[r7,#36]
 271 003a BA68     	 ldr r2,[r7,#8]
 272 003c 9A61     	 str r2,[r3,#24]
 372:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer->uxAutoReload = uxAutoReload;
 273              	 .loc 1 372 0
 274 003e 7B6A     	 ldr r3,[r7,#36]
 275 0040 7A68     	 ldr r2,[r7,#4]
 276 0042 DA61     	 str r2,[r3,#28]
 373:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 277              	 .loc 1 373 0
 278 0044 7B6A     	 ldr r3,[r7,#36]
 279 0046 3A68     	 ldr r2,[r7]
 280 0048 1A62     	 str r2,[r3,#32]
 374:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 281              	 .loc 1 374 0
 282 004a 7B6A     	 ldr r3,[r7,#36]
 283 004c 3A6A     	 ldr r2,[r7,#32]
 284 004e 5A62     	 str r2,[r3,#36]
 375:../Dave/Generated/FREERTOS/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 285              	 .loc 1 375 0
 286 0050 7B6A     	 ldr r3,[r7,#36]
 287 0052 0433     	 adds r3,r3,#4
 288 0054 1846     	 mov r0,r3
 289 0056 FFF7FEFF 	 bl vListInitialiseItem
 290              	.L11:
 376:../Dave/Generated/FREERTOS/timers.c **** 		traceTIMER_CREATE( pxNewTimer );
 377:../Dave/Generated/FREERTOS/timers.c **** 	}
 378:../Dave/Generated/FREERTOS/timers.c **** }
 291              	 .loc 1 378 0
 292 005a 1837     	 adds r7,r7,#24
 293              	.LCFI13:
 294              	 .cfi_def_cfa_offset 8
 295 005c BD46     	 mov sp,r7
 296              	.LCFI14:
 297              	 .cfi_def_cfa_register 13
 298              	 
 299 005e 80BD     	 pop {r7,pc}
 300              	 .cfi_endproc
 301              	.LFE137:
 303              	 .section .text.xTimerGenericCommand,"ax",%progbits
 304              	 .align 2
 305              	 .global xTimerGenericCommand
 306              	 .thumb
 307              	 .thumb_func
 309              	xTimerGenericCommand:
 310              	.LFB138:
 379:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 380:../Dave/Generated/FREERTOS/timers.c **** 
 381:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_
 382:../Dave/Generated/FREERTOS/timers.c **** {
 311              	 .loc 1 382 0
 312              	 .cfi_startproc
 313              	 
 314              	 
 315 0000 80B5     	 push {r7,lr}
 316              	.LCFI15:
 317              	 .cfi_def_cfa_offset 8
 318              	 .cfi_offset 7,-8
 319              	 .cfi_offset 14,-4
 320 0002 8AB0     	 sub sp,sp,#40
 321              	.LCFI16:
 322              	 .cfi_def_cfa_offset 48
 323 0004 00AF     	 add r7,sp,#0
 324              	.LCFI17:
 325              	 .cfi_def_cfa_register 7
 326 0006 F860     	 str r0,[r7,#12]
 327 0008 B960     	 str r1,[r7,#8]
 328 000a 7A60     	 str r2,[r7,#4]
 329 000c 3B60     	 str r3,[r7]
 383:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xReturn = pdFAIL;
 330              	 .loc 1 383 0
 331 000e 0023     	 movs r3,#0
 332 0010 7B62     	 str r3,[r7,#36]
 384:../Dave/Generated/FREERTOS/timers.c **** DaemonTaskMessage_t xMessage;
 385:../Dave/Generated/FREERTOS/timers.c **** 
 386:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xTimer );
 333              	 .loc 1 386 0
 334 0012 FB68     	 ldr r3,[r7,#12]
 335 0014 002B     	 cmp r3,#0
 336 0016 09D1     	 bne .L16
 337              	.LBB39:
 338              	.LBB40:
 339              	 .loc 2 195 0 discriminator 1
 340              	
 341 0018 4FF0FC03 	 mov r3,#252
 342 001c 83F31188 	 msr basepri,r3
 343 0020 BFF36F8F 	 isb 
 344 0024 BFF34F8F 	 dsb 
 345              	
 346              	
 347              	 .thumb
 348 0028 3B62     	 str r3,[r7,#32]
 349              	.L17:
 350              	.LBE40:
 351              	.LBE39:
 352              	 .loc 1 386 0 discriminator 1
 353 002a FEE7     	 b .L17
 354              	.L16:
 387:../Dave/Generated/FREERTOS/timers.c **** 
 388:../Dave/Generated/FREERTOS/timers.c **** 	/* Send a message to the timer service task to perform a particular action
 389:../Dave/Generated/FREERTOS/timers.c **** 	on a particular timer definition. */
 390:../Dave/Generated/FREERTOS/timers.c **** 	if( xTimerQueue != NULL )
 355              	 .loc 1 390 0
 356 002c 1C4B     	 ldr r3,.L24
 357 002e 1B68     	 ldr r3,[r3]
 358 0030 002B     	 cmp r3,#0
 359 0032 30D0     	 beq .L18
 391:../Dave/Generated/FREERTOS/timers.c **** 	{
 392:../Dave/Generated/FREERTOS/timers.c **** 		/* Send a command to the timer service task to start the xTimer timer. */
 393:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.xMessageID = xCommandID;
 360              	 .loc 1 393 0
 361 0034 BB68     	 ldr r3,[r7,#8]
 362 0036 3B61     	 str r3,[r7,#16]
 394:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 363              	 .loc 1 394 0
 364 0038 7B68     	 ldr r3,[r7,#4]
 365 003a 7B61     	 str r3,[r7,#20]
 395:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 366              	 .loc 1 395 0
 367 003c FB68     	 ldr r3,[r7,#12]
 368 003e BB61     	 str r3,[r7,#24]
 396:../Dave/Generated/FREERTOS/timers.c **** 
 397:../Dave/Generated/FREERTOS/timers.c **** 		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 369              	 .loc 1 397 0
 370 0040 BB68     	 ldr r3,[r7,#8]
 371 0042 052B     	 cmp r3,#5
 372 0044 1CDC     	 bgt .L19
 398:../Dave/Generated/FREERTOS/timers.c **** 		{
 399:../Dave/Generated/FREERTOS/timers.c **** 			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 373              	 .loc 1 399 0
 374 0046 FFF7FEFF 	 bl xTaskGetSchedulerState
 375 004a 0346     	 mov r3,r0
 376 004c 022B     	 cmp r3,#2
 377 004e 0BD1     	 bne .L20
 400:../Dave/Generated/FREERTOS/timers.c **** 			{
 401:../Dave/Generated/FREERTOS/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 378              	 .loc 1 401 0
 379 0050 134B     	 ldr r3,.L24
 380 0052 1A68     	 ldr r2,[r3]
 381 0054 07F11003 	 add r3,r7,#16
 382 0058 1046     	 mov r0,r2
 383 005a 1946     	 mov r1,r3
 384 005c 3A6B     	 ldr r2,[r7,#48]
 385 005e 0023     	 movs r3,#0
 386 0060 FFF7FEFF 	 bl xQueueGenericSend
 387 0064 7862     	 str r0,[r7,#36]
 388 0066 16E0     	 b .L18
 389              	.L20:
 402:../Dave/Generated/FREERTOS/timers.c **** 			}
 403:../Dave/Generated/FREERTOS/timers.c **** 			else
 404:../Dave/Generated/FREERTOS/timers.c **** 			{
 405:../Dave/Generated/FREERTOS/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 390              	 .loc 1 405 0
 391 0068 0D4B     	 ldr r3,.L24
 392 006a 1A68     	 ldr r2,[r3]
 393 006c 07F11003 	 add r3,r7,#16
 394 0070 1046     	 mov r0,r2
 395 0072 1946     	 mov r1,r3
 396 0074 0022     	 movs r2,#0
 397 0076 0023     	 movs r3,#0
 398 0078 FFF7FEFF 	 bl xQueueGenericSend
 399 007c 7862     	 str r0,[r7,#36]
 400 007e 0AE0     	 b .L18
 401              	.L19:
 406:../Dave/Generated/FREERTOS/timers.c **** 			}
 407:../Dave/Generated/FREERTOS/timers.c **** 		}
 408:../Dave/Generated/FREERTOS/timers.c **** 		else
 409:../Dave/Generated/FREERTOS/timers.c **** 		{
 410:../Dave/Generated/FREERTOS/timers.c **** 			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 402              	 .loc 1 410 0
 403 0080 074B     	 ldr r3,.L24
 404 0082 1A68     	 ldr r2,[r3]
 405 0084 07F11003 	 add r3,r7,#16
 406 0088 1046     	 mov r0,r2
 407 008a 1946     	 mov r1,r3
 408 008c 3A68     	 ldr r2,[r7]
 409 008e 0023     	 movs r3,#0
 410 0090 FFF7FEFF 	 bl xQueueGenericSendFromISR
 411 0094 7862     	 str r0,[r7,#36]
 412              	.L18:
 411:../Dave/Generated/FREERTOS/timers.c **** 		}
 412:../Dave/Generated/FREERTOS/timers.c **** 
 413:../Dave/Generated/FREERTOS/timers.c **** 		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 414:../Dave/Generated/FREERTOS/timers.c **** 	}
 415:../Dave/Generated/FREERTOS/timers.c **** 	else
 416:../Dave/Generated/FREERTOS/timers.c **** 	{
 417:../Dave/Generated/FREERTOS/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 418:../Dave/Generated/FREERTOS/timers.c **** 	}
 419:../Dave/Generated/FREERTOS/timers.c **** 
 420:../Dave/Generated/FREERTOS/timers.c **** 	return xReturn;
 413              	 .loc 1 420 0
 414 0096 7B6A     	 ldr r3,[r7,#36]
 421:../Dave/Generated/FREERTOS/timers.c **** }
 415              	 .loc 1 421 0
 416 0098 1846     	 mov r0,r3
 417 009a 2837     	 adds r7,r7,#40
 418              	.LCFI18:
 419              	 .cfi_def_cfa_offset 8
 420 009c BD46     	 mov sp,r7
 421              	.LCFI19:
 422              	 .cfi_def_cfa_register 13
 423              	 
 424 009e 80BD     	 pop {r7,pc}
 425              	.L25:
 426              	 .align 2
 427              	.L24:
 428 00a0 00000000 	 .word xTimerQueue
 429              	 .cfi_endproc
 430              	.LFE138:
 432              	 .section .text.xTimerGetTimerDaemonTaskHandle,"ax",%progbits
 433              	 .align 2
 434              	 .global xTimerGetTimerDaemonTaskHandle
 435              	 .thumb
 436              	 .thumb_func
 438              	xTimerGetTimerDaemonTaskHandle:
 439              	.LFB139:
 422:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 423:../Dave/Generated/FREERTOS/timers.c **** 
 424:../Dave/Generated/FREERTOS/timers.c **** TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
 425:../Dave/Generated/FREERTOS/timers.c **** {
 440              	 .loc 1 425 0
 441              	 .cfi_startproc
 442              	 
 443              	 
 444              	 
 445 0000 80B4     	 push {r7}
 446              	.LCFI20:
 447              	 .cfi_def_cfa_offset 4
 448              	 .cfi_offset 7,-4
 449 0002 83B0     	 sub sp,sp,#12
 450              	.LCFI21:
 451              	 .cfi_def_cfa_offset 16
 452 0004 00AF     	 add r7,sp,#0
 453              	.LCFI22:
 454              	 .cfi_def_cfa_register 7
 426:../Dave/Generated/FREERTOS/timers.c **** 	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 427:../Dave/Generated/FREERTOS/timers.c **** 	started, then xTimerTaskHandle will be NULL. */
 428:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( ( xTimerTaskHandle != NULL ) );
 455              	 .loc 1 428 0
 456 0006 0B4B     	 ldr r3,.L30
 457 0008 1B68     	 ldr r3,[r3]
 458 000a 002B     	 cmp r3,#0
 459 000c 09D1     	 bne .L27
 460              	.LBB41:
 461              	.LBB42:
 462              	 .loc 2 195 0 discriminator 1
 463              	
 464 000e 4FF0FC03 	 mov r3,#252
 465 0012 83F31188 	 msr basepri,r3
 466 0016 BFF36F8F 	 isb 
 467 001a BFF34F8F 	 dsb 
 468              	
 469              	
 470              	 .thumb
 471 001e 7B60     	 str r3,[r7,#4]
 472              	.L28:
 473              	.LBE42:
 474              	.LBE41:
 475              	 .loc 1 428 0 discriminator 1
 476 0020 FEE7     	 b .L28
 477              	.L27:
 429:../Dave/Generated/FREERTOS/timers.c **** 	return xTimerTaskHandle;
 478              	 .loc 1 429 0
 479 0022 044B     	 ldr r3,.L30
 480 0024 1B68     	 ldr r3,[r3]
 430:../Dave/Generated/FREERTOS/timers.c **** }
 481              	 .loc 1 430 0
 482 0026 1846     	 mov r0,r3
 483 0028 0C37     	 adds r7,r7,#12
 484              	.LCFI23:
 485              	 .cfi_def_cfa_offset 4
 486 002a BD46     	 mov sp,r7
 487              	.LCFI24:
 488              	 .cfi_def_cfa_register 13
 489              	 
 490 002c 5DF8047B 	 ldr r7,[sp],#4
 491              	.LCFI25:
 492              	 .cfi_restore 7
 493              	 .cfi_def_cfa_offset 0
 494 0030 7047     	 bx lr
 495              	.L31:
 496 0032 00BF     	 .align 2
 497              	.L30:
 498 0034 00000000 	 .word xTimerTaskHandle
 499              	 .cfi_endproc
 500              	.LFE139:
 502              	 .section .text.xTimerGetPeriod,"ax",%progbits
 503              	 .align 2
 504              	 .global xTimerGetPeriod
 505              	 .thumb
 506              	 .thumb_func
 508              	xTimerGetPeriod:
 509              	.LFB140:
 431:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 432:../Dave/Generated/FREERTOS/timers.c **** 
 433:../Dave/Generated/FREERTOS/timers.c **** TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
 434:../Dave/Generated/FREERTOS/timers.c **** {
 510              	 .loc 1 434 0
 511              	 .cfi_startproc
 512              	 
 513              	 
 514              	 
 515 0000 80B4     	 push {r7}
 516              	.LCFI26:
 517              	 .cfi_def_cfa_offset 4
 518              	 .cfi_offset 7,-4
 519 0002 85B0     	 sub sp,sp,#20
 520              	.LCFI27:
 521              	 .cfi_def_cfa_offset 24
 522 0004 00AF     	 add r7,sp,#0
 523              	.LCFI28:
 524              	 .cfi_def_cfa_register 7
 525 0006 7860     	 str r0,[r7,#4]
 435:../Dave/Generated/FREERTOS/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 526              	 .loc 1 435 0
 527 0008 7B68     	 ldr r3,[r7,#4]
 528 000a FB60     	 str r3,[r7,#12]
 436:../Dave/Generated/FREERTOS/timers.c **** 
 437:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xTimer );
 529              	 .loc 1 437 0
 530 000c 7B68     	 ldr r3,[r7,#4]
 531 000e 002B     	 cmp r3,#0
 532 0010 09D1     	 bne .L33
 533              	.LBB43:
 534              	.LBB44:
 535              	 .loc 2 195 0 discriminator 1
 536              	
 537 0012 4FF0FC03 	 mov r3,#252
 538 0016 83F31188 	 msr basepri,r3
 539 001a BFF36F8F 	 isb 
 540 001e BFF34F8F 	 dsb 
 541              	
 542              	
 543              	 .thumb
 544 0022 BB60     	 str r3,[r7,#8]
 545              	.L34:
 546              	.LBE44:
 547              	.LBE43:
 548              	 .loc 1 437 0 discriminator 1
 549 0024 FEE7     	 b .L34
 550              	.L33:
 438:../Dave/Generated/FREERTOS/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 551              	 .loc 1 438 0
 552 0026 FB68     	 ldr r3,[r7,#12]
 553 0028 9B69     	 ldr r3,[r3,#24]
 439:../Dave/Generated/FREERTOS/timers.c **** }
 554              	 .loc 1 439 0
 555 002a 1846     	 mov r0,r3
 556 002c 1437     	 adds r7,r7,#20
 557              	.LCFI29:
 558              	 .cfi_def_cfa_offset 4
 559 002e BD46     	 mov sp,r7
 560              	.LCFI30:
 561              	 .cfi_def_cfa_register 13
 562              	 
 563 0030 5DF8047B 	 ldr r7,[sp],#4
 564              	.LCFI31:
 565              	 .cfi_restore 7
 566              	 .cfi_def_cfa_offset 0
 567 0034 7047     	 bx lr
 568              	 .cfi_endproc
 569              	.LFE140:
 571 0036 00BF     	 .section .text.xTimerGetExpiryTime,"ax",%progbits
 572              	 .align 2
 573              	 .global xTimerGetExpiryTime
 574              	 .thumb
 575              	 .thumb_func
 577              	xTimerGetExpiryTime:
 578              	.LFB141:
 440:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 441:../Dave/Generated/FREERTOS/timers.c **** 
 442:../Dave/Generated/FREERTOS/timers.c **** TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
 443:../Dave/Generated/FREERTOS/timers.c **** {
 579              	 .loc 1 443 0
 580              	 .cfi_startproc
 581              	 
 582              	 
 583              	 
 584 0000 80B4     	 push {r7}
 585              	.LCFI32:
 586              	 .cfi_def_cfa_offset 4
 587              	 .cfi_offset 7,-4
 588 0002 87B0     	 sub sp,sp,#28
 589              	.LCFI33:
 590              	 .cfi_def_cfa_offset 32
 591 0004 00AF     	 add r7,sp,#0
 592              	.LCFI34:
 593              	 .cfi_def_cfa_register 7
 594 0006 7860     	 str r0,[r7,#4]
 444:../Dave/Generated/FREERTOS/timers.c **** Timer_t * pxTimer = ( Timer_t * ) xTimer;
 595              	 .loc 1 444 0
 596 0008 7B68     	 ldr r3,[r7,#4]
 597 000a 7B61     	 str r3,[r7,#20]
 445:../Dave/Generated/FREERTOS/timers.c **** TickType_t xReturn;
 446:../Dave/Generated/FREERTOS/timers.c **** 
 447:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xTimer );
 598              	 .loc 1 447 0
 599 000c 7B68     	 ldr r3,[r7,#4]
 600 000e 002B     	 cmp r3,#0
 601 0010 09D1     	 bne .L37
 602              	.LBB45:
 603              	.LBB46:
 604              	 .loc 2 195 0 discriminator 1
 605              	
 606 0012 4FF0FC03 	 mov r3,#252
 607 0016 83F31188 	 msr basepri,r3
 608 001a BFF36F8F 	 isb 
 609 001e BFF34F8F 	 dsb 
 610              	
 611              	
 612              	 .thumb
 613 0022 FB60     	 str r3,[r7,#12]
 614              	.L38:
 615              	.LBE46:
 616              	.LBE45:
 617              	 .loc 1 447 0 discriminator 1
 618 0024 FEE7     	 b .L38
 619              	.L37:
 448:../Dave/Generated/FREERTOS/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 620              	 .loc 1 448 0
 621 0026 7B69     	 ldr r3,[r7,#20]
 622 0028 5B68     	 ldr r3,[r3,#4]
 623 002a 3B61     	 str r3,[r7,#16]
 449:../Dave/Generated/FREERTOS/timers.c **** 	return xReturn;
 624              	 .loc 1 449 0
 625 002c 3B69     	 ldr r3,[r7,#16]
 450:../Dave/Generated/FREERTOS/timers.c **** }
 626              	 .loc 1 450 0
 627 002e 1846     	 mov r0,r3
 628 0030 1C37     	 adds r7,r7,#28
 629              	.LCFI35:
 630              	 .cfi_def_cfa_offset 4
 631 0032 BD46     	 mov sp,r7
 632              	.LCFI36:
 633              	 .cfi_def_cfa_register 13
 634              	 
 635 0034 5DF8047B 	 ldr r7,[sp],#4
 636              	.LCFI37:
 637              	 .cfi_restore 7
 638              	 .cfi_def_cfa_offset 0
 639 0038 7047     	 bx lr
 640              	 .cfi_endproc
 641              	.LFE141:
 643 003a 00BF     	 .section .text.pcTimerGetName,"ax",%progbits
 644              	 .align 2
 645              	 .global pcTimerGetName
 646              	 .thumb
 647              	 .thumb_func
 649              	pcTimerGetName:
 650              	.LFB142:
 451:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 452:../Dave/Generated/FREERTOS/timers.c **** 
 453:../Dave/Generated/FREERTOS/timers.c **** const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are allowed
 454:../Dave/Generated/FREERTOS/timers.c **** {
 651              	 .loc 1 454 0
 652              	 .cfi_startproc
 653              	 
 654              	 
 655              	 
 656 0000 80B4     	 push {r7}
 657              	.LCFI38:
 658              	 .cfi_def_cfa_offset 4
 659              	 .cfi_offset 7,-4
 660 0002 85B0     	 sub sp,sp,#20
 661              	.LCFI39:
 662              	 .cfi_def_cfa_offset 24
 663 0004 00AF     	 add r7,sp,#0
 664              	.LCFI40:
 665              	 .cfi_def_cfa_register 7
 666 0006 7860     	 str r0,[r7,#4]
 455:../Dave/Generated/FREERTOS/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 667              	 .loc 1 455 0
 668 0008 7B68     	 ldr r3,[r7,#4]
 669 000a FB60     	 str r3,[r7,#12]
 456:../Dave/Generated/FREERTOS/timers.c **** 
 457:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xTimer );
 670              	 .loc 1 457 0
 671 000c 7B68     	 ldr r3,[r7,#4]
 672 000e 002B     	 cmp r3,#0
 673 0010 09D1     	 bne .L41
 674              	.LBB47:
 675              	.LBB48:
 676              	 .loc 2 195 0 discriminator 1
 677              	
 678 0012 4FF0FC03 	 mov r3,#252
 679 0016 83F31188 	 msr basepri,r3
 680 001a BFF36F8F 	 isb 
 681 001e BFF34F8F 	 dsb 
 682              	
 683              	
 684              	 .thumb
 685 0022 BB60     	 str r3,[r7,#8]
 686              	.L42:
 687              	.LBE48:
 688              	.LBE47:
 689              	 .loc 1 457 0 discriminator 1
 690 0024 FEE7     	 b .L42
 691              	.L41:
 458:../Dave/Generated/FREERTOS/timers.c **** 	return pxTimer->pcTimerName;
 692              	 .loc 1 458 0
 693 0026 FB68     	 ldr r3,[r7,#12]
 694 0028 1B68     	 ldr r3,[r3]
 459:../Dave/Generated/FREERTOS/timers.c **** }
 695              	 .loc 1 459 0
 696 002a 1846     	 mov r0,r3
 697 002c 1437     	 adds r7,r7,#20
 698              	.LCFI41:
 699              	 .cfi_def_cfa_offset 4
 700 002e BD46     	 mov sp,r7
 701              	.LCFI42:
 702              	 .cfi_def_cfa_register 13
 703              	 
 704 0030 5DF8047B 	 ldr r7,[sp],#4
 705              	.LCFI43:
 706              	 .cfi_restore 7
 707              	 .cfi_def_cfa_offset 0
 708 0034 7047     	 bx lr
 709              	 .cfi_endproc
 710              	.LFE142:
 712 0036 00BF     	 .section .text.prvProcessExpiredTimer,"ax",%progbits
 713              	 .align 2
 714              	 .thumb
 715              	 .thumb_func
 717              	prvProcessExpiredTimer:
 718              	.LFB143:
 460:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 461:../Dave/Generated/FREERTOS/timers.c **** 
 462:../Dave/Generated/FREERTOS/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
 463:../Dave/Generated/FREERTOS/timers.c **** {
 719              	 .loc 1 463 0
 720              	 .cfi_startproc
 721              	 
 722              	 
 723 0000 80B5     	 push {r7,lr}
 724              	.LCFI44:
 725              	 .cfi_def_cfa_offset 8
 726              	 .cfi_offset 7,-8
 727              	 .cfi_offset 14,-4
 728 0002 88B0     	 sub sp,sp,#32
 729              	.LCFI45:
 730              	 .cfi_def_cfa_offset 40
 731 0004 02AF     	 add r7,sp,#8
 732              	.LCFI46:
 733              	 .cfi_def_cfa 7,32
 734 0006 7860     	 str r0,[r7,#4]
 735 0008 3960     	 str r1,[r7]
 464:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xResult;
 465:../Dave/Generated/FREERTOS/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 736              	 .loc 1 465 0
 737 000a 1C4B     	 ldr r3,.L47
 738 000c 1B68     	 ldr r3,[r3]
 739 000e DB68     	 ldr r3,[r3,#12]
 740 0010 DB68     	 ldr r3,[r3,#12]
 741 0012 7B61     	 str r3,[r7,#20]
 466:../Dave/Generated/FREERTOS/timers.c **** 
 467:../Dave/Generated/FREERTOS/timers.c **** 	/* Remove the timer from the list of active timers.  A check has already
 468:../Dave/Generated/FREERTOS/timers.c **** 	been performed to ensure the list is not empty. */
 469:../Dave/Generated/FREERTOS/timers.c **** 	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 742              	 .loc 1 469 0
 743 0014 7B69     	 ldr r3,[r7,#20]
 744 0016 0433     	 adds r3,r3,#4
 745 0018 1846     	 mov r0,r3
 746 001a FFF7FEFF 	 bl uxListRemove
 470:../Dave/Generated/FREERTOS/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 471:../Dave/Generated/FREERTOS/timers.c **** 
 472:../Dave/Generated/FREERTOS/timers.c **** 	/* If the timer is an auto reload timer then calculate the next
 473:../Dave/Generated/FREERTOS/timers.c **** 	expiry time and re-insert the timer in the list of active timers. */
 474:../Dave/Generated/FREERTOS/timers.c **** 	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 747              	 .loc 1 474 0
 748 001e 7B69     	 ldr r3,[r7,#20]
 749 0020 DB69     	 ldr r3,[r3,#28]
 750 0022 012B     	 cmp r3,#1
 751 0024 22D1     	 bne .L45
 475:../Dave/Generated/FREERTOS/timers.c **** 	{
 476:../Dave/Generated/FREERTOS/timers.c **** 		/* The timer is inserted into a list using a time relative to anything
 477:../Dave/Generated/FREERTOS/timers.c **** 		other than the current time.  It will therefore be inserted into the
 478:../Dave/Generated/FREERTOS/timers.c **** 		correct list relative to the time this task thinks it is now. */
 479:../Dave/Generated/FREERTOS/timers.c **** 		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTim
 752              	 .loc 1 479 0
 753 0026 7B69     	 ldr r3,[r7,#20]
 754 0028 9A69     	 ldr r2,[r3,#24]
 755 002a 7B68     	 ldr r3,[r7,#4]
 756 002c 1344     	 add r3,r3,r2
 757 002e 7869     	 ldr r0,[r7,#20]
 758 0030 1946     	 mov r1,r3
 759 0032 3A68     	 ldr r2,[r7]
 760 0034 7B68     	 ldr r3,[r7,#4]
 761 0036 FFF7FEFF 	 bl prvInsertTimerInActiveList
 762 003a 0346     	 mov r3,r0
 763 003c 002B     	 cmp r3,#0
 764 003e 15D0     	 beq .L45
 480:../Dave/Generated/FREERTOS/timers.c **** 		{
 481:../Dave/Generated/FREERTOS/timers.c **** 			/* The timer expired before it was added to the active timer
 482:../Dave/Generated/FREERTOS/timers.c **** 			list.  Reload it now.  */
 483:../Dave/Generated/FREERTOS/timers.c **** 			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmr
 765              	 .loc 1 483 0
 766 0040 0023     	 movs r3,#0
 767 0042 0093     	 str r3,[sp]
 768 0044 7869     	 ldr r0,[r7,#20]
 769 0046 0021     	 movs r1,#0
 770 0048 7A68     	 ldr r2,[r7,#4]
 771 004a 0023     	 movs r3,#0
 772 004c FFF7FEFF 	 bl xTimerGenericCommand
 773 0050 3861     	 str r0,[r7,#16]
 484:../Dave/Generated/FREERTOS/timers.c **** 			configASSERT( xResult );
 774              	 .loc 1 484 0
 775 0052 3B69     	 ldr r3,[r7,#16]
 776 0054 002B     	 cmp r3,#0
 777 0056 09D1     	 bne .L45
 778              	.LBB49:
 779              	.LBB50:
 780              	 .loc 2 195 0 discriminator 1
 781              	
 782 0058 4FF0FC03 	 mov r3,#252
 783 005c 83F31188 	 msr basepri,r3
 784 0060 BFF36F8F 	 isb 
 785 0064 BFF34F8F 	 dsb 
 786              	
 787              	
 788              	 .thumb
 789 0068 FB60     	 str r3,[r7,#12]
 790              	.L46:
 791              	.LBE50:
 792              	.LBE49:
 793              	 .loc 1 484 0 discriminator 1
 794 006a FEE7     	 b .L46
 795              	.L45:
 485:../Dave/Generated/FREERTOS/timers.c **** 			( void ) xResult;
 486:../Dave/Generated/FREERTOS/timers.c **** 		}
 487:../Dave/Generated/FREERTOS/timers.c **** 		else
 488:../Dave/Generated/FREERTOS/timers.c **** 		{
 489:../Dave/Generated/FREERTOS/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 490:../Dave/Generated/FREERTOS/timers.c **** 		}
 491:../Dave/Generated/FREERTOS/timers.c **** 	}
 492:../Dave/Generated/FREERTOS/timers.c **** 	else
 493:../Dave/Generated/FREERTOS/timers.c **** 	{
 494:../Dave/Generated/FREERTOS/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 495:../Dave/Generated/FREERTOS/timers.c **** 	}
 496:../Dave/Generated/FREERTOS/timers.c **** 
 497:../Dave/Generated/FREERTOS/timers.c **** 	/* Call the timer callback. */
 498:../Dave/Generated/FREERTOS/timers.c **** 	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 796              	 .loc 1 498 0
 797 006c 7B69     	 ldr r3,[r7,#20]
 798 006e 5B6A     	 ldr r3,[r3,#36]
 799 0070 7869     	 ldr r0,[r7,#20]
 800 0072 9847     	 blx r3
 499:../Dave/Generated/FREERTOS/timers.c **** }
 801              	 .loc 1 499 0
 802 0074 1837     	 adds r7,r7,#24
 803              	.LCFI47:
 804              	 .cfi_def_cfa_offset 8
 805 0076 BD46     	 mov sp,r7
 806              	.LCFI48:
 807              	 .cfi_def_cfa_register 13
 808              	 
 809 0078 80BD     	 pop {r7,pc}
 810              	.L48:
 811 007a 00BF     	 .align 2
 812              	.L47:
 813 007c 00000000 	 .word pxCurrentTimerList
 814              	 .cfi_endproc
 815              	.LFE143:
 817              	 .section .text.prvTimerTask,"ax",%progbits
 818              	 .align 2
 819              	 .thumb
 820              	 .thumb_func
 822              	prvTimerTask:
 823              	.LFB144:
 500:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 501:../Dave/Generated/FREERTOS/timers.c **** 
 502:../Dave/Generated/FREERTOS/timers.c **** static void prvTimerTask( void *pvParameters )
 503:../Dave/Generated/FREERTOS/timers.c **** {
 824              	 .loc 1 503 0
 825              	 .cfi_startproc
 826              	 
 827              	 
 828 0000 80B5     	 push {r7,lr}
 829              	.LCFI49:
 830              	 .cfi_def_cfa_offset 8
 831              	 .cfi_offset 7,-8
 832              	 .cfi_offset 14,-4
 833 0002 84B0     	 sub sp,sp,#16
 834              	.LCFI50:
 835              	 .cfi_def_cfa_offset 24
 836 0004 00AF     	 add r7,sp,#0
 837              	.LCFI51:
 838              	 .cfi_def_cfa_register 7
 839 0006 7860     	 str r0,[r7,#4]
 840              	.L50:
 504:../Dave/Generated/FREERTOS/timers.c **** TickType_t xNextExpireTime;
 505:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xListWasEmpty;
 506:../Dave/Generated/FREERTOS/timers.c **** 
 507:../Dave/Generated/FREERTOS/timers.c **** 	/* Just to avoid compiler warnings. */
 508:../Dave/Generated/FREERTOS/timers.c **** 	( void ) pvParameters;
 509:../Dave/Generated/FREERTOS/timers.c **** 
 510:../Dave/Generated/FREERTOS/timers.c **** 	#if( configUSE_DAEMON_TASK_STARTUP_HOOK == 1 )
 511:../Dave/Generated/FREERTOS/timers.c **** 	{
 512:../Dave/Generated/FREERTOS/timers.c **** 		extern void vApplicationDaemonTaskStartupHook( void );
 513:../Dave/Generated/FREERTOS/timers.c **** 
 514:../Dave/Generated/FREERTOS/timers.c **** 		/* Allow the application writer to execute some code in the context of
 515:../Dave/Generated/FREERTOS/timers.c **** 		this task at the point the task starts executing.  This is useful if the
 516:../Dave/Generated/FREERTOS/timers.c **** 		application includes initialisation code that would benefit from
 517:../Dave/Generated/FREERTOS/timers.c **** 		executing after the scheduler has been started. */
 518:../Dave/Generated/FREERTOS/timers.c **** 		vApplicationDaemonTaskStartupHook();
 519:../Dave/Generated/FREERTOS/timers.c **** 	}
 520:../Dave/Generated/FREERTOS/timers.c **** 	#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */
 521:../Dave/Generated/FREERTOS/timers.c **** 
 522:../Dave/Generated/FREERTOS/timers.c **** 	for( ;; )
 523:../Dave/Generated/FREERTOS/timers.c **** 	{
 524:../Dave/Generated/FREERTOS/timers.c **** 		/* Query the timers list to see if it contains any timers, and if so,
 525:../Dave/Generated/FREERTOS/timers.c **** 		obtain the time at which the next timer will expire. */
 526:../Dave/Generated/FREERTOS/timers.c **** 		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 841              	 .loc 1 526 0 discriminator 1
 842 0008 07F10803 	 add r3,r7,#8
 843 000c 1846     	 mov r0,r3
 844 000e FFF7FEFF 	 bl prvGetNextExpireTime
 845 0012 F860     	 str r0,[r7,#12]
 527:../Dave/Generated/FREERTOS/timers.c **** 
 528:../Dave/Generated/FREERTOS/timers.c **** 		/* If a timer has expired, process it.  Otherwise, block this task
 529:../Dave/Generated/FREERTOS/timers.c **** 		until either a timer does expire, or a command is received. */
 530:../Dave/Generated/FREERTOS/timers.c **** 		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 846              	 .loc 1 530 0 discriminator 1
 847 0014 BB68     	 ldr r3,[r7,#8]
 848 0016 F868     	 ldr r0,[r7,#12]
 849 0018 1946     	 mov r1,r3
 850 001a FFF7FEFF 	 bl prvProcessTimerOrBlockTask
 531:../Dave/Generated/FREERTOS/timers.c **** 
 532:../Dave/Generated/FREERTOS/timers.c **** 		/* Empty the command queue. */
 533:../Dave/Generated/FREERTOS/timers.c **** 		prvProcessReceivedCommands();
 851              	 .loc 1 533 0 discriminator 1
 852 001e FFF7FEFF 	 bl prvProcessReceivedCommands
 534:../Dave/Generated/FREERTOS/timers.c **** 	}
 853              	 .loc 1 534 0 discriminator 1
 854 0022 F1E7     	 b .L50
 855              	 .cfi_endproc
 856              	.LFE144:
 858              	 .section .text.prvProcessTimerOrBlockTask,"ax",%progbits
 859              	 .align 2
 860              	 .thumb
 861              	 .thumb_func
 863              	prvProcessTimerOrBlockTask:
 864              	.LFB145:
 535:../Dave/Generated/FREERTOS/timers.c **** }
 536:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 537:../Dave/Generated/FREERTOS/timers.c **** 
 538:../Dave/Generated/FREERTOS/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 539:../Dave/Generated/FREERTOS/timers.c **** {
 865              	 .loc 1 539 0
 866              	 .cfi_startproc
 867              	 
 868              	 
 869 0000 80B5     	 push {r7,lr}
 870              	.LCFI52:
 871              	 .cfi_def_cfa_offset 8
 872              	 .cfi_offset 7,-8
 873              	 .cfi_offset 14,-4
 874 0002 84B0     	 sub sp,sp,#16
 875              	.LCFI53:
 876              	 .cfi_def_cfa_offset 24
 877 0004 00AF     	 add r7,sp,#0
 878              	.LCFI54:
 879              	 .cfi_def_cfa_register 7
 880 0006 7860     	 str r0,[r7,#4]
 881 0008 3960     	 str r1,[r7]
 540:../Dave/Generated/FREERTOS/timers.c **** TickType_t xTimeNow;
 541:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xTimerListsWereSwitched;
 542:../Dave/Generated/FREERTOS/timers.c **** 
 543:../Dave/Generated/FREERTOS/timers.c **** 	vTaskSuspendAll();
 882              	 .loc 1 543 0
 883 000a FFF7FEFF 	 bl vTaskSuspendAll
 544:../Dave/Generated/FREERTOS/timers.c **** 	{
 545:../Dave/Generated/FREERTOS/timers.c **** 		/* Obtain the time now to make an assessment as to whether the timer
 546:../Dave/Generated/FREERTOS/timers.c **** 		has expired or not.  If obtaining the time causes the lists to switch
 547:../Dave/Generated/FREERTOS/timers.c **** 		then don't process this timer as any timers that remained in the list
 548:../Dave/Generated/FREERTOS/timers.c **** 		when the lists were switched will have been processed within the
 549:../Dave/Generated/FREERTOS/timers.c **** 		prvSampleTimeNow() function. */
 550:../Dave/Generated/FREERTOS/timers.c **** 		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 884              	 .loc 1 550 0
 885 000e 07F10803 	 add r3,r7,#8
 886 0012 1846     	 mov r0,r3
 887 0014 FFF7FEFF 	 bl prvSampleTimeNow
 888 0018 F860     	 str r0,[r7,#12]
 551:../Dave/Generated/FREERTOS/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 889              	 .loc 1 551 0
 890 001a BB68     	 ldr r3,[r7,#8]
 891 001c 002B     	 cmp r3,#0
 892 001e 31D1     	 bne .L52
 552:../Dave/Generated/FREERTOS/timers.c **** 		{
 553:../Dave/Generated/FREERTOS/timers.c **** 			/* The tick count has not overflowed, has the timer expired? */
 554:../Dave/Generated/FREERTOS/timers.c **** 			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 893              	 .loc 1 554 0
 894 0020 3B68     	 ldr r3,[r7]
 895 0022 002B     	 cmp r3,#0
 896 0024 0AD1     	 bne .L53
 897              	 .loc 1 554 0 is_stmt 0 discriminator 1
 898 0026 7A68     	 ldr r2,[r7,#4]
 899 0028 FB68     	 ldr r3,[r7,#12]
 900 002a 9A42     	 cmp r2,r3
 901 002c 06D8     	 bhi .L53
 555:../Dave/Generated/FREERTOS/timers.c **** 			{
 556:../Dave/Generated/FREERTOS/timers.c **** 				( void ) xTaskResumeAll();
 902              	 .loc 1 556 0 is_stmt 1
 903 002e FFF7FEFF 	 bl xTaskResumeAll
 557:../Dave/Generated/FREERTOS/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 904              	 .loc 1 557 0
 905 0032 7868     	 ldr r0,[r7,#4]
 906 0034 F968     	 ldr r1,[r7,#12]
 907 0036 FFF7FEFF 	 bl prvProcessExpiredTimer
 908 003a 25E0     	 b .L51
 909              	.L53:
 558:../Dave/Generated/FREERTOS/timers.c **** 			}
 559:../Dave/Generated/FREERTOS/timers.c **** 			else
 560:../Dave/Generated/FREERTOS/timers.c **** 			{
 561:../Dave/Generated/FREERTOS/timers.c **** 				/* The tick count has not overflowed, and the next expire
 562:../Dave/Generated/FREERTOS/timers.c **** 				time has not been reached yet.  This task should therefore
 563:../Dave/Generated/FREERTOS/timers.c **** 				block to wait for the next expire time or a command to be
 564:../Dave/Generated/FREERTOS/timers.c **** 				received - whichever comes first.  The following line cannot
 565:../Dave/Generated/FREERTOS/timers.c **** 				be reached unless xNextExpireTime > xTimeNow, except in the
 566:../Dave/Generated/FREERTOS/timers.c **** 				case when the current timer list is empty. */
 567:../Dave/Generated/FREERTOS/timers.c **** 				if( xListWasEmpty != pdFALSE )
 910              	 .loc 1 567 0
 911 003c 3B68     	 ldr r3,[r7]
 912 003e 002B     	 cmp r3,#0
 913 0040 08D0     	 beq .L55
 568:../Dave/Generated/FREERTOS/timers.c **** 				{
 569:../Dave/Generated/FREERTOS/timers.c **** 					/* The current timer list is empty - is the overflow list
 570:../Dave/Generated/FREERTOS/timers.c **** 					also empty? */
 571:../Dave/Generated/FREERTOS/timers.c **** 					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 914              	 .loc 1 571 0
 915 0042 134B     	 ldr r3,.L57
 916 0044 1B68     	 ldr r3,[r3]
 917 0046 1B68     	 ldr r3,[r3]
 918 0048 002B     	 cmp r3,#0
 919 004a 0CBF     	 ite eq
 920 004c 0123     	 moveq r3,#1
 921 004e 0023     	 movne r3,#0
 922 0050 DBB2     	 uxtb r3,r3
 923 0052 3B60     	 str r3,[r7]
 924              	.L55:
 572:../Dave/Generated/FREERTOS/timers.c **** 				}
 573:../Dave/Generated/FREERTOS/timers.c **** 
 574:../Dave/Generated/FREERTOS/timers.c **** 				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 925              	 .loc 1 574 0
 926 0054 0F4B     	 ldr r3,.L57+4
 927 0056 1968     	 ldr r1,[r3]
 928 0058 7A68     	 ldr r2,[r7,#4]
 929 005a FB68     	 ldr r3,[r7,#12]
 930 005c D31A     	 subs r3,r2,r3
 931 005e 0846     	 mov r0,r1
 932 0060 1946     	 mov r1,r3
 933 0062 3A68     	 ldr r2,[r7]
 934 0064 FFF7FEFF 	 bl vQueueWaitForMessageRestricted
 575:../Dave/Generated/FREERTOS/timers.c **** 
 576:../Dave/Generated/FREERTOS/timers.c **** 				if( xTaskResumeAll() == pdFALSE )
 935              	 .loc 1 576 0
 936 0068 FFF7FEFF 	 bl xTaskResumeAll
 937 006c 0346     	 mov r3,r0
 938 006e 002B     	 cmp r3,#0
 939 0070 0AD1     	 bne .L51
 577:../Dave/Generated/FREERTOS/timers.c **** 				{
 578:../Dave/Generated/FREERTOS/timers.c **** 					/* Yield to wait for either a command to arrive, or the
 579:../Dave/Generated/FREERTOS/timers.c **** 					block time to expire.  If a command arrived between the
 580:../Dave/Generated/FREERTOS/timers.c **** 					critical section being exited and this yield then the yield
 581:../Dave/Generated/FREERTOS/timers.c **** 					will not cause the task to block. */
 582:../Dave/Generated/FREERTOS/timers.c **** 					portYIELD_WITHIN_API();
 940              	 .loc 1 582 0
 941 0072 094B     	 ldr r3,.L57+8
 942 0074 4FF08052 	 mov r2,#268435456
 943 0078 1A60     	 str r2,[r3]
 944              	
 945 007a BFF34F8F 	 dsb
 946              	
 947              	
 948 007e BFF36F8F 	 isb
 949              	
 950              	 .thumb
 951 0082 01E0     	 b .L51
 952              	.L52:
 583:../Dave/Generated/FREERTOS/timers.c **** 				}
 584:../Dave/Generated/FREERTOS/timers.c **** 				else
 585:../Dave/Generated/FREERTOS/timers.c **** 				{
 586:../Dave/Generated/FREERTOS/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 587:../Dave/Generated/FREERTOS/timers.c **** 				}
 588:../Dave/Generated/FREERTOS/timers.c **** 			}
 589:../Dave/Generated/FREERTOS/timers.c **** 		}
 590:../Dave/Generated/FREERTOS/timers.c **** 		else
 591:../Dave/Generated/FREERTOS/timers.c **** 		{
 592:../Dave/Generated/FREERTOS/timers.c **** 			( void ) xTaskResumeAll();
 953              	 .loc 1 592 0
 954 0084 FFF7FEFF 	 bl xTaskResumeAll
 955              	.L51:
 593:../Dave/Generated/FREERTOS/timers.c **** 		}
 594:../Dave/Generated/FREERTOS/timers.c **** 	}
 595:../Dave/Generated/FREERTOS/timers.c **** }
 956              	 .loc 1 595 0
 957 0088 1037     	 adds r7,r7,#16
 958              	.LCFI55:
 959              	 .cfi_def_cfa_offset 8
 960 008a BD46     	 mov sp,r7
 961              	.LCFI56:
 962              	 .cfi_def_cfa_register 13
 963              	 
 964 008c 80BD     	 pop {r7,pc}
 965              	.L58:
 966 008e 00BF     	 .align 2
 967              	.L57:
 968 0090 00000000 	 .word pxOverflowTimerList
 969 0094 00000000 	 .word xTimerQueue
 970 0098 04ED00E0 	 .word -536810236
 971              	 .cfi_endproc
 972              	.LFE145:
 974              	 .section .text.prvGetNextExpireTime,"ax",%progbits
 975              	 .align 2
 976              	 .thumb
 977              	 .thumb_func
 979              	prvGetNextExpireTime:
 980              	.LFB146:
 596:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 597:../Dave/Generated/FREERTOS/timers.c **** 
 598:../Dave/Generated/FREERTOS/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
 599:../Dave/Generated/FREERTOS/timers.c **** {
 981              	 .loc 1 599 0
 982              	 .cfi_startproc
 983              	 
 984              	 
 985              	 
 986 0000 80B4     	 push {r7}
 987              	.LCFI57:
 988              	 .cfi_def_cfa_offset 4
 989              	 .cfi_offset 7,-4
 990 0002 85B0     	 sub sp,sp,#20
 991              	.LCFI58:
 992              	 .cfi_def_cfa_offset 24
 993 0004 00AF     	 add r7,sp,#0
 994              	.LCFI59:
 995              	 .cfi_def_cfa_register 7
 996 0006 7860     	 str r0,[r7,#4]
 600:../Dave/Generated/FREERTOS/timers.c **** TickType_t xNextExpireTime;
 601:../Dave/Generated/FREERTOS/timers.c **** 
 602:../Dave/Generated/FREERTOS/timers.c **** 	/* Timers are listed in expiry time order, with the head of the list
 603:../Dave/Generated/FREERTOS/timers.c **** 	referencing the task that will expire first.  Obtain the time at which
 604:../Dave/Generated/FREERTOS/timers.c **** 	the timer with the nearest expiry time will expire.  If there are no
 605:../Dave/Generated/FREERTOS/timers.c **** 	active timers then just set the next expire time to 0.  That will cause
 606:../Dave/Generated/FREERTOS/timers.c **** 	this task to unblock when the tick count overflows, at which point the
 607:../Dave/Generated/FREERTOS/timers.c **** 	timer lists will be switched and the next expiry time can be
 608:../Dave/Generated/FREERTOS/timers.c **** 	re-assessed.  */
 609:../Dave/Generated/FREERTOS/timers.c **** 	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 997              	 .loc 1 609 0
 998 0008 0E4B     	 ldr r3,.L63
 999 000a 1B68     	 ldr r3,[r3]
 1000 000c 1B68     	 ldr r3,[r3]
 1001 000e 002B     	 cmp r3,#0
 1002 0010 0CBF     	 ite eq
 1003 0012 0123     	 moveq r3,#1
 1004 0014 0023     	 movne r3,#0
 1005 0016 DBB2     	 uxtb r3,r3
 1006 0018 1A46     	 mov r2,r3
 1007 001a 7B68     	 ldr r3,[r7,#4]
 1008 001c 1A60     	 str r2,[r3]
 610:../Dave/Generated/FREERTOS/timers.c **** 	if( *pxListWasEmpty == pdFALSE )
 1009              	 .loc 1 610 0
 1010 001e 7B68     	 ldr r3,[r7,#4]
 1011 0020 1B68     	 ldr r3,[r3]
 1012 0022 002B     	 cmp r3,#0
 1013 0024 05D1     	 bne .L60
 611:../Dave/Generated/FREERTOS/timers.c **** 	{
 612:../Dave/Generated/FREERTOS/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 1014              	 .loc 1 612 0
 1015 0026 074B     	 ldr r3,.L63
 1016 0028 1B68     	 ldr r3,[r3]
 1017 002a DB68     	 ldr r3,[r3,#12]
 1018 002c 1B68     	 ldr r3,[r3]
 1019 002e FB60     	 str r3,[r7,#12]
 1020 0030 01E0     	 b .L61
 1021              	.L60:
 613:../Dave/Generated/FREERTOS/timers.c **** 	}
 614:../Dave/Generated/FREERTOS/timers.c **** 	else
 615:../Dave/Generated/FREERTOS/timers.c **** 	{
 616:../Dave/Generated/FREERTOS/timers.c **** 		/* Ensure the task unblocks when the tick count rolls over. */
 617:../Dave/Generated/FREERTOS/timers.c **** 		xNextExpireTime = ( TickType_t ) 0U;
 1022              	 .loc 1 617 0
 1023 0032 0023     	 movs r3,#0
 1024 0034 FB60     	 str r3,[r7,#12]
 1025              	.L61:
 618:../Dave/Generated/FREERTOS/timers.c **** 	}
 619:../Dave/Generated/FREERTOS/timers.c **** 
 620:../Dave/Generated/FREERTOS/timers.c **** 	return xNextExpireTime;
 1026              	 .loc 1 620 0
 1027 0036 FB68     	 ldr r3,[r7,#12]
 621:../Dave/Generated/FREERTOS/timers.c **** }
 1028              	 .loc 1 621 0
 1029 0038 1846     	 mov r0,r3
 1030 003a 1437     	 adds r7,r7,#20
 1031              	.LCFI60:
 1032              	 .cfi_def_cfa_offset 4
 1033 003c BD46     	 mov sp,r7
 1034              	.LCFI61:
 1035              	 .cfi_def_cfa_register 13
 1036              	 
 1037 003e 5DF8047B 	 ldr r7,[sp],#4
 1038              	.LCFI62:
 1039              	 .cfi_restore 7
 1040              	 .cfi_def_cfa_offset 0
 1041 0042 7047     	 bx lr
 1042              	.L64:
 1043              	 .align 2
 1044              	.L63:
 1045 0044 00000000 	 .word pxCurrentTimerList
 1046              	 .cfi_endproc
 1047              	.LFE146:
 1049              	 .section .text.prvSampleTimeNow,"ax",%progbits
 1050              	 .align 2
 1051              	 .thumb
 1052              	 .thumb_func
 1054              	prvSampleTimeNow:
 1055              	.LFB147:
 622:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 623:../Dave/Generated/FREERTOS/timers.c **** 
 624:../Dave/Generated/FREERTOS/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
 625:../Dave/Generated/FREERTOS/timers.c **** {
 1056              	 .loc 1 625 0
 1057              	 .cfi_startproc
 1058              	 
 1059              	 
 1060 0000 80B5     	 push {r7,lr}
 1061              	.LCFI63:
 1062              	 .cfi_def_cfa_offset 8
 1063              	 .cfi_offset 7,-8
 1064              	 .cfi_offset 14,-4
 1065 0002 84B0     	 sub sp,sp,#16
 1066              	.LCFI64:
 1067              	 .cfi_def_cfa_offset 24
 1068 0004 00AF     	 add r7,sp,#0
 1069              	.LCFI65:
 1070              	 .cfi_def_cfa_register 7
 1071 0006 7860     	 str r0,[r7,#4]
 626:../Dave/Generated/FREERTOS/timers.c **** TickType_t xTimeNow;
 627:../Dave/Generated/FREERTOS/timers.c **** PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only acce
 628:../Dave/Generated/FREERTOS/timers.c **** 
 629:../Dave/Generated/FREERTOS/timers.c **** 	xTimeNow = xTaskGetTickCount();
 1072              	 .loc 1 629 0
 1073 0008 FFF7FEFF 	 bl xTaskGetTickCount
 1074 000c F860     	 str r0,[r7,#12]
 630:../Dave/Generated/FREERTOS/timers.c **** 
 631:../Dave/Generated/FREERTOS/timers.c **** 	if( xTimeNow < xLastTime )
 1075              	 .loc 1 631 0
 1076 000e 0B4B     	 ldr r3,.L69
 1077 0010 1B68     	 ldr r3,[r3]
 1078 0012 FA68     	 ldr r2,[r7,#12]
 1079 0014 9A42     	 cmp r2,r3
 1080 0016 05D2     	 bcs .L66
 632:../Dave/Generated/FREERTOS/timers.c **** 	{
 633:../Dave/Generated/FREERTOS/timers.c **** 		prvSwitchTimerLists();
 1081              	 .loc 1 633 0
 1082 0018 FFF7FEFF 	 bl prvSwitchTimerLists
 634:../Dave/Generated/FREERTOS/timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 1083              	 .loc 1 634 0
 1084 001c 7B68     	 ldr r3,[r7,#4]
 1085 001e 0122     	 movs r2,#1
 1086 0020 1A60     	 str r2,[r3]
 1087 0022 02E0     	 b .L67
 1088              	.L66:
 635:../Dave/Generated/FREERTOS/timers.c **** 	}
 636:../Dave/Generated/FREERTOS/timers.c **** 	else
 637:../Dave/Generated/FREERTOS/timers.c **** 	{
 638:../Dave/Generated/FREERTOS/timers.c **** 		*pxTimerListsWereSwitched = pdFALSE;
 1089              	 .loc 1 638 0
 1090 0024 7B68     	 ldr r3,[r7,#4]
 1091 0026 0022     	 movs r2,#0
 1092 0028 1A60     	 str r2,[r3]
 1093              	.L67:
 639:../Dave/Generated/FREERTOS/timers.c **** 	}
 640:../Dave/Generated/FREERTOS/timers.c **** 
 641:../Dave/Generated/FREERTOS/timers.c **** 	xLastTime = xTimeNow;
 1094              	 .loc 1 641 0
 1095 002a 044A     	 ldr r2,.L69
 1096 002c FB68     	 ldr r3,[r7,#12]
 1097 002e 1360     	 str r3,[r2]
 642:../Dave/Generated/FREERTOS/timers.c **** 
 643:../Dave/Generated/FREERTOS/timers.c **** 	return xTimeNow;
 1098              	 .loc 1 643 0
 1099 0030 FB68     	 ldr r3,[r7,#12]
 644:../Dave/Generated/FREERTOS/timers.c **** }
 1100              	 .loc 1 644 0
 1101 0032 1846     	 mov r0,r3
 1102 0034 1037     	 adds r7,r7,#16
 1103              	.LCFI66:
 1104              	 .cfi_def_cfa_offset 8
 1105 0036 BD46     	 mov sp,r7
 1106              	.LCFI67:
 1107              	 .cfi_def_cfa_register 13
 1108              	 
 1109 0038 80BD     	 pop {r7,pc}
 1110              	.L70:
 1111 003a 00BF     	 .align 2
 1112              	.L69:
 1113 003c 00000000 	 .word xLastTime.7704
 1114              	 .cfi_endproc
 1115              	.LFE147:
 1117              	 .section .text.prvInsertTimerInActiveList,"ax",%progbits
 1118              	 .align 2
 1119              	 .thumb
 1120              	 .thumb_func
 1122              	prvInsertTimerInActiveList:
 1123              	.LFB148:
 645:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 646:../Dave/Generated/FREERTOS/timers.c **** 
 647:../Dave/Generated/FREERTOS/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 648:../Dave/Generated/FREERTOS/timers.c **** {
 1124              	 .loc 1 648 0
 1125              	 .cfi_startproc
 1126              	 
 1127              	 
 1128 0000 80B5     	 push {r7,lr}
 1129              	.LCFI68:
 1130              	 .cfi_def_cfa_offset 8
 1131              	 .cfi_offset 7,-8
 1132              	 .cfi_offset 14,-4
 1133 0002 86B0     	 sub sp,sp,#24
 1134              	.LCFI69:
 1135              	 .cfi_def_cfa_offset 32
 1136 0004 00AF     	 add r7,sp,#0
 1137              	.LCFI70:
 1138              	 .cfi_def_cfa_register 7
 1139 0006 F860     	 str r0,[r7,#12]
 1140 0008 B960     	 str r1,[r7,#8]
 1141 000a 7A60     	 str r2,[r7,#4]
 1142 000c 3B60     	 str r3,[r7]
 649:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xProcessTimerNow = pdFALSE;
 1143              	 .loc 1 649 0
 1144 000e 0023     	 movs r3,#0
 1145 0010 7B61     	 str r3,[r7,#20]
 650:../Dave/Generated/FREERTOS/timers.c **** 
 651:../Dave/Generated/FREERTOS/timers.c **** 	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 1146              	 .loc 1 651 0
 1147 0012 FB68     	 ldr r3,[r7,#12]
 1148 0014 BA68     	 ldr r2,[r7,#8]
 1149 0016 5A60     	 str r2,[r3,#4]
 652:../Dave/Generated/FREERTOS/timers.c **** 	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 1150              	 .loc 1 652 0
 1151 0018 FB68     	 ldr r3,[r7,#12]
 1152 001a FA68     	 ldr r2,[r7,#12]
 1153 001c 1A61     	 str r2,[r3,#16]
 653:../Dave/Generated/FREERTOS/timers.c **** 
 654:../Dave/Generated/FREERTOS/timers.c **** 	if( xNextExpiryTime <= xTimeNow )
 1154              	 .loc 1 654 0
 1155 001e BA68     	 ldr r2,[r7,#8]
 1156 0020 7B68     	 ldr r3,[r7,#4]
 1157 0022 9A42     	 cmp r2,r3
 1158 0024 12D8     	 bhi .L72
 655:../Dave/Generated/FREERTOS/timers.c **** 	{
 656:../Dave/Generated/FREERTOS/timers.c **** 		/* Has the expiry time elapsed between the command to start/reset a
 657:../Dave/Generated/FREERTOS/timers.c **** 		timer was issued, and the time the command was processed? */
 658:../Dave/Generated/FREERTOS/timers.c **** 		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961
 1159              	 .loc 1 658 0
 1160 0026 7A68     	 ldr r2,[r7,#4]
 1161 0028 3B68     	 ldr r3,[r7]
 1162 002a D21A     	 subs r2,r2,r3
 1163 002c FB68     	 ldr r3,[r7,#12]
 1164 002e 9B69     	 ldr r3,[r3,#24]
 1165 0030 9A42     	 cmp r2,r3
 1166 0032 02D3     	 bcc .L73
 659:../Dave/Generated/FREERTOS/timers.c **** 		{
 660:../Dave/Generated/FREERTOS/timers.c **** 			/* The time between a command being issued and the command being
 661:../Dave/Generated/FREERTOS/timers.c **** 			processed actually exceeds the timers period.  */
 662:../Dave/Generated/FREERTOS/timers.c **** 			xProcessTimerNow = pdTRUE;
 1167              	 .loc 1 662 0
 1168 0034 0123     	 movs r3,#1
 1169 0036 7B61     	 str r3,[r7,#20]
 1170 0038 1BE0     	 b .L75
 1171              	.L73:
 663:../Dave/Generated/FREERTOS/timers.c **** 		}
 664:../Dave/Generated/FREERTOS/timers.c **** 		else
 665:../Dave/Generated/FREERTOS/timers.c **** 		{
 666:../Dave/Generated/FREERTOS/timers.c **** 			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 1172              	 .loc 1 666 0
 1173 003a 104B     	 ldr r3,.L78
 1174 003c 1A68     	 ldr r2,[r3]
 1175 003e FB68     	 ldr r3,[r7,#12]
 1176 0040 0433     	 adds r3,r3,#4
 1177 0042 1046     	 mov r0,r2
 1178 0044 1946     	 mov r1,r3
 1179 0046 FFF7FEFF 	 bl vListInsert
 1180 004a 12E0     	 b .L75
 1181              	.L72:
 667:../Dave/Generated/FREERTOS/timers.c **** 		}
 668:../Dave/Generated/FREERTOS/timers.c **** 	}
 669:../Dave/Generated/FREERTOS/timers.c **** 	else
 670:../Dave/Generated/FREERTOS/timers.c **** 	{
 671:../Dave/Generated/FREERTOS/timers.c **** 		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 1182              	 .loc 1 671 0
 1183 004c 7A68     	 ldr r2,[r7,#4]
 1184 004e 3B68     	 ldr r3,[r7]
 1185 0050 9A42     	 cmp r2,r3
 1186 0052 06D2     	 bcs .L76
 1187              	 .loc 1 671 0 is_stmt 0 discriminator 1
 1188 0054 BA68     	 ldr r2,[r7,#8]
 1189 0056 3B68     	 ldr r3,[r7]
 1190 0058 9A42     	 cmp r2,r3
 1191 005a 02D3     	 bcc .L76
 672:../Dave/Generated/FREERTOS/timers.c **** 		{
 673:../Dave/Generated/FREERTOS/timers.c **** 			/* If, since the command was issued, the tick count has overflowed
 674:../Dave/Generated/FREERTOS/timers.c **** 			but the expiry time has not, then the timer must have already passed
 675:../Dave/Generated/FREERTOS/timers.c **** 			its expiry time and should be processed immediately. */
 676:../Dave/Generated/FREERTOS/timers.c **** 			xProcessTimerNow = pdTRUE;
 1192              	 .loc 1 676 0 is_stmt 1
 1193 005c 0123     	 movs r3,#1
 1194 005e 7B61     	 str r3,[r7,#20]
 1195 0060 07E0     	 b .L75
 1196              	.L76:
 677:../Dave/Generated/FREERTOS/timers.c **** 		}
 678:../Dave/Generated/FREERTOS/timers.c **** 		else
 679:../Dave/Generated/FREERTOS/timers.c **** 		{
 680:../Dave/Generated/FREERTOS/timers.c **** 			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 1197              	 .loc 1 680 0
 1198 0062 074B     	 ldr r3,.L78+4
 1199 0064 1A68     	 ldr r2,[r3]
 1200 0066 FB68     	 ldr r3,[r7,#12]
 1201 0068 0433     	 adds r3,r3,#4
 1202 006a 1046     	 mov r0,r2
 1203 006c 1946     	 mov r1,r3
 1204 006e FFF7FEFF 	 bl vListInsert
 1205              	.L75:
 681:../Dave/Generated/FREERTOS/timers.c **** 		}
 682:../Dave/Generated/FREERTOS/timers.c **** 	}
 683:../Dave/Generated/FREERTOS/timers.c **** 
 684:../Dave/Generated/FREERTOS/timers.c **** 	return xProcessTimerNow;
 1206              	 .loc 1 684 0
 1207 0072 7B69     	 ldr r3,[r7,#20]
 685:../Dave/Generated/FREERTOS/timers.c **** }
 1208              	 .loc 1 685 0
 1209 0074 1846     	 mov r0,r3
 1210 0076 1837     	 adds r7,r7,#24
 1211              	.LCFI71:
 1212              	 .cfi_def_cfa_offset 8
 1213 0078 BD46     	 mov sp,r7
 1214              	.LCFI72:
 1215              	 .cfi_def_cfa_register 13
 1216              	 
 1217 007a 80BD     	 pop {r7,pc}
 1218              	.L79:
 1219              	 .align 2
 1220              	.L78:
 1221 007c 00000000 	 .word pxOverflowTimerList
 1222 0080 00000000 	 .word pxCurrentTimerList
 1223              	 .cfi_endproc
 1224              	.LFE148:
 1226              	 .section .text.prvProcessReceivedCommands,"ax",%progbits
 1227              	 .align 2
 1228              	 .thumb
 1229              	 .thumb_func
 1231              	prvProcessReceivedCommands:
 1232              	.LFB149:
 686:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 687:../Dave/Generated/FREERTOS/timers.c **** 
 688:../Dave/Generated/FREERTOS/timers.c **** static void	prvProcessReceivedCommands( void )
 689:../Dave/Generated/FREERTOS/timers.c **** {
 1233              	 .loc 1 689 0
 1234              	 .cfi_startproc
 1235              	 
 1236              	 
 1237 0000 80B5     	 push {r7,lr}
 1238              	.LCFI73:
 1239              	 .cfi_def_cfa_offset 8
 1240              	 .cfi_offset 7,-8
 1241              	 .cfi_offset 14,-4
 1242 0002 8EB0     	 sub sp,sp,#56
 1243              	.LCFI74:
 1244              	 .cfi_def_cfa_offset 64
 1245 0004 02AF     	 add r7,sp,#8
 1246              	.LCFI75:
 1247              	 .cfi_def_cfa 7,56
 690:../Dave/Generated/FREERTOS/timers.c **** DaemonTaskMessage_t xMessage;
 691:../Dave/Generated/FREERTOS/timers.c **** Timer_t *pxTimer;
 692:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xTimerListsWereSwitched, xResult;
 693:../Dave/Generated/FREERTOS/timers.c **** TickType_t xTimeNow;
 694:../Dave/Generated/FREERTOS/timers.c **** 
 695:../Dave/Generated/FREERTOS/timers.c **** 	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does
 1248              	 .loc 1 695 0
 1249 0006 99E0     	 b .L81
 1250              	.L96:
 696:../Dave/Generated/FREERTOS/timers.c **** 	{
 697:../Dave/Generated/FREERTOS/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 698:../Dave/Generated/FREERTOS/timers.c **** 		{
 699:../Dave/Generated/FREERTOS/timers.c **** 			/* Negative commands are pended function calls rather than timer
 700:../Dave/Generated/FREERTOS/timers.c **** 			commands. */
 701:../Dave/Generated/FREERTOS/timers.c **** 			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 1251              	 .loc 1 701 0
 1252 0008 7B68     	 ldr r3,[r7,#4]
 1253 000a 002B     	 cmp r3,#0
 1254 000c 18DA     	 bge .L82
 1255              	.LBB51:
 702:../Dave/Generated/FREERTOS/timers.c **** 			{
 703:../Dave/Generated/FREERTOS/timers.c **** 				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 1256              	 .loc 1 703 0
 1257 000e 3B1D     	 adds r3,r7,#4
 1258 0010 0433     	 adds r3,r3,#4
 1259 0012 FB62     	 str r3,[r7,#44]
 704:../Dave/Generated/FREERTOS/timers.c **** 
 705:../Dave/Generated/FREERTOS/timers.c **** 				/* The timer uses the xCallbackParameters member to request a
 706:../Dave/Generated/FREERTOS/timers.c **** 				callback be executed.  Check the callback is not NULL. */
 707:../Dave/Generated/FREERTOS/timers.c **** 				configASSERT( pxCallback );
 1260              	 .loc 1 707 0
 1261 0014 FB6A     	 ldr r3,[r7,#44]
 1262 0016 002B     	 cmp r3,#0
 1263 0018 09D1     	 bne .L83
 1264              	.LBB52:
 1265              	.LBB53:
 1266              	 .loc 2 195 0 discriminator 1
 1267              	
 1268 001a 4FF0FC03 	 mov r3,#252
 1269 001e 83F31188 	 msr basepri,r3
 1270 0022 BFF36F8F 	 isb 
 1271 0026 BFF34F8F 	 dsb 
 1272              	
 1273              	
 1274              	 .thumb
 1275 002a FB61     	 str r3,[r7,#28]
 1276              	.L84:
 1277              	.LBE53:
 1278              	.LBE52:
 1279              	 .loc 1 707 0 discriminator 1
 1280 002c FEE7     	 b .L84
 1281              	.L83:
 708:../Dave/Generated/FREERTOS/timers.c **** 
 709:../Dave/Generated/FREERTOS/timers.c **** 				/* Call the function. */
 710:../Dave/Generated/FREERTOS/timers.c **** 				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 1282              	 .loc 1 710 0
 1283 002e FB6A     	 ldr r3,[r7,#44]
 1284 0030 1B68     	 ldr r3,[r3]
 1285 0032 FA6A     	 ldr r2,[r7,#44]
 1286 0034 5168     	 ldr r1,[r2,#4]
 1287 0036 FA6A     	 ldr r2,[r7,#44]
 1288 0038 9268     	 ldr r2,[r2,#8]
 1289 003a 0846     	 mov r0,r1
 1290 003c 1146     	 mov r1,r2
 1291 003e 9847     	 blx r3
 1292              	.L82:
 1293              	.LBE51:
 711:../Dave/Generated/FREERTOS/timers.c **** 			}
 712:../Dave/Generated/FREERTOS/timers.c **** 			else
 713:../Dave/Generated/FREERTOS/timers.c **** 			{
 714:../Dave/Generated/FREERTOS/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 715:../Dave/Generated/FREERTOS/timers.c **** 			}
 716:../Dave/Generated/FREERTOS/timers.c **** 		}
 717:../Dave/Generated/FREERTOS/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 718:../Dave/Generated/FREERTOS/timers.c **** 
 719:../Dave/Generated/FREERTOS/timers.c **** 		/* Commands that are positive are timer commands rather than pended
 720:../Dave/Generated/FREERTOS/timers.c **** 		function calls. */
 721:../Dave/Generated/FREERTOS/timers.c **** 		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 1294              	 .loc 1 721 0
 1295 0040 7B68     	 ldr r3,[r7,#4]
 1296 0042 002B     	 cmp r3,#0
 1297 0044 7ADB     	 blt .L81
 722:../Dave/Generated/FREERTOS/timers.c **** 		{
 723:../Dave/Generated/FREERTOS/timers.c **** 			/* The messages uses the xTimerParameters member to work on a
 724:../Dave/Generated/FREERTOS/timers.c **** 			software timer. */
 725:../Dave/Generated/FREERTOS/timers.c **** 			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 1298              	 .loc 1 725 0
 1299 0046 FB68     	 ldr r3,[r7,#12]
 1300 0048 BB62     	 str r3,[r7,#40]
 726:../Dave/Generated/FREERTOS/timers.c **** 
 727:../Dave/Generated/FREERTOS/timers.c **** 			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The
 1301              	 .loc 1 727 0
 1302 004a BB6A     	 ldr r3,[r7,#40]
 1303 004c 5B69     	 ldr r3,[r3,#20]
 1304 004e 002B     	 cmp r3,#0
 1305 0050 04D0     	 beq .L85
 728:../Dave/Generated/FREERTOS/timers.c **** 			{
 729:../Dave/Generated/FREERTOS/timers.c **** 				/* The timer is in a list, remove it. */
 730:../Dave/Generated/FREERTOS/timers.c **** 				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 1306              	 .loc 1 730 0
 1307 0052 BB6A     	 ldr r3,[r7,#40]
 1308 0054 0433     	 adds r3,r3,#4
 1309 0056 1846     	 mov r0,r3
 1310 0058 FFF7FEFF 	 bl uxListRemove
 1311              	.L85:
 731:../Dave/Generated/FREERTOS/timers.c **** 			}
 732:../Dave/Generated/FREERTOS/timers.c **** 			else
 733:../Dave/Generated/FREERTOS/timers.c **** 			{
 734:../Dave/Generated/FREERTOS/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 735:../Dave/Generated/FREERTOS/timers.c **** 			}
 736:../Dave/Generated/FREERTOS/timers.c **** 
 737:../Dave/Generated/FREERTOS/timers.c **** 			traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParameters.xMessageV
 738:../Dave/Generated/FREERTOS/timers.c **** 
 739:../Dave/Generated/FREERTOS/timers.c **** 			/* In this case the xTimerListsWereSwitched parameter is not used, but
 740:../Dave/Generated/FREERTOS/timers.c **** 			it must be present in the function call.  prvSampleTimeNow() must be
 741:../Dave/Generated/FREERTOS/timers.c **** 			called after the message is received from xTimerQueue so there is no
 742:../Dave/Generated/FREERTOS/timers.c **** 			possibility of a higher priority task adding a message to the message
 743:../Dave/Generated/FREERTOS/timers.c **** 			queue with a time that is ahead of the timer daemon task (because it
 744:../Dave/Generated/FREERTOS/timers.c **** 			pre-empted the timer daemon task after the xTimeNow value was set). */
 745:../Dave/Generated/FREERTOS/timers.c **** 			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 1312              	 .loc 1 745 0
 1313 005c 3B46     	 mov r3,r7
 1314 005e 1846     	 mov r0,r3
 1315 0060 FFF7FEFF 	 bl prvSampleTimeNow
 1316 0064 7862     	 str r0,[r7,#36]
 746:../Dave/Generated/FREERTOS/timers.c **** 
 747:../Dave/Generated/FREERTOS/timers.c **** 			switch( xMessage.xMessageID )
 1317              	 .loc 1 747 0
 1318 0066 7B68     	 ldr r3,[r7,#4]
 1319 0068 092B     	 cmp r3,#9
 1320 006a 66D8     	 bhi .L97
 1321 006c 01A2     	 adr r2,.L88
 1322 006e 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1323 0072 00BF     	 .p2align 2
 1324              	.L88:
 1325 0074 9D000000 	 .word .L87+1
 1326 0078 9D000000 	 .word .L87+1
 1327 007c 9D000000 	 .word .L87+1
 1328 0080 3D010000 	 .word .L81+1
 1329 0084 FB000000 	 .word .L90+1
 1330 0088 33010000 	 .word .L91+1
 1331 008c 9D000000 	 .word .L87+1
 1332 0090 9D000000 	 .word .L87+1
 1333 0094 3D010000 	 .word .L81+1
 1334 0098 FB000000 	 .word .L90+1
 1335              	 .p2align 1
 1336              	.L87:
 748:../Dave/Generated/FREERTOS/timers.c **** 			{
 749:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_START :
 750:../Dave/Generated/FREERTOS/timers.c **** 			    case tmrCOMMAND_START_FROM_ISR :
 751:../Dave/Generated/FREERTOS/timers.c **** 			    case tmrCOMMAND_RESET :
 752:../Dave/Generated/FREERTOS/timers.c **** 			    case tmrCOMMAND_RESET_FROM_ISR :
 753:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_START_DONT_TRACE :
 754:../Dave/Generated/FREERTOS/timers.c **** 					/* Start or restart a timer. */
 755:../Dave/Generated/FREERTOS/timers.c **** 					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer-
 1337              	 .loc 1 755 0
 1338 009c BA68     	 ldr r2,[r7,#8]
 1339 009e BB6A     	 ldr r3,[r7,#40]
 1340 00a0 9B69     	 ldr r3,[r3,#24]
 1341 00a2 1A44     	 add r2,r2,r3
 1342 00a4 BB68     	 ldr r3,[r7,#8]
 1343 00a6 B86A     	 ldr r0,[r7,#40]
 1344 00a8 1146     	 mov r1,r2
 1345 00aa 7A6A     	 ldr r2,[r7,#36]
 1346 00ac FFF7FEFF 	 bl prvInsertTimerInActiveList
 1347 00b0 0346     	 mov r3,r0
 1348 00b2 002B     	 cmp r3,#0
 1349 00b4 20D0     	 beq .L92
 756:../Dave/Generated/FREERTOS/timers.c **** 					{
 757:../Dave/Generated/FREERTOS/timers.c **** 						/* The timer expired before it was added to the active
 758:../Dave/Generated/FREERTOS/timers.c **** 						timer list.  Process it now. */
 759:../Dave/Generated/FREERTOS/timers.c **** 						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 1350              	 .loc 1 759 0
 1351 00b6 BB6A     	 ldr r3,[r7,#40]
 1352 00b8 5B6A     	 ldr r3,[r3,#36]
 1353 00ba B86A     	 ldr r0,[r7,#40]
 1354 00bc 9847     	 blx r3
 760:../Dave/Generated/FREERTOS/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 761:../Dave/Generated/FREERTOS/timers.c **** 
 762:../Dave/Generated/FREERTOS/timers.c **** 						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 1355              	 .loc 1 762 0
 1356 00be BB6A     	 ldr r3,[r7,#40]
 1357 00c0 DB69     	 ldr r3,[r3,#28]
 1358 00c2 012B     	 cmp r3,#1
 1359 00c4 18D1     	 bne .L92
 763:../Dave/Generated/FREERTOS/timers.c **** 						{
 764:../Dave/Generated/FREERTOS/timers.c **** 							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParam
 1360              	 .loc 1 764 0
 1361 00c6 BA68     	 ldr r2,[r7,#8]
 1362 00c8 BB6A     	 ldr r3,[r7,#40]
 1363 00ca 9B69     	 ldr r3,[r3,#24]
 1364 00cc 1A44     	 add r2,r2,r3
 1365 00ce 0023     	 movs r3,#0
 1366 00d0 0093     	 str r3,[sp]
 1367 00d2 B86A     	 ldr r0,[r7,#40]
 1368 00d4 0021     	 movs r1,#0
 1369 00d6 0023     	 movs r3,#0
 1370 00d8 FFF7FEFF 	 bl xTimerGenericCommand
 1371 00dc 3862     	 str r0,[r7,#32]
 765:../Dave/Generated/FREERTOS/timers.c **** 							configASSERT( xResult );
 1372              	 .loc 1 765 0
 1373 00de 3B6A     	 ldr r3,[r7,#32]
 1374 00e0 002B     	 cmp r3,#0
 1375 00e2 09D1     	 bne .L92
 1376              	.LBB54:
 1377              	.LBB55:
 1378              	 .loc 2 195 0 discriminator 1
 1379              	
 1380 00e4 4FF0FC03 	 mov r3,#252
 1381 00e8 83F31188 	 msr basepri,r3
 1382 00ec BFF36F8F 	 isb 
 1383 00f0 BFF34F8F 	 dsb 
 1384              	
 1385              	
 1386              	 .thumb
 1387 00f4 BB61     	 str r3,[r7,#24]
 1388              	.L93:
 1389              	.LBE55:
 1390              	.LBE54:
 1391              	 .loc 1 765 0 discriminator 2
 1392 00f6 FEE7     	 b .L93
 1393              	.L92:
 766:../Dave/Generated/FREERTOS/timers.c **** 							( void ) xResult;
 767:../Dave/Generated/FREERTOS/timers.c **** 						}
 768:../Dave/Generated/FREERTOS/timers.c **** 						else
 769:../Dave/Generated/FREERTOS/timers.c **** 						{
 770:../Dave/Generated/FREERTOS/timers.c **** 							mtCOVERAGE_TEST_MARKER();
 771:../Dave/Generated/FREERTOS/timers.c **** 						}
 772:../Dave/Generated/FREERTOS/timers.c **** 					}
 773:../Dave/Generated/FREERTOS/timers.c **** 					else
 774:../Dave/Generated/FREERTOS/timers.c **** 					{
 775:../Dave/Generated/FREERTOS/timers.c **** 						mtCOVERAGE_TEST_MARKER();
 776:../Dave/Generated/FREERTOS/timers.c **** 					}
 777:../Dave/Generated/FREERTOS/timers.c **** 					break;
 1394              	 .loc 1 777 0 discriminator 4
 1395 00f8 20E0     	 b .L81
 1396              	.L90:
 778:../Dave/Generated/FREERTOS/timers.c **** 
 779:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_STOP :
 780:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_STOP_FROM_ISR :
 781:../Dave/Generated/FREERTOS/timers.c **** 					/* The timer has already been removed from the active list.
 782:../Dave/Generated/FREERTOS/timers.c **** 					There is nothing to do here. */
 783:../Dave/Generated/FREERTOS/timers.c **** 					break;
 784:../Dave/Generated/FREERTOS/timers.c **** 
 785:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD :
 786:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
 787:../Dave/Generated/FREERTOS/timers.c **** 					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 1397              	 .loc 1 787 0
 1398 00fa BA68     	 ldr r2,[r7,#8]
 1399 00fc BB6A     	 ldr r3,[r7,#40]
 1400 00fe 9A61     	 str r2,[r3,#24]
 788:../Dave/Generated/FREERTOS/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1401              	 .loc 1 788 0
 1402 0100 BB6A     	 ldr r3,[r7,#40]
 1403 0102 9B69     	 ldr r3,[r3,#24]
 1404 0104 002B     	 cmp r3,#0
 1405 0106 09D1     	 bne .L94
 1406              	.LBB56:
 1407              	.LBB57:
 1408              	 .loc 2 195 0 discriminator 1
 1409              	
 1410 0108 4FF0FC03 	 mov r3,#252
 1411 010c 83F31188 	 msr basepri,r3
 1412 0110 BFF36F8F 	 isb 
 1413 0114 BFF34F8F 	 dsb 
 1414              	
 1415              	
 1416              	 .thumb
 1417 0118 7B61     	 str r3,[r7,#20]
 1418              	.L95:
 1419              	.LBE57:
 1420              	.LBE56:
 1421              	 .loc 1 788 0 discriminator 5
 1422 011a FEE7     	 b .L95
 1423              	.L94:
 789:../Dave/Generated/FREERTOS/timers.c **** 
 790:../Dave/Generated/FREERTOS/timers.c **** 					/* The new period does not really have a reference, and can
 791:../Dave/Generated/FREERTOS/timers.c **** 					be longer or shorter than the old one.  The command time is
 792:../Dave/Generated/FREERTOS/timers.c **** 					therefore set to the current time, and as the period cannot
 793:../Dave/Generated/FREERTOS/timers.c **** 					be zero the next expiry time can only be in the future,
 794:../Dave/Generated/FREERTOS/timers.c **** 					meaning (unlike for the xTimerStart() case above) there is
 795:../Dave/Generated/FREERTOS/timers.c **** 					no fail case that needs to be handled here. */
 796:../Dave/Generated/FREERTOS/timers.c **** 					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTi
 1424              	 .loc 1 796 0
 1425 011c BB6A     	 ldr r3,[r7,#40]
 1426 011e 9A69     	 ldr r2,[r3,#24]
 1427 0120 7B6A     	 ldr r3,[r7,#36]
 1428 0122 1344     	 add r3,r3,r2
 1429 0124 B86A     	 ldr r0,[r7,#40]
 1430 0126 1946     	 mov r1,r3
 1431 0128 7A6A     	 ldr r2,[r7,#36]
 1432 012a 7B6A     	 ldr r3,[r7,#36]
 1433 012c FFF7FEFF 	 bl prvInsertTimerInActiveList
 797:../Dave/Generated/FREERTOS/timers.c **** 					break;
 1434              	 .loc 1 797 0
 1435 0130 04E0     	 b .L81
 1436              	.L91:
 798:../Dave/Generated/FREERTOS/timers.c **** 
 799:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_DELETE :
 800:../Dave/Generated/FREERTOS/timers.c **** 					/* The timer has already been removed from the active list,
 801:../Dave/Generated/FREERTOS/timers.c **** 					just free up the memory if the memory was dynamically
 802:../Dave/Generated/FREERTOS/timers.c **** 					allocated. */
 803:../Dave/Generated/FREERTOS/timers.c **** 					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 804:../Dave/Generated/FREERTOS/timers.c **** 					{
 805:../Dave/Generated/FREERTOS/timers.c **** 						/* The timer can only have been allocated dynamically -
 806:../Dave/Generated/FREERTOS/timers.c **** 						free it again. */
 807:../Dave/Generated/FREERTOS/timers.c **** 						vPortFree( pxTimer );
 1437              	 .loc 1 807 0
 1438 0132 B86A     	 ldr r0,[r7,#40]
 1439 0134 FFF7FEFF 	 bl vPortFree
 808:../Dave/Generated/FREERTOS/timers.c **** 					}
 809:../Dave/Generated/FREERTOS/timers.c **** 					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 810:../Dave/Generated/FREERTOS/timers.c **** 					{
 811:../Dave/Generated/FREERTOS/timers.c **** 						/* The timer could have been allocated statically or
 812:../Dave/Generated/FREERTOS/timers.c **** 						dynamically, so check before attempting to free the
 813:../Dave/Generated/FREERTOS/timers.c **** 						memory. */
 814:../Dave/Generated/FREERTOS/timers.c **** 						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 815:../Dave/Generated/FREERTOS/timers.c **** 						{
 816:../Dave/Generated/FREERTOS/timers.c **** 							vPortFree( pxTimer );
 817:../Dave/Generated/FREERTOS/timers.c **** 						}
 818:../Dave/Generated/FREERTOS/timers.c **** 						else
 819:../Dave/Generated/FREERTOS/timers.c **** 						{
 820:../Dave/Generated/FREERTOS/timers.c **** 							mtCOVERAGE_TEST_MARKER();
 821:../Dave/Generated/FREERTOS/timers.c **** 						}
 822:../Dave/Generated/FREERTOS/timers.c **** 					}
 823:../Dave/Generated/FREERTOS/timers.c **** 					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 824:../Dave/Generated/FREERTOS/timers.c **** 					break;
 1440              	 .loc 1 824 0
 1441 0138 00E0     	 b .L81
 1442              	.L97:
 825:../Dave/Generated/FREERTOS/timers.c **** 
 826:../Dave/Generated/FREERTOS/timers.c **** 				default	:
 827:../Dave/Generated/FREERTOS/timers.c **** 					/* Don't expect to get here. */
 828:../Dave/Generated/FREERTOS/timers.c **** 					break;
 1443              	 .loc 1 828 0
 1444 013a 00BF     	 nop
 1445              	.L81:
 695:../Dave/Generated/FREERTOS/timers.c **** 	{
 1446              	 .loc 1 695 0
 1447 013c 074B     	 ldr r3,.L98
 1448 013e 1A68     	 ldr r2,[r3]
 1449 0140 3B1D     	 adds r3,r7,#4
 1450 0142 1046     	 mov r0,r2
 1451 0144 1946     	 mov r1,r3
 1452 0146 0022     	 movs r2,#0
 1453 0148 FFF7FEFF 	 bl xQueueReceive
 1454 014c 0346     	 mov r3,r0
 1455 014e 002B     	 cmp r3,#0
 1456 0150 7FF45AAF 	 bne .L96
 829:../Dave/Generated/FREERTOS/timers.c **** 			}
 830:../Dave/Generated/FREERTOS/timers.c **** 		}
 831:../Dave/Generated/FREERTOS/timers.c **** 	}
 832:../Dave/Generated/FREERTOS/timers.c **** }
 1457              	 .loc 1 832 0
 1458 0154 3037     	 adds r7,r7,#48
 1459              	.LCFI76:
 1460              	 .cfi_def_cfa_offset 8
 1461 0156 BD46     	 mov sp,r7
 1462              	.LCFI77:
 1463              	 .cfi_def_cfa_register 13
 1464              	 
 1465 0158 80BD     	 pop {r7,pc}
 1466              	.L99:
 1467 015a 00BF     	 .align 2
 1468              	.L98:
 1469 015c 00000000 	 .word xTimerQueue
 1470              	 .cfi_endproc
 1471              	.LFE149:
 1473              	 .section .text.prvSwitchTimerLists,"ax",%progbits
 1474              	 .align 2
 1475              	 .thumb
 1476              	 .thumb_func
 1478              	prvSwitchTimerLists:
 1479              	.LFB150:
 833:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 834:../Dave/Generated/FREERTOS/timers.c **** 
 835:../Dave/Generated/FREERTOS/timers.c **** static void prvSwitchTimerLists( void )
 836:../Dave/Generated/FREERTOS/timers.c **** {
 1480              	 .loc 1 836 0
 1481              	 .cfi_startproc
 1482              	 
 1483              	 
 1484 0000 80B5     	 push {r7,lr}
 1485              	.LCFI78:
 1486              	 .cfi_def_cfa_offset 8
 1487              	 .cfi_offset 7,-8
 1488              	 .cfi_offset 14,-4
 1489 0002 88B0     	 sub sp,sp,#32
 1490              	.LCFI79:
 1491              	 .cfi_def_cfa_offset 40
 1492 0004 02AF     	 add r7,sp,#8
 1493              	.LCFI80:
 1494              	 .cfi_def_cfa 7,32
 837:../Dave/Generated/FREERTOS/timers.c **** TickType_t xNextExpireTime, xReloadTime;
 838:../Dave/Generated/FREERTOS/timers.c **** List_t *pxTemp;
 839:../Dave/Generated/FREERTOS/timers.c **** Timer_t *pxTimer;
 840:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xResult;
 841:../Dave/Generated/FREERTOS/timers.c **** 
 842:../Dave/Generated/FREERTOS/timers.c **** 	/* The tick count has overflowed.  The timer lists must be switched.
 843:../Dave/Generated/FREERTOS/timers.c **** 	If there are any timers still referenced from the current timer list
 844:../Dave/Generated/FREERTOS/timers.c **** 	then they must have expired and should be processed before the lists
 845:../Dave/Generated/FREERTOS/timers.c **** 	are switched. */
 846:../Dave/Generated/FREERTOS/timers.c **** 	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 1495              	 .loc 1 846 0
 1496 0006 44E0     	 b .L101
 1497              	.L104:
 847:../Dave/Generated/FREERTOS/timers.c **** 	{
 848:../Dave/Generated/FREERTOS/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 1498              	 .loc 1 848 0
 1499 0008 2B4B     	 ldr r3,.L105
 1500 000a 1B68     	 ldr r3,[r3]
 1501 000c DB68     	 ldr r3,[r3,#12]
 1502 000e 1B68     	 ldr r3,[r3]
 1503 0010 7B61     	 str r3,[r7,#20]
 849:../Dave/Generated/FREERTOS/timers.c **** 
 850:../Dave/Generated/FREERTOS/timers.c **** 		/* Remove the timer from the list. */
 851:../Dave/Generated/FREERTOS/timers.c **** 		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 1504              	 .loc 1 851 0
 1505 0012 294B     	 ldr r3,.L105
 1506 0014 1B68     	 ldr r3,[r3]
 1507 0016 DB68     	 ldr r3,[r3,#12]
 1508 0018 DB68     	 ldr r3,[r3,#12]
 1509 001a 3B61     	 str r3,[r7,#16]
 852:../Dave/Generated/FREERTOS/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 1510              	 .loc 1 852 0
 1511 001c 3B69     	 ldr r3,[r7,#16]
 1512 001e 0433     	 adds r3,r3,#4
 1513 0020 1846     	 mov r0,r3
 1514 0022 FFF7FEFF 	 bl uxListRemove
 853:../Dave/Generated/FREERTOS/timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 854:../Dave/Generated/FREERTOS/timers.c **** 
 855:../Dave/Generated/FREERTOS/timers.c **** 		/* Execute its callback, then send a command to restart the timer if
 856:../Dave/Generated/FREERTOS/timers.c **** 		it is an auto-reload timer.  It cannot be restarted here as the lists
 857:../Dave/Generated/FREERTOS/timers.c **** 		have not yet been switched. */
 858:../Dave/Generated/FREERTOS/timers.c **** 		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 1515              	 .loc 1 858 0
 1516 0026 3B69     	 ldr r3,[r7,#16]
 1517 0028 5B6A     	 ldr r3,[r3,#36]
 1518 002a 3869     	 ldr r0,[r7,#16]
 1519 002c 9847     	 blx r3
 859:../Dave/Generated/FREERTOS/timers.c **** 
 860:../Dave/Generated/FREERTOS/timers.c **** 		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 1520              	 .loc 1 860 0
 1521 002e 3B69     	 ldr r3,[r7,#16]
 1522 0030 DB69     	 ldr r3,[r3,#28]
 1523 0032 012B     	 cmp r3,#1
 1524 0034 2DD1     	 bne .L101
 861:../Dave/Generated/FREERTOS/timers.c **** 		{
 862:../Dave/Generated/FREERTOS/timers.c **** 			/* Calculate the reload value, and if the reload value results in
 863:../Dave/Generated/FREERTOS/timers.c **** 			the timer going into the same timer list then it has already expired
 864:../Dave/Generated/FREERTOS/timers.c **** 			and the timer should be re-inserted into the current list so it is
 865:../Dave/Generated/FREERTOS/timers.c **** 			processed again within this loop.  Otherwise a command should be sent
 866:../Dave/Generated/FREERTOS/timers.c **** 			to restart the timer to ensure it is only inserted into a list after
 867:../Dave/Generated/FREERTOS/timers.c **** 			the lists have been swapped. */
 868:../Dave/Generated/FREERTOS/timers.c **** 			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 1525              	 .loc 1 868 0
 1526 0036 3B69     	 ldr r3,[r7,#16]
 1527 0038 9A69     	 ldr r2,[r3,#24]
 1528 003a 7B69     	 ldr r3,[r7,#20]
 1529 003c 1344     	 add r3,r3,r2
 1530 003e FB60     	 str r3,[r7,#12]
 869:../Dave/Generated/FREERTOS/timers.c **** 			if( xReloadTime > xNextExpireTime )
 1531              	 .loc 1 869 0
 1532 0040 FA68     	 ldr r2,[r7,#12]
 1533 0042 7B69     	 ldr r3,[r7,#20]
 1534 0044 9A42     	 cmp r2,r3
 1535 0046 0ED9     	 bls .L102
 870:../Dave/Generated/FREERTOS/timers.c **** 			{
 871:../Dave/Generated/FREERTOS/timers.c **** 				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 1536              	 .loc 1 871 0
 1537 0048 3B69     	 ldr r3,[r7,#16]
 1538 004a FA68     	 ldr r2,[r7,#12]
 1539 004c 5A60     	 str r2,[r3,#4]
 872:../Dave/Generated/FREERTOS/timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 1540              	 .loc 1 872 0
 1541 004e 3B69     	 ldr r3,[r7,#16]
 1542 0050 3A69     	 ldr r2,[r7,#16]
 1543 0052 1A61     	 str r2,[r3,#16]
 873:../Dave/Generated/FREERTOS/timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 1544              	 .loc 1 873 0
 1545 0054 184B     	 ldr r3,.L105
 1546 0056 1A68     	 ldr r2,[r3]
 1547 0058 3B69     	 ldr r3,[r7,#16]
 1548 005a 0433     	 adds r3,r3,#4
 1549 005c 1046     	 mov r0,r2
 1550 005e 1946     	 mov r1,r3
 1551 0060 FFF7FEFF 	 bl vListInsert
 1552 0064 15E0     	 b .L101
 1553              	.L102:
 874:../Dave/Generated/FREERTOS/timers.c **** 			}
 875:../Dave/Generated/FREERTOS/timers.c **** 			else
 876:../Dave/Generated/FREERTOS/timers.c **** 			{
 877:../Dave/Generated/FREERTOS/timers.c **** 				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tm
 1554              	 .loc 1 877 0
 1555 0066 0023     	 movs r3,#0
 1556 0068 0093     	 str r3,[sp]
 1557 006a 3869     	 ldr r0,[r7,#16]
 1558 006c 0021     	 movs r1,#0
 1559 006e 7A69     	 ldr r2,[r7,#20]
 1560 0070 0023     	 movs r3,#0
 1561 0072 FFF7FEFF 	 bl xTimerGenericCommand
 1562 0076 B860     	 str r0,[r7,#8]
 878:../Dave/Generated/FREERTOS/timers.c **** 				configASSERT( xResult );
 1563              	 .loc 1 878 0
 1564 0078 BB68     	 ldr r3,[r7,#8]
 1565 007a 002B     	 cmp r3,#0
 1566 007c 09D1     	 bne .L101
 1567              	.LBB58:
 1568              	.LBB59:
 1569              	 .loc 2 195 0 discriminator 1
 1570              	
 1571 007e 4FF0FC03 	 mov r3,#252
 1572 0082 83F31188 	 msr basepri,r3
 1573 0086 BFF36F8F 	 isb 
 1574 008a BFF34F8F 	 dsb 
 1575              	
 1576              	
 1577              	 .thumb
 1578 008e 3B60     	 str r3,[r7]
 1579              	.L103:
 1580              	.LBE59:
 1581              	.LBE58:
 1582              	 .loc 1 878 0 discriminator 1
 1583 0090 FEE7     	 b .L103
 1584              	.L101:
 846:../Dave/Generated/FREERTOS/timers.c **** 	{
 1585              	 .loc 1 846 0
 1586 0092 094B     	 ldr r3,.L105
 1587 0094 1B68     	 ldr r3,[r3]
 1588 0096 1B68     	 ldr r3,[r3]
 1589 0098 002B     	 cmp r3,#0
 1590 009a B5D1     	 bne .L104
 879:../Dave/Generated/FREERTOS/timers.c **** 				( void ) xResult;
 880:../Dave/Generated/FREERTOS/timers.c **** 			}
 881:../Dave/Generated/FREERTOS/timers.c **** 		}
 882:../Dave/Generated/FREERTOS/timers.c **** 		else
 883:../Dave/Generated/FREERTOS/timers.c **** 		{
 884:../Dave/Generated/FREERTOS/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 885:../Dave/Generated/FREERTOS/timers.c **** 		}
 886:../Dave/Generated/FREERTOS/timers.c **** 	}
 887:../Dave/Generated/FREERTOS/timers.c **** 
 888:../Dave/Generated/FREERTOS/timers.c **** 	pxTemp = pxCurrentTimerList;
 1591              	 .loc 1 888 0
 1592 009c 064B     	 ldr r3,.L105
 1593 009e 1B68     	 ldr r3,[r3]
 1594 00a0 7B60     	 str r3,[r7,#4]
 889:../Dave/Generated/FREERTOS/timers.c **** 	pxCurrentTimerList = pxOverflowTimerList;
 1595              	 .loc 1 889 0
 1596 00a2 064B     	 ldr r3,.L105+4
 1597 00a4 1B68     	 ldr r3,[r3]
 1598 00a6 044A     	 ldr r2,.L105
 1599 00a8 1360     	 str r3,[r2]
 890:../Dave/Generated/FREERTOS/timers.c **** 	pxOverflowTimerList = pxTemp;
 1600              	 .loc 1 890 0
 1601 00aa 044A     	 ldr r2,.L105+4
 1602 00ac 7B68     	 ldr r3,[r7,#4]
 1603 00ae 1360     	 str r3,[r2]
 891:../Dave/Generated/FREERTOS/timers.c **** }
 1604              	 .loc 1 891 0
 1605 00b0 1837     	 adds r7,r7,#24
 1606              	.LCFI81:
 1607              	 .cfi_def_cfa_offset 8
 1608 00b2 BD46     	 mov sp,r7
 1609              	.LCFI82:
 1610              	 .cfi_def_cfa_register 13
 1611              	 
 1612 00b4 80BD     	 pop {r7,pc}
 1613              	.L106:
 1614 00b6 00BF     	 .align 2
 1615              	.L105:
 1616 00b8 00000000 	 .word pxCurrentTimerList
 1617 00bc 00000000 	 .word pxOverflowTimerList
 1618              	 .cfi_endproc
 1619              	.LFE150:
 1621              	 .section .rodata
 1622              	 .align 2
 1623              	.LC1:
 1624 0008 546D7251 	 .ascii "TmrQ\000"
 1624      00
 1625 000d 000000   	 .section .text.prvCheckForValidListAndQueue,"ax",%progbits
 1626              	 .align 2
 1627              	 .thumb
 1628              	 .thumb_func
 1630              	prvCheckForValidListAndQueue:
 1631              	.LFB151:
 892:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 893:../Dave/Generated/FREERTOS/timers.c **** 
 894:../Dave/Generated/FREERTOS/timers.c **** static void prvCheckForValidListAndQueue( void )
 895:../Dave/Generated/FREERTOS/timers.c **** {
 1632              	 .loc 1 895 0
 1633              	 .cfi_startproc
 1634              	 
 1635              	 
 1636 0000 80B5     	 push {r7,lr}
 1637              	.LCFI83:
 1638              	 .cfi_def_cfa_offset 8
 1639              	 .cfi_offset 7,-8
 1640              	 .cfi_offset 14,-4
 1641 0002 00AF     	 add r7,sp,#0
 1642              	.LCFI84:
 1643              	 .cfi_def_cfa_register 7
 896:../Dave/Generated/FREERTOS/timers.c **** 	/* Check that the list from which active timers are referenced, and the
 897:../Dave/Generated/FREERTOS/timers.c **** 	queue used to communicate with the timer service, have been
 898:../Dave/Generated/FREERTOS/timers.c **** 	initialised. */
 899:../Dave/Generated/FREERTOS/timers.c **** 	taskENTER_CRITICAL();
 1644              	 .loc 1 899 0
 1645 0004 FFF7FEFF 	 bl vPortEnterCritical
 900:../Dave/Generated/FREERTOS/timers.c **** 	{
 901:../Dave/Generated/FREERTOS/timers.c **** 		if( xTimerQueue == NULL )
 1646              	 .loc 1 901 0
 1647 0008 124B     	 ldr r3,.L109
 1648 000a 1B68     	 ldr r3,[r3]
 1649 000c 002B     	 cmp r3,#0
 1650 000e 1DD1     	 bne .L108
 902:../Dave/Generated/FREERTOS/timers.c **** 		{
 903:../Dave/Generated/FREERTOS/timers.c **** 			vListInitialise( &xActiveTimerList1 );
 1651              	 .loc 1 903 0
 1652 0010 1148     	 ldr r0,.L109+4
 1653 0012 FFF7FEFF 	 bl vListInitialise
 904:../Dave/Generated/FREERTOS/timers.c **** 			vListInitialise( &xActiveTimerList2 );
 1654              	 .loc 1 904 0
 1655 0016 1148     	 ldr r0,.L109+8
 1656 0018 FFF7FEFF 	 bl vListInitialise
 905:../Dave/Generated/FREERTOS/timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
 1657              	 .loc 1 905 0
 1658 001c 104B     	 ldr r3,.L109+12
 1659 001e 0E4A     	 ldr r2,.L109+4
 1660 0020 1A60     	 str r2,[r3]
 906:../Dave/Generated/FREERTOS/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 1661              	 .loc 1 906 0
 1662 0022 104B     	 ldr r3,.L109+16
 1663 0024 0D4A     	 ldr r2,.L109+8
 1664 0026 1A60     	 str r2,[r3]
 907:../Dave/Generated/FREERTOS/timers.c **** 
 908:../Dave/Generated/FREERTOS/timers.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 909:../Dave/Generated/FREERTOS/timers.c **** 			{
 910:../Dave/Generated/FREERTOS/timers.c **** 				/* The timer queue is allocated statically in case
 911:../Dave/Generated/FREERTOS/timers.c **** 				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
 912:../Dave/Generated/FREERTOS/timers.c **** 				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent ad
 913:../Dave/Generated/FREERTOS/timers.c **** 				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonT
 914:../Dave/Generated/FREERTOS/timers.c **** 
 915:../Dave/Generated/FREERTOS/timers.c **** 				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) siz
 916:../Dave/Generated/FREERTOS/timers.c **** 			}
 917:../Dave/Generated/FREERTOS/timers.c **** 			#else
 918:../Dave/Generated/FREERTOS/timers.c **** 			{
 919:../Dave/Generated/FREERTOS/timers.c **** 				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage
 1665              	 .loc 1 919 0
 1666 0028 0520     	 movs r0,#5
 1667 002a 1021     	 movs r1,#16
 1668 002c 0022     	 movs r2,#0
 1669 002e FFF7FEFF 	 bl xQueueGenericCreate
 1670 0032 0246     	 mov r2,r0
 1671 0034 074B     	 ldr r3,.L109
 1672 0036 1A60     	 str r2,[r3]
 920:../Dave/Generated/FREERTOS/timers.c **** 			}
 921:../Dave/Generated/FREERTOS/timers.c **** 			#endif
 922:../Dave/Generated/FREERTOS/timers.c **** 
 923:../Dave/Generated/FREERTOS/timers.c **** 			#if ( configQUEUE_REGISTRY_SIZE > 0 )
 924:../Dave/Generated/FREERTOS/timers.c **** 			{
 925:../Dave/Generated/FREERTOS/timers.c **** 				if( xTimerQueue != NULL )
 1673              	 .loc 1 925 0
 1674 0038 064B     	 ldr r3,.L109
 1675 003a 1B68     	 ldr r3,[r3]
 1676 003c 002B     	 cmp r3,#0
 1677 003e 05D0     	 beq .L108
 926:../Dave/Generated/FREERTOS/timers.c **** 				{
 927:../Dave/Generated/FREERTOS/timers.c **** 					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 1678              	 .loc 1 927 0
 1679 0040 044B     	 ldr r3,.L109
 1680 0042 1B68     	 ldr r3,[r3]
 1681 0044 1846     	 mov r0,r3
 1682 0046 0849     	 ldr r1,.L109+20
 1683 0048 FFF7FEFF 	 bl vQueueAddToRegistry
 1684              	.L108:
 928:../Dave/Generated/FREERTOS/timers.c **** 				}
 929:../Dave/Generated/FREERTOS/timers.c **** 				else
 930:../Dave/Generated/FREERTOS/timers.c **** 				{
 931:../Dave/Generated/FREERTOS/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 932:../Dave/Generated/FREERTOS/timers.c **** 				}
 933:../Dave/Generated/FREERTOS/timers.c **** 			}
 934:../Dave/Generated/FREERTOS/timers.c **** 			#endif /* configQUEUE_REGISTRY_SIZE */
 935:../Dave/Generated/FREERTOS/timers.c **** 		}
 936:../Dave/Generated/FREERTOS/timers.c **** 		else
 937:../Dave/Generated/FREERTOS/timers.c **** 		{
 938:../Dave/Generated/FREERTOS/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 939:../Dave/Generated/FREERTOS/timers.c **** 		}
 940:../Dave/Generated/FREERTOS/timers.c **** 	}
 941:../Dave/Generated/FREERTOS/timers.c **** 	taskEXIT_CRITICAL();
 1685              	 .loc 1 941 0
 1686 004c FFF7FEFF 	 bl vPortExitCritical
 942:../Dave/Generated/FREERTOS/timers.c **** }
 1687              	 .loc 1 942 0
 1688 0050 80BD     	 pop {r7,pc}
 1689              	.L110:
 1690 0052 00BF     	 .align 2
 1691              	.L109:
 1692 0054 00000000 	 .word xTimerQueue
 1693 0058 00000000 	 .word xActiveTimerList1
 1694 005c 00000000 	 .word xActiveTimerList2
 1695 0060 00000000 	 .word pxCurrentTimerList
 1696 0064 00000000 	 .word pxOverflowTimerList
 1697 0068 08000000 	 .word .LC1
 1698              	 .cfi_endproc
 1699              	.LFE151:
 1701              	 .section .text.xTimerIsTimerActive,"ax",%progbits
 1702              	 .align 2
 1703              	 .global xTimerIsTimerActive
 1704              	 .thumb
 1705              	 .thumb_func
 1707              	xTimerIsTimerActive:
 1708              	.LFB152:
 943:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 944:../Dave/Generated/FREERTOS/timers.c **** 
 945:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
 946:../Dave/Generated/FREERTOS/timers.c **** {
 1709              	 .loc 1 946 0
 1710              	 .cfi_startproc
 1711              	 
 1712              	 
 1713 0000 80B5     	 push {r7,lr}
 1714              	.LCFI85:
 1715              	 .cfi_def_cfa_offset 8
 1716              	 .cfi_offset 7,-8
 1717              	 .cfi_offset 14,-4
 1718 0002 86B0     	 sub sp,sp,#24
 1719              	.LCFI86:
 1720              	 .cfi_def_cfa_offset 32
 1721 0004 00AF     	 add r7,sp,#0
 1722              	.LCFI87:
 1723              	 .cfi_def_cfa_register 7
 1724 0006 7860     	 str r0,[r7,#4]
 947:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xTimerIsInActiveList;
 948:../Dave/Generated/FREERTOS/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 1725              	 .loc 1 948 0
 1726 0008 7B68     	 ldr r3,[r7,#4]
 1727 000a 7B61     	 str r3,[r7,#20]
 949:../Dave/Generated/FREERTOS/timers.c **** 
 950:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xTimer );
 1728              	 .loc 1 950 0
 1729 000c 7B68     	 ldr r3,[r7,#4]
 1730 000e 002B     	 cmp r3,#0
 1731 0010 09D1     	 bne .L112
 1732              	.LBB60:
 1733              	.LBB61:
 1734              	 .loc 2 195 0 discriminator 1
 1735              	
 1736 0012 4FF0FC03 	 mov r3,#252
 1737 0016 83F31188 	 msr basepri,r3
 1738 001a BFF36F8F 	 isb 
 1739 001e BFF34F8F 	 dsb 
 1740              	
 1741              	
 1742              	 .thumb
 1743 0022 FB60     	 str r3,[r7,#12]
 1744              	.L113:
 1745              	.LBE61:
 1746              	.LBE60:
 1747              	 .loc 1 950 0 discriminator 1
 1748 0024 FEE7     	 b .L113
 1749              	.L112:
 951:../Dave/Generated/FREERTOS/timers.c **** 
 952:../Dave/Generated/FREERTOS/timers.c **** 	/* Is the timer in the list of active timers? */
 953:../Dave/Generated/FREERTOS/timers.c **** 	taskENTER_CRITICAL();
 1750              	 .loc 1 953 0
 1751 0026 FFF7FEFF 	 bl vPortEnterCritical
 954:../Dave/Generated/FREERTOS/timers.c **** 	{
 955:../Dave/Generated/FREERTOS/timers.c **** 		/* Checking to see if it is in the NULL list in effect checks to see if
 956:../Dave/Generated/FREERTOS/timers.c **** 		it is referenced from either the current or the overflow timer lists in
 957:../Dave/Generated/FREERTOS/timers.c **** 		one go, but the logic has to be reversed, hence the '!'. */
 958:../Dave/Generated/FREERTOS/timers.c **** 		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListIte
 1752              	 .loc 1 958 0
 1753 002a 7B69     	 ldr r3,[r7,#20]
 1754 002c 5B69     	 ldr r3,[r3,#20]
 1755 002e 002B     	 cmp r3,#0
 1756 0030 14BF     	 ite ne
 1757 0032 0123     	 movne r3,#1
 1758 0034 0023     	 moveq r3,#0
 1759 0036 DBB2     	 uxtb r3,r3
 1760 0038 3B61     	 str r3,[r7,#16]
 959:../Dave/Generated/FREERTOS/timers.c **** 	}
 960:../Dave/Generated/FREERTOS/timers.c **** 	taskEXIT_CRITICAL();
 1761              	 .loc 1 960 0
 1762 003a FFF7FEFF 	 bl vPortExitCritical
 961:../Dave/Generated/FREERTOS/timers.c **** 
 962:../Dave/Generated/FREERTOS/timers.c **** 	return xTimerIsInActiveList;
 1763              	 .loc 1 962 0
 1764 003e 3B69     	 ldr r3,[r7,#16]
 963:../Dave/Generated/FREERTOS/timers.c **** } /*lint !e818 Can't be pointer to const due to the typedef. */
 1765              	 .loc 1 963 0
 1766 0040 1846     	 mov r0,r3
 1767 0042 1837     	 adds r7,r7,#24
 1768              	.LCFI88:
 1769              	 .cfi_def_cfa_offset 8
 1770 0044 BD46     	 mov sp,r7
 1771              	.LCFI89:
 1772              	 .cfi_def_cfa_register 13
 1773              	 
 1774 0046 80BD     	 pop {r7,pc}
 1775              	 .cfi_endproc
 1776              	.LFE152:
 1778              	 .section .text.pvTimerGetTimerID,"ax",%progbits
 1779              	 .align 2
 1780              	 .global pvTimerGetTimerID
 1781              	 .thumb
 1782              	 .thumb_func
 1784              	pvTimerGetTimerID:
 1785              	.LFB153:
 964:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 965:../Dave/Generated/FREERTOS/timers.c **** 
 966:../Dave/Generated/FREERTOS/timers.c **** void *pvTimerGetTimerID( const TimerHandle_t xTimer )
 967:../Dave/Generated/FREERTOS/timers.c **** {
 1786              	 .loc 1 967 0
 1787              	 .cfi_startproc
 1788              	 
 1789              	 
 1790 0000 80B5     	 push {r7,lr}
 1791              	.LCFI90:
 1792              	 .cfi_def_cfa_offset 8
 1793              	 .cfi_offset 7,-8
 1794              	 .cfi_offset 14,-4
 1795 0002 86B0     	 sub sp,sp,#24
 1796              	.LCFI91:
 1797              	 .cfi_def_cfa_offset 32
 1798 0004 00AF     	 add r7,sp,#0
 1799              	.LCFI92:
 1800              	 .cfi_def_cfa_register 7
 1801 0006 7860     	 str r0,[r7,#4]
 968:../Dave/Generated/FREERTOS/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 1802              	 .loc 1 968 0
 1803 0008 7B68     	 ldr r3,[r7,#4]
 1804 000a 7B61     	 str r3,[r7,#20]
 969:../Dave/Generated/FREERTOS/timers.c **** void *pvReturn;
 970:../Dave/Generated/FREERTOS/timers.c **** 
 971:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xTimer );
 1805              	 .loc 1 971 0
 1806 000c 7B68     	 ldr r3,[r7,#4]
 1807 000e 002B     	 cmp r3,#0
 1808 0010 09D1     	 bne .L116
 1809              	.LBB62:
 1810              	.LBB63:
 1811              	 .loc 2 195 0 discriminator 1
 1812              	
 1813 0012 4FF0FC03 	 mov r3,#252
 1814 0016 83F31188 	 msr basepri,r3
 1815 001a BFF36F8F 	 isb 
 1816 001e BFF34F8F 	 dsb 
 1817              	
 1818              	
 1819              	 .thumb
 1820 0022 FB60     	 str r3,[r7,#12]
 1821              	.L117:
 1822              	.LBE63:
 1823              	.LBE62:
 1824              	 .loc 1 971 0 discriminator 1
 1825 0024 FEE7     	 b .L117
 1826              	.L116:
 972:../Dave/Generated/FREERTOS/timers.c **** 
 973:../Dave/Generated/FREERTOS/timers.c **** 	taskENTER_CRITICAL();
 1827              	 .loc 1 973 0
 1828 0026 FFF7FEFF 	 bl vPortEnterCritical
 974:../Dave/Generated/FREERTOS/timers.c **** 	{
 975:../Dave/Generated/FREERTOS/timers.c **** 		pvReturn = pxTimer->pvTimerID;
 1829              	 .loc 1 975 0
 1830 002a 7B69     	 ldr r3,[r7,#20]
 1831 002c 1B6A     	 ldr r3,[r3,#32]
 1832 002e 3B61     	 str r3,[r7,#16]
 976:../Dave/Generated/FREERTOS/timers.c **** 	}
 977:../Dave/Generated/FREERTOS/timers.c **** 	taskEXIT_CRITICAL();
 1833              	 .loc 1 977 0
 1834 0030 FFF7FEFF 	 bl vPortExitCritical
 978:../Dave/Generated/FREERTOS/timers.c **** 
 979:../Dave/Generated/FREERTOS/timers.c **** 	return pvReturn;
 1835              	 .loc 1 979 0
 1836 0034 3B69     	 ldr r3,[r7,#16]
 980:../Dave/Generated/FREERTOS/timers.c **** }
 1837              	 .loc 1 980 0
 1838 0036 1846     	 mov r0,r3
 1839 0038 1837     	 adds r7,r7,#24
 1840              	.LCFI93:
 1841              	 .cfi_def_cfa_offset 8
 1842 003a BD46     	 mov sp,r7
 1843              	.LCFI94:
 1844              	 .cfi_def_cfa_register 13
 1845              	 
 1846 003c 80BD     	 pop {r7,pc}
 1847              	 .cfi_endproc
 1848              	.LFE153:
 1850 003e 00BF     	 .section .text.vTimerSetTimerID,"ax",%progbits
 1851              	 .align 2
 1852              	 .global vTimerSetTimerID
 1853              	 .thumb
 1854              	 .thumb_func
 1856              	vTimerSetTimerID:
 1857              	.LFB154:
 981:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 982:../Dave/Generated/FREERTOS/timers.c **** 
 983:../Dave/Generated/FREERTOS/timers.c **** void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
 984:../Dave/Generated/FREERTOS/timers.c **** {
 1858              	 .loc 1 984 0
 1859              	 .cfi_startproc
 1860              	 
 1861              	 
 1862 0000 80B5     	 push {r7,lr}
 1863              	.LCFI95:
 1864              	 .cfi_def_cfa_offset 8
 1865              	 .cfi_offset 7,-8
 1866              	 .cfi_offset 14,-4
 1867 0002 84B0     	 sub sp,sp,#16
 1868              	.LCFI96:
 1869              	 .cfi_def_cfa_offset 24
 1870 0004 00AF     	 add r7,sp,#0
 1871              	.LCFI97:
 1872              	 .cfi_def_cfa_register 7
 1873 0006 7860     	 str r0,[r7,#4]
 1874 0008 3960     	 str r1,[r7]
 985:../Dave/Generated/FREERTOS/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 1875              	 .loc 1 985 0
 1876 000a 7B68     	 ldr r3,[r7,#4]
 1877 000c FB60     	 str r3,[r7,#12]
 986:../Dave/Generated/FREERTOS/timers.c **** 
 987:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xTimer );
 1878              	 .loc 1 987 0
 1879 000e 7B68     	 ldr r3,[r7,#4]
 1880 0010 002B     	 cmp r3,#0
 1881 0012 09D1     	 bne .L120
 1882              	.LBB64:
 1883              	.LBB65:
 1884              	 .loc 2 195 0 discriminator 1
 1885              	
 1886 0014 4FF0FC03 	 mov r3,#252
 1887 0018 83F31188 	 msr basepri,r3
 1888 001c BFF36F8F 	 isb 
 1889 0020 BFF34F8F 	 dsb 
 1890              	
 1891              	
 1892              	 .thumb
 1893 0024 BB60     	 str r3,[r7,#8]
 1894              	.L121:
 1895              	.LBE65:
 1896              	.LBE64:
 1897              	 .loc 1 987 0 discriminator 1
 1898 0026 FEE7     	 b .L121
 1899              	.L120:
 988:../Dave/Generated/FREERTOS/timers.c **** 
 989:../Dave/Generated/FREERTOS/timers.c **** 	taskENTER_CRITICAL();
 1900              	 .loc 1 989 0
 1901 0028 FFF7FEFF 	 bl vPortEnterCritical
 990:../Dave/Generated/FREERTOS/timers.c **** 	{
 991:../Dave/Generated/FREERTOS/timers.c **** 		pxTimer->pvTimerID = pvNewID;
 1902              	 .loc 1 991 0
 1903 002c FB68     	 ldr r3,[r7,#12]
 1904 002e 3A68     	 ldr r2,[r7]
 1905 0030 1A62     	 str r2,[r3,#32]
 992:../Dave/Generated/FREERTOS/timers.c **** 	}
 993:../Dave/Generated/FREERTOS/timers.c **** 	taskEXIT_CRITICAL();
 1906              	 .loc 1 993 0
 1907 0032 FFF7FEFF 	 bl vPortExitCritical
 994:../Dave/Generated/FREERTOS/timers.c **** }
 1908              	 .loc 1 994 0
 1909 0036 1037     	 adds r7,r7,#16
 1910              	.LCFI98:
 1911              	 .cfi_def_cfa_offset 8
 1912 0038 BD46     	 mov sp,r7
 1913              	.LCFI99:
 1914              	 .cfi_def_cfa_register 13
 1915              	 
 1916 003a 80BD     	 pop {r7,pc}
 1917              	 .cfi_endproc
 1918              	.LFE154:
 1920              	 .section .text.xTimerPendFunctionCallFromISR,"ax",%progbits
 1921              	 .align 2
 1922              	 .global xTimerPendFunctionCallFromISR
 1923              	 .thumb
 1924              	 .thumb_func
 1926              	xTimerPendFunctionCallFromISR:
 1927              	.LFB155:
 995:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 996:../Dave/Generated/FREERTOS/timers.c **** 
 997:../Dave/Generated/FREERTOS/timers.c **** #if( INCLUDE_xTimerPendFunctionCall == 1 )
 998:../Dave/Generated/FREERTOS/timers.c **** 
 999:../Dave/Generated/FREERTOS/timers.c **** 	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, ui
1000:../Dave/Generated/FREERTOS/timers.c **** 	{
 1928              	 .loc 1 1000 0
 1929              	 .cfi_startproc
 1930              	 
 1931              	 
 1932 0000 80B5     	 push {r7,lr}
 1933              	.LCFI100:
 1934              	 .cfi_def_cfa_offset 8
 1935              	 .cfi_offset 7,-8
 1936              	 .cfi_offset 14,-4
 1937 0002 8AB0     	 sub sp,sp,#40
 1938              	.LCFI101:
 1939              	 .cfi_def_cfa_offset 48
 1940 0004 00AF     	 add r7,sp,#0
 1941              	.LCFI102:
 1942              	 .cfi_def_cfa_register 7
 1943 0006 F860     	 str r0,[r7,#12]
 1944 0008 B960     	 str r1,[r7,#8]
 1945 000a 7A60     	 str r2,[r7,#4]
 1946 000c 3B60     	 str r3,[r7]
1001:../Dave/Generated/FREERTOS/timers.c **** 	DaemonTaskMessage_t xMessage;
1002:../Dave/Generated/FREERTOS/timers.c **** 	BaseType_t xReturn;
1003:../Dave/Generated/FREERTOS/timers.c **** 
1004:../Dave/Generated/FREERTOS/timers.c **** 		/* Complete the message with the function parameters and post it to the
1005:../Dave/Generated/FREERTOS/timers.c **** 		daemon task. */
1006:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 1947              	 .loc 1 1006 0
 1948 000e 6FF00103 	 mvn r3,#1
 1949 0012 7B61     	 str r3,[r7,#20]
1007:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 1950              	 .loc 1 1007 0
 1951 0014 FB68     	 ldr r3,[r7,#12]
 1952 0016 BB61     	 str r3,[r7,#24]
1008:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 1953              	 .loc 1 1008 0
 1954 0018 BB68     	 ldr r3,[r7,#8]
 1955 001a FB61     	 str r3,[r7,#28]
1009:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 1956              	 .loc 1 1009 0
 1957 001c 7B68     	 ldr r3,[r7,#4]
 1958 001e 3B62     	 str r3,[r7,#32]
1010:../Dave/Generated/FREERTOS/timers.c **** 
1011:../Dave/Generated/FREERTOS/timers.c **** 		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 1959              	 .loc 1 1011 0
 1960 0020 074B     	 ldr r3,.L124
 1961 0022 1A68     	 ldr r2,[r3]
 1962 0024 07F11403 	 add r3,r7,#20
 1963 0028 1046     	 mov r0,r2
 1964 002a 1946     	 mov r1,r3
 1965 002c 3A68     	 ldr r2,[r7]
 1966 002e 0023     	 movs r3,#0
 1967 0030 FFF7FEFF 	 bl xQueueGenericSendFromISR
 1968 0034 7862     	 str r0,[r7,#36]
1012:../Dave/Generated/FREERTOS/timers.c **** 
1013:../Dave/Generated/FREERTOS/timers.c **** 		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
1014:../Dave/Generated/FREERTOS/timers.c **** 
1015:../Dave/Generated/FREERTOS/timers.c **** 		return xReturn;
 1969              	 .loc 1 1015 0
 1970 0036 7B6A     	 ldr r3,[r7,#36]
1016:../Dave/Generated/FREERTOS/timers.c **** 	}
 1971              	 .loc 1 1016 0
 1972 0038 1846     	 mov r0,r3
 1973 003a 2837     	 adds r7,r7,#40
 1974              	.LCFI103:
 1975              	 .cfi_def_cfa_offset 8
 1976 003c BD46     	 mov sp,r7
 1977              	.LCFI104:
 1978              	 .cfi_def_cfa_register 13
 1979              	 
 1980 003e 80BD     	 pop {r7,pc}
 1981              	.L125:
 1982              	 .align 2
 1983              	.L124:
 1984 0040 00000000 	 .word xTimerQueue
 1985              	 .cfi_endproc
 1986              	.LFE155:
 1988              	 .section .text.xTimerPendFunctionCall,"ax",%progbits
 1989              	 .align 2
 1990              	 .global xTimerPendFunctionCall
 1991              	 .thumb
 1992              	 .thumb_func
 1994              	xTimerPendFunctionCall:
 1995              	.LFB156:
1017:../Dave/Generated/FREERTOS/timers.c **** 
1018:../Dave/Generated/FREERTOS/timers.c **** #endif /* INCLUDE_xTimerPendFunctionCall */
1019:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
1020:../Dave/Generated/FREERTOS/timers.c **** 
1021:../Dave/Generated/FREERTOS/timers.c **** #if( INCLUDE_xTimerPendFunctionCall == 1 )
1022:../Dave/Generated/FREERTOS/timers.c **** 
1023:../Dave/Generated/FREERTOS/timers.c **** 	BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t 
1024:../Dave/Generated/FREERTOS/timers.c **** 	{
 1996              	 .loc 1 1024 0
 1997              	 .cfi_startproc
 1998              	 
 1999              	 
 2000 0000 80B5     	 push {r7,lr}
 2001              	.LCFI105:
 2002              	 .cfi_def_cfa_offset 8
 2003              	 .cfi_offset 7,-8
 2004              	 .cfi_offset 14,-4
 2005 0002 8AB0     	 sub sp,sp,#40
 2006              	.LCFI106:
 2007              	 .cfi_def_cfa_offset 48
 2008 0004 00AF     	 add r7,sp,#0
 2009              	.LCFI107:
 2010              	 .cfi_def_cfa_register 7
 2011 0006 F860     	 str r0,[r7,#12]
 2012 0008 B960     	 str r1,[r7,#8]
 2013 000a 7A60     	 str r2,[r7,#4]
 2014 000c 3B60     	 str r3,[r7]
1025:../Dave/Generated/FREERTOS/timers.c **** 	DaemonTaskMessage_t xMessage;
1026:../Dave/Generated/FREERTOS/timers.c **** 	BaseType_t xReturn;
1027:../Dave/Generated/FREERTOS/timers.c **** 
1028:../Dave/Generated/FREERTOS/timers.c **** 		/* This function can only be called after a timer has been created or
1029:../Dave/Generated/FREERTOS/timers.c **** 		after the scheduler has been started because, until then, the timer
1030:../Dave/Generated/FREERTOS/timers.c **** 		queue does not exist. */
1031:../Dave/Generated/FREERTOS/timers.c **** 		configASSERT( xTimerQueue );
 2015              	 .loc 1 1031 0
 2016 000e 134B     	 ldr r3,.L130
 2017 0010 1B68     	 ldr r3,[r3]
 2018 0012 002B     	 cmp r3,#0
 2019 0014 09D1     	 bne .L127
 2020              	.LBB66:
 2021              	.LBB67:
 2022              	 .loc 2 195 0 discriminator 1
 2023              	
 2024 0016 4FF0FC03 	 mov r3,#252
 2025 001a 83F31188 	 msr basepri,r3
 2026 001e BFF36F8F 	 isb 
 2027 0022 BFF34F8F 	 dsb 
 2028              	
 2029              	
 2030              	 .thumb
 2031 0026 3B62     	 str r3,[r7,#32]
 2032              	.L128:
 2033              	.LBE67:
 2034              	.LBE66:
 2035              	 .loc 1 1031 0 discriminator 1
 2036 0028 FEE7     	 b .L128
 2037              	.L127:
1032:../Dave/Generated/FREERTOS/timers.c **** 
1033:../Dave/Generated/FREERTOS/timers.c **** 		/* Complete the message with the function parameters and post it to the
1034:../Dave/Generated/FREERTOS/timers.c **** 		daemon task. */
1035:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 2038              	 .loc 1 1035 0
 2039 002a 4FF0FF33 	 mov r3,#-1
 2040 002e 3B61     	 str r3,[r7,#16]
1036:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 2041              	 .loc 1 1036 0
 2042 0030 FB68     	 ldr r3,[r7,#12]
 2043 0032 7B61     	 str r3,[r7,#20]
1037:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 2044              	 .loc 1 1037 0
 2045 0034 BB68     	 ldr r3,[r7,#8]
 2046 0036 BB61     	 str r3,[r7,#24]
1038:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 2047              	 .loc 1 1038 0
 2048 0038 7B68     	 ldr r3,[r7,#4]
 2049 003a FB61     	 str r3,[r7,#28]
1039:../Dave/Generated/FREERTOS/timers.c **** 
1040:../Dave/Generated/FREERTOS/timers.c **** 		xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 2050              	 .loc 1 1040 0
 2051 003c 074B     	 ldr r3,.L130
 2052 003e 1A68     	 ldr r2,[r3]
 2053 0040 07F11003 	 add r3,r7,#16
 2054 0044 1046     	 mov r0,r2
 2055 0046 1946     	 mov r1,r3
 2056 0048 3A68     	 ldr r2,[r7]
 2057 004a 0023     	 movs r3,#0
 2058 004c FFF7FEFF 	 bl xQueueGenericSend
 2059 0050 7862     	 str r0,[r7,#36]
1041:../Dave/Generated/FREERTOS/timers.c **** 
1042:../Dave/Generated/FREERTOS/timers.c **** 		tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
1043:../Dave/Generated/FREERTOS/timers.c **** 
1044:../Dave/Generated/FREERTOS/timers.c **** 		return xReturn;
 2060              	 .loc 1 1044 0
 2061 0052 7B6A     	 ldr r3,[r7,#36]
1045:../Dave/Generated/FREERTOS/timers.c **** 	}
 2062              	 .loc 1 1045 0
 2063 0054 1846     	 mov r0,r3
 2064 0056 2837     	 adds r7,r7,#40
 2065              	.LCFI108:
 2066              	 .cfi_def_cfa_offset 8
 2067 0058 BD46     	 mov sp,r7
 2068              	.LCFI109:
 2069              	 .cfi_def_cfa_register 13
 2070              	 
 2071 005a 80BD     	 pop {r7,pc}
 2072              	.L131:
 2073              	 .align 2
 2074              	.L130:
 2075 005c 00000000 	 .word xTimerQueue
 2076              	 .cfi_endproc
 2077              	.LFE156:
 2079              	 .section .text.uxTimerGetTimerNumber,"ax",%progbits
 2080              	 .align 2
 2081              	 .global uxTimerGetTimerNumber
 2082              	 .thumb
 2083              	 .thumb_func
 2085              	uxTimerGetTimerNumber:
 2086              	.LFB157:
1046:../Dave/Generated/FREERTOS/timers.c **** 
1047:../Dave/Generated/FREERTOS/timers.c **** #endif /* INCLUDE_xTimerPendFunctionCall */
1048:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
1049:../Dave/Generated/FREERTOS/timers.c **** 
1050:../Dave/Generated/FREERTOS/timers.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1051:../Dave/Generated/FREERTOS/timers.c **** 
1052:../Dave/Generated/FREERTOS/timers.c **** 	UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
1053:../Dave/Generated/FREERTOS/timers.c **** 	{
 2087              	 .loc 1 1053 0
 2088              	 .cfi_startproc
 2089              	 
 2090              	 
 2091              	 
 2092 0000 80B4     	 push {r7}
 2093              	.LCFI110:
 2094              	 .cfi_def_cfa_offset 4
 2095              	 .cfi_offset 7,-4
 2096 0002 83B0     	 sub sp,sp,#12
 2097              	.LCFI111:
 2098              	 .cfi_def_cfa_offset 16
 2099 0004 00AF     	 add r7,sp,#0
 2100              	.LCFI112:
 2101              	 .cfi_def_cfa_register 7
 2102 0006 7860     	 str r0,[r7,#4]
1054:../Dave/Generated/FREERTOS/timers.c **** 		return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 2103              	 .loc 1 1054 0
 2104 0008 7B68     	 ldr r3,[r7,#4]
 2105 000a 9B6A     	 ldr r3,[r3,#40]
1055:../Dave/Generated/FREERTOS/timers.c **** 	}
 2106              	 .loc 1 1055 0
 2107 000c 1846     	 mov r0,r3
 2108 000e 0C37     	 adds r7,r7,#12
 2109              	.LCFI113:
 2110              	 .cfi_def_cfa_offset 4
 2111 0010 BD46     	 mov sp,r7
 2112              	.LCFI114:
 2113              	 .cfi_def_cfa_register 13
 2114              	 
 2115 0012 5DF8047B 	 ldr r7,[sp],#4
 2116              	.LCFI115:
 2117              	 .cfi_restore 7
 2118              	 .cfi_def_cfa_offset 0
 2119 0016 7047     	 bx lr
 2120              	 .cfi_endproc
 2121              	.LFE157:
 2123              	 .section .text.vTimerSetTimerNumber,"ax",%progbits
 2124              	 .align 2
 2125              	 .global vTimerSetTimerNumber
 2126              	 .thumb
 2127              	 .thumb_func
 2129              	vTimerSetTimerNumber:
 2130              	.LFB158:
1056:../Dave/Generated/FREERTOS/timers.c **** 
1057:../Dave/Generated/FREERTOS/timers.c **** #endif /* configUSE_TRACE_FACILITY */
1058:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
1059:../Dave/Generated/FREERTOS/timers.c **** 
1060:../Dave/Generated/FREERTOS/timers.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1061:../Dave/Generated/FREERTOS/timers.c **** 
1062:../Dave/Generated/FREERTOS/timers.c **** 	void vTimerSetTimerNumber( TimerHandle_t xTimer, UBaseType_t uxTimerNumber )
1063:../Dave/Generated/FREERTOS/timers.c **** 	{
 2131              	 .loc 1 1063 0
 2132              	 .cfi_startproc
 2133              	 
 2134              	 
 2135              	 
 2136 0000 80B4     	 push {r7}
 2137              	.LCFI116:
 2138              	 .cfi_def_cfa_offset 4
 2139              	 .cfi_offset 7,-4
 2140 0002 83B0     	 sub sp,sp,#12
 2141              	.LCFI117:
 2142              	 .cfi_def_cfa_offset 16
 2143 0004 00AF     	 add r7,sp,#0
 2144              	.LCFI118:
 2145              	 .cfi_def_cfa_register 7
 2146 0006 7860     	 str r0,[r7,#4]
 2147 0008 3960     	 str r1,[r7]
1064:../Dave/Generated/FREERTOS/timers.c **** 		( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 2148              	 .loc 1 1064 0
 2149 000a 7B68     	 ldr r3,[r7,#4]
 2150 000c 3A68     	 ldr r2,[r7]
 2151 000e 9A62     	 str r2,[r3,#40]
1065:../Dave/Generated/FREERTOS/timers.c **** 	}
 2152              	 .loc 1 1065 0
 2153 0010 0C37     	 adds r7,r7,#12
 2154              	.LCFI119:
 2155              	 .cfi_def_cfa_offset 4
 2156 0012 BD46     	 mov sp,r7
 2157              	.LCFI120:
 2158              	 .cfi_def_cfa_register 13
 2159              	 
 2160 0014 5DF8047B 	 ldr r7,[sp],#4
 2161              	.LCFI121:
 2162              	 .cfi_restore 7
 2163              	 .cfi_def_cfa_offset 0
 2164 0018 7047     	 bx lr
 2165              	 .cfi_endproc
 2166              	.LFE158:
 2168 001a 00BF     	 .section .bss.xLastTime.7704,"aw",%nobits
 2169              	 .align 2
 2172              	xLastTime.7704:
 2173 0000 00000000 	 .space 4
 2174              	 .text
 2175              	.Letext0:
 2176              	 .file 3 "c:\\kits\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2177              	 .file 4 "c:\\kits\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2178              	 .file 5 "../Dave/Generated/FREERTOS/list.h"
 2179              	 .file 6 "../Dave/Generated/FREERTOS/task.h"
 2180              	 .file 7 "../Dave/Generated/FREERTOS/queue.h"
 2181              	 .file 8 "../Dave/Generated/FREERTOS/timers.h"
 2182              	 .file 9 "C:/Workspaces/DAVE-4.4.2-64Bit/FreeRtos_Led/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 timers.c
    {standard input}:20     .bss.xActiveTimerList1:00000000 $d
    {standard input}:23     .bss.xActiveTimerList1:00000000 xActiveTimerList1
    {standard input}:26     .bss.xActiveTimerList2:00000000 $d
    {standard input}:29     .bss.xActiveTimerList2:00000000 xActiveTimerList2
    {standard input}:32     .bss.pxCurrentTimerList:00000000 $d
    {standard input}:35     .bss.pxCurrentTimerList:00000000 pxCurrentTimerList
    {standard input}:38     .bss.pxOverflowTimerList:00000000 $d
    {standard input}:41     .bss.pxOverflowTimerList:00000000 pxOverflowTimerList
    {standard input}:44     .bss.xTimerQueue:00000000 $d
    {standard input}:47     .bss.xTimerQueue:00000000 xTimerQueue
    {standard input}:50     .bss.xTimerTaskHandle:00000000 $d
    {standard input}:53     .bss.xTimerTaskHandle:00000000 xTimerTaskHandle
    {standard input}:56     .rodata:00000000 $d
    {standard input}:60     .text.xTimerCreateTimerTask:00000000 $t
    {standard input}:65     .text.xTimerCreateTimerTask:00000000 xTimerCreateTimerTask
    {standard input}:1630   .text.prvCheckForValidListAndQueue:00000000 prvCheckForValidListAndQueue
    {standard input}:143    .text.xTimerCreateTimerTask:00000054 $d
    {standard input}:822    .text.prvTimerTask:00000000 prvTimerTask
    {standard input}:151    .text.xTimerCreate:00000000 $t
    {standard input}:156    .text.xTimerCreate:00000000 xTimerCreate
    {standard input}:216    .text.prvInitialiseNewTimer:00000000 prvInitialiseNewTimer
    {standard input}:212    .text.prvInitialiseNewTimer:00000000 $t
    {standard input}:304    .text.xTimerGenericCommand:00000000 $t
    {standard input}:309    .text.xTimerGenericCommand:00000000 xTimerGenericCommand
    {standard input}:428    .text.xTimerGenericCommand:000000a0 $d
    {standard input}:433    .text.xTimerGetTimerDaemonTaskHandle:00000000 $t
    {standard input}:438    .text.xTimerGetTimerDaemonTaskHandle:00000000 xTimerGetTimerDaemonTaskHandle
    {standard input}:498    .text.xTimerGetTimerDaemonTaskHandle:00000034 $d
    {standard input}:503    .text.xTimerGetPeriod:00000000 $t
    {standard input}:508    .text.xTimerGetPeriod:00000000 xTimerGetPeriod
    {standard input}:572    .text.xTimerGetExpiryTime:00000000 $t
    {standard input}:577    .text.xTimerGetExpiryTime:00000000 xTimerGetExpiryTime
    {standard input}:644    .text.pcTimerGetName:00000000 $t
    {standard input}:649    .text.pcTimerGetName:00000000 pcTimerGetName
    {standard input}:713    .text.prvProcessExpiredTimer:00000000 $t
    {standard input}:717    .text.prvProcessExpiredTimer:00000000 prvProcessExpiredTimer
    {standard input}:1122   .text.prvInsertTimerInActiveList:00000000 prvInsertTimerInActiveList
    {standard input}:813    .text.prvProcessExpiredTimer:0000007c $d
    {standard input}:818    .text.prvTimerTask:00000000 $t
    {standard input}:979    .text.prvGetNextExpireTime:00000000 prvGetNextExpireTime
    {standard input}:863    .text.prvProcessTimerOrBlockTask:00000000 prvProcessTimerOrBlockTask
    {standard input}:1231   .text.prvProcessReceivedCommands:00000000 prvProcessReceivedCommands
    {standard input}:859    .text.prvProcessTimerOrBlockTask:00000000 $t
    {standard input}:1054   .text.prvSampleTimeNow:00000000 prvSampleTimeNow
    {standard input}:968    .text.prvProcessTimerOrBlockTask:00000090 $d
    {standard input}:975    .text.prvGetNextExpireTime:00000000 $t
    {standard input}:1045   .text.prvGetNextExpireTime:00000044 $d
    {standard input}:1050   .text.prvSampleTimeNow:00000000 $t
    {standard input}:1478   .text.prvSwitchTimerLists:00000000 prvSwitchTimerLists
    {standard input}:1113   .text.prvSampleTimeNow:0000003c $d
    {standard input}:2172   .bss.xLastTime.7704:00000000 xLastTime.7704
    {standard input}:1118   .text.prvInsertTimerInActiveList:00000000 $t
    {standard input}:1221   .text.prvInsertTimerInActiveList:0000007c $d
    {standard input}:1227   .text.prvProcessReceivedCommands:00000000 $t
    {standard input}:1325   .text.prvProcessReceivedCommands:00000074 $d
    {standard input}:1335   .text.prvProcessReceivedCommands:0000009c $t
    {standard input}:1469   .text.prvProcessReceivedCommands:0000015c $d
    {standard input}:1474   .text.prvSwitchTimerLists:00000000 $t
    {standard input}:1616   .text.prvSwitchTimerLists:000000b8 $d
    {standard input}:1626   .text.prvCheckForValidListAndQueue:00000000 $t
    {standard input}:1692   .text.prvCheckForValidListAndQueue:00000054 $d
    {standard input}:1702   .text.xTimerIsTimerActive:00000000 $t
    {standard input}:1707   .text.xTimerIsTimerActive:00000000 xTimerIsTimerActive
    {standard input}:1779   .text.pvTimerGetTimerID:00000000 $t
    {standard input}:1784   .text.pvTimerGetTimerID:00000000 pvTimerGetTimerID
    {standard input}:1851   .text.vTimerSetTimerID:00000000 $t
    {standard input}:1856   .text.vTimerSetTimerID:00000000 vTimerSetTimerID
    {standard input}:1921   .text.xTimerPendFunctionCallFromISR:00000000 $t
    {standard input}:1926   .text.xTimerPendFunctionCallFromISR:00000000 xTimerPendFunctionCallFromISR
    {standard input}:1984   .text.xTimerPendFunctionCallFromISR:00000040 $d
    {standard input}:1989   .text.xTimerPendFunctionCall:00000000 $t
    {standard input}:1994   .text.xTimerPendFunctionCall:00000000 xTimerPendFunctionCall
    {standard input}:2075   .text.xTimerPendFunctionCall:0000005c $d
    {standard input}:2080   .text.uxTimerGetTimerNumber:00000000 $t
    {standard input}:2085   .text.uxTimerGetTimerNumber:00000000 uxTimerGetTimerNumber
    {standard input}:2124   .text.vTimerSetTimerNumber:00000000 $t
    {standard input}:2129   .text.vTimerSetTimerNumber:00000000 vTimerSetTimerNumber
    {standard input}:2169   .bss.xLastTime.7704:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
xTaskCreate
pvPortMalloc
vListInitialiseItem
xTaskGetSchedulerState
xQueueGenericSend
xQueueGenericSendFromISR
uxListRemove
vTaskSuspendAll
xTaskResumeAll
vQueueWaitForMessageRestricted
xTaskGetTickCount
vListInsert
vPortFree
xQueueReceive
vPortEnterCritical
vListInitialise
xQueueGenericCreate
vQueueAddToRegistry
vPortExitCritical
