   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "tasks.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .global pxCurrentTCB
  20              	 .section .bss.pxCurrentTCB,"aw",%nobits
  21              	 .align 2
  24              	pxCurrentTCB:
  25 0000 00000000 	 .space 4
  26              	 .section .bss.pxReadyTasksLists,"aw",%nobits
  27              	 .align 2
  30              	pxReadyTasksLists:
  31 0000 00000000 	 .space 100
  31      00000000 
  31      00000000 
  31      00000000 
  31      00000000 
  32              	 .section .bss.xDelayedTaskList1,"aw",%nobits
  33              	 .align 2
  36              	xDelayedTaskList1:
  37 0000 00000000 	 .space 20
  37      00000000 
  37      00000000 
  37      00000000 
  37      00000000 
  38              	 .section .bss.xDelayedTaskList2,"aw",%nobits
  39              	 .align 2
  42              	xDelayedTaskList2:
  43 0000 00000000 	 .space 20
  43      00000000 
  43      00000000 
  43      00000000 
  43      00000000 
  44              	 .section .bss.pxDelayedTaskList,"aw",%nobits
  45              	 .align 2
  48              	pxDelayedTaskList:
  49 0000 00000000 	 .space 4
  50              	 .section .bss.pxOverflowDelayedTaskList,"aw",%nobits
  51              	 .align 2
  54              	pxOverflowDelayedTaskList:
  55 0000 00000000 	 .space 4
  56              	 .section .bss.xPendingReadyList,"aw",%nobits
  57              	 .align 2
  60              	xPendingReadyList:
  61 0000 00000000 	 .space 20
  61      00000000 
  61      00000000 
  61      00000000 
  61      00000000 
  62              	 .section .bss.xTasksWaitingTermination,"aw",%nobits
  63              	 .align 2
  66              	xTasksWaitingTermination:
  67 0000 00000000 	 .space 20
  67      00000000 
  67      00000000 
  67      00000000 
  67      00000000 
  68              	 .section .bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  69              	 .align 2
  72              	uxDeletedTasksWaitingCleanUp:
  73 0000 00000000 	 .space 4
  74              	 .section .bss.xSuspendedTaskList,"aw",%nobits
  75              	 .align 2
  78              	xSuspendedTaskList:
  79 0000 00000000 	 .space 20
  79      00000000 
  79      00000000 
  79      00000000 
  79      00000000 
  80              	 .section .bss.uxCurrentNumberOfTasks,"aw",%nobits
  81              	 .align 2
  84              	uxCurrentNumberOfTasks:
  85 0000 00000000 	 .space 4
  86              	 .section .bss.xTickCount,"aw",%nobits
  87              	 .align 2
  90              	xTickCount:
  91 0000 00000000 	 .space 4
  92              	 .section .bss.uxTopReadyPriority,"aw",%nobits
  93              	 .align 2
  96              	uxTopReadyPriority:
  97 0000 00000000 	 .space 4
  98              	 .section .bss.xSchedulerRunning,"aw",%nobits
  99              	 .align 2
 102              	xSchedulerRunning:
 103 0000 00000000 	 .space 4
 104              	 .section .bss.uxPendedTicks,"aw",%nobits
 105              	 .align 2
 108              	uxPendedTicks:
 109 0000 00000000 	 .space 4
 110              	 .section .bss.xYieldPending,"aw",%nobits
 111              	 .align 2
 114              	xYieldPending:
 115 0000 00000000 	 .space 4
 116              	 .section .bss.xNumOfOverflows,"aw",%nobits
 117              	 .align 2
 120              	xNumOfOverflows:
 121 0000 00000000 	 .space 4
 122              	 .section .bss.uxTaskNumber,"aw",%nobits
 123              	 .align 2
 126              	uxTaskNumber:
 127 0000 00000000 	 .space 4
 128              	 .section .bss.xNextTaskUnblockTime,"aw",%nobits
 129              	 .align 2
 132              	xNextTaskUnblockTime:
 133 0000 00000000 	 .space 4
 134              	 .section .bss.xIdleTaskHandle,"aw",%nobits
 135              	 .align 2
 138              	xIdleTaskHandle:
 139 0000 00000000 	 .space 4
 140              	 .section .bss.uxSchedulerSuspended,"aw",%nobits
 141              	 .align 2
 144              	uxSchedulerSuspended:
 145 0000 00000000 	 .space 4
 146              	 .section .text.xTaskCreate,"ax",%progbits
 147              	 .align 2
 148              	 .global xTaskCreate
 149              	 .thumb
 150              	 .thumb_func
 152              	xTaskCreate:
 153              	.LFB135:
 154              	 .file 1 "../Dave/Generated/FREERTOS/tasks.c"
   1:../Dave/Generated/FREERTOS/tasks.c **** /*
   2:../Dave/Generated/FREERTOS/tasks.c ****  * FreeRTOS Kernel V10.0.1
   3:../Dave/Generated/FREERTOS/tasks.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../Dave/Generated/FREERTOS/tasks.c ****  *
   5:../Dave/Generated/FREERTOS/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../Dave/Generated/FREERTOS/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../Dave/Generated/FREERTOS/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:../Dave/Generated/FREERTOS/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../Dave/Generated/FREERTOS/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../Dave/Generated/FREERTOS/tasks.c ****  * subject to the following conditions:
  11:../Dave/Generated/FREERTOS/tasks.c ****  *
  12:../Dave/Generated/FREERTOS/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../Dave/Generated/FREERTOS/tasks.c ****  * copies or substantial portions of the Software.
  14:../Dave/Generated/FREERTOS/tasks.c ****  *
  15:../Dave/Generated/FREERTOS/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../Dave/Generated/FREERTOS/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../Dave/Generated/FREERTOS/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../Dave/Generated/FREERTOS/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../Dave/Generated/FREERTOS/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../Dave/Generated/FREERTOS/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../Dave/Generated/FREERTOS/tasks.c ****  *
  22:../Dave/Generated/FREERTOS/tasks.c ****  * http://www.FreeRTOS.org
  23:../Dave/Generated/FREERTOS/tasks.c ****  * http://aws.amazon.com/freertos
  24:../Dave/Generated/FREERTOS/tasks.c ****  *
  25:../Dave/Generated/FREERTOS/tasks.c ****  * 1 tab == 4 spaces!
  26:../Dave/Generated/FREERTOS/tasks.c ****  */
  27:../Dave/Generated/FREERTOS/tasks.c **** 
  28:../Dave/Generated/FREERTOS/tasks.c **** /* Standard includes. */
  29:../Dave/Generated/FREERTOS/tasks.c **** #include <stdlib.h>
  30:../Dave/Generated/FREERTOS/tasks.c **** #include <string.h>
  31:../Dave/Generated/FREERTOS/tasks.c **** 
  32:../Dave/Generated/FREERTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:../Dave/Generated/FREERTOS/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:../Dave/Generated/FREERTOS/tasks.c **** task.h is included from an application file. */
  35:../Dave/Generated/FREERTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:../Dave/Generated/FREERTOS/tasks.c **** 
  37:../Dave/Generated/FREERTOS/tasks.c **** /* FreeRTOS includes. */
  38:../Dave/Generated/FREERTOS/tasks.c **** #include "FreeRTOS.h"
  39:../Dave/Generated/FREERTOS/tasks.c **** #include "task.h"
  40:../Dave/Generated/FREERTOS/tasks.c **** #include "timers.h"
  41:../Dave/Generated/FREERTOS/tasks.c **** #include "stack_macros.h"
  42:../Dave/Generated/FREERTOS/tasks.c **** 
  43:../Dave/Generated/FREERTOS/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  44:../Dave/Generated/FREERTOS/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  45:../Dave/Generated/FREERTOS/tasks.c **** header files above, but not in this file, in order to generate the correct
  46:../Dave/Generated/FREERTOS/tasks.c **** privileged Vs unprivileged linkage and placement. */
  47:../Dave/Generated/FREERTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  48:../Dave/Generated/FREERTOS/tasks.c **** 
  49:../Dave/Generated/FREERTOS/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:../Dave/Generated/FREERTOS/tasks.c **** functions but without including stdio.h here. */
  51:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:../Dave/Generated/FREERTOS/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:../Dave/Generated/FREERTOS/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:../Dave/Generated/FREERTOS/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:../Dave/Generated/FREERTOS/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:../Dave/Generated/FREERTOS/tasks.c **** 	#include <stdio.h>
  57:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:../Dave/Generated/FREERTOS/tasks.c **** 
  59:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:../Dave/Generated/FREERTOS/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:../Dave/Generated/FREERTOS/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:../Dave/Generated/FREERTOS/tasks.c **** #else
  64:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:../Dave/Generated/FREERTOS/tasks.c **** #endif
  66:../Dave/Generated/FREERTOS/tasks.c **** 
  67:../Dave/Generated/FREERTOS/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:../Dave/Generated/FREERTOS/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:../Dave/Generated/FREERTOS/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:../Dave/Generated/FREERTOS/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:../Dave/Generated/FREERTOS/tasks.c **** 
  72:../Dave/Generated/FREERTOS/tasks.c **** /*
  73:../Dave/Generated/FREERTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:../Dave/Generated/FREERTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:../Dave/Generated/FREERTOS/tasks.c ****  */
  76:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:../Dave/Generated/FREERTOS/tasks.c **** 
  78:../Dave/Generated/FREERTOS/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:../Dave/Generated/FREERTOS/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:../Dave/Generated/FREERTOS/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:../Dave/Generated/FREERTOS/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:../Dave/Generated/FREERTOS/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:../Dave/Generated/FREERTOS/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:../Dave/Generated/FREERTOS/tasks.c **** settings allow a task to be created using either statically or dynamically
  85:../Dave/Generated/FREERTOS/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:../Dave/Generated/FREERTOS/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:../Dave/Generated/FREERTOS/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
  88:../Dave/Generated/FREERTOS/tasks.c **** made to free the RAM that was allocated statically.
  89:../Dave/Generated/FREERTOS/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
  90:../Dave/Generated/FREERTOS/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  91:../Dave/Generated/FREERTOS/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
  92:../Dave/Generated/FREERTOS/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:../Dave/Generated/FREERTOS/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:../Dave/Generated/FREERTOS/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:../Dave/Generated/FREERTOS/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:../Dave/Generated/FREERTOS/tasks.c **** 
 100:../Dave/Generated/FREERTOS/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:../Dave/Generated/FREERTOS/tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:../Dave/Generated/FREERTOS/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:../Dave/Generated/FREERTOS/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:../Dave/Generated/FREERTOS/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:../Dave/Generated/FREERTOS/tasks.c **** #else
 106:../Dave/Generated/FREERTOS/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:../Dave/Generated/FREERTOS/tasks.c **** #endif
 108:../Dave/Generated/FREERTOS/tasks.c **** 
 109:../Dave/Generated/FREERTOS/tasks.c **** /*
 110:../Dave/Generated/FREERTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:../Dave/Generated/FREERTOS/tasks.c ****  */
 112:../Dave/Generated/FREERTOS/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:../Dave/Generated/FREERTOS/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:../Dave/Generated/FREERTOS/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:../Dave/Generated/FREERTOS/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:../Dave/Generated/FREERTOS/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:../Dave/Generated/FREERTOS/tasks.c **** 
 118:../Dave/Generated/FREERTOS/tasks.c **** /*
 119:../Dave/Generated/FREERTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:../Dave/Generated/FREERTOS/tasks.c ****  * global, rather than file scope.
 121:../Dave/Generated/FREERTOS/tasks.c ****  */
 122:../Dave/Generated/FREERTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:../Dave/Generated/FREERTOS/tasks.c **** 	#define static
 124:../Dave/Generated/FREERTOS/tasks.c **** #endif
 125:../Dave/Generated/FREERTOS/tasks.c **** 
 126:../Dave/Generated/FREERTOS/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:../Dave/Generated/FREERTOS/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:../Dave/Generated/FREERTOS/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:../Dave/Generated/FREERTOS/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:../Dave/Generated/FREERTOS/tasks.c **** #endif
 131:../Dave/Generated/FREERTOS/tasks.c **** 
 132:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:../Dave/Generated/FREERTOS/tasks.c **** 
 134:../Dave/Generated/FREERTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:../Dave/Generated/FREERTOS/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:../Dave/Generated/FREERTOS/tasks.c **** 	microcontroller architecture. */
 137:../Dave/Generated/FREERTOS/tasks.c **** 
 138:../Dave/Generated/FREERTOS/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:../Dave/Generated/FREERTOS/tasks.c **** 	state task. */
 140:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:../Dave/Generated/FREERTOS/tasks.c **** 	{																									\
 142:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:../Dave/Generated/FREERTOS/tasks.c **** 		{																								\
 144:../Dave/Generated/FREERTOS/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:../Dave/Generated/FREERTOS/tasks.c **** 		}																								\
 146:../Dave/Generated/FREERTOS/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 147:../Dave/Generated/FREERTOS/tasks.c **** 
 148:../Dave/Generated/FREERTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 149:../Dave/Generated/FREERTOS/tasks.c **** 
 150:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:../Dave/Generated/FREERTOS/tasks.c **** 	{																									\
 152:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:../Dave/Generated/FREERTOS/tasks.c **** 																										\
 154:../Dave/Generated/FREERTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:../Dave/Generated/FREERTOS/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:../Dave/Generated/FREERTOS/tasks.c **** 		{																								\
 157:../Dave/Generated/FREERTOS/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:../Dave/Generated/FREERTOS/tasks.c **** 			--uxTopPriority;																			\
 159:../Dave/Generated/FREERTOS/tasks.c **** 		}																								\
 160:../Dave/Generated/FREERTOS/tasks.c **** 																										\
 161:../Dave/Generated/FREERTOS/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:../Dave/Generated/FREERTOS/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:../Dave/Generated/FREERTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:../Dave/Generated/FREERTOS/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:../Dave/Generated/FREERTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:../Dave/Generated/FREERTOS/tasks.c **** 
 167:../Dave/Generated/FREERTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 168:../Dave/Generated/FREERTOS/tasks.c **** 
 169:../Dave/Generated/FREERTOS/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:../Dave/Generated/FREERTOS/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:../Dave/Generated/FREERTOS/tasks.c **** 	being used. */
 172:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:../Dave/Generated/FREERTOS/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:../Dave/Generated/FREERTOS/tasks.c **** 
 175:../Dave/Generated/FREERTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:../Dave/Generated/FREERTOS/tasks.c **** 
 177:../Dave/Generated/FREERTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:../Dave/Generated/FREERTOS/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:../Dave/Generated/FREERTOS/tasks.c **** 	architecture being used. */
 180:../Dave/Generated/FREERTOS/tasks.c **** 
 181:../Dave/Generated/FREERTOS/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:../Dave/Generated/FREERTOS/tasks.c **** 
 184:../Dave/Generated/FREERTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 185:../Dave/Generated/FREERTOS/tasks.c **** 
 186:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:../Dave/Generated/FREERTOS/tasks.c **** 	{																								\
 188:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:../Dave/Generated/FREERTOS/tasks.c **** 																									\
 190:../Dave/Generated/FREERTOS/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:../Dave/Generated/FREERTOS/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:../Dave/Generated/FREERTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:../Dave/Generated/FREERTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:../Dave/Generated/FREERTOS/tasks.c **** 
 196:../Dave/Generated/FREERTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 197:../Dave/Generated/FREERTOS/tasks.c **** 
 198:../Dave/Generated/FREERTOS/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:../Dave/Generated/FREERTOS/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:../Dave/Generated/FREERTOS/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:../Dave/Generated/FREERTOS/tasks.c **** 	{																									\
 203:../Dave/Generated/FREERTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 204:../Dave/Generated/FREERTOS/tasks.c **** 		{																								\
 205:../Dave/Generated/FREERTOS/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 206:../Dave/Generated/FREERTOS/tasks.c **** 		}																								\
 207:../Dave/Generated/FREERTOS/tasks.c **** 	}
 208:../Dave/Generated/FREERTOS/tasks.c **** 
 209:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:../Dave/Generated/FREERTOS/tasks.c **** 
 211:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 212:../Dave/Generated/FREERTOS/tasks.c **** 
 213:../Dave/Generated/FREERTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:../Dave/Generated/FREERTOS/tasks.c **** count overflows. */
 215:../Dave/Generated/FREERTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:../Dave/Generated/FREERTOS/tasks.c **** {																									\
 217:../Dave/Generated/FREERTOS/tasks.c **** 	List_t *pxTemp;																					\
 218:../Dave/Generated/FREERTOS/tasks.c **** 																									\
 219:../Dave/Generated/FREERTOS/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:../Dave/Generated/FREERTOS/tasks.c **** 																									\
 222:../Dave/Generated/FREERTOS/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:../Dave/Generated/FREERTOS/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:../Dave/Generated/FREERTOS/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:../Dave/Generated/FREERTOS/tasks.c **** 	xNumOfOverflows++;																				\
 226:../Dave/Generated/FREERTOS/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:../Dave/Generated/FREERTOS/tasks.c **** }
 228:../Dave/Generated/FREERTOS/tasks.c **** 
 229:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 230:../Dave/Generated/FREERTOS/tasks.c **** 
 231:../Dave/Generated/FREERTOS/tasks.c **** /*
 232:../Dave/Generated/FREERTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:../Dave/Generated/FREERTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:../Dave/Generated/FREERTOS/tasks.c ****  */
 235:../Dave/Generated/FREERTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:../Dave/Generated/FREERTOS/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:../Dave/Generated/FREERTOS/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:../Dave/Generated/FREERTOS/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:../Dave/Generated/FREERTOS/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 241:../Dave/Generated/FREERTOS/tasks.c **** 
 242:../Dave/Generated/FREERTOS/tasks.c **** /*
 243:../Dave/Generated/FREERTOS/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:../Dave/Generated/FREERTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:../Dave/Generated/FREERTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:../Dave/Generated/FREERTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:../Dave/Generated/FREERTOS/tasks.c ****  */
 248:../Dave/Generated/FREERTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 249:../Dave/Generated/FREERTOS/tasks.c **** 
 250:../Dave/Generated/FREERTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:../Dave/Generated/FREERTOS/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:../Dave/Generated/FREERTOS/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:../Dave/Generated/FREERTOS/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:../Dave/Generated/FREERTOS/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:../Dave/Generated/FREERTOS/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:../Dave/Generated/FREERTOS/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:../Dave/Generated/FREERTOS/tasks.c **** to its original value when it is released. */
 258:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 260:../Dave/Generated/FREERTOS/tasks.c **** #else
 261:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:../Dave/Generated/FREERTOS/tasks.c **** #endif
 263:../Dave/Generated/FREERTOS/tasks.c **** 
 264:../Dave/Generated/FREERTOS/tasks.c **** /*
 265:../Dave/Generated/FREERTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:../Dave/Generated/FREERTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:../Dave/Generated/FREERTOS/tasks.c ****  * (the task's run time environment, including register values)
 268:../Dave/Generated/FREERTOS/tasks.c ****  */
 269:../Dave/Generated/FREERTOS/tasks.c **** typedef struct tskTaskControlBlock
 270:../Dave/Generated/FREERTOS/tasks.c **** {
 271:../Dave/Generated/FREERTOS/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:../Dave/Generated/FREERTOS/tasks.c **** 
 273:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:../Dave/Generated/FREERTOS/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 276:../Dave/Generated/FREERTOS/tasks.c **** 
 277:../Dave/Generated/FREERTOS/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:../Dave/Generated/FREERTOS/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:../Dave/Generated/FREERTOS/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:../Dave/Generated/FREERTOS/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:../Dave/Generated/FREERTOS/tasks.c **** 
 283:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:../Dave/Generated/FREERTOS/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 286:../Dave/Generated/FREERTOS/tasks.c **** 
 287:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:../Dave/Generated/FREERTOS/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 290:../Dave/Generated/FREERTOS/tasks.c **** 
 291:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:../Dave/Generated/FREERTOS/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:../Dave/Generated/FREERTOS/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 295:../Dave/Generated/FREERTOS/tasks.c **** 
 296:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:../Dave/Generated/FREERTOS/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:../Dave/Generated/FREERTOS/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 300:../Dave/Generated/FREERTOS/tasks.c **** 
 301:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:../Dave/Generated/FREERTOS/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 304:../Dave/Generated/FREERTOS/tasks.c **** 
 305:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:../Dave/Generated/FREERTOS/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 308:../Dave/Generated/FREERTOS/tasks.c **** 
 309:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:../Dave/Generated/FREERTOS/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 312:../Dave/Generated/FREERTOS/tasks.c **** 
 313:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:../Dave/Generated/FREERTOS/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:../Dave/Generated/FREERTOS/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:../Dave/Generated/FREERTOS/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 317:../Dave/Generated/FREERTOS/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 318:../Dave/Generated/FREERTOS/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:../Dave/Generated/FREERTOS/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 320:../Dave/Generated/FREERTOS/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:../Dave/Generated/FREERTOS/tasks.c **** 		struct	_reent xNewLib_reent;
 322:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 323:../Dave/Generated/FREERTOS/tasks.c **** 
 324:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:../Dave/Generated/FREERTOS/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:../Dave/Generated/FREERTOS/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 328:../Dave/Generated/FREERTOS/tasks.c **** 
 329:../Dave/Generated/FREERTOS/tasks.c **** 	/* See the comments above the definition of
 330:../Dave/Generated/FREERTOS/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:../Dave/Generated/FREERTOS/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for
 332:../Dave/Generated/FREERTOS/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 334:../Dave/Generated/FREERTOS/tasks.c **** 
 335:../Dave/Generated/FREERTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:../Dave/Generated/FREERTOS/tasks.c **** 		uint8_t ucDelayAborted;
 337:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 338:../Dave/Generated/FREERTOS/tasks.c **** 
 339:../Dave/Generated/FREERTOS/tasks.c **** } tskTCB;
 340:../Dave/Generated/FREERTOS/tasks.c **** 
 341:../Dave/Generated/FREERTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 342:../Dave/Generated/FREERTOS/tasks.c **** below to enable the use of older kernel aware debuggers. */
 343:../Dave/Generated/FREERTOS/tasks.c **** typedef tskTCB TCB_t;
 344:../Dave/Generated/FREERTOS/tasks.c **** 
 345:../Dave/Generated/FREERTOS/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 346:../Dave/Generated/FREERTOS/tasks.c **** which static variables must be declared volatile. */
 347:../Dave/Generated/FREERTOS/tasks.c **** 
 348:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 349:../Dave/Generated/FREERTOS/tasks.c **** 
 350:../Dave/Generated/FREERTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 351:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 352:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 353:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 354:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 355:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 356:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 357:../Dave/Generated/FREERTOS/tasks.c **** 
 358:../Dave/Generated/FREERTOS/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 359:../Dave/Generated/FREERTOS/tasks.c **** 
 360:../Dave/Generated/FREERTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 361:../Dave/Generated/FREERTOS/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 362:../Dave/Generated/FREERTOS/tasks.c **** 
 363:../Dave/Generated/FREERTOS/tasks.c **** #endif
 364:../Dave/Generated/FREERTOS/tasks.c **** 
 365:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 366:../Dave/Generated/FREERTOS/tasks.c **** 
 367:../Dave/Generated/FREERTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 368:../Dave/Generated/FREERTOS/tasks.c **** 
 369:../Dave/Generated/FREERTOS/tasks.c **** #endif
 370:../Dave/Generated/FREERTOS/tasks.c **** 
 371:../Dave/Generated/FREERTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 372:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 373:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 374:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 375:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 376:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 377:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 378:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 379:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 380:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 381:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 382:../Dave/Generated/FREERTOS/tasks.c **** 
 383:../Dave/Generated/FREERTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 384:../Dave/Generated/FREERTOS/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 385:../Dave/Generated/FREERTOS/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 386:../Dave/Generated/FREERTOS/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 387:../Dave/Generated/FREERTOS/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 388:../Dave/Generated/FREERTOS/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 389:../Dave/Generated/FREERTOS/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 390:../Dave/Generated/FREERTOS/tasks.c **** accessed from a critical section. */
 391:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 392:../Dave/Generated/FREERTOS/tasks.c **** 
 393:../Dave/Generated/FREERTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 394:../Dave/Generated/FREERTOS/tasks.c **** 
 395:../Dave/Generated/FREERTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:../Dave/Generated/FREERTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:../Dave/Generated/FREERTOS/tasks.c **** 
 398:../Dave/Generated/FREERTOS/tasks.c **** #endif
 399:../Dave/Generated/FREERTOS/tasks.c **** 
 400:../Dave/Generated/FREERTOS/tasks.c **** /*lint -restore */
 401:../Dave/Generated/FREERTOS/tasks.c **** 
 402:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 403:../Dave/Generated/FREERTOS/tasks.c **** 
 404:../Dave/Generated/FREERTOS/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:../Dave/Generated/FREERTOS/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:../Dave/Generated/FREERTOS/tasks.c **** 
 407:../Dave/Generated/FREERTOS/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:../Dave/Generated/FREERTOS/tasks.c **** 
 409:../Dave/Generated/FREERTOS/tasks.c **** #endif
 410:../Dave/Generated/FREERTOS/tasks.c **** 
 411:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:../Dave/Generated/FREERTOS/tasks.c **** 
 413:../Dave/Generated/FREERTOS/tasks.c **** 	extern void vApplicationTickHook( void );
 414:../Dave/Generated/FREERTOS/tasks.c **** 
 415:../Dave/Generated/FREERTOS/tasks.c **** #endif
 416:../Dave/Generated/FREERTOS/tasks.c **** 
 417:../Dave/Generated/FREERTOS/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:../Dave/Generated/FREERTOS/tasks.c **** 
 419:../Dave/Generated/FREERTOS/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:../Dave/Generated/FREERTOS/tasks.c **** 
 421:../Dave/Generated/FREERTOS/tasks.c **** #endif
 422:../Dave/Generated/FREERTOS/tasks.c **** 
 423:../Dave/Generated/FREERTOS/tasks.c **** /* File private functions. --------------------------------*/
 424:../Dave/Generated/FREERTOS/tasks.c **** 
 425:../Dave/Generated/FREERTOS/tasks.c **** /**
 426:../Dave/Generated/FREERTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:../Dave/Generated/FREERTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:../Dave/Generated/FREERTOS/tasks.c ****  * is in any other state.
 429:../Dave/Generated/FREERTOS/tasks.c ****  */
 430:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:../Dave/Generated/FREERTOS/tasks.c **** 
 432:../Dave/Generated/FREERTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:../Dave/Generated/FREERTOS/tasks.c **** 
 434:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:../Dave/Generated/FREERTOS/tasks.c **** 
 436:../Dave/Generated/FREERTOS/tasks.c **** /*
 437:../Dave/Generated/FREERTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:../Dave/Generated/FREERTOS/tasks.c ****  * automatically upon the creation of the first task.
 439:../Dave/Generated/FREERTOS/tasks.c ****  */
 440:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:../Dave/Generated/FREERTOS/tasks.c **** 
 442:../Dave/Generated/FREERTOS/tasks.c **** /*
 443:../Dave/Generated/FREERTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:../Dave/Generated/FREERTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:../Dave/Generated/FREERTOS/tasks.c ****  * creation of the first user task.
 446:../Dave/Generated/FREERTOS/tasks.c ****  *
 447:../Dave/Generated/FREERTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:../Dave/Generated/FREERTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:../Dave/Generated/FREERTOS/tasks.c ****  *
 450:../Dave/Generated/FREERTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:../Dave/Generated/FREERTOS/tasks.c ****  *
 452:../Dave/Generated/FREERTOS/tasks.c ****  */
 453:../Dave/Generated/FREERTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:../Dave/Generated/FREERTOS/tasks.c **** 
 455:../Dave/Generated/FREERTOS/tasks.c **** /*
 456:../Dave/Generated/FREERTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:../Dave/Generated/FREERTOS/tasks.c ****  * including the stack pointed to by the TCB.
 458:../Dave/Generated/FREERTOS/tasks.c ****  *
 459:../Dave/Generated/FREERTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:../Dave/Generated/FREERTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:../Dave/Generated/FREERTOS/tasks.c ****  */
 462:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:../Dave/Generated/FREERTOS/tasks.c **** 
 464:../Dave/Generated/FREERTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:../Dave/Generated/FREERTOS/tasks.c **** 
 466:../Dave/Generated/FREERTOS/tasks.c **** #endif
 467:../Dave/Generated/FREERTOS/tasks.c **** 
 468:../Dave/Generated/FREERTOS/tasks.c **** /*
 469:../Dave/Generated/FREERTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:../Dave/Generated/FREERTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:../Dave/Generated/FREERTOS/tasks.c ****  * and its TCB deleted.
 472:../Dave/Generated/FREERTOS/tasks.c ****  */
 473:../Dave/Generated/FREERTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:../Dave/Generated/FREERTOS/tasks.c **** 
 475:../Dave/Generated/FREERTOS/tasks.c **** /*
 476:../Dave/Generated/FREERTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:../Dave/Generated/FREERTOS/tasks.c ****  * either the current or the overflow delayed task list.
 478:../Dave/Generated/FREERTOS/tasks.c ****  */
 479:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:../Dave/Generated/FREERTOS/tasks.c **** 
 481:../Dave/Generated/FREERTOS/tasks.c **** /*
 482:../Dave/Generated/FREERTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:../Dave/Generated/FREERTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:../Dave/Generated/FREERTOS/tasks.c ****  * a suspended list, etc.).
 485:../Dave/Generated/FREERTOS/tasks.c ****  *
 486:../Dave/Generated/FREERTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:../Dave/Generated/FREERTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 488:../Dave/Generated/FREERTOS/tasks.c ****  */
 489:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:../Dave/Generated/FREERTOS/tasks.c **** 
 491:../Dave/Generated/FREERTOS/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:../Dave/Generated/FREERTOS/tasks.c **** 
 493:../Dave/Generated/FREERTOS/tasks.c **** #endif
 494:../Dave/Generated/FREERTOS/tasks.c **** 
 495:../Dave/Generated/FREERTOS/tasks.c **** /*
 496:../Dave/Generated/FREERTOS/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:../Dave/Generated/FREERTOS/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:../Dave/Generated/FREERTOS/tasks.c ****  */
 499:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:../Dave/Generated/FREERTOS/tasks.c **** 
 501:../Dave/Generated/FREERTOS/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:../Dave/Generated/FREERTOS/tasks.c **** 
 503:../Dave/Generated/FREERTOS/tasks.c **** #endif
 504:../Dave/Generated/FREERTOS/tasks.c **** 
 505:../Dave/Generated/FREERTOS/tasks.c **** /*
 506:../Dave/Generated/FREERTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:../Dave/Generated/FREERTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:../Dave/Generated/FREERTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:../Dave/Generated/FREERTOS/tasks.c ****  */
 510:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 511:../Dave/Generated/FREERTOS/tasks.c **** 
 512:../Dave/Generated/FREERTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 513:../Dave/Generated/FREERTOS/tasks.c **** 
 514:../Dave/Generated/FREERTOS/tasks.c **** #endif
 515:../Dave/Generated/FREERTOS/tasks.c **** 
 516:../Dave/Generated/FREERTOS/tasks.c **** /*
 517:../Dave/Generated/FREERTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:../Dave/Generated/FREERTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:../Dave/Generated/FREERTOS/tasks.c ****  *
 520:../Dave/Generated/FREERTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:../Dave/Generated/FREERTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:../Dave/Generated/FREERTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:../Dave/Generated/FREERTOS/tasks.c ****  * set to a value other than 1.
 524:../Dave/Generated/FREERTOS/tasks.c ****  */
 525:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:../Dave/Generated/FREERTOS/tasks.c **** 
 527:../Dave/Generated/FREERTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:../Dave/Generated/FREERTOS/tasks.c **** 
 529:../Dave/Generated/FREERTOS/tasks.c **** #endif
 530:../Dave/Generated/FREERTOS/tasks.c **** 
 531:../Dave/Generated/FREERTOS/tasks.c **** /*
 532:../Dave/Generated/FREERTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:../Dave/Generated/FREERTOS/tasks.c ****  * will exit the Blocked state.
 534:../Dave/Generated/FREERTOS/tasks.c ****  */
 535:../Dave/Generated/FREERTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:../Dave/Generated/FREERTOS/tasks.c **** 
 537:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:../Dave/Generated/FREERTOS/tasks.c **** 
 539:../Dave/Generated/FREERTOS/tasks.c **** 	/*
 540:../Dave/Generated/FREERTOS/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:../Dave/Generated/FREERTOS/tasks.c **** 	 * human readable tables of task information.
 542:../Dave/Generated/FREERTOS/tasks.c **** 	 */
 543:../Dave/Generated/FREERTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:../Dave/Generated/FREERTOS/tasks.c **** 
 545:../Dave/Generated/FREERTOS/tasks.c **** #endif
 546:../Dave/Generated/FREERTOS/tasks.c **** 
 547:../Dave/Generated/FREERTOS/tasks.c **** /*
 548:../Dave/Generated/FREERTOS/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:../Dave/Generated/FREERTOS/tasks.c ****  * dynamically to fill in the structure's members.
 550:../Dave/Generated/FREERTOS/tasks.c ****  */
 551:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:../Dave/Generated/FREERTOS/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:../Dave/Generated/FREERTOS/tasks.c **** 									const uint32_t ulStackDepth,
 554:../Dave/Generated/FREERTOS/tasks.c **** 									void * const pvParameters,
 555:../Dave/Generated/FREERTOS/tasks.c **** 									UBaseType_t uxPriority,
 556:../Dave/Generated/FREERTOS/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:../Dave/Generated/FREERTOS/tasks.c **** 									TCB_t *pxNewTCB,
 558:../Dave/Generated/FREERTOS/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:../Dave/Generated/FREERTOS/tasks.c **** 
 560:../Dave/Generated/FREERTOS/tasks.c **** /*
 561:../Dave/Generated/FREERTOS/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:../Dave/Generated/FREERTOS/tasks.c ****  * under the control of the scheduler.
 563:../Dave/Generated/FREERTOS/tasks.c ****  */
 564:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:../Dave/Generated/FREERTOS/tasks.c **** 
 566:../Dave/Generated/FREERTOS/tasks.c **** /*
 567:../Dave/Generated/FREERTOS/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:../Dave/Generated/FREERTOS/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:../Dave/Generated/FREERTOS/tasks.c ****  * called by the function.
 570:../Dave/Generated/FREERTOS/tasks.c ****  */
 571:../Dave/Generated/FREERTOS/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:../Dave/Generated/FREERTOS/tasks.c **** 
 573:../Dave/Generated/FREERTOS/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:../Dave/Generated/FREERTOS/tasks.c **** 
 575:../Dave/Generated/FREERTOS/tasks.c **** #endif
 576:../Dave/Generated/FREERTOS/tasks.c **** 
 577:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 578:../Dave/Generated/FREERTOS/tasks.c **** 
 579:../Dave/Generated/FREERTOS/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:../Dave/Generated/FREERTOS/tasks.c **** 
 581:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:../Dave/Generated/FREERTOS/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:../Dave/Generated/FREERTOS/tasks.c **** 									const uint32_t ulStackDepth,
 584:../Dave/Generated/FREERTOS/tasks.c **** 									void * const pvParameters,
 585:../Dave/Generated/FREERTOS/tasks.c **** 									UBaseType_t uxPriority,
 586:../Dave/Generated/FREERTOS/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:../Dave/Generated/FREERTOS/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:../Dave/Generated/FREERTOS/tasks.c **** 	{
 589:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNewTCB;
 590:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xReturn;
 591:../Dave/Generated/FREERTOS/tasks.c **** 
 592:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:../Dave/Generated/FREERTOS/tasks.c **** 
 595:../Dave/Generated/FREERTOS/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:../Dave/Generated/FREERTOS/tasks.c **** 		{
 597:../Dave/Generated/FREERTOS/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:../Dave/Generated/FREERTOS/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:../Dave/Generated/FREERTOS/tasks.c **** 			structure. */
 600:../Dave/Generated/FREERTOS/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 601:../Dave/Generated/FREERTOS/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 602:../Dave/Generated/FREERTOS/tasks.c **** 		}
 603:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configASSERT_DEFINED */
 604:../Dave/Generated/FREERTOS/tasks.c **** 
 605:../Dave/Generated/FREERTOS/tasks.c **** 
 606:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 607:../Dave/Generated/FREERTOS/tasks.c **** 		{
 608:../Dave/Generated/FREERTOS/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 609:../Dave/Generated/FREERTOS/tasks.c **** 			function - use them. */
 610:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 611:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 612:../Dave/Generated/FREERTOS/tasks.c **** 
 613:../Dave/Generated/FREERTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 614:../Dave/Generated/FREERTOS/tasks.c **** 			{
 615:../Dave/Generated/FREERTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 616:../Dave/Generated/FREERTOS/tasks.c **** 				task was created statically in case the task is later deleted. */
 617:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 618:../Dave/Generated/FREERTOS/tasks.c **** 			}
 619:../Dave/Generated/FREERTOS/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 620:../Dave/Generated/FREERTOS/tasks.c **** 
 621:../Dave/Generated/FREERTOS/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 622:../Dave/Generated/FREERTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 623:../Dave/Generated/FREERTOS/tasks.c **** 		}
 624:../Dave/Generated/FREERTOS/tasks.c **** 		else
 625:../Dave/Generated/FREERTOS/tasks.c **** 		{
 626:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = NULL;
 627:../Dave/Generated/FREERTOS/tasks.c **** 		}
 628:../Dave/Generated/FREERTOS/tasks.c **** 
 629:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 630:../Dave/Generated/FREERTOS/tasks.c **** 	}
 631:../Dave/Generated/FREERTOS/tasks.c **** 
 632:../Dave/Generated/FREERTOS/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 633:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 634:../Dave/Generated/FREERTOS/tasks.c **** 
 635:../Dave/Generated/FREERTOS/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 636:../Dave/Generated/FREERTOS/tasks.c **** 
 637:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 638:../Dave/Generated/FREERTOS/tasks.c **** 	{
 639:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNewTCB;
 640:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 641:../Dave/Generated/FREERTOS/tasks.c **** 
 642:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 643:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 644:../Dave/Generated/FREERTOS/tasks.c **** 
 645:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 646:../Dave/Generated/FREERTOS/tasks.c **** 		{
 647:../Dave/Generated/FREERTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 648:../Dave/Generated/FREERTOS/tasks.c **** 			on the implementation of the port malloc function and whether or
 649:../Dave/Generated/FREERTOS/tasks.c **** 			not static allocation is being used. */
 650:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 651:../Dave/Generated/FREERTOS/tasks.c **** 
 652:../Dave/Generated/FREERTOS/tasks.c **** 			/* Store the stack location in the TCB. */
 653:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 654:../Dave/Generated/FREERTOS/tasks.c **** 
 655:../Dave/Generated/FREERTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 656:../Dave/Generated/FREERTOS/tasks.c **** 			{
 657:../Dave/Generated/FREERTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 658:../Dave/Generated/FREERTOS/tasks.c **** 				task was created statically in case the task is later deleted. */
 659:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 660:../Dave/Generated/FREERTOS/tasks.c **** 			}
 661:../Dave/Generated/FREERTOS/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 662:../Dave/Generated/FREERTOS/tasks.c **** 
 663:../Dave/Generated/FREERTOS/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 664:../Dave/Generated/FREERTOS/tasks.c **** 									pxTaskDefinition->pcName,
 665:../Dave/Generated/FREERTOS/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 666:../Dave/Generated/FREERTOS/tasks.c **** 									pxTaskDefinition->pvParameters,
 667:../Dave/Generated/FREERTOS/tasks.c **** 									pxTaskDefinition->uxPriority,
 668:../Dave/Generated/FREERTOS/tasks.c **** 									pxCreatedTask, pxNewTCB,
 669:../Dave/Generated/FREERTOS/tasks.c **** 									pxTaskDefinition->xRegions );
 670:../Dave/Generated/FREERTOS/tasks.c **** 
 671:../Dave/Generated/FREERTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 672:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdPASS;
 673:../Dave/Generated/FREERTOS/tasks.c **** 		}
 674:../Dave/Generated/FREERTOS/tasks.c **** 
 675:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 676:../Dave/Generated/FREERTOS/tasks.c **** 	}
 677:../Dave/Generated/FREERTOS/tasks.c **** 
 678:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 679:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 680:../Dave/Generated/FREERTOS/tasks.c **** 
 681:../Dave/Generated/FREERTOS/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 682:../Dave/Generated/FREERTOS/tasks.c **** 
 683:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 684:../Dave/Generated/FREERTOS/tasks.c **** 	{
 685:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNewTCB;
 686:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 687:../Dave/Generated/FREERTOS/tasks.c **** 
 688:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 689:../Dave/Generated/FREERTOS/tasks.c **** 
 690:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 691:../Dave/Generated/FREERTOS/tasks.c **** 		{
 692:../Dave/Generated/FREERTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 693:../Dave/Generated/FREERTOS/tasks.c **** 			on the implementation of the port malloc function and whether or
 694:../Dave/Generated/FREERTOS/tasks.c **** 			not static allocation is being used. */
 695:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 696:../Dave/Generated/FREERTOS/tasks.c **** 
 697:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxNewTCB != NULL )
 698:../Dave/Generated/FREERTOS/tasks.c **** 			{
 699:../Dave/Generated/FREERTOS/tasks.c **** 				/* Store the stack location in the TCB. */
 700:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 701:../Dave/Generated/FREERTOS/tasks.c **** 
 702:../Dave/Generated/FREERTOS/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 703:../Dave/Generated/FREERTOS/tasks.c **** 				{
 704:../Dave/Generated/FREERTOS/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 705:../Dave/Generated/FREERTOS/tasks.c **** 					this task had a statically allocated stack in case it is
 706:../Dave/Generated/FREERTOS/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 707:../Dave/Generated/FREERTOS/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 708:../Dave/Generated/FREERTOS/tasks.c **** 				}
 709:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
 710:../Dave/Generated/FREERTOS/tasks.c **** 
 711:../Dave/Generated/FREERTOS/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 712:../Dave/Generated/FREERTOS/tasks.c **** 										pxTaskDefinition->pcName,
 713:../Dave/Generated/FREERTOS/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 714:../Dave/Generated/FREERTOS/tasks.c **** 										pxTaskDefinition->pvParameters,
 715:../Dave/Generated/FREERTOS/tasks.c **** 										pxTaskDefinition->uxPriority,
 716:../Dave/Generated/FREERTOS/tasks.c **** 										pxCreatedTask, pxNewTCB,
 717:../Dave/Generated/FREERTOS/tasks.c **** 										pxTaskDefinition->xRegions );
 718:../Dave/Generated/FREERTOS/tasks.c **** 
 719:../Dave/Generated/FREERTOS/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 720:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdPASS;
 721:../Dave/Generated/FREERTOS/tasks.c **** 			}
 722:../Dave/Generated/FREERTOS/tasks.c **** 		}
 723:../Dave/Generated/FREERTOS/tasks.c **** 
 724:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 725:../Dave/Generated/FREERTOS/tasks.c **** 	}
 726:../Dave/Generated/FREERTOS/tasks.c **** 
 727:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 728:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 729:../Dave/Generated/FREERTOS/tasks.c **** 
 730:../Dave/Generated/FREERTOS/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 731:../Dave/Generated/FREERTOS/tasks.c **** 
 732:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 733:../Dave/Generated/FREERTOS/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 734:../Dave/Generated/FREERTOS/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 735:../Dave/Generated/FREERTOS/tasks.c **** 							void * const pvParameters,
 736:../Dave/Generated/FREERTOS/tasks.c **** 							UBaseType_t uxPriority,
 737:../Dave/Generated/FREERTOS/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 738:../Dave/Generated/FREERTOS/tasks.c **** 	{
 155              	 .loc 1 738 0
 156              	 .cfi_startproc
 157              	 
 158              	 
 159 0000 80B5     	 push {r7,lr}
 160              	.LCFI0:
 161              	 .cfi_def_cfa_offset 8
 162              	 .cfi_offset 7,-8
 163              	 .cfi_offset 14,-4
 164 0002 8CB0     	 sub sp,sp,#48
 165              	.LCFI1:
 166              	 .cfi_def_cfa_offset 56
 167 0004 04AF     	 add r7,sp,#16
 168              	.LCFI2:
 169              	 .cfi_def_cfa 7,40
 170 0006 F860     	 str r0,[r7,#12]
 171 0008 B960     	 str r1,[r7,#8]
 172 000a 3B60     	 str r3,[r7]
 173 000c 1346     	 mov r3,r2
 174 000e FB80     	 strh r3,[r7,#6]
 175              	.LBB111:
 739:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNewTCB;
 740:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
 741:../Dave/Generated/FREERTOS/tasks.c **** 
 742:../Dave/Generated/FREERTOS/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 743:../Dave/Generated/FREERTOS/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 744:../Dave/Generated/FREERTOS/tasks.c **** 		the TCB then the stack. */
 745:../Dave/Generated/FREERTOS/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 746:../Dave/Generated/FREERTOS/tasks.c **** 		{
 747:../Dave/Generated/FREERTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 748:../Dave/Generated/FREERTOS/tasks.c **** 			the implementation of the port malloc function and whether or not static
 749:../Dave/Generated/FREERTOS/tasks.c **** 			allocation is being used. */
 750:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 751:../Dave/Generated/FREERTOS/tasks.c **** 
 752:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxNewTCB != NULL )
 753:../Dave/Generated/FREERTOS/tasks.c **** 			{
 754:../Dave/Generated/FREERTOS/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 755:../Dave/Generated/FREERTOS/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 756:../Dave/Generated/FREERTOS/tasks.c **** 				be deleted later if required. */
 757:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 758:../Dave/Generated/FREERTOS/tasks.c **** 
 759:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 760:../Dave/Generated/FREERTOS/tasks.c **** 				{
 761:../Dave/Generated/FREERTOS/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 762:../Dave/Generated/FREERTOS/tasks.c **** 					vPortFree( pxNewTCB );
 763:../Dave/Generated/FREERTOS/tasks.c **** 					pxNewTCB = NULL;
 764:../Dave/Generated/FREERTOS/tasks.c **** 				}
 765:../Dave/Generated/FREERTOS/tasks.c **** 			}
 766:../Dave/Generated/FREERTOS/tasks.c **** 		}
 767:../Dave/Generated/FREERTOS/tasks.c **** 		#else /* portSTACK_GROWTH */
 768:../Dave/Generated/FREERTOS/tasks.c **** 		{
 769:../Dave/Generated/FREERTOS/tasks.c **** 		StackType_t *pxStack;
 770:../Dave/Generated/FREERTOS/tasks.c **** 
 771:../Dave/Generated/FREERTOS/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 772:../Dave/Generated/FREERTOS/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 176              	 .loc 1 772 0
 177 0010 FB88     	 ldrh r3,[r7,#6]
 178 0012 9B00     	 lsls r3,r3,#2
 179 0014 1846     	 mov r0,r3
 180 0016 FFF7FEFF 	 bl pvPortMalloc
 181 001a 7861     	 str r0,[r7,#20]
 773:../Dave/Generated/FREERTOS/tasks.c **** 
 774:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxStack != NULL )
 182              	 .loc 1 774 0
 183 001c 7B69     	 ldr r3,[r7,#20]
 184 001e 002B     	 cmp r3,#0
 185 0020 0ED0     	 beq .L2
 775:../Dave/Generated/FREERTOS/tasks.c **** 			{
 776:../Dave/Generated/FREERTOS/tasks.c **** 				/* Allocate space for the TCB. */
 777:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 186              	 .loc 1 777 0
 187 0022 7020     	 movs r0,#112
 188 0024 FFF7FEFF 	 bl pvPortMalloc
 189 0028 F861     	 str r0,[r7,#28]
 778:../Dave/Generated/FREERTOS/tasks.c **** 
 779:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxNewTCB != NULL )
 190              	 .loc 1 779 0
 191 002a FB69     	 ldr r3,[r7,#28]
 192 002c 002B     	 cmp r3,#0
 193 002e 03D0     	 beq .L3
 780:../Dave/Generated/FREERTOS/tasks.c **** 				{
 781:../Dave/Generated/FREERTOS/tasks.c **** 					/* Store the stack location in the TCB. */
 782:../Dave/Generated/FREERTOS/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 194              	 .loc 1 782 0
 195 0030 FB69     	 ldr r3,[r7,#28]
 196 0032 7A69     	 ldr r2,[r7,#20]
 197 0034 1A63     	 str r2,[r3,#48]
 198 0036 05E0     	 b .L5
 199              	.L3:
 783:../Dave/Generated/FREERTOS/tasks.c **** 				}
 784:../Dave/Generated/FREERTOS/tasks.c **** 				else
 785:../Dave/Generated/FREERTOS/tasks.c **** 				{
 786:../Dave/Generated/FREERTOS/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 787:../Dave/Generated/FREERTOS/tasks.c **** 					it again. */
 788:../Dave/Generated/FREERTOS/tasks.c **** 					vPortFree( pxStack );
 200              	 .loc 1 788 0
 201 0038 7869     	 ldr r0,[r7,#20]
 202 003a FFF7FEFF 	 bl vPortFree
 203 003e 01E0     	 b .L5
 204              	.L2:
 789:../Dave/Generated/FREERTOS/tasks.c **** 				}
 790:../Dave/Generated/FREERTOS/tasks.c **** 			}
 791:../Dave/Generated/FREERTOS/tasks.c **** 			else
 792:../Dave/Generated/FREERTOS/tasks.c **** 			{
 793:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB = NULL;
 205              	 .loc 1 793 0
 206 0040 0023     	 movs r3,#0
 207 0042 FB61     	 str r3,[r7,#28]
 208              	.L5:
 209              	.LBE111:
 794:../Dave/Generated/FREERTOS/tasks.c **** 			}
 795:../Dave/Generated/FREERTOS/tasks.c **** 		}
 796:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* portSTACK_GROWTH */
 797:../Dave/Generated/FREERTOS/tasks.c **** 
 798:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxNewTCB != NULL )
 210              	 .loc 1 798 0
 211 0044 FB69     	 ldr r3,[r7,#28]
 212 0046 002B     	 cmp r3,#0
 213 0048 13D0     	 beq .L6
 799:../Dave/Generated/FREERTOS/tasks.c **** 		{
 800:../Dave/Generated/FREERTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 801:../Dave/Generated/FREERTOS/tasks.c **** 			{
 802:../Dave/Generated/FREERTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 803:../Dave/Generated/FREERTOS/tasks.c **** 				task was created dynamically in case it is later deleted. */
 804:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 805:../Dave/Generated/FREERTOS/tasks.c **** 			}
 806:../Dave/Generated/FREERTOS/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 807:../Dave/Generated/FREERTOS/tasks.c **** 
 808:../Dave/Generated/FREERTOS/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 214              	 .loc 1 808 0
 215 004a FA88     	 ldrh r2,[r7,#6]
 216 004c BB6A     	 ldr r3,[r7,#40]
 217 004e 0093     	 str r3,[sp]
 218 0050 FB6A     	 ldr r3,[r7,#44]
 219 0052 0193     	 str r3,[sp,#4]
 220 0054 FB69     	 ldr r3,[r7,#28]
 221 0056 0293     	 str r3,[sp,#8]
 222 0058 0023     	 movs r3,#0
 223 005a 0393     	 str r3,[sp,#12]
 224 005c F868     	 ldr r0,[r7,#12]
 225 005e B968     	 ldr r1,[r7,#8]
 226 0060 3B68     	 ldr r3,[r7]
 227 0062 FFF7FEFF 	 bl prvInitialiseNewTask
 809:../Dave/Generated/FREERTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 228              	 .loc 1 809 0
 229 0066 F869     	 ldr r0,[r7,#28]
 230 0068 FFF7FEFF 	 bl prvAddNewTaskToReadyList
 810:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdPASS;
 231              	 .loc 1 810 0
 232 006c 0123     	 movs r3,#1
 233 006e BB61     	 str r3,[r7,#24]
 234 0070 02E0     	 b .L7
 235              	.L6:
 811:../Dave/Generated/FREERTOS/tasks.c **** 		}
 812:../Dave/Generated/FREERTOS/tasks.c **** 		else
 813:../Dave/Generated/FREERTOS/tasks.c **** 		{
 814:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 236              	 .loc 1 814 0
 237 0072 4FF0FF33 	 mov r3,#-1
 238 0076 BB61     	 str r3,[r7,#24]
 239              	.L7:
 815:../Dave/Generated/FREERTOS/tasks.c **** 		}
 816:../Dave/Generated/FREERTOS/tasks.c **** 
 817:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 240              	 .loc 1 817 0
 241 0078 BB69     	 ldr r3,[r7,#24]
 818:../Dave/Generated/FREERTOS/tasks.c **** 	}
 242              	 .loc 1 818 0
 243 007a 1846     	 mov r0,r3
 244 007c 2037     	 adds r7,r7,#32
 245              	.LCFI3:
 246              	 .cfi_def_cfa_offset 8
 247 007e BD46     	 mov sp,r7
 248              	.LCFI4:
 249              	 .cfi_def_cfa_register 13
 250              	 
 251 0080 80BD     	 pop {r7,pc}
 252              	 .cfi_endproc
 253              	.LFE135:
 255 0082 00BF     	 .section .text.prvInitialiseNewTask,"ax",%progbits
 256              	 .align 2
 257              	 .thumb
 258              	 .thumb_func
 260              	prvInitialiseNewTask:
 261              	.LFB136:
 819:../Dave/Generated/FREERTOS/tasks.c **** 
 820:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 821:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 822:../Dave/Generated/FREERTOS/tasks.c **** 
 823:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 824:../Dave/Generated/FREERTOS/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 825:../Dave/Generated/FREERTOS/tasks.c **** 									const uint32_t ulStackDepth,
 826:../Dave/Generated/FREERTOS/tasks.c **** 									void * const pvParameters,
 827:../Dave/Generated/FREERTOS/tasks.c **** 									UBaseType_t uxPriority,
 828:../Dave/Generated/FREERTOS/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 829:../Dave/Generated/FREERTOS/tasks.c **** 									TCB_t *pxNewTCB,
 830:../Dave/Generated/FREERTOS/tasks.c **** 									const MemoryRegion_t * const xRegions )
 831:../Dave/Generated/FREERTOS/tasks.c **** {
 262              	 .loc 1 831 0
 263              	 .cfi_startproc
 264              	 
 265              	 
 266 0000 80B5     	 push {r7,lr}
 267              	.LCFI5:
 268              	 .cfi_def_cfa_offset 8
 269              	 .cfi_offset 7,-8
 270              	 .cfi_offset 14,-4
 271 0002 88B0     	 sub sp,sp,#32
 272              	.LCFI6:
 273              	 .cfi_def_cfa_offset 40
 274 0004 00AF     	 add r7,sp,#0
 275              	.LCFI7:
 276              	 .cfi_def_cfa_register 7
 277 0006 F860     	 str r0,[r7,#12]
 278 0008 B960     	 str r1,[r7,#8]
 279 000a 7A60     	 str r2,[r7,#4]
 280 000c 3B60     	 str r3,[r7]
 832:../Dave/Generated/FREERTOS/tasks.c **** StackType_t *pxTopOfStack;
 833:../Dave/Generated/FREERTOS/tasks.c **** UBaseType_t x;
 834:../Dave/Generated/FREERTOS/tasks.c **** 
 835:../Dave/Generated/FREERTOS/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 836:../Dave/Generated/FREERTOS/tasks.c **** 		/* Should the task be created in privileged mode? */
 837:../Dave/Generated/FREERTOS/tasks.c **** 		BaseType_t xRunPrivileged;
 838:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 839:../Dave/Generated/FREERTOS/tasks.c **** 		{
 840:../Dave/Generated/FREERTOS/tasks.c **** 			xRunPrivileged = pdTRUE;
 841:../Dave/Generated/FREERTOS/tasks.c **** 		}
 842:../Dave/Generated/FREERTOS/tasks.c **** 		else
 843:../Dave/Generated/FREERTOS/tasks.c **** 		{
 844:../Dave/Generated/FREERTOS/tasks.c **** 			xRunPrivileged = pdFALSE;
 845:../Dave/Generated/FREERTOS/tasks.c **** 		}
 846:../Dave/Generated/FREERTOS/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 847:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 848:../Dave/Generated/FREERTOS/tasks.c **** 
 849:../Dave/Generated/FREERTOS/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 850:../Dave/Generated/FREERTOS/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 851:../Dave/Generated/FREERTOS/tasks.c **** 	{
 852:../Dave/Generated/FREERTOS/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 853:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 281              	 .loc 1 853 0
 282 000e 3B6B     	 ldr r3,[r7,#48]
 283 0010 1A6B     	 ldr r2,[r3,#48]
 284 0012 7B68     	 ldr r3,[r7,#4]
 285 0014 9B00     	 lsls r3,r3,#2
 286 0016 1046     	 mov r0,r2
 287 0018 A521     	 movs r1,#165
 288 001a 1A46     	 mov r2,r3
 289 001c FFF7FEFF 	 bl memset
 854:../Dave/Generated/FREERTOS/tasks.c **** 	}
 855:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 856:../Dave/Generated/FREERTOS/tasks.c **** 
 857:../Dave/Generated/FREERTOS/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 858:../Dave/Generated/FREERTOS/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 859:../Dave/Generated/FREERTOS/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 860:../Dave/Generated/FREERTOS/tasks.c **** 	by the port. */
 861:../Dave/Generated/FREERTOS/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 862:../Dave/Generated/FREERTOS/tasks.c **** 	{
 863:../Dave/Generated/FREERTOS/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 290              	 .loc 1 863 0
 291 0020 3B6B     	 ldr r3,[r7,#48]
 292 0022 1A6B     	 ldr r2,[r3,#48]
 293 0024 7B68     	 ldr r3,[r7,#4]
 294 0026 03F18043 	 add r3,r3,#1073741824
 295 002a 013B     	 subs r3,r3,#1
 296 002c 9B00     	 lsls r3,r3,#2
 297 002e 1344     	 add r3,r3,r2
 298 0030 BB61     	 str r3,[r7,#24]
 864:../Dave/Generated/FREERTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 299              	 .loc 1 864 0
 300 0032 BB69     	 ldr r3,[r7,#24]
 301 0034 23F00703 	 bic r3,r3,#7
 302 0038 BB61     	 str r3,[r7,#24]
 865:../Dave/Generated/FREERTOS/tasks.c **** 
 866:../Dave/Generated/FREERTOS/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 867:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 303              	 .loc 1 867 0
 304 003a BB69     	 ldr r3,[r7,#24]
 305 003c 03F00703 	 and r3,r3,#7
 306 0040 002B     	 cmp r3,#0
 307 0042 09D0     	 beq .L10
 308              	.LBB112:
 309              	.LBB113:
 310              	 .file 2 "../Dave/Generated/FREERTOS/portable/GCC/portmacro.h"
   1:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*
   2:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
   5:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * subject to the following conditions:
  11:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  12:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * copies or substantial portions of the Software.
  14:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  15:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  22:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * http://www.FreeRTOS.org
  23:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * http://aws.amazon.com/freertos
  24:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  25:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * 1 tab == 4 spaces!
  26:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  */
  27:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  28:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  29:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifndef PORTMACRO_H
  30:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define PORTMACRO_H
  31:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  32:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifdef __cplusplus
  33:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** extern "C" {
  34:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
  35:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  36:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------
  37:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * Port specific definitions.
  38:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  39:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * given hardware and compiler.
  41:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  42:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * These settings should not be altered.
  43:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *-----------------------------------------------------------
  44:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  */
  45:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  46:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Type definitions. */
  47:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portCHAR		char
  48:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portFLOAT		float
  49:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portDOUBLE		double
  50:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portLONG		long
  51:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portSHORT		short
  52:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portBASE_TYPE	long
  54:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  55:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** typedef long BaseType_t;
  57:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** typedef unsigned long UBaseType_t;
  58:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  59:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	typedef uint16_t TickType_t;
  61:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #else
  63:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	typedef uint32_t TickType_t;
  64:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  66:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	not need to be guarded with a critical section. */
  68:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
  70:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
  71:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  72:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Architecture specifics. */
  73:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
  77:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  78:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Scheduler utilities. */
  79:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portYIELD() 															\
  80:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** {																				\
  81:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 																				\
  84:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile( "isb" );													\
  88:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
  89:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  90:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
  95:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  96:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Critical section management. */
  97:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** extern void vPortEnterCritical( void );
  98:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** extern void vPortExitCritical( void );
  99:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 106:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 107:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 108:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** (which build with all the ports) will build. */
 111:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 114:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 115:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Tickless idle/low power functionality. */
 116:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
 120:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 121:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 122:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Architecture specific optimisations. */
 123:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
 126:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 127:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 129:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Generic helper function. */
 130:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	{
 132:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	uint8_t ucReturn;
 133:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 134:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		return ucReturn;
 136:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	}
 137:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 138:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Check the configuration. */
 139:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#endif
 142:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 143:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 147:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 149:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 151:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 153:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 154:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 155:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifdef configASSERT
 156:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
 159:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 160:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* portNOP() is not required by this port. */
 161:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portNOP()
 162:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 163:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portINLINE	__inline
 164:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 165:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifndef portFORCE_INLINE
 166:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
 168:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 169:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** {
 171:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** BaseType_t xReturn;
 173:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 174:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 177:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	{
 179:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		xReturn = pdFALSE;
 180:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	}
 181:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	else
 182:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	{
 183:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		xReturn = pdTRUE;
 184:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	}
 185:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 186:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	return xReturn;
 187:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
 188:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 189:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 190:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 191:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** {
 193:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** uint32_t ulNewBASEPRI;
 194:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile
 311              	 .loc 2 195 0 discriminator 1
 312              	
 313 0044 4FF0FC03 	 mov r3,#252
 314 0048 83F31188 	 msr basepri,r3
 315 004c BFF36F8F 	 isb 
 316 0050 BFF34F8F 	 dsb 
 317              	
 318              	
 319              	 .thumb
 320 0054 7B61     	 str r3,[r7,#20]
 321              	.L11:
 322              	.LBE113:
 323              	.LBE112:
 324              	 .loc 1 867 0 discriminator 1
 325 0056 FEE7     	 b .L11
 326              	.L10:
 868:../Dave/Generated/FREERTOS/tasks.c **** 
 869:../Dave/Generated/FREERTOS/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 870:../Dave/Generated/FREERTOS/tasks.c **** 		{
 871:../Dave/Generated/FREERTOS/tasks.c **** 			/* Also record the stack's high address, which may assist
 872:../Dave/Generated/FREERTOS/tasks.c **** 			debugging. */
 873:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 874:../Dave/Generated/FREERTOS/tasks.c **** 		}
 875:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 876:../Dave/Generated/FREERTOS/tasks.c **** 	}
 877:../Dave/Generated/FREERTOS/tasks.c **** 	#else /* portSTACK_GROWTH */
 878:../Dave/Generated/FREERTOS/tasks.c **** 	{
 879:../Dave/Generated/FREERTOS/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 880:../Dave/Generated/FREERTOS/tasks.c **** 
 881:../Dave/Generated/FREERTOS/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 882:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 883:../Dave/Generated/FREERTOS/tasks.c **** 
 884:../Dave/Generated/FREERTOS/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 885:../Dave/Generated/FREERTOS/tasks.c **** 		performed. */
 886:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 887:../Dave/Generated/FREERTOS/tasks.c **** 	}
 888:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* portSTACK_GROWTH */
 889:../Dave/Generated/FREERTOS/tasks.c **** 
 890:../Dave/Generated/FREERTOS/tasks.c **** 	/* Store the task name in the TCB. */
 891:../Dave/Generated/FREERTOS/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 327              	 .loc 1 891 0
 328 0058 0023     	 movs r3,#0
 329 005a FB61     	 str r3,[r7,#28]
 330 005c 13E0     	 b .L12
 331              	.L15:
 892:../Dave/Generated/FREERTOS/tasks.c **** 	{
 893:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 332              	 .loc 1 893 0
 333 005e BA68     	 ldr r2,[r7,#8]
 334 0060 FB69     	 ldr r3,[r7,#28]
 335 0062 1344     	 add r3,r3,r2
 336 0064 1978     	 ldrb r1,[r3]
 337 0066 3A6B     	 ldr r2,[r7,#48]
 338 0068 FB69     	 ldr r3,[r7,#28]
 339 006a 1344     	 add r3,r3,r2
 340 006c 3033     	 adds r3,r3,#48
 341 006e 0A46     	 mov r2,r1
 342 0070 1A71     	 strb r2,[r3,#4]
 894:../Dave/Generated/FREERTOS/tasks.c **** 
 895:../Dave/Generated/FREERTOS/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:../Dave/Generated/FREERTOS/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:../Dave/Generated/FREERTOS/tasks.c **** 		string is not accessible (extremely unlikely). */
 898:../Dave/Generated/FREERTOS/tasks.c **** 		if( pcName[ x ] == 0x00 )
 343              	 .loc 1 898 0
 344 0072 BA68     	 ldr r2,[r7,#8]
 345 0074 FB69     	 ldr r3,[r7,#28]
 346 0076 1344     	 add r3,r3,r2
 347 0078 1B78     	 ldrb r3,[r3]
 348 007a 002B     	 cmp r3,#0
 349 007c 00D1     	 bne .L13
 899:../Dave/Generated/FREERTOS/tasks.c **** 		{
 900:../Dave/Generated/FREERTOS/tasks.c **** 			break;
 350              	 .loc 1 900 0
 351 007e 05E0     	 b .L14
 352              	.L13:
 891:../Dave/Generated/FREERTOS/tasks.c **** 	{
 353              	 .loc 1 891 0 discriminator 2
 354 0080 FB69     	 ldr r3,[r7,#28]
 355 0082 0133     	 adds r3,r3,#1
 356 0084 FB61     	 str r3,[r7,#28]
 357              	.L12:
 891:../Dave/Generated/FREERTOS/tasks.c **** 	{
 358              	 .loc 1 891 0 is_stmt 0 discriminator 1
 359 0086 FB69     	 ldr r3,[r7,#28]
 360 0088 0F2B     	 cmp r3,#15
 361 008a E8D9     	 bls .L15
 362              	.L14:
 901:../Dave/Generated/FREERTOS/tasks.c **** 		}
 902:../Dave/Generated/FREERTOS/tasks.c **** 		else
 903:../Dave/Generated/FREERTOS/tasks.c **** 		{
 904:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 905:../Dave/Generated/FREERTOS/tasks.c **** 		}
 906:../Dave/Generated/FREERTOS/tasks.c **** 	}
 907:../Dave/Generated/FREERTOS/tasks.c **** 
 908:../Dave/Generated/FREERTOS/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 909:../Dave/Generated/FREERTOS/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 910:../Dave/Generated/FREERTOS/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 363              	 .loc 1 910 0 is_stmt 1
 364 008c 3B6B     	 ldr r3,[r7,#48]
 365 008e 0022     	 movs r2,#0
 366 0090 83F84320 	 strb r2,[r3,#67]
 911:../Dave/Generated/FREERTOS/tasks.c **** 
 912:../Dave/Generated/FREERTOS/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 913:../Dave/Generated/FREERTOS/tasks.c **** 	remove the privilege bit if one is present. */
 914:../Dave/Generated/FREERTOS/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 367              	 .loc 1 914 0
 368 0094 BB6A     	 ldr r3,[r7,#40]
 369 0096 042B     	 cmp r3,#4
 370 0098 01D9     	 bls .L16
 915:../Dave/Generated/FREERTOS/tasks.c **** 	{
 916:../Dave/Generated/FREERTOS/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 371              	 .loc 1 916 0
 372 009a 0423     	 movs r3,#4
 373 009c BB62     	 str r3,[r7,#40]
 374              	.L16:
 917:../Dave/Generated/FREERTOS/tasks.c **** 	}
 918:../Dave/Generated/FREERTOS/tasks.c **** 	else
 919:../Dave/Generated/FREERTOS/tasks.c **** 	{
 920:../Dave/Generated/FREERTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 921:../Dave/Generated/FREERTOS/tasks.c **** 	}
 922:../Dave/Generated/FREERTOS/tasks.c **** 
 923:../Dave/Generated/FREERTOS/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 375              	 .loc 1 923 0
 376 009e 3B6B     	 ldr r3,[r7,#48]
 377 00a0 BA6A     	 ldr r2,[r7,#40]
 378 00a2 DA62     	 str r2,[r3,#44]
 924:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 925:../Dave/Generated/FREERTOS/tasks.c **** 	{
 926:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 379              	 .loc 1 926 0
 380 00a4 3B6B     	 ldr r3,[r7,#48]
 381 00a6 BA6A     	 ldr r2,[r7,#40]
 382 00a8 DA64     	 str r2,[r3,#76]
 927:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 383              	 .loc 1 927 0
 384 00aa 3B6B     	 ldr r3,[r7,#48]
 385 00ac 0022     	 movs r2,#0
 386 00ae 1A65     	 str r2,[r3,#80]
 928:../Dave/Generated/FREERTOS/tasks.c **** 	}
 929:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configUSE_MUTEXES */
 930:../Dave/Generated/FREERTOS/tasks.c **** 
 931:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 387              	 .loc 1 931 0
 388 00b0 3B6B     	 ldr r3,[r7,#48]
 389 00b2 0433     	 adds r3,r3,#4
 390 00b4 1846     	 mov r0,r3
 391 00b6 FFF7FEFF 	 bl vListInitialiseItem
 932:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 392              	 .loc 1 932 0
 393 00ba 3B6B     	 ldr r3,[r7,#48]
 394 00bc 1833     	 adds r3,r3,#24
 395 00be 1846     	 mov r0,r3
 396 00c0 FFF7FEFF 	 bl vListInitialiseItem
 933:../Dave/Generated/FREERTOS/tasks.c **** 
 934:../Dave/Generated/FREERTOS/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 935:../Dave/Generated/FREERTOS/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 936:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 397              	 .loc 1 936 0
 398 00c4 3B6B     	 ldr r3,[r7,#48]
 399 00c6 3A6B     	 ldr r2,[r7,#48]
 400 00c8 1A61     	 str r2,[r3,#16]
 937:../Dave/Generated/FREERTOS/tasks.c **** 
 938:../Dave/Generated/FREERTOS/tasks.c **** 	/* Event lists are always in priority order. */
 939:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 401              	 .loc 1 939 0
 402 00ca BB6A     	 ldr r3,[r7,#40]
 403 00cc C3F10502 	 rsb r2,r3,#5
 404 00d0 3B6B     	 ldr r3,[r7,#48]
 405 00d2 9A61     	 str r2,[r3,#24]
 940:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 406              	 .loc 1 940 0
 407 00d4 3B6B     	 ldr r3,[r7,#48]
 408 00d6 3A6B     	 ldr r2,[r7,#48]
 409 00d8 5A62     	 str r2,[r3,#36]
 941:../Dave/Generated/FREERTOS/tasks.c **** 
 942:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 943:../Dave/Generated/FREERTOS/tasks.c **** 	{
 944:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 945:../Dave/Generated/FREERTOS/tasks.c **** 	}
 946:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 947:../Dave/Generated/FREERTOS/tasks.c **** 
 948:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 949:../Dave/Generated/FREERTOS/tasks.c **** 	{
 950:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 951:../Dave/Generated/FREERTOS/tasks.c **** 	}
 952:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 953:../Dave/Generated/FREERTOS/tasks.c **** 
 954:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 955:../Dave/Generated/FREERTOS/tasks.c **** 	{
 956:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 957:../Dave/Generated/FREERTOS/tasks.c **** 	}
 958:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 959:../Dave/Generated/FREERTOS/tasks.c **** 
 960:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 961:../Dave/Generated/FREERTOS/tasks.c **** 	{
 962:../Dave/Generated/FREERTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 963:../Dave/Generated/FREERTOS/tasks.c **** 	}
 964:../Dave/Generated/FREERTOS/tasks.c **** 	#else
 965:../Dave/Generated/FREERTOS/tasks.c **** 	{
 966:../Dave/Generated/FREERTOS/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 967:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) xRegions;
 968:../Dave/Generated/FREERTOS/tasks.c **** 	}
 969:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 970:../Dave/Generated/FREERTOS/tasks.c **** 
 971:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 972:../Dave/Generated/FREERTOS/tasks.c **** 	{
 973:../Dave/Generated/FREERTOS/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 410              	 .loc 1 973 0
 411 00da 0023     	 movs r3,#0
 412 00dc FB61     	 str r3,[r7,#28]
 413 00de 09E0     	 b .L17
 414              	.L18:
 974:../Dave/Generated/FREERTOS/tasks.c **** 		{
 975:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 415              	 .loc 1 975 0 discriminator 3
 416 00e0 3A6B     	 ldr r2,[r7,#48]
 417 00e2 FB69     	 ldr r3,[r7,#28]
 418 00e4 1433     	 adds r3,r3,#20
 419 00e6 9B00     	 lsls r3,r3,#2
 420 00e8 1344     	 add r3,r3,r2
 421 00ea 0022     	 movs r2,#0
 422 00ec 5A60     	 str r2,[r3,#4]
 973:../Dave/Generated/FREERTOS/tasks.c **** 		{
 423              	 .loc 1 973 0 discriminator 3
 424 00ee FB69     	 ldr r3,[r7,#28]
 425 00f0 0133     	 adds r3,r3,#1
 426 00f2 FB61     	 str r3,[r7,#28]
 427              	.L17:
 973:../Dave/Generated/FREERTOS/tasks.c **** 		{
 428              	 .loc 1 973 0 is_stmt 0 discriminator 1
 429 00f4 FB69     	 ldr r3,[r7,#28]
 430 00f6 042B     	 cmp r3,#4
 431 00f8 F2D9     	 bls .L18
 976:../Dave/Generated/FREERTOS/tasks.c **** 		}
 977:../Dave/Generated/FREERTOS/tasks.c **** 	}
 978:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 979:../Dave/Generated/FREERTOS/tasks.c **** 
 980:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 981:../Dave/Generated/FREERTOS/tasks.c **** 	{
 982:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 432              	 .loc 1 982 0 is_stmt 1
 433 00fa 3B6B     	 ldr r3,[r7,#48]
 434 00fc 0022     	 movs r2,#0
 435 00fe 9A66     	 str r2,[r3,#104]
 983:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 436              	 .loc 1 983 0
 437 0100 3B6B     	 ldr r3,[r7,#48]
 438 0102 0022     	 movs r2,#0
 439 0104 83F86C20 	 strb r2,[r3,#108]
 984:../Dave/Generated/FREERTOS/tasks.c **** 	}
 985:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 986:../Dave/Generated/FREERTOS/tasks.c **** 
 987:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 988:../Dave/Generated/FREERTOS/tasks.c **** 	{
 989:../Dave/Generated/FREERTOS/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 990:../Dave/Generated/FREERTOS/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 991:../Dave/Generated/FREERTOS/tasks.c **** 	}
 992:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 993:../Dave/Generated/FREERTOS/tasks.c **** 
 994:../Dave/Generated/FREERTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 995:../Dave/Generated/FREERTOS/tasks.c **** 	{
 996:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 440              	 .loc 1 996 0
 441 0108 3B6B     	 ldr r3,[r7,#48]
 442 010a 0022     	 movs r2,#0
 443 010c 83F86D20 	 strb r2,[r3,#109]
 997:../Dave/Generated/FREERTOS/tasks.c **** 	}
 998:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 999:../Dave/Generated/FREERTOS/tasks.c **** 
1000:../Dave/Generated/FREERTOS/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1001:../Dave/Generated/FREERTOS/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1002:../Dave/Generated/FREERTOS/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1003:../Dave/Generated/FREERTOS/tasks.c **** 	the top of stack variable is updated. */
1004:../Dave/Generated/FREERTOS/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1005:../Dave/Generated/FREERTOS/tasks.c **** 	{
1006:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1007:../Dave/Generated/FREERTOS/tasks.c **** 	}
1008:../Dave/Generated/FREERTOS/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1009:../Dave/Generated/FREERTOS/tasks.c **** 	{
1010:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 444              	 .loc 1 1010 0
 445 0110 B869     	 ldr r0,[r7,#24]
 446 0112 F968     	 ldr r1,[r7,#12]
 447 0114 3A68     	 ldr r2,[r7]
 448 0116 FFF7FEFF 	 bl pxPortInitialiseStack
 449 011a 0246     	 mov r2,r0
 450 011c 3B6B     	 ldr r3,[r7,#48]
 451 011e 1A60     	 str r2,[r3]
1011:../Dave/Generated/FREERTOS/tasks.c **** 	}
1012:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1013:../Dave/Generated/FREERTOS/tasks.c **** 
1014:../Dave/Generated/FREERTOS/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 452              	 .loc 1 1014 0
 453 0120 FB6A     	 ldr r3,[r7,#44]
 454 0122 002B     	 cmp r3,#0
 455 0124 02D0     	 beq .L9
1015:../Dave/Generated/FREERTOS/tasks.c **** 	{
1016:../Dave/Generated/FREERTOS/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1017:../Dave/Generated/FREERTOS/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1018:../Dave/Generated/FREERTOS/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 456              	 .loc 1 1018 0
 457 0126 FB6A     	 ldr r3,[r7,#44]
 458 0128 3A6B     	 ldr r2,[r7,#48]
 459 012a 1A60     	 str r2,[r3]
 460              	.L9:
1019:../Dave/Generated/FREERTOS/tasks.c **** 	}
1020:../Dave/Generated/FREERTOS/tasks.c **** 	else
1021:../Dave/Generated/FREERTOS/tasks.c **** 	{
1022:../Dave/Generated/FREERTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1023:../Dave/Generated/FREERTOS/tasks.c **** 	}
1024:../Dave/Generated/FREERTOS/tasks.c **** }
 461              	 .loc 1 1024 0
 462 012c 2037     	 adds r7,r7,#32
 463              	.LCFI8:
 464              	 .cfi_def_cfa_offset 8
 465 012e BD46     	 mov sp,r7
 466              	.LCFI9:
 467              	 .cfi_def_cfa_register 13
 468              	 
 469 0130 80BD     	 pop {r7,pc}
 470              	 .cfi_endproc
 471              	.LFE136:
 473 0132 00BF     	 .section .text.prvAddNewTaskToReadyList,"ax",%progbits
 474              	 .align 2
 475              	 .thumb
 476              	 .thumb_func
 478              	prvAddNewTaskToReadyList:
 479              	.LFB137:
1025:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1026:../Dave/Generated/FREERTOS/tasks.c **** 
1027:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1028:../Dave/Generated/FREERTOS/tasks.c **** {
 480              	 .loc 1 1028 0
 481              	 .cfi_startproc
 482              	 
 483              	 
 484 0000 80B5     	 push {r7,lr}
 485              	.LCFI10:
 486              	 .cfi_def_cfa_offset 8
 487              	 .cfi_offset 7,-8
 488              	 .cfi_offset 14,-4
 489 0002 82B0     	 sub sp,sp,#8
 490              	.LCFI11:
 491              	 .cfi_def_cfa_offset 16
 492 0004 00AF     	 add r7,sp,#0
 493              	.LCFI12:
 494              	 .cfi_def_cfa_register 7
 495 0006 7860     	 str r0,[r7,#4]
1029:../Dave/Generated/FREERTOS/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1030:../Dave/Generated/FREERTOS/tasks.c **** 	updated. */
1031:../Dave/Generated/FREERTOS/tasks.c **** 	taskENTER_CRITICAL();
 496              	 .loc 1 1031 0
 497 0008 FFF7FEFF 	 bl vPortEnterCritical
1032:../Dave/Generated/FREERTOS/tasks.c **** 	{
1033:../Dave/Generated/FREERTOS/tasks.c **** 		uxCurrentNumberOfTasks++;
 498              	 .loc 1 1033 0
 499 000c 2D4B     	 ldr r3,.L24
 500 000e 1B68     	 ldr r3,[r3]
 501 0010 0133     	 adds r3,r3,#1
 502 0012 2C4A     	 ldr r2,.L24
 503 0014 1360     	 str r3,[r2]
1034:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxCurrentTCB == NULL )
 504              	 .loc 1 1034 0
 505 0016 2C4B     	 ldr r3,.L24+4
 506 0018 1B68     	 ldr r3,[r3]
 507 001a 002B     	 cmp r3,#0
 508 001c 09D1     	 bne .L21
1035:../Dave/Generated/FREERTOS/tasks.c **** 		{
1036:../Dave/Generated/FREERTOS/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1037:../Dave/Generated/FREERTOS/tasks.c **** 			the suspended state - make this the current task. */
1038:../Dave/Generated/FREERTOS/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 509              	 .loc 1 1038 0
 510 001e 2A4A     	 ldr r2,.L24+4
 511 0020 7B68     	 ldr r3,[r7,#4]
 512 0022 1360     	 str r3,[r2]
1039:../Dave/Generated/FREERTOS/tasks.c **** 
1040:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 513              	 .loc 1 1040 0
 514 0024 274B     	 ldr r3,.L24
 515 0026 1B68     	 ldr r3,[r3]
 516 0028 012B     	 cmp r3,#1
 517 002a 10D1     	 bne .L22
1041:../Dave/Generated/FREERTOS/tasks.c **** 			{
1042:../Dave/Generated/FREERTOS/tasks.c **** 				/* This is the first task to be created so do the preliminary
1043:../Dave/Generated/FREERTOS/tasks.c **** 				initialisation required.  We will not recover if this call
1044:../Dave/Generated/FREERTOS/tasks.c **** 				fails, but we will report the failure. */
1045:../Dave/Generated/FREERTOS/tasks.c **** 				prvInitialiseTaskLists();
 518              	 .loc 1 1045 0
 519 002c FFF7FEFF 	 bl prvInitialiseTaskLists
 520 0030 0DE0     	 b .L22
 521              	.L21:
1046:../Dave/Generated/FREERTOS/tasks.c **** 			}
1047:../Dave/Generated/FREERTOS/tasks.c **** 			else
1048:../Dave/Generated/FREERTOS/tasks.c **** 			{
1049:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1050:../Dave/Generated/FREERTOS/tasks.c **** 			}
1051:../Dave/Generated/FREERTOS/tasks.c **** 		}
1052:../Dave/Generated/FREERTOS/tasks.c **** 		else
1053:../Dave/Generated/FREERTOS/tasks.c **** 		{
1054:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the scheduler is not already running, make this task the
1055:../Dave/Generated/FREERTOS/tasks.c **** 			current task if it is the highest priority task to be created
1056:../Dave/Generated/FREERTOS/tasks.c **** 			so far. */
1057:../Dave/Generated/FREERTOS/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 522              	 .loc 1 1057 0
 523 0032 264B     	 ldr r3,.L24+8
 524 0034 1B68     	 ldr r3,[r3]
 525 0036 002B     	 cmp r3,#0
 526 0038 09D1     	 bne .L22
1058:../Dave/Generated/FREERTOS/tasks.c **** 			{
1059:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 527              	 .loc 1 1059 0
 528 003a 234B     	 ldr r3,.L24+4
 529 003c 1B68     	 ldr r3,[r3]
 530 003e DA6A     	 ldr r2,[r3,#44]
 531 0040 7B68     	 ldr r3,[r7,#4]
 532 0042 DB6A     	 ldr r3,[r3,#44]
 533 0044 9A42     	 cmp r2,r3
 534 0046 02D8     	 bhi .L22
1060:../Dave/Generated/FREERTOS/tasks.c **** 				{
1061:../Dave/Generated/FREERTOS/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 535              	 .loc 1 1061 0
 536 0048 1F4A     	 ldr r2,.L24+4
 537 004a 7B68     	 ldr r3,[r7,#4]
 538 004c 1360     	 str r3,[r2]
 539              	.L22:
1062:../Dave/Generated/FREERTOS/tasks.c **** 				}
1063:../Dave/Generated/FREERTOS/tasks.c **** 				else
1064:../Dave/Generated/FREERTOS/tasks.c **** 				{
1065:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1066:../Dave/Generated/FREERTOS/tasks.c **** 				}
1067:../Dave/Generated/FREERTOS/tasks.c **** 			}
1068:../Dave/Generated/FREERTOS/tasks.c **** 			else
1069:../Dave/Generated/FREERTOS/tasks.c **** 			{
1070:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1071:../Dave/Generated/FREERTOS/tasks.c **** 			}
1072:../Dave/Generated/FREERTOS/tasks.c **** 		}
1073:../Dave/Generated/FREERTOS/tasks.c **** 
1074:../Dave/Generated/FREERTOS/tasks.c **** 		uxTaskNumber++;
 540              	 .loc 1 1074 0
 541 004e 204B     	 ldr r3,.L24+12
 542 0050 1B68     	 ldr r3,[r3]
 543 0052 0133     	 adds r3,r3,#1
 544 0054 1E4A     	 ldr r2,.L24+12
 545 0056 1360     	 str r3,[r2]
1075:../Dave/Generated/FREERTOS/tasks.c **** 
1076:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1077:../Dave/Generated/FREERTOS/tasks.c **** 		{
1078:../Dave/Generated/FREERTOS/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1079:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
 546              	 .loc 1 1079 0
 547 0058 1D4B     	 ldr r3,.L24+12
 548 005a 1A68     	 ldr r2,[r3]
 549 005c 7B68     	 ldr r3,[r7,#4]
 550 005e 5A64     	 str r2,[r3,#68]
1080:../Dave/Generated/FREERTOS/tasks.c **** 		}
1081:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1082:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1083:../Dave/Generated/FREERTOS/tasks.c **** 
1084:../Dave/Generated/FREERTOS/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 551              	 .loc 1 1084 0
 552 0060 7B68     	 ldr r3,[r7,#4]
 553 0062 DB6A     	 ldr r3,[r3,#44]
 554 0064 1A46     	 mov r2,r3
 555 0066 0123     	 movs r3,#1
 556 0068 03FA02F2 	 lsl r2,r3,r2
 557 006c 194B     	 ldr r3,.L24+16
 558 006e 1B68     	 ldr r3,[r3]
 559 0070 1343     	 orrs r3,r3,r2
 560 0072 184A     	 ldr r2,.L24+16
 561 0074 1360     	 str r3,[r2]
 562 0076 7B68     	 ldr r3,[r7,#4]
 563 0078 DA6A     	 ldr r2,[r3,#44]
 564 007a 1346     	 mov r3,r2
 565 007c 9B00     	 lsls r3,r3,#2
 566 007e 1344     	 add r3,r3,r2
 567 0080 9B00     	 lsls r3,r3,#2
 568 0082 154A     	 ldr r2,.L24+20
 569 0084 1A44     	 add r2,r2,r3
 570 0086 7B68     	 ldr r3,[r7,#4]
 571 0088 0433     	 adds r3,r3,#4
 572 008a 1046     	 mov r0,r2
 573 008c 1946     	 mov r1,r3
 574 008e FFF7FEFF 	 bl vListInsertEnd
1085:../Dave/Generated/FREERTOS/tasks.c **** 
1086:../Dave/Generated/FREERTOS/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1087:../Dave/Generated/FREERTOS/tasks.c **** 	}
1088:../Dave/Generated/FREERTOS/tasks.c **** 	taskEXIT_CRITICAL();
 575              	 .loc 1 1088 0
 576 0092 FFF7FEFF 	 bl vPortExitCritical
1089:../Dave/Generated/FREERTOS/tasks.c **** 
1090:../Dave/Generated/FREERTOS/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 577              	 .loc 1 1090 0
 578 0096 0D4B     	 ldr r3,.L24+8
 579 0098 1B68     	 ldr r3,[r3]
 580 009a 002B     	 cmp r3,#0
 581 009c 0ED0     	 beq .L20
1091:../Dave/Generated/FREERTOS/tasks.c **** 	{
1092:../Dave/Generated/FREERTOS/tasks.c **** 		/* If the created task is of a higher priority than the current task
1093:../Dave/Generated/FREERTOS/tasks.c **** 		then it should run now. */
1094:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 582              	 .loc 1 1094 0
 583 009e 0A4B     	 ldr r3,.L24+4
 584 00a0 1B68     	 ldr r3,[r3]
 585 00a2 DA6A     	 ldr r2,[r3,#44]
 586 00a4 7B68     	 ldr r3,[r7,#4]
 587 00a6 DB6A     	 ldr r3,[r3,#44]
 588 00a8 9A42     	 cmp r2,r3
 589 00aa 07D2     	 bcs .L20
1095:../Dave/Generated/FREERTOS/tasks.c **** 		{
1096:../Dave/Generated/FREERTOS/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 590              	 .loc 1 1096 0
 591 00ac 0B4B     	 ldr r3,.L24+24
 592 00ae 4FF08052 	 mov r2,#268435456
 593 00b2 1A60     	 str r2,[r3]
 594              	
 595 00b4 BFF34F8F 	 dsb
 596              	
 597              	
 598 00b8 BFF36F8F 	 isb
 599              	
 600              	 .thumb
 601              	.L20:
1097:../Dave/Generated/FREERTOS/tasks.c **** 		}
1098:../Dave/Generated/FREERTOS/tasks.c **** 		else
1099:../Dave/Generated/FREERTOS/tasks.c **** 		{
1100:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1101:../Dave/Generated/FREERTOS/tasks.c **** 		}
1102:../Dave/Generated/FREERTOS/tasks.c **** 	}
1103:../Dave/Generated/FREERTOS/tasks.c **** 	else
1104:../Dave/Generated/FREERTOS/tasks.c **** 	{
1105:../Dave/Generated/FREERTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1106:../Dave/Generated/FREERTOS/tasks.c **** 	}
1107:../Dave/Generated/FREERTOS/tasks.c **** }
 602              	 .loc 1 1107 0
 603 00bc 0837     	 adds r7,r7,#8
 604              	.LCFI13:
 605              	 .cfi_def_cfa_offset 8
 606 00be BD46     	 mov sp,r7
 607              	.LCFI14:
 608              	 .cfi_def_cfa_register 13
 609              	 
 610 00c0 80BD     	 pop {r7,pc}
 611              	.L25:
 612 00c2 00BF     	 .align 2
 613              	.L24:
 614 00c4 00000000 	 .word uxCurrentNumberOfTasks
 615 00c8 00000000 	 .word pxCurrentTCB
 616 00cc 00000000 	 .word xSchedulerRunning
 617 00d0 00000000 	 .word uxTaskNumber
 618 00d4 00000000 	 .word uxTopReadyPriority
 619 00d8 00000000 	 .word pxReadyTasksLists
 620 00dc 04ED00E0 	 .word -536810236
 621              	 .cfi_endproc
 622              	.LFE137:
 624              	 .section .text.vTaskDelete,"ax",%progbits
 625              	 .align 2
 626              	 .global vTaskDelete
 627              	 .thumb
 628              	 .thumb_func
 630              	vTaskDelete:
 631              	.LFB138:
1108:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1109:../Dave/Generated/FREERTOS/tasks.c **** 
1110:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1111:../Dave/Generated/FREERTOS/tasks.c **** 
1112:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1113:../Dave/Generated/FREERTOS/tasks.c **** 	{
 632              	 .loc 1 1113 0
 633              	 .cfi_startproc
 634              	 
 635              	 
 636 0000 80B5     	 push {r7,lr}
 637              	.LCFI15:
 638              	 .cfi_def_cfa_offset 8
 639              	 .cfi_offset 7,-8
 640              	 .cfi_offset 14,-4
 641 0002 84B0     	 sub sp,sp,#16
 642              	.LCFI16:
 643              	 .cfi_def_cfa_offset 24
 644 0004 00AF     	 add r7,sp,#0
 645              	.LCFI17:
 646              	 .cfi_def_cfa_register 7
 647 0006 7860     	 str r0,[r7,#4]
1114:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
1115:../Dave/Generated/FREERTOS/tasks.c **** 
1116:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 648              	 .loc 1 1116 0
 649 0008 FFF7FEFF 	 bl vPortEnterCritical
1117:../Dave/Generated/FREERTOS/tasks.c **** 		{
1118:../Dave/Generated/FREERTOS/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1119:../Dave/Generated/FREERTOS/tasks.c **** 			being deleted. */
1120:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 650              	 .loc 1 1120 0
 651 000c 7B68     	 ldr r3,[r7,#4]
 652 000e 002B     	 cmp r3,#0
 653 0010 02D1     	 bne .L27
 654              	 .loc 1 1120 0 is_stmt 0 discriminator 1
 655 0012 384B     	 ldr r3,.L37
 656 0014 1B68     	 ldr r3,[r3]
 657 0016 00E0     	 b .L28
 658              	.L27:
 659              	 .loc 1 1120 0 discriminator 2
 660 0018 7B68     	 ldr r3,[r7,#4]
 661              	.L28:
 662              	 .loc 1 1120 0 discriminator 4
 663 001a FB60     	 str r3,[r7,#12]
1121:../Dave/Generated/FREERTOS/tasks.c **** 
1122:../Dave/Generated/FREERTOS/tasks.c **** 			/* Remove task from the ready list. */
1123:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 664              	 .loc 1 1123 0 is_stmt 1 discriminator 4
 665 001c FB68     	 ldr r3,[r7,#12]
 666 001e 0433     	 adds r3,r3,#4
 667 0020 1846     	 mov r0,r3
 668 0022 FFF7FEFF 	 bl uxListRemove
 669 0026 0346     	 mov r3,r0
 670 0028 002B     	 cmp r3,#0
 671 002a 15D1     	 bne .L29
1124:../Dave/Generated/FREERTOS/tasks.c **** 			{
1125:../Dave/Generated/FREERTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 672              	 .loc 1 1125 0
 673 002c FB68     	 ldr r3,[r7,#12]
 674 002e DA6A     	 ldr r2,[r3,#44]
 675 0030 3149     	 ldr r1,.L37+4
 676 0032 1346     	 mov r3,r2
 677 0034 9B00     	 lsls r3,r3,#2
 678 0036 1344     	 add r3,r3,r2
 679 0038 9B00     	 lsls r3,r3,#2
 680 003a 0B44     	 add r3,r3,r1
 681 003c 1B68     	 ldr r3,[r3]
 682 003e 002B     	 cmp r3,#0
 683 0040 0AD1     	 bne .L29
 684              	 .loc 1 1125 0 is_stmt 0 discriminator 1
 685 0042 FB68     	 ldr r3,[r7,#12]
 686 0044 DB6A     	 ldr r3,[r3,#44]
 687 0046 1A46     	 mov r2,r3
 688 0048 0123     	 movs r3,#1
 689 004a 9340     	 lsls r3,r3,r2
 690 004c DA43     	 mvns r2,r3
 691 004e 2B4B     	 ldr r3,.L37+8
 692 0050 1B68     	 ldr r3,[r3]
 693 0052 1340     	 ands r3,r3,r2
 694 0054 294A     	 ldr r2,.L37+8
 695 0056 1360     	 str r3,[r2]
 696              	.L29:
1126:../Dave/Generated/FREERTOS/tasks.c **** 			}
1127:../Dave/Generated/FREERTOS/tasks.c **** 			else
1128:../Dave/Generated/FREERTOS/tasks.c **** 			{
1129:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1130:../Dave/Generated/FREERTOS/tasks.c **** 			}
1131:../Dave/Generated/FREERTOS/tasks.c **** 
1132:../Dave/Generated/FREERTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1133:../Dave/Generated/FREERTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 697              	 .loc 1 1133 0 is_stmt 1
 698 0058 FB68     	 ldr r3,[r7,#12]
 699 005a 9B6A     	 ldr r3,[r3,#40]
 700 005c 002B     	 cmp r3,#0
 701 005e 04D0     	 beq .L31
1134:../Dave/Generated/FREERTOS/tasks.c **** 			{
1135:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 702              	 .loc 1 1135 0
 703 0060 FB68     	 ldr r3,[r7,#12]
 704 0062 1833     	 adds r3,r3,#24
 705 0064 1846     	 mov r0,r3
 706 0066 FFF7FEFF 	 bl uxListRemove
 707              	.L31:
1136:../Dave/Generated/FREERTOS/tasks.c **** 			}
1137:../Dave/Generated/FREERTOS/tasks.c **** 			else
1138:../Dave/Generated/FREERTOS/tasks.c **** 			{
1139:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1140:../Dave/Generated/FREERTOS/tasks.c **** 			}
1141:../Dave/Generated/FREERTOS/tasks.c **** 
1142:../Dave/Generated/FREERTOS/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1143:../Dave/Generated/FREERTOS/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1144:../Dave/Generated/FREERTOS/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1145:../Dave/Generated/FREERTOS/tasks.c **** 			not return. */
1146:../Dave/Generated/FREERTOS/tasks.c **** 			uxTaskNumber++;
 708              	 .loc 1 1146 0
 709 006a 254B     	 ldr r3,.L37+12
 710 006c 1B68     	 ldr r3,[r3]
 711 006e 0133     	 adds r3,r3,#1
 712 0070 234A     	 ldr r2,.L37+12
 713 0072 1360     	 str r3,[r2]
1147:../Dave/Generated/FREERTOS/tasks.c **** 
1148:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 714              	 .loc 1 1148 0
 715 0074 1F4B     	 ldr r3,.L37
 716 0076 1B68     	 ldr r3,[r3]
 717 0078 FA68     	 ldr r2,[r7,#12]
 718 007a 9A42     	 cmp r2,r3
 719 007c 0BD1     	 bne .L32
1149:../Dave/Generated/FREERTOS/tasks.c **** 			{
1150:../Dave/Generated/FREERTOS/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1151:../Dave/Generated/FREERTOS/tasks.c **** 				task itself, as a context switch to another task is required.
1152:../Dave/Generated/FREERTOS/tasks.c **** 				Place the task in the termination list.  The idle task will
1153:../Dave/Generated/FREERTOS/tasks.c **** 				check the termination list and free up any memory allocated by
1154:../Dave/Generated/FREERTOS/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1155:../Dave/Generated/FREERTOS/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 720              	 .loc 1 1155 0
 721 007e FB68     	 ldr r3,[r7,#12]
 722 0080 0433     	 adds r3,r3,#4
 723 0082 2048     	 ldr r0,.L37+16
 724 0084 1946     	 mov r1,r3
 725 0086 FFF7FEFF 	 bl vListInsertEnd
1156:../Dave/Generated/FREERTOS/tasks.c **** 
1157:../Dave/Generated/FREERTOS/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1158:../Dave/Generated/FREERTOS/tasks.c **** 				there is a task that has been deleted and that it should therefore
1159:../Dave/Generated/FREERTOS/tasks.c **** 				check the xTasksWaitingTermination list. */
1160:../Dave/Generated/FREERTOS/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 726              	 .loc 1 1160 0
 727 008a 1F4B     	 ldr r3,.L37+20
 728 008c 1B68     	 ldr r3,[r3]
 729 008e 0133     	 adds r3,r3,#1
 730 0090 1D4A     	 ldr r2,.L37+20
 731 0092 1360     	 str r3,[r2]
 732 0094 09E0     	 b .L33
 733              	.L32:
1161:../Dave/Generated/FREERTOS/tasks.c **** 
1162:../Dave/Generated/FREERTOS/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1163:../Dave/Generated/FREERTOS/tasks.c **** 				in which Windows specific clean up operations are performed,
1164:../Dave/Generated/FREERTOS/tasks.c **** 				after which it is not possible to yield away from this task -
1165:../Dave/Generated/FREERTOS/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1166:../Dave/Generated/FREERTOS/tasks.c **** 				required. */
1167:../Dave/Generated/FREERTOS/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1168:../Dave/Generated/FREERTOS/tasks.c **** 			}
1169:../Dave/Generated/FREERTOS/tasks.c **** 			else
1170:../Dave/Generated/FREERTOS/tasks.c **** 			{
1171:../Dave/Generated/FREERTOS/tasks.c **** 				--uxCurrentNumberOfTasks;
 734              	 .loc 1 1171 0
 735 0096 1D4B     	 ldr r3,.L37+24
 736 0098 1B68     	 ldr r3,[r3]
 737 009a 013B     	 subs r3,r3,#1
 738 009c 1B4A     	 ldr r2,.L37+24
 739 009e 1360     	 str r3,[r2]
1172:../Dave/Generated/FREERTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
 740              	 .loc 1 1172 0
 741 00a0 F868     	 ldr r0,[r7,#12]
 742 00a2 FFF7FEFF 	 bl prvDeleteTCB
1173:../Dave/Generated/FREERTOS/tasks.c **** 
1174:../Dave/Generated/FREERTOS/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1175:../Dave/Generated/FREERTOS/tasks.c **** 				the task that has just been deleted. */
1176:../Dave/Generated/FREERTOS/tasks.c **** 				prvResetNextTaskUnblockTime();
 743              	 .loc 1 1176 0
 744 00a6 FFF7FEFF 	 bl prvResetNextTaskUnblockTime
 745              	.L33:
1177:../Dave/Generated/FREERTOS/tasks.c **** 			}
1178:../Dave/Generated/FREERTOS/tasks.c **** 
1179:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_DELETE( pxTCB );
1180:../Dave/Generated/FREERTOS/tasks.c **** 		}
1181:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 746              	 .loc 1 1181 0
 747 00aa FFF7FEFF 	 bl vPortExitCritical
1182:../Dave/Generated/FREERTOS/tasks.c **** 
1183:../Dave/Generated/FREERTOS/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1184:../Dave/Generated/FREERTOS/tasks.c **** 		been deleted. */
1185:../Dave/Generated/FREERTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 748              	 .loc 1 1185 0
 749 00ae 184B     	 ldr r3,.L37+28
 750 00b0 1B68     	 ldr r3,[r3]
 751 00b2 002B     	 cmp r3,#0
 752 00b4 1AD0     	 beq .L26
1186:../Dave/Generated/FREERTOS/tasks.c **** 		{
1187:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 753              	 .loc 1 1187 0
 754 00b6 0F4B     	 ldr r3,.L37
 755 00b8 1B68     	 ldr r3,[r3]
 756 00ba FA68     	 ldr r2,[r7,#12]
 757 00bc 9A42     	 cmp r2,r3
 758 00be 15D1     	 bne .L26
1188:../Dave/Generated/FREERTOS/tasks.c **** 			{
1189:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 759              	 .loc 1 1189 0
 760 00c0 144B     	 ldr r3,.L37+32
 761 00c2 1B68     	 ldr r3,[r3]
 762 00c4 002B     	 cmp r3,#0
 763 00c6 09D0     	 beq .L35
 764              	.LBB114:
 765              	.LBB115:
 766              	 .loc 2 195 0 discriminator 1
 767              	
 768 00c8 4FF0FC03 	 mov r3,#252
 769 00cc 83F31188 	 msr basepri,r3
 770 00d0 BFF36F8F 	 isb 
 771 00d4 BFF34F8F 	 dsb 
 772              	
 773              	
 774              	 .thumb
 775 00d8 BB60     	 str r3,[r7,#8]
 776              	.L36:
 777              	.LBE115:
 778              	.LBE114:
 779              	 .loc 1 1189 0 discriminator 1
 780 00da FEE7     	 b .L36
 781              	.L35:
1190:../Dave/Generated/FREERTOS/tasks.c **** 				portYIELD_WITHIN_API();
 782              	 .loc 1 1190 0
 783 00dc 0E4B     	 ldr r3,.L37+36
 784 00de 4FF08052 	 mov r2,#268435456
 785 00e2 1A60     	 str r2,[r3]
 786              	
 787 00e4 BFF34F8F 	 dsb
 788              	
 789              	
 790 00e8 BFF36F8F 	 isb
 791              	
 792              	 .thumb
 793              	.L26:
1191:../Dave/Generated/FREERTOS/tasks.c **** 			}
1192:../Dave/Generated/FREERTOS/tasks.c **** 			else
1193:../Dave/Generated/FREERTOS/tasks.c **** 			{
1194:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1195:../Dave/Generated/FREERTOS/tasks.c **** 			}
1196:../Dave/Generated/FREERTOS/tasks.c **** 		}
1197:../Dave/Generated/FREERTOS/tasks.c **** 	}
 794              	 .loc 1 1197 0
 795 00ec 1037     	 adds r7,r7,#16
 796              	.LCFI18:
 797              	 .cfi_def_cfa_offset 8
 798 00ee BD46     	 mov sp,r7
 799              	.LCFI19:
 800              	 .cfi_def_cfa_register 13
 801              	 
 802 00f0 80BD     	 pop {r7,pc}
 803              	.L38:
 804 00f2 00BF     	 .align 2
 805              	.L37:
 806 00f4 00000000 	 .word pxCurrentTCB
 807 00f8 00000000 	 .word pxReadyTasksLists
 808 00fc 00000000 	 .word uxTopReadyPriority
 809 0100 00000000 	 .word uxTaskNumber
 810 0104 00000000 	 .word xTasksWaitingTermination
 811 0108 00000000 	 .word uxDeletedTasksWaitingCleanUp
 812 010c 00000000 	 .word uxCurrentNumberOfTasks
 813 0110 00000000 	 .word xSchedulerRunning
 814 0114 00000000 	 .word uxSchedulerSuspended
 815 0118 04ED00E0 	 .word -536810236
 816              	 .cfi_endproc
 817              	.LFE138:
 819              	 .section .text.vTaskDelayUntil,"ax",%progbits
 820              	 .align 2
 821              	 .global vTaskDelayUntil
 822              	 .thumb
 823              	 .thumb_func
 825              	vTaskDelayUntil:
 826              	.LFB139:
1198:../Dave/Generated/FREERTOS/tasks.c **** 
1199:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1200:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1201:../Dave/Generated/FREERTOS/tasks.c **** 
1202:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1203:../Dave/Generated/FREERTOS/tasks.c **** 
1204:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1205:../Dave/Generated/FREERTOS/tasks.c **** 	{
 827              	 .loc 1 1205 0
 828              	 .cfi_startproc
 829              	 
 830              	 
 831 0000 80B5     	 push {r7,lr}
 832              	.LCFI20:
 833              	 .cfi_def_cfa_offset 8
 834              	 .cfi_offset 7,-8
 835              	 .cfi_offset 14,-4
 836 0002 8AB0     	 sub sp,sp,#40
 837              	.LCFI21:
 838              	 .cfi_def_cfa_offset 48
 839 0004 00AF     	 add r7,sp,#0
 840              	.LCFI22:
 841              	 .cfi_def_cfa_register 7
 842 0006 7860     	 str r0,[r7,#4]
 843 0008 3960     	 str r1,[r7]
1206:../Dave/Generated/FREERTOS/tasks.c **** 	TickType_t xTimeToWake;
1207:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 844              	 .loc 1 1207 0
 845 000a 0023     	 movs r3,#0
 846 000c 7B62     	 str r3,[r7,#36]
1208:../Dave/Generated/FREERTOS/tasks.c **** 
1209:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 847              	 .loc 1 1209 0
 848 000e 7B68     	 ldr r3,[r7,#4]
 849 0010 002B     	 cmp r3,#0
 850 0012 09D1     	 bne .L40
 851              	.LBB116:
 852              	.LBB117:
 853              	 .loc 2 195 0 discriminator 1
 854              	
 855 0014 4FF0FC03 	 mov r3,#252
 856 0018 83F31188 	 msr basepri,r3
 857 001c BFF36F8F 	 isb 
 858 0020 BFF34F8F 	 dsb 
 859              	
 860              	
 861              	 .thumb
 862 0024 7B61     	 str r3,[r7,#20]
 863              	.L41:
 864              	.LBE117:
 865              	.LBE116:
 866              	 .loc 1 1209 0 discriminator 1
 867 0026 FEE7     	 b .L41
 868              	.L40:
1210:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 869              	 .loc 1 1210 0
 870 0028 3B68     	 ldr r3,[r7]
 871 002a 002B     	 cmp r3,#0
 872 002c 09D1     	 bne .L42
 873              	.LBB118:
 874              	.LBB119:
 875              	 .loc 2 195 0 discriminator 1
 876              	
 877 002e 4FF0FC03 	 mov r3,#252
 878 0032 83F31188 	 msr basepri,r3
 879 0036 BFF36F8F 	 isb 
 880 003a BFF34F8F 	 dsb 
 881              	
 882              	
 883              	 .thumb
 884 003e 3B61     	 str r3,[r7,#16]
 885              	.L43:
 886              	.LBE119:
 887              	.LBE118:
 888              	 .loc 1 1210 0 discriminator 2
 889 0040 FEE7     	 b .L43
 890              	.L42:
1211:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 891              	 .loc 1 1211 0
 892 0042 294B     	 ldr r3,.L51
 893 0044 1B68     	 ldr r3,[r3]
 894 0046 002B     	 cmp r3,#0
 895 0048 09D0     	 beq .L44
 896              	.LBB120:
 897              	.LBB121:
 898              	 .loc 2 195 0 discriminator 1
 899              	
 900 004a 4FF0FC03 	 mov r3,#252
 901 004e 83F31188 	 msr basepri,r3
 902 0052 BFF36F8F 	 isb 
 903 0056 BFF34F8F 	 dsb 
 904              	
 905              	
 906              	 .thumb
 907 005a FB60     	 str r3,[r7,#12]
 908              	.L45:
 909              	.LBE121:
 910              	.LBE120:
 911              	 .loc 1 1211 0 discriminator 3
 912 005c FEE7     	 b .L45
 913              	.L44:
1212:../Dave/Generated/FREERTOS/tasks.c **** 
1213:../Dave/Generated/FREERTOS/tasks.c **** 		vTaskSuspendAll();
 914              	 .loc 1 1213 0
 915 005e FFF7FEFF 	 bl vTaskSuspendAll
 916              	.LBB122:
1214:../Dave/Generated/FREERTOS/tasks.c **** 		{
1215:../Dave/Generated/FREERTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1216:../Dave/Generated/FREERTOS/tasks.c **** 			block. */
1217:../Dave/Generated/FREERTOS/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 917              	 .loc 1 1217 0
 918 0062 224B     	 ldr r3,.L51+4
 919 0064 1B68     	 ldr r3,[r3]
 920 0066 3B62     	 str r3,[r7,#32]
1218:../Dave/Generated/FREERTOS/tasks.c **** 
1219:../Dave/Generated/FREERTOS/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1220:../Dave/Generated/FREERTOS/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 921              	 .loc 1 1220 0
 922 0068 7B68     	 ldr r3,[r7,#4]
 923 006a 1A68     	 ldr r2,[r3]
 924 006c 3B68     	 ldr r3,[r7]
 925 006e 1344     	 add r3,r3,r2
 926 0070 FB61     	 str r3,[r7,#28]
1221:../Dave/Generated/FREERTOS/tasks.c **** 
1222:../Dave/Generated/FREERTOS/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 927              	 .loc 1 1222 0
 928 0072 7B68     	 ldr r3,[r7,#4]
 929 0074 1A68     	 ldr r2,[r3]
 930 0076 3B6A     	 ldr r3,[r7,#32]
 931 0078 9A42     	 cmp r2,r3
 932 007a 0BD9     	 bls .L46
1223:../Dave/Generated/FREERTOS/tasks.c **** 			{
1224:../Dave/Generated/FREERTOS/tasks.c **** 				/* The tick count has overflowed since this function was
1225:../Dave/Generated/FREERTOS/tasks.c **** 				lasted called.  In this case the only time we should ever
1226:../Dave/Generated/FREERTOS/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1227:../Dave/Generated/FREERTOS/tasks.c **** 				and the wake time is greater than the tick time.  When this
1228:../Dave/Generated/FREERTOS/tasks.c **** 				is the case it is as if neither time had overflowed. */
1229:../Dave/Generated/FREERTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 933              	 .loc 1 1229 0
 934 007c 7B68     	 ldr r3,[r7,#4]
 935 007e 1A68     	 ldr r2,[r3]
 936 0080 FB69     	 ldr r3,[r7,#28]
 937 0082 9A42     	 cmp r2,r3
 938 0084 11D9     	 bls .L47
 939              	 .loc 1 1229 0 is_stmt 0 discriminator 1
 940 0086 FA69     	 ldr r2,[r7,#28]
 941 0088 3B6A     	 ldr r3,[r7,#32]
 942 008a 9A42     	 cmp r2,r3
 943 008c 0DD9     	 bls .L47
1230:../Dave/Generated/FREERTOS/tasks.c **** 				{
1231:../Dave/Generated/FREERTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 944              	 .loc 1 1231 0 is_stmt 1
 945 008e 0123     	 movs r3,#1
 946 0090 7B62     	 str r3,[r7,#36]
 947 0092 0AE0     	 b .L47
 948              	.L46:
1232:../Dave/Generated/FREERTOS/tasks.c **** 				}
1233:../Dave/Generated/FREERTOS/tasks.c **** 				else
1234:../Dave/Generated/FREERTOS/tasks.c **** 				{
1235:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1236:../Dave/Generated/FREERTOS/tasks.c **** 				}
1237:../Dave/Generated/FREERTOS/tasks.c **** 			}
1238:../Dave/Generated/FREERTOS/tasks.c **** 			else
1239:../Dave/Generated/FREERTOS/tasks.c **** 			{
1240:../Dave/Generated/FREERTOS/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1241:../Dave/Generated/FREERTOS/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1242:../Dave/Generated/FREERTOS/tasks.c **** 				tick time is less than the wake time. */
1243:../Dave/Generated/FREERTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 949              	 .loc 1 1243 0
 950 0094 7B68     	 ldr r3,[r7,#4]
 951 0096 1A68     	 ldr r2,[r3]
 952 0098 FB69     	 ldr r3,[r7,#28]
 953 009a 9A42     	 cmp r2,r3
 954 009c 03D8     	 bhi .L48
 955              	 .loc 1 1243 0 is_stmt 0 discriminator 1
 956 009e FA69     	 ldr r2,[r7,#28]
 957 00a0 3B6A     	 ldr r3,[r7,#32]
 958 00a2 9A42     	 cmp r2,r3
 959 00a4 01D9     	 bls .L47
 960              	.L48:
1244:../Dave/Generated/FREERTOS/tasks.c **** 				{
1245:../Dave/Generated/FREERTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 961              	 .loc 1 1245 0 is_stmt 1
 962 00a6 0123     	 movs r3,#1
 963 00a8 7B62     	 str r3,[r7,#36]
 964              	.L47:
1246:../Dave/Generated/FREERTOS/tasks.c **** 				}
1247:../Dave/Generated/FREERTOS/tasks.c **** 				else
1248:../Dave/Generated/FREERTOS/tasks.c **** 				{
1249:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1250:../Dave/Generated/FREERTOS/tasks.c **** 				}
1251:../Dave/Generated/FREERTOS/tasks.c **** 			}
1252:../Dave/Generated/FREERTOS/tasks.c **** 
1253:../Dave/Generated/FREERTOS/tasks.c **** 			/* Update the wake time ready for the next call. */
1254:../Dave/Generated/FREERTOS/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 965              	 .loc 1 1254 0
 966 00aa 7B68     	 ldr r3,[r7,#4]
 967 00ac FA69     	 ldr r2,[r7,#28]
 968 00ae 1A60     	 str r2,[r3]
1255:../Dave/Generated/FREERTOS/tasks.c **** 
1256:../Dave/Generated/FREERTOS/tasks.c **** 			if( xShouldDelay != pdFALSE )
 969              	 .loc 1 1256 0
 970 00b0 7B6A     	 ldr r3,[r7,#36]
 971 00b2 002B     	 cmp r3,#0
 972 00b4 06D0     	 beq .L49
1257:../Dave/Generated/FREERTOS/tasks.c **** 			{
1258:../Dave/Generated/FREERTOS/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1259:../Dave/Generated/FREERTOS/tasks.c **** 
1260:../Dave/Generated/FREERTOS/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1261:../Dave/Generated/FREERTOS/tasks.c **** 				the time to wake, so subtract the current tick count. */
1262:../Dave/Generated/FREERTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 973              	 .loc 1 1262 0
 974 00b6 FA69     	 ldr r2,[r7,#28]
 975 00b8 3B6A     	 ldr r3,[r7,#32]
 976 00ba D31A     	 subs r3,r2,r3
 977 00bc 1846     	 mov r0,r3
 978 00be 0021     	 movs r1,#0
 979 00c0 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
 980              	.L49:
 981              	.LBE122:
1263:../Dave/Generated/FREERTOS/tasks.c **** 			}
1264:../Dave/Generated/FREERTOS/tasks.c **** 			else
1265:../Dave/Generated/FREERTOS/tasks.c **** 			{
1266:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1267:../Dave/Generated/FREERTOS/tasks.c **** 			}
1268:../Dave/Generated/FREERTOS/tasks.c **** 		}
1269:../Dave/Generated/FREERTOS/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 982              	 .loc 1 1269 0
 983 00c4 FFF7FEFF 	 bl xTaskResumeAll
 984 00c8 B861     	 str r0,[r7,#24]
1270:../Dave/Generated/FREERTOS/tasks.c **** 
1271:../Dave/Generated/FREERTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1272:../Dave/Generated/FREERTOS/tasks.c **** 		have put ourselves to sleep. */
1273:../Dave/Generated/FREERTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 985              	 .loc 1 1273 0
 986 00ca BB69     	 ldr r3,[r7,#24]
 987 00cc 002B     	 cmp r3,#0
 988 00ce 07D1     	 bne .L39
1274:../Dave/Generated/FREERTOS/tasks.c **** 		{
1275:../Dave/Generated/FREERTOS/tasks.c **** 			portYIELD_WITHIN_API();
 989              	 .loc 1 1275 0
 990 00d0 074B     	 ldr r3,.L51+8
 991 00d2 4FF08052 	 mov r2,#268435456
 992 00d6 1A60     	 str r2,[r3]
 993              	
 994 00d8 BFF34F8F 	 dsb
 995              	
 996              	
 997 00dc BFF36F8F 	 isb
 998              	
 999              	 .thumb
 1000              	.L39:
1276:../Dave/Generated/FREERTOS/tasks.c **** 		}
1277:../Dave/Generated/FREERTOS/tasks.c **** 		else
1278:../Dave/Generated/FREERTOS/tasks.c **** 		{
1279:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1280:../Dave/Generated/FREERTOS/tasks.c **** 		}
1281:../Dave/Generated/FREERTOS/tasks.c **** 	}
 1001              	 .loc 1 1281 0
 1002 00e0 2837     	 adds r7,r7,#40
 1003              	.LCFI23:
 1004              	 .cfi_def_cfa_offset 8
 1005 00e2 BD46     	 mov sp,r7
 1006              	.LCFI24:
 1007              	 .cfi_def_cfa_register 13
 1008              	 
 1009 00e4 80BD     	 pop {r7,pc}
 1010              	.L52:
 1011 00e6 00BF     	 .align 2
 1012              	.L51:
 1013 00e8 00000000 	 .word uxSchedulerSuspended
 1014 00ec 00000000 	 .word xTickCount
 1015 00f0 04ED00E0 	 .word -536810236
 1016              	 .cfi_endproc
 1017              	.LFE139:
 1019              	 .section .text.vTaskDelay,"ax",%progbits
 1020              	 .align 2
 1021              	 .global vTaskDelay
 1022              	 .thumb
 1023              	 .thumb_func
 1025              	vTaskDelay:
 1026              	.LFB140:
1282:../Dave/Generated/FREERTOS/tasks.c **** 
1283:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1284:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1285:../Dave/Generated/FREERTOS/tasks.c **** 
1286:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1287:../Dave/Generated/FREERTOS/tasks.c **** 
1288:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1289:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1027              	 .loc 1 1289 0
 1028              	 .cfi_startproc
 1029              	 
 1030              	 
 1031 0000 80B5     	 push {r7,lr}
 1032              	.LCFI25:
 1033              	 .cfi_def_cfa_offset 8
 1034              	 .cfi_offset 7,-8
 1035              	 .cfi_offset 14,-4
 1036 0002 84B0     	 sub sp,sp,#16
 1037              	.LCFI26:
 1038              	 .cfi_def_cfa_offset 24
 1039 0004 00AF     	 add r7,sp,#0
 1040              	.LCFI27:
 1041              	 .cfi_def_cfa_register 7
 1042 0006 7860     	 str r0,[r7,#4]
1290:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 1043              	 .loc 1 1290 0
 1044 0008 0023     	 movs r3,#0
 1045 000a FB60     	 str r3,[r7,#12]
1291:../Dave/Generated/FREERTOS/tasks.c **** 
1292:../Dave/Generated/FREERTOS/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1293:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 1046              	 .loc 1 1293 0
 1047 000c 7B68     	 ldr r3,[r7,#4]
 1048 000e 002B     	 cmp r3,#0
 1049 0010 16D0     	 beq .L54
1294:../Dave/Generated/FREERTOS/tasks.c **** 		{
1295:../Dave/Generated/FREERTOS/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 1050              	 .loc 1 1295 0
 1051 0012 124B     	 ldr r3,.L58
 1052 0014 1B68     	 ldr r3,[r3]
 1053 0016 002B     	 cmp r3,#0
 1054 0018 09D0     	 beq .L55
 1055              	.LBB123:
 1056              	.LBB124:
 1057              	 .loc 2 195 0 discriminator 1
 1058              	
 1059 001a 4FF0FC03 	 mov r3,#252
 1060 001e 83F31188 	 msr basepri,r3
 1061 0022 BFF36F8F 	 isb 
 1062 0026 BFF34F8F 	 dsb 
 1063              	
 1064              	
 1065              	 .thumb
 1066 002a BB60     	 str r3,[r7,#8]
 1067              	.L56:
 1068              	.LBE124:
 1069              	.LBE123:
 1070              	 .loc 1 1295 0 discriminator 1
 1071 002c FEE7     	 b .L56
 1072              	.L55:
1296:../Dave/Generated/FREERTOS/tasks.c **** 			vTaskSuspendAll();
 1073              	 .loc 1 1296 0
 1074 002e FFF7FEFF 	 bl vTaskSuspendAll
1297:../Dave/Generated/FREERTOS/tasks.c **** 			{
1298:../Dave/Generated/FREERTOS/tasks.c **** 				traceTASK_DELAY();
1299:../Dave/Generated/FREERTOS/tasks.c **** 
1300:../Dave/Generated/FREERTOS/tasks.c **** 				/* A task that is removed from the event list while the
1301:../Dave/Generated/FREERTOS/tasks.c **** 				scheduler is suspended will not get placed in the ready
1302:../Dave/Generated/FREERTOS/tasks.c **** 				list or removed from the blocked list until the scheduler
1303:../Dave/Generated/FREERTOS/tasks.c **** 				is resumed.
1304:../Dave/Generated/FREERTOS/tasks.c **** 
1305:../Dave/Generated/FREERTOS/tasks.c **** 				This task cannot be in an event list as it is the currently
1306:../Dave/Generated/FREERTOS/tasks.c **** 				executing task. */
1307:../Dave/Generated/FREERTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1075              	 .loc 1 1307 0
 1076 0032 7868     	 ldr r0,[r7,#4]
 1077 0034 0021     	 movs r1,#0
 1078 0036 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
1308:../Dave/Generated/FREERTOS/tasks.c **** 			}
1309:../Dave/Generated/FREERTOS/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 1079              	 .loc 1 1309 0
 1080 003a FFF7FEFF 	 bl xTaskResumeAll
 1081 003e F860     	 str r0,[r7,#12]
 1082              	.L54:
1310:../Dave/Generated/FREERTOS/tasks.c **** 		}
1311:../Dave/Generated/FREERTOS/tasks.c **** 		else
1312:../Dave/Generated/FREERTOS/tasks.c **** 		{
1313:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1314:../Dave/Generated/FREERTOS/tasks.c **** 		}
1315:../Dave/Generated/FREERTOS/tasks.c **** 
1316:../Dave/Generated/FREERTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:../Dave/Generated/FREERTOS/tasks.c **** 		have put ourselves to sleep. */
1318:../Dave/Generated/FREERTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1083              	 .loc 1 1318 0
 1084 0040 FB68     	 ldr r3,[r7,#12]
 1085 0042 002B     	 cmp r3,#0
 1086 0044 07D1     	 bne .L53
1319:../Dave/Generated/FREERTOS/tasks.c **** 		{
1320:../Dave/Generated/FREERTOS/tasks.c **** 			portYIELD_WITHIN_API();
 1087              	 .loc 1 1320 0
 1088 0046 064B     	 ldr r3,.L58+4
 1089 0048 4FF08052 	 mov r2,#268435456
 1090 004c 1A60     	 str r2,[r3]
 1091              	
 1092 004e BFF34F8F 	 dsb
 1093              	
 1094              	
 1095 0052 BFF36F8F 	 isb
 1096              	
 1097              	 .thumb
 1098              	.L53:
1321:../Dave/Generated/FREERTOS/tasks.c **** 		}
1322:../Dave/Generated/FREERTOS/tasks.c **** 		else
1323:../Dave/Generated/FREERTOS/tasks.c **** 		{
1324:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:../Dave/Generated/FREERTOS/tasks.c **** 		}
1326:../Dave/Generated/FREERTOS/tasks.c **** 	}
 1099              	 .loc 1 1326 0
 1100 0056 1037     	 adds r7,r7,#16
 1101              	.LCFI28:
 1102              	 .cfi_def_cfa_offset 8
 1103 0058 BD46     	 mov sp,r7
 1104              	.LCFI29:
 1105              	 .cfi_def_cfa_register 13
 1106              	 
 1107 005a 80BD     	 pop {r7,pc}
 1108              	.L59:
 1109              	 .align 2
 1110              	.L58:
 1111 005c 00000000 	 .word uxSchedulerSuspended
 1112 0060 04ED00E0 	 .word -536810236
 1113              	 .cfi_endproc
 1114              	.LFE140:
 1116              	 .section .text.eTaskGetState,"ax",%progbits
 1117              	 .align 2
 1118              	 .global eTaskGetState
 1119              	 .thumb
 1120              	 .thumb_func
 1122              	eTaskGetState:
 1123              	.LFB141:
1327:../Dave/Generated/FREERTOS/tasks.c **** 
1328:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1329:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1330:../Dave/Generated/FREERTOS/tasks.c **** 
1331:../Dave/Generated/FREERTOS/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1332:../Dave/Generated/FREERTOS/tasks.c **** 
1333:../Dave/Generated/FREERTOS/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1334:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1124              	 .loc 1 1334 0
 1125              	 .cfi_startproc
 1126              	 
 1127              	 
 1128 0000 80B5     	 push {r7,lr}
 1129              	.LCFI30:
 1130              	 .cfi_def_cfa_offset 8
 1131              	 .cfi_offset 7,-8
 1132              	 .cfi_offset 14,-4
 1133 0002 86B0     	 sub sp,sp,#24
 1134              	.LCFI31:
 1135              	 .cfi_def_cfa_offset 32
 1136 0004 00AF     	 add r7,sp,#0
 1137              	.LCFI32:
 1138              	 .cfi_def_cfa_register 7
 1139 0006 7860     	 str r0,[r7,#4]
1335:../Dave/Generated/FREERTOS/tasks.c **** 	eTaskState eReturn;
1336:../Dave/Generated/FREERTOS/tasks.c **** 	List_t *pxStateList;
1337:../Dave/Generated/FREERTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1140              	 .loc 1 1337 0
 1141 0008 7B68     	 ldr r3,[r7,#4]
 1142 000a 3B61     	 str r3,[r7,#16]
1338:../Dave/Generated/FREERTOS/tasks.c **** 
1339:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxTCB );
 1143              	 .loc 1 1339 0
 1144 000c 3B69     	 ldr r3,[r7,#16]
 1145 000e 002B     	 cmp r3,#0
 1146 0010 09D1     	 bne .L61
 1147              	.LBB125:
 1148              	.LBB126:
 1149              	 .loc 2 195 0 discriminator 1
 1150              	
 1151 0012 4FF0FC03 	 mov r3,#252
 1152 0016 83F31188 	 msr basepri,r3
 1153 001a BFF36F8F 	 isb 
 1154 001e BFF34F8F 	 dsb 
 1155              	
 1156              	
 1157              	 .thumb
 1158 0022 BB60     	 str r3,[r7,#8]
 1159              	.L62:
 1160              	.LBE126:
 1161              	.LBE125:
 1162              	 .loc 1 1339 0 discriminator 1
 1163 0024 FEE7     	 b .L62
 1164              	.L61:
1340:../Dave/Generated/FREERTOS/tasks.c **** 
1341:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1165              	 .loc 1 1341 0
 1166 0026 1D4B     	 ldr r3,.L73
 1167 0028 1B68     	 ldr r3,[r3]
 1168 002a 3A69     	 ldr r2,[r7,#16]
 1169 002c 9A42     	 cmp r2,r3
 1170 002e 02D1     	 bne .L63
1342:../Dave/Generated/FREERTOS/tasks.c **** 		{
1343:../Dave/Generated/FREERTOS/tasks.c **** 			/* The task calling this function is querying its own state. */
1344:../Dave/Generated/FREERTOS/tasks.c **** 			eReturn = eRunning;
 1171              	 .loc 1 1344 0
 1172 0030 0023     	 movs r3,#0
 1173 0032 FB75     	 strb r3,[r7,#23]
 1174 0034 2DE0     	 b .L64
 1175              	.L63:
1345:../Dave/Generated/FREERTOS/tasks.c **** 		}
1346:../Dave/Generated/FREERTOS/tasks.c **** 		else
1347:../Dave/Generated/FREERTOS/tasks.c **** 		{
1348:../Dave/Generated/FREERTOS/tasks.c **** 			taskENTER_CRITICAL();
 1176              	 .loc 1 1348 0
 1177 0036 FFF7FEFF 	 bl vPortEnterCritical
1349:../Dave/Generated/FREERTOS/tasks.c **** 			{
1350:../Dave/Generated/FREERTOS/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1178              	 .loc 1 1350 0
 1179 003a 3B69     	 ldr r3,[r7,#16]
 1180 003c 5B69     	 ldr r3,[r3,#20]
 1181 003e FB60     	 str r3,[r7,#12]
1351:../Dave/Generated/FREERTOS/tasks.c **** 			}
1352:../Dave/Generated/FREERTOS/tasks.c **** 			taskEXIT_CRITICAL();
 1182              	 .loc 1 1352 0
 1183 0040 FFF7FEFF 	 bl vPortExitCritical
1353:../Dave/Generated/FREERTOS/tasks.c **** 
1354:../Dave/Generated/FREERTOS/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 1184              	 .loc 1 1354 0
 1185 0044 164B     	 ldr r3,.L73+4
 1186 0046 1B68     	 ldr r3,[r3]
 1187 0048 FA68     	 ldr r2,[r7,#12]
 1188 004a 9A42     	 cmp r2,r3
 1189 004c 04D0     	 beq .L65
 1190              	 .loc 1 1354 0 is_stmt 0 discriminator 1
 1191 004e 154B     	 ldr r3,.L73+8
 1192 0050 1B68     	 ldr r3,[r3]
 1193 0052 FA68     	 ldr r2,[r7,#12]
 1194 0054 9A42     	 cmp r2,r3
 1195 0056 02D1     	 bne .L66
 1196              	.L65:
1355:../Dave/Generated/FREERTOS/tasks.c **** 			{
1356:../Dave/Generated/FREERTOS/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1357:../Dave/Generated/FREERTOS/tasks.c **** 				lists. */
1358:../Dave/Generated/FREERTOS/tasks.c **** 				eReturn = eBlocked;
 1197              	 .loc 1 1358 0 is_stmt 1
 1198 0058 0223     	 movs r3,#2
 1199 005a FB75     	 strb r3,[r7,#23]
 1200 005c 19E0     	 b .L64
 1201              	.L66:
1359:../Dave/Generated/FREERTOS/tasks.c **** 			}
1360:../Dave/Generated/FREERTOS/tasks.c **** 
1361:../Dave/Generated/FREERTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1362:../Dave/Generated/FREERTOS/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 1202              	 .loc 1 1362 0
 1203 005e FB68     	 ldr r3,[r7,#12]
 1204 0060 114A     	 ldr r2,.L73+12
 1205 0062 9342     	 cmp r3,r2
 1206 0064 09D1     	 bne .L67
1363:../Dave/Generated/FREERTOS/tasks.c **** 				{
1364:../Dave/Generated/FREERTOS/tasks.c **** 					/* The task being queried is referenced from the suspended
1365:../Dave/Generated/FREERTOS/tasks.c **** 					list.  Is it genuinely suspended or is it block
1366:../Dave/Generated/FREERTOS/tasks.c **** 					indefinitely? */
1367:../Dave/Generated/FREERTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1207              	 .loc 1 1367 0
 1208 0066 3B69     	 ldr r3,[r7,#16]
 1209 0068 9B6A     	 ldr r3,[r3,#40]
 1210 006a 002B     	 cmp r3,#0
 1211 006c 02D1     	 bne .L68
1368:../Dave/Generated/FREERTOS/tasks.c **** 					{
1369:../Dave/Generated/FREERTOS/tasks.c **** 						eReturn = eSuspended;
 1212              	 .loc 1 1369 0
 1213 006e 0323     	 movs r3,#3
 1214 0070 FB75     	 strb r3,[r7,#23]
 1215 0072 0EE0     	 b .L64
 1216              	.L68:
1370:../Dave/Generated/FREERTOS/tasks.c **** 					}
1371:../Dave/Generated/FREERTOS/tasks.c **** 					else
1372:../Dave/Generated/FREERTOS/tasks.c **** 					{
1373:../Dave/Generated/FREERTOS/tasks.c **** 						eReturn = eBlocked;
 1217              	 .loc 1 1373 0
 1218 0074 0223     	 movs r3,#2
 1219 0076 FB75     	 strb r3,[r7,#23]
 1220 0078 0BE0     	 b .L64
 1221              	.L67:
1374:../Dave/Generated/FREERTOS/tasks.c **** 					}
1375:../Dave/Generated/FREERTOS/tasks.c **** 				}
1376:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
1377:../Dave/Generated/FREERTOS/tasks.c **** 
1378:../Dave/Generated/FREERTOS/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1379:../Dave/Generated/FREERTOS/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1222              	 .loc 1 1379 0
 1223 007a FB68     	 ldr r3,[r7,#12]
 1224 007c 0B4A     	 ldr r2,.L73+16
 1225 007e 9342     	 cmp r3,r2
 1226 0080 02D0     	 beq .L70
 1227              	 .loc 1 1379 0 is_stmt 0 discriminator 1
 1228 0082 FB68     	 ldr r3,[r7,#12]
 1229 0084 002B     	 cmp r3,#0
 1230 0086 02D1     	 bne .L71
 1231              	.L70:
1380:../Dave/Generated/FREERTOS/tasks.c **** 				{
1381:../Dave/Generated/FREERTOS/tasks.c **** 					/* The task being queried is referenced from the deleted
1382:../Dave/Generated/FREERTOS/tasks.c **** 					tasks list, or it is not referenced from any lists at
1383:../Dave/Generated/FREERTOS/tasks.c **** 					all. */
1384:../Dave/Generated/FREERTOS/tasks.c **** 					eReturn = eDeleted;
 1232              	 .loc 1 1384 0 is_stmt 1
 1233 0088 0423     	 movs r3,#4
 1234 008a FB75     	 strb r3,[r7,#23]
 1235 008c 01E0     	 b .L64
 1236              	.L71:
1385:../Dave/Generated/FREERTOS/tasks.c **** 				}
1386:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
1387:../Dave/Generated/FREERTOS/tasks.c **** 
1388:../Dave/Generated/FREERTOS/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1389:../Dave/Generated/FREERTOS/tasks.c **** 			{
1390:../Dave/Generated/FREERTOS/tasks.c **** 				/* If the task is not in any other state, it must be in the
1391:../Dave/Generated/FREERTOS/tasks.c **** 				Ready (including pending ready) state. */
1392:../Dave/Generated/FREERTOS/tasks.c **** 				eReturn = eReady;
 1237              	 .loc 1 1392 0
 1238 008e 0123     	 movs r3,#1
 1239 0090 FB75     	 strb r3,[r7,#23]
 1240              	.L64:
1393:../Dave/Generated/FREERTOS/tasks.c **** 			}
1394:../Dave/Generated/FREERTOS/tasks.c **** 		}
1395:../Dave/Generated/FREERTOS/tasks.c **** 
1396:../Dave/Generated/FREERTOS/tasks.c **** 		return eReturn;
 1241              	 .loc 1 1396 0
 1242 0092 FB7D     	 ldrb r3,[r7,#23]
1397:../Dave/Generated/FREERTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1243              	 .loc 1 1397 0
 1244 0094 1846     	 mov r0,r3
 1245 0096 1837     	 adds r7,r7,#24
 1246              	.LCFI33:
 1247              	 .cfi_def_cfa_offset 8
 1248 0098 BD46     	 mov sp,r7
 1249              	.LCFI34:
 1250              	 .cfi_def_cfa_register 13
 1251              	 
 1252 009a 80BD     	 pop {r7,pc}
 1253              	.L74:
 1254              	 .align 2
 1255              	.L73:
 1256 009c 00000000 	 .word pxCurrentTCB
 1257 00a0 00000000 	 .word pxDelayedTaskList
 1258 00a4 00000000 	 .word pxOverflowDelayedTaskList
 1259 00a8 00000000 	 .word xSuspendedTaskList
 1260 00ac 00000000 	 .word xTasksWaitingTermination
 1261              	 .cfi_endproc
 1262              	.LFE141:
 1264              	 .section .text.uxTaskPriorityGet,"ax",%progbits
 1265              	 .align 2
 1266              	 .global uxTaskPriorityGet
 1267              	 .thumb
 1268              	 .thumb_func
 1270              	uxTaskPriorityGet:
 1271              	.LFB142:
1398:../Dave/Generated/FREERTOS/tasks.c **** 
1399:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1400:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1401:../Dave/Generated/FREERTOS/tasks.c **** 
1402:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1403:../Dave/Generated/FREERTOS/tasks.c **** 
1404:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1405:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1272              	 .loc 1 1405 0
 1273              	 .cfi_startproc
 1274              	 
 1275              	 
 1276 0000 80B5     	 push {r7,lr}
 1277              	.LCFI35:
 1278              	 .cfi_def_cfa_offset 8
 1279              	 .cfi_offset 7,-8
 1280              	 .cfi_offset 14,-4
 1281 0002 84B0     	 sub sp,sp,#16
 1282              	.LCFI36:
 1283              	 .cfi_def_cfa_offset 24
 1284 0004 00AF     	 add r7,sp,#0
 1285              	.LCFI37:
 1286              	 .cfi_def_cfa_register 7
 1287 0006 7860     	 str r0,[r7,#4]
1406:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
1407:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxReturn;
1408:../Dave/Generated/FREERTOS/tasks.c **** 
1409:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 1288              	 .loc 1 1409 0
 1289 0008 FFF7FEFF 	 bl vPortEnterCritical
1410:../Dave/Generated/FREERTOS/tasks.c **** 		{
1411:../Dave/Generated/FREERTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1412:../Dave/Generated/FREERTOS/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1413:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1290              	 .loc 1 1413 0
 1291 000c 7B68     	 ldr r3,[r7,#4]
 1292 000e 002B     	 cmp r3,#0
 1293 0010 02D1     	 bne .L76
 1294              	 .loc 1 1413 0 is_stmt 0 discriminator 1
 1295 0012 074B     	 ldr r3,.L79
 1296 0014 1B68     	 ldr r3,[r3]
 1297 0016 00E0     	 b .L77
 1298              	.L76:
 1299              	 .loc 1 1413 0 discriminator 2
 1300 0018 7B68     	 ldr r3,[r7,#4]
 1301              	.L77:
 1302              	 .loc 1 1413 0 discriminator 4
 1303 001a FB60     	 str r3,[r7,#12]
1414:../Dave/Generated/FREERTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1304              	 .loc 1 1414 0 is_stmt 1 discriminator 4
 1305 001c FB68     	 ldr r3,[r7,#12]
 1306 001e DB6A     	 ldr r3,[r3,#44]
 1307 0020 BB60     	 str r3,[r7,#8]
1415:../Dave/Generated/FREERTOS/tasks.c **** 		}
1416:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 1308              	 .loc 1 1416 0 discriminator 4
 1309 0022 FFF7FEFF 	 bl vPortExitCritical
1417:../Dave/Generated/FREERTOS/tasks.c **** 
1418:../Dave/Generated/FREERTOS/tasks.c **** 		return uxReturn;
 1310              	 .loc 1 1418 0 discriminator 4
 1311 0026 BB68     	 ldr r3,[r7,#8]
1419:../Dave/Generated/FREERTOS/tasks.c **** 	}
 1312              	 .loc 1 1419 0 discriminator 4
 1313 0028 1846     	 mov r0,r3
 1314 002a 1037     	 adds r7,r7,#16
 1315              	.LCFI38:
 1316              	 .cfi_def_cfa_offset 8
 1317 002c BD46     	 mov sp,r7
 1318              	.LCFI39:
 1319              	 .cfi_def_cfa_register 13
 1320              	 
 1321 002e 80BD     	 pop {r7,pc}
 1322              	.L80:
 1323              	 .align 2
 1324              	.L79:
 1325 0030 00000000 	 .word pxCurrentTCB
 1326              	 .cfi_endproc
 1327              	.LFE142:
 1329              	 .section .text.uxTaskPriorityGetFromISR,"ax",%progbits
 1330              	 .align 2
 1331              	 .global uxTaskPriorityGetFromISR
 1332              	 .thumb
 1333              	 .thumb_func
 1335              	uxTaskPriorityGetFromISR:
 1336              	.LFB143:
1420:../Dave/Generated/FREERTOS/tasks.c **** 
1421:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1422:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1423:../Dave/Generated/FREERTOS/tasks.c **** 
1424:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1425:../Dave/Generated/FREERTOS/tasks.c **** 
1426:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1427:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1337              	 .loc 1 1427 0
 1338              	 .cfi_startproc
 1339              	 
 1340              	 
 1341 0000 80B5     	 push {r7,lr}
 1342              	.LCFI40:
 1343              	 .cfi_def_cfa_offset 8
 1344              	 .cfi_offset 7,-8
 1345              	 .cfi_offset 14,-4
 1346 0002 88B0     	 sub sp,sp,#32
 1347              	.LCFI41:
 1348              	 .cfi_def_cfa_offset 40
 1349 0004 00AF     	 add r7,sp,#0
 1350              	.LCFI42:
 1351              	 .cfi_def_cfa_register 7
 1352 0006 7860     	 str r0,[r7,#4]
1428:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
1429:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1430:../Dave/Generated/FREERTOS/tasks.c **** 
1431:../Dave/Generated/FREERTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1432:../Dave/Generated/FREERTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1433:../Dave/Generated/FREERTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1434:../Dave/Generated/FREERTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1435:../Dave/Generated/FREERTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1436:../Dave/Generated/FREERTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1437:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1438:../Dave/Generated/FREERTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1439:../Dave/Generated/FREERTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1440:../Dave/Generated/FREERTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1441:../Dave/Generated/FREERTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1442:../Dave/Generated/FREERTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1443:../Dave/Generated/FREERTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1444:../Dave/Generated/FREERTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1445:../Dave/Generated/FREERTOS/tasks.c **** 		provided on the following link:
1446:../Dave/Generated/FREERTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1447:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1353              	 .loc 1 1447 0
 1354 0008 FFF7FEFF 	 bl vPortValidateInterruptPriority
 1355              	.LBB127:
 1356              	.LBB128:
 196:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 197:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	isb														\n" \
 200:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	dsb														\n" \
 201:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	);
 203:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
 204:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 205:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 206:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 207:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** {
 209:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 211:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile
 1357              	 .loc 2 211 0
 1358              	
 1359 000c EFF31182 	 mrs r2,basepri
 1360 0010 4FF0FC03 	 mov r3,#252
 1361 0014 83F31188 	 msr basepri,r3
 1362 0018 BFF36F8F 	 isb 
 1363 001c BFF34F8F 	 dsb 
 1364              	
 1365              	
 1366              	 .thumb
 1367 0020 3A61     	 str r2,[r7,#16]
 1368 0022 FB60     	 str r3,[r7,#12]
 212:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 213:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	isb														\n" \
 217:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	dsb														\n" \
 218:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	);
 220:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 221:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	warnings. */
 223:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	return ulOriginalBASEPRI;
 1369              	 .loc 2 223 0
 1370 0024 3B69     	 ldr r3,[r7,#16]
 1371              	.LBE128:
 1372              	.LBE127:
1448:../Dave/Generated/FREERTOS/tasks.c **** 
1449:../Dave/Generated/FREERTOS/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1373              	 .loc 1 1449 0
 1374 0026 FB61     	 str r3,[r7,#28]
1450:../Dave/Generated/FREERTOS/tasks.c **** 		{
1451:../Dave/Generated/FREERTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1452:../Dave/Generated/FREERTOS/tasks.c **** 			task that is being queried. */
1453:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1375              	 .loc 1 1453 0
 1376 0028 7B68     	 ldr r3,[r7,#4]
 1377 002a 002B     	 cmp r3,#0
 1378 002c 02D1     	 bne .L83
 1379              	 .loc 1 1453 0 is_stmt 0 discriminator 1
 1380 002e 094B     	 ldr r3,.L86
 1381 0030 1B68     	 ldr r3,[r3]
 1382 0032 00E0     	 b .L84
 1383              	.L83:
 1384              	 .loc 1 1453 0 discriminator 2
 1385 0034 7B68     	 ldr r3,[r7,#4]
 1386              	.L84:
 1387              	 .loc 1 1453 0 discriminator 4
 1388 0036 BB61     	 str r3,[r7,#24]
1454:../Dave/Generated/FREERTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1389              	 .loc 1 1454 0 is_stmt 1 discriminator 4
 1390 0038 BB69     	 ldr r3,[r7,#24]
 1391 003a DB6A     	 ldr r3,[r3,#44]
 1392 003c 7B61     	 str r3,[r7,#20]
 1393 003e FB69     	 ldr r3,[r7,#28]
 1394 0040 BB60     	 str r3,[r7,#8]
 1395              	.LBB129:
 1396              	.LBB130:
 224:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
 225:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 226:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 227:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** {
 229:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile
 1397              	 .loc 2 229 0 discriminator 4
 1398 0042 BB68     	 ldr r3,[r7,#8]
 1399              	
 1400 0044 83F31188 	 msr basepri,r3
 1401              	
 1402              	 .thumb
 1403              	.LBE130:
 1404              	.LBE129:
1455:../Dave/Generated/FREERTOS/tasks.c **** 		}
1456:../Dave/Generated/FREERTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1457:../Dave/Generated/FREERTOS/tasks.c **** 
1458:../Dave/Generated/FREERTOS/tasks.c **** 		return uxReturn;
 1405              	 .loc 1 1458 0 discriminator 4
 1406 0048 7B69     	 ldr r3,[r7,#20]
1459:../Dave/Generated/FREERTOS/tasks.c **** 	}
 1407              	 .loc 1 1459 0 discriminator 4
 1408 004a 1846     	 mov r0,r3
 1409 004c 2037     	 adds r7,r7,#32
 1410              	.LCFI43:
 1411              	 .cfi_def_cfa_offset 8
 1412 004e BD46     	 mov sp,r7
 1413              	.LCFI44:
 1414              	 .cfi_def_cfa_register 13
 1415              	 
 1416 0050 80BD     	 pop {r7,pc}
 1417              	.L87:
 1418 0052 00BF     	 .align 2
 1419              	.L86:
 1420 0054 00000000 	 .word pxCurrentTCB
 1421              	 .cfi_endproc
 1422              	.LFE143:
 1424              	 .section .text.vTaskPrioritySet,"ax",%progbits
 1425              	 .align 2
 1426              	 .global vTaskPrioritySet
 1427              	 .thumb
 1428              	 .thumb_func
 1430              	vTaskPrioritySet:
 1431              	.LFB144:
1460:../Dave/Generated/FREERTOS/tasks.c **** 
1461:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1462:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1463:../Dave/Generated/FREERTOS/tasks.c **** 
1464:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1465:../Dave/Generated/FREERTOS/tasks.c **** 
1466:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1467:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1432              	 .loc 1 1467 0
 1433              	 .cfi_startproc
 1434              	 
 1435              	 
 1436 0000 80B5     	 push {r7,lr}
 1437              	.LCFI45:
 1438              	 .cfi_def_cfa_offset 8
 1439              	 .cfi_offset 7,-8
 1440              	 .cfi_offset 14,-4
 1441 0002 88B0     	 sub sp,sp,#32
 1442              	.LCFI46:
 1443              	 .cfi_def_cfa_offset 40
 1444 0004 00AF     	 add r7,sp,#0
 1445              	.LCFI47:
 1446              	 .cfi_def_cfa_register 7
 1447 0006 7860     	 str r0,[r7,#4]
 1448 0008 3960     	 str r1,[r7]
1468:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
1469:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1470:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1449              	 .loc 1 1470 0
 1450 000a 0023     	 movs r3,#0
 1451 000c FB61     	 str r3,[r7,#28]
1471:../Dave/Generated/FREERTOS/tasks.c **** 
1472:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1452              	 .loc 1 1472 0
 1453 000e 3B68     	 ldr r3,[r7]
 1454 0010 042B     	 cmp r3,#4
 1455 0012 09D9     	 bls .L89
 1456              	.LBB131:
 1457              	.LBB132:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 1458              	 .loc 2 195 0 discriminator 1
 1459              	
 1460 0014 4FF0FC03 	 mov r3,#252
 1461 0018 83F31188 	 msr basepri,r3
 1462 001c BFF36F8F 	 isb 
 1463 0020 BFF34F8F 	 dsb 
 1464              	
 1465              	
 1466              	 .thumb
 1467 0024 FB60     	 str r3,[r7,#12]
 1468              	.L90:
 1469              	.LBE132:
 1470              	.LBE131:
 1471              	 .loc 1 1472 0 discriminator 1
 1472 0026 FEE7     	 b .L90
 1473              	.L89:
1473:../Dave/Generated/FREERTOS/tasks.c **** 
1474:../Dave/Generated/FREERTOS/tasks.c **** 		/* Ensure the new priority is valid. */
1475:../Dave/Generated/FREERTOS/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1474              	 .loc 1 1475 0
 1475 0028 3B68     	 ldr r3,[r7]
 1476 002a 042B     	 cmp r3,#4
 1477 002c 01D9     	 bls .L91
1476:../Dave/Generated/FREERTOS/tasks.c **** 		{
1477:../Dave/Generated/FREERTOS/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1478              	 .loc 1 1477 0
 1479 002e 0423     	 movs r3,#4
 1480 0030 3B60     	 str r3,[r7]
 1481              	.L91:
1478:../Dave/Generated/FREERTOS/tasks.c **** 		}
1479:../Dave/Generated/FREERTOS/tasks.c **** 		else
1480:../Dave/Generated/FREERTOS/tasks.c **** 		{
1481:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1482:../Dave/Generated/FREERTOS/tasks.c **** 		}
1483:../Dave/Generated/FREERTOS/tasks.c **** 
1484:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 1482              	 .loc 1 1484 0
 1483 0032 FFF7FEFF 	 bl vPortEnterCritical
1485:../Dave/Generated/FREERTOS/tasks.c **** 		{
1486:../Dave/Generated/FREERTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1487:../Dave/Generated/FREERTOS/tasks.c **** 			task that is being changed. */
1488:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1484              	 .loc 1 1488 0
 1485 0036 7B68     	 ldr r3,[r7,#4]
 1486 0038 002B     	 cmp r3,#0
 1487 003a 02D1     	 bne .L92
 1488              	 .loc 1 1488 0 is_stmt 0 discriminator 1
 1489 003c 434B     	 ldr r3,.L103
 1490 003e 1B68     	 ldr r3,[r3]
 1491 0040 00E0     	 b .L93
 1492              	.L92:
 1493              	 .loc 1 1488 0 discriminator 2
 1494 0042 7B68     	 ldr r3,[r7,#4]
 1495              	.L93:
 1496              	 .loc 1 1488 0 discriminator 4
 1497 0044 BB61     	 str r3,[r7,#24]
1489:../Dave/Generated/FREERTOS/tasks.c **** 
1490:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1491:../Dave/Generated/FREERTOS/tasks.c **** 
1492:../Dave/Generated/FREERTOS/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1493:../Dave/Generated/FREERTOS/tasks.c **** 			{
1494:../Dave/Generated/FREERTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1498              	 .loc 1 1494 0 is_stmt 1 discriminator 4
 1499 0046 BB69     	 ldr r3,[r7,#24]
 1500 0048 DB6C     	 ldr r3,[r3,#76]
 1501 004a 7B61     	 str r3,[r7,#20]
1495:../Dave/Generated/FREERTOS/tasks.c **** 			}
1496:../Dave/Generated/FREERTOS/tasks.c **** 			#else
1497:../Dave/Generated/FREERTOS/tasks.c **** 			{
1498:../Dave/Generated/FREERTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1499:../Dave/Generated/FREERTOS/tasks.c **** 			}
1500:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
1501:../Dave/Generated/FREERTOS/tasks.c **** 
1502:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1502              	 .loc 1 1502 0 discriminator 4
 1503 004c 7A69     	 ldr r2,[r7,#20]
 1504 004e 3B68     	 ldr r3,[r7]
 1505 0050 9A42     	 cmp r2,r3
 1506 0052 76D0     	 beq .L94
1503:../Dave/Generated/FREERTOS/tasks.c **** 			{
1504:../Dave/Generated/FREERTOS/tasks.c **** 				/* The priority change may have readied a task of higher
1505:../Dave/Generated/FREERTOS/tasks.c **** 				priority than the calling task. */
1506:../Dave/Generated/FREERTOS/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1507              	 .loc 1 1506 0
 1508 0054 3A68     	 ldr r2,[r7]
 1509 0056 7B69     	 ldr r3,[r7,#20]
 1510 0058 9A42     	 cmp r2,r3
 1511 005a 0DD9     	 bls .L95
1507:../Dave/Generated/FREERTOS/tasks.c **** 				{
1508:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1512              	 .loc 1 1508 0
 1513 005c 3B4B     	 ldr r3,.L103
 1514 005e 1B68     	 ldr r3,[r3]
 1515 0060 BA69     	 ldr r2,[r7,#24]
 1516 0062 9A42     	 cmp r2,r3
 1517 0064 0FD0     	 beq .L96
1509:../Dave/Generated/FREERTOS/tasks.c **** 					{
1510:../Dave/Generated/FREERTOS/tasks.c **** 						/* The priority of a task other than the currently
1511:../Dave/Generated/FREERTOS/tasks.c **** 						running task is being raised.  Is the priority being
1512:../Dave/Generated/FREERTOS/tasks.c **** 						raised above that of the running task? */
1513:../Dave/Generated/FREERTOS/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1518              	 .loc 1 1513 0
 1519 0066 394B     	 ldr r3,.L103
 1520 0068 1B68     	 ldr r3,[r3]
 1521 006a DA6A     	 ldr r2,[r3,#44]
 1522 006c 3B68     	 ldr r3,[r7]
 1523 006e 9A42     	 cmp r2,r3
 1524 0070 09D8     	 bhi .L96
1514:../Dave/Generated/FREERTOS/tasks.c **** 						{
1515:../Dave/Generated/FREERTOS/tasks.c **** 							xYieldRequired = pdTRUE;
 1525              	 .loc 1 1515 0
 1526 0072 0123     	 movs r3,#1
 1527 0074 FB61     	 str r3,[r7,#28]
 1528 0076 06E0     	 b .L96
 1529              	.L95:
1516:../Dave/Generated/FREERTOS/tasks.c **** 						}
1517:../Dave/Generated/FREERTOS/tasks.c **** 						else
1518:../Dave/Generated/FREERTOS/tasks.c **** 						{
1519:../Dave/Generated/FREERTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1520:../Dave/Generated/FREERTOS/tasks.c **** 						}
1521:../Dave/Generated/FREERTOS/tasks.c **** 					}
1522:../Dave/Generated/FREERTOS/tasks.c **** 					else
1523:../Dave/Generated/FREERTOS/tasks.c **** 					{
1524:../Dave/Generated/FREERTOS/tasks.c **** 						/* The priority of the running task is being raised,
1525:../Dave/Generated/FREERTOS/tasks.c **** 						but the running task must already be the highest
1526:../Dave/Generated/FREERTOS/tasks.c **** 						priority task able to run so no yield is required. */
1527:../Dave/Generated/FREERTOS/tasks.c **** 					}
1528:../Dave/Generated/FREERTOS/tasks.c **** 				}
1529:../Dave/Generated/FREERTOS/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1530              	 .loc 1 1529 0
 1531 0078 344B     	 ldr r3,.L103
 1532 007a 1B68     	 ldr r3,[r3]
 1533 007c BA69     	 ldr r2,[r7,#24]
 1534 007e 9A42     	 cmp r2,r3
 1535 0080 01D1     	 bne .L96
1530:../Dave/Generated/FREERTOS/tasks.c **** 				{
1531:../Dave/Generated/FREERTOS/tasks.c **** 					/* Setting the priority of the running task down means
1532:../Dave/Generated/FREERTOS/tasks.c **** 					there may now be another task of higher priority that
1533:../Dave/Generated/FREERTOS/tasks.c **** 					is ready to execute. */
1534:../Dave/Generated/FREERTOS/tasks.c **** 					xYieldRequired = pdTRUE;
 1536              	 .loc 1 1534 0
 1537 0082 0123     	 movs r3,#1
 1538 0084 FB61     	 str r3,[r7,#28]
 1539              	.L96:
1535:../Dave/Generated/FREERTOS/tasks.c **** 				}
1536:../Dave/Generated/FREERTOS/tasks.c **** 				else
1537:../Dave/Generated/FREERTOS/tasks.c **** 				{
1538:../Dave/Generated/FREERTOS/tasks.c **** 					/* Setting the priority of any other task down does not
1539:../Dave/Generated/FREERTOS/tasks.c **** 					require a yield as the running task must be above the
1540:../Dave/Generated/FREERTOS/tasks.c **** 					new priority of the task being modified. */
1541:../Dave/Generated/FREERTOS/tasks.c **** 				}
1542:../Dave/Generated/FREERTOS/tasks.c **** 
1543:../Dave/Generated/FREERTOS/tasks.c **** 				/* Remember the ready list the task might be referenced from
1544:../Dave/Generated/FREERTOS/tasks.c **** 				before its uxPriority member is changed so the
1545:../Dave/Generated/FREERTOS/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1546:../Dave/Generated/FREERTOS/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1540              	 .loc 1 1546 0
 1541 0086 BB69     	 ldr r3,[r7,#24]
 1542 0088 DB6A     	 ldr r3,[r3,#44]
 1543 008a 3B61     	 str r3,[r7,#16]
1547:../Dave/Generated/FREERTOS/tasks.c **** 
1548:../Dave/Generated/FREERTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1549:../Dave/Generated/FREERTOS/tasks.c **** 				{
1550:../Dave/Generated/FREERTOS/tasks.c **** 					/* Only change the priority being used if the task is not
1551:../Dave/Generated/FREERTOS/tasks.c **** 					currently using an inherited priority. */
1552:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1544              	 .loc 1 1552 0
 1545 008c BB69     	 ldr r3,[r7,#24]
 1546 008e DA6C     	 ldr r2,[r3,#76]
 1547 0090 BB69     	 ldr r3,[r7,#24]
 1548 0092 DB6A     	 ldr r3,[r3,#44]
 1549 0094 9A42     	 cmp r2,r3
 1550 0096 02D1     	 bne .L97
1553:../Dave/Generated/FREERTOS/tasks.c **** 					{
1554:../Dave/Generated/FREERTOS/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1551              	 .loc 1 1554 0
 1552 0098 BB69     	 ldr r3,[r7,#24]
 1553 009a 3A68     	 ldr r2,[r7]
 1554 009c DA62     	 str r2,[r3,#44]
 1555              	.L97:
1555:../Dave/Generated/FREERTOS/tasks.c **** 					}
1556:../Dave/Generated/FREERTOS/tasks.c **** 					else
1557:../Dave/Generated/FREERTOS/tasks.c **** 					{
1558:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1559:../Dave/Generated/FREERTOS/tasks.c **** 					}
1560:../Dave/Generated/FREERTOS/tasks.c **** 
1561:../Dave/Generated/FREERTOS/tasks.c **** 					/* The base priority gets set whatever. */
1562:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1556              	 .loc 1 1562 0
 1557 009e BB69     	 ldr r3,[r7,#24]
 1558 00a0 3A68     	 ldr r2,[r7]
 1559 00a2 DA64     	 str r2,[r3,#76]
1563:../Dave/Generated/FREERTOS/tasks.c **** 				}
1564:../Dave/Generated/FREERTOS/tasks.c **** 				#else
1565:../Dave/Generated/FREERTOS/tasks.c **** 				{
1566:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1567:../Dave/Generated/FREERTOS/tasks.c **** 				}
1568:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
1569:../Dave/Generated/FREERTOS/tasks.c **** 
1570:../Dave/Generated/FREERTOS/tasks.c **** 				/* Only reset the event list item value if the value is not
1571:../Dave/Generated/FREERTOS/tasks.c **** 				being used for anything else. */
1572:../Dave/Generated/FREERTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1560              	 .loc 1 1572 0
 1561 00a4 BB69     	 ldr r3,[r7,#24]
 1562 00a6 9B69     	 ldr r3,[r3,#24]
 1563 00a8 002B     	 cmp r3,#0
 1564 00aa 04DB     	 blt .L98
1573:../Dave/Generated/FREERTOS/tasks.c **** 				{
1574:../Dave/Generated/FREERTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1565              	 .loc 1 1574 0
 1566 00ac 3B68     	 ldr r3,[r7]
 1567 00ae C3F10502 	 rsb r2,r3,#5
 1568 00b2 BB69     	 ldr r3,[r7,#24]
 1569 00b4 9A61     	 str r2,[r3,#24]
 1570              	.L98:
1575:../Dave/Generated/FREERTOS/tasks.c **** 				}
1576:../Dave/Generated/FREERTOS/tasks.c **** 				else
1577:../Dave/Generated/FREERTOS/tasks.c **** 				{
1578:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1579:../Dave/Generated/FREERTOS/tasks.c **** 				}
1580:../Dave/Generated/FREERTOS/tasks.c **** 
1581:../Dave/Generated/FREERTOS/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1582:../Dave/Generated/FREERTOS/tasks.c **** 				nothing more than change its priority variable. However, if
1583:../Dave/Generated/FREERTOS/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1584:../Dave/Generated/FREERTOS/tasks.c **** 				in the list appropriate to its new priority. */
1585:../Dave/Generated/FREERTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1571              	 .loc 1 1585 0
 1572 00b6 BB69     	 ldr r3,[r7,#24]
 1573 00b8 5969     	 ldr r1,[r3,#20]
 1574 00ba 3A69     	 ldr r2,[r7,#16]
 1575 00bc 1346     	 mov r3,r2
 1576 00be 9B00     	 lsls r3,r3,#2
 1577 00c0 1344     	 add r3,r3,r2
 1578 00c2 9B00     	 lsls r3,r3,#2
 1579 00c4 224A     	 ldr r2,.L103+4
 1580 00c6 1344     	 add r3,r3,r2
 1581 00c8 9942     	 cmp r1,r3
 1582 00ca 01D1     	 bne .L99
 1583              	 .loc 1 1585 0 is_stmt 0 discriminator 1
 1584 00cc 0123     	 movs r3,#1
 1585 00ce 00E0     	 b .L100
 1586              	.L99:
 1587              	 .loc 1 1585 0 discriminator 2
 1588 00d0 0023     	 movs r3,#0
 1589              	.L100:
 1590              	 .loc 1 1585 0 discriminator 4
 1591 00d2 002B     	 cmp r3,#0
 1592 00d4 2AD0     	 beq .L101
1586:../Dave/Generated/FREERTOS/tasks.c **** 				{
1587:../Dave/Generated/FREERTOS/tasks.c **** 					/* The task is currently in its ready list - remove before
1588:../Dave/Generated/FREERTOS/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1589:../Dave/Generated/FREERTOS/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1590:../Dave/Generated/FREERTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1593              	 .loc 1 1590 0 is_stmt 1
 1594 00d6 BB69     	 ldr r3,[r7,#24]
 1595 00d8 0433     	 adds r3,r3,#4
 1596 00da 1846     	 mov r0,r3
 1597 00dc FFF7FEFF 	 bl uxListRemove
 1598 00e0 0346     	 mov r3,r0
 1599 00e2 002B     	 cmp r3,#0
 1600 00e4 09D1     	 bne .L102
1591:../Dave/Generated/FREERTOS/tasks.c **** 					{
1592:../Dave/Generated/FREERTOS/tasks.c **** 						/* It is known that the task is in its ready list so
1593:../Dave/Generated/FREERTOS/tasks.c **** 						there is no need to check again and the port level
1594:../Dave/Generated/FREERTOS/tasks.c **** 						reset macro can be called directly. */
1595:../Dave/Generated/FREERTOS/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1601              	 .loc 1 1595 0
 1602 00e6 3B69     	 ldr r3,[r7,#16]
 1603 00e8 0122     	 movs r2,#1
 1604 00ea 02FA03F3 	 lsl r3,r2,r3
 1605 00ee DA43     	 mvns r2,r3
 1606 00f0 184B     	 ldr r3,.L103+8
 1607 00f2 1B68     	 ldr r3,[r3]
 1608 00f4 1340     	 ands r3,r3,r2
 1609 00f6 174A     	 ldr r2,.L103+8
 1610 00f8 1360     	 str r3,[r2]
 1611              	.L102:
1596:../Dave/Generated/FREERTOS/tasks.c **** 					}
1597:../Dave/Generated/FREERTOS/tasks.c **** 					else
1598:../Dave/Generated/FREERTOS/tasks.c **** 					{
1599:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1600:../Dave/Generated/FREERTOS/tasks.c **** 					}
1601:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1612              	 .loc 1 1601 0
 1613 00fa BB69     	 ldr r3,[r7,#24]
 1614 00fc DB6A     	 ldr r3,[r3,#44]
 1615 00fe 1A46     	 mov r2,r3
 1616 0100 0123     	 movs r3,#1
 1617 0102 03FA02F2 	 lsl r2,r3,r2
 1618 0106 134B     	 ldr r3,.L103+8
 1619 0108 1B68     	 ldr r3,[r3]
 1620 010a 1343     	 orrs r3,r3,r2
 1621 010c 114A     	 ldr r2,.L103+8
 1622 010e 1360     	 str r3,[r2]
 1623 0110 BB69     	 ldr r3,[r7,#24]
 1624 0112 DA6A     	 ldr r2,[r3,#44]
 1625 0114 1346     	 mov r3,r2
 1626 0116 9B00     	 lsls r3,r3,#2
 1627 0118 1344     	 add r3,r3,r2
 1628 011a 9B00     	 lsls r3,r3,#2
 1629 011c 0C4A     	 ldr r2,.L103+4
 1630 011e 1A44     	 add r2,r2,r3
 1631 0120 BB69     	 ldr r3,[r7,#24]
 1632 0122 0433     	 adds r3,r3,#4
 1633 0124 1046     	 mov r0,r2
 1634 0126 1946     	 mov r1,r3
 1635 0128 FFF7FEFF 	 bl vListInsertEnd
 1636              	.L101:
1602:../Dave/Generated/FREERTOS/tasks.c **** 				}
1603:../Dave/Generated/FREERTOS/tasks.c **** 				else
1604:../Dave/Generated/FREERTOS/tasks.c **** 				{
1605:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1606:../Dave/Generated/FREERTOS/tasks.c **** 				}
1607:../Dave/Generated/FREERTOS/tasks.c **** 
1608:../Dave/Generated/FREERTOS/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1637              	 .loc 1 1608 0
 1638 012c FB69     	 ldr r3,[r7,#28]
 1639 012e 002B     	 cmp r3,#0
 1640 0130 07D0     	 beq .L94
1609:../Dave/Generated/FREERTOS/tasks.c **** 				{
1610:../Dave/Generated/FREERTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1641              	 .loc 1 1610 0
 1642 0132 094B     	 ldr r3,.L103+12
 1643 0134 4FF08052 	 mov r2,#268435456
 1644 0138 1A60     	 str r2,[r3]
 1645              	
 1646 013a BFF34F8F 	 dsb
 1647              	
 1648              	
 1649 013e BFF36F8F 	 isb
 1650              	
 1651              	 .thumb
 1652              	.L94:
1611:../Dave/Generated/FREERTOS/tasks.c **** 				}
1612:../Dave/Generated/FREERTOS/tasks.c **** 				else
1613:../Dave/Generated/FREERTOS/tasks.c **** 				{
1614:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1615:../Dave/Generated/FREERTOS/tasks.c **** 				}
1616:../Dave/Generated/FREERTOS/tasks.c **** 
1617:../Dave/Generated/FREERTOS/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1618:../Dave/Generated/FREERTOS/tasks.c **** 				optimised task selection is not being used. */
1619:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1620:../Dave/Generated/FREERTOS/tasks.c **** 			}
1621:../Dave/Generated/FREERTOS/tasks.c **** 		}
1622:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 1653              	 .loc 1 1622 0
 1654 0142 FFF7FEFF 	 bl vPortExitCritical
1623:../Dave/Generated/FREERTOS/tasks.c **** 	}
 1655              	 .loc 1 1623 0
 1656 0146 2037     	 adds r7,r7,#32
 1657              	.LCFI48:
 1658              	 .cfi_def_cfa_offset 8
 1659 0148 BD46     	 mov sp,r7
 1660              	.LCFI49:
 1661              	 .cfi_def_cfa_register 13
 1662              	 
 1663 014a 80BD     	 pop {r7,pc}
 1664              	.L104:
 1665              	 .align 2
 1666              	.L103:
 1667 014c 00000000 	 .word pxCurrentTCB
 1668 0150 00000000 	 .word pxReadyTasksLists
 1669 0154 00000000 	 .word uxTopReadyPriority
 1670 0158 04ED00E0 	 .word -536810236
 1671              	 .cfi_endproc
 1672              	.LFE144:
 1674              	 .section .text.vTaskSuspend,"ax",%progbits
 1675              	 .align 2
 1676              	 .global vTaskSuspend
 1677              	 .thumb
 1678              	 .thumb_func
 1680              	vTaskSuspend:
 1681              	.LFB145:
1624:../Dave/Generated/FREERTOS/tasks.c **** 
1625:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1626:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1627:../Dave/Generated/FREERTOS/tasks.c **** 
1628:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1629:../Dave/Generated/FREERTOS/tasks.c **** 
1630:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1631:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1682              	 .loc 1 1631 0
 1683              	 .cfi_startproc
 1684              	 
 1685              	 
 1686 0000 80B5     	 push {r7,lr}
 1687              	.LCFI50:
 1688              	 .cfi_def_cfa_offset 8
 1689              	 .cfi_offset 7,-8
 1690              	 .cfi_offset 14,-4
 1691 0002 84B0     	 sub sp,sp,#16
 1692              	.LCFI51:
 1693              	 .cfi_def_cfa_offset 24
 1694 0004 00AF     	 add r7,sp,#0
 1695              	.LCFI52:
 1696              	 .cfi_def_cfa_register 7
 1697 0006 7860     	 str r0,[r7,#4]
1632:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
1633:../Dave/Generated/FREERTOS/tasks.c **** 
1634:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 1698              	 .loc 1 1634 0
 1699 0008 FFF7FEFF 	 bl vPortEnterCritical
1635:../Dave/Generated/FREERTOS/tasks.c **** 		{
1636:../Dave/Generated/FREERTOS/tasks.c **** 			/* If null is passed in here then it is the running task that is
1637:../Dave/Generated/FREERTOS/tasks.c **** 			being suspended. */
1638:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1700              	 .loc 1 1638 0
 1701 000c 7B68     	 ldr r3,[r7,#4]
 1702 000e 002B     	 cmp r3,#0
 1703 0010 02D1     	 bne .L106
 1704              	 .loc 1 1638 0 is_stmt 0 discriminator 1
 1705 0012 3B4B     	 ldr r3,.L119
 1706 0014 1B68     	 ldr r3,[r3]
 1707 0016 00E0     	 b .L107
 1708              	.L106:
 1709              	 .loc 1 1638 0 discriminator 2
 1710 0018 7B68     	 ldr r3,[r7,#4]
 1711              	.L107:
 1712              	 .loc 1 1638 0 discriminator 4
 1713 001a FB60     	 str r3,[r7,#12]
1639:../Dave/Generated/FREERTOS/tasks.c **** 
1640:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1641:../Dave/Generated/FREERTOS/tasks.c **** 
1642:../Dave/Generated/FREERTOS/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1643:../Dave/Generated/FREERTOS/tasks.c **** 			suspended list. */
1644:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1714              	 .loc 1 1644 0 is_stmt 1 discriminator 4
 1715 001c FB68     	 ldr r3,[r7,#12]
 1716 001e 0433     	 adds r3,r3,#4
 1717 0020 1846     	 mov r0,r3
 1718 0022 FFF7FEFF 	 bl uxListRemove
 1719 0026 0346     	 mov r3,r0
 1720 0028 002B     	 cmp r3,#0
 1721 002a 15D1     	 bne .L108
1645:../Dave/Generated/FREERTOS/tasks.c **** 			{
1646:../Dave/Generated/FREERTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1722              	 .loc 1 1646 0
 1723 002c FB68     	 ldr r3,[r7,#12]
 1724 002e DA6A     	 ldr r2,[r3,#44]
 1725 0030 3449     	 ldr r1,.L119+4
 1726 0032 1346     	 mov r3,r2
 1727 0034 9B00     	 lsls r3,r3,#2
 1728 0036 1344     	 add r3,r3,r2
 1729 0038 9B00     	 lsls r3,r3,#2
 1730 003a 0B44     	 add r3,r3,r1
 1731 003c 1B68     	 ldr r3,[r3]
 1732 003e 002B     	 cmp r3,#0
 1733 0040 0AD1     	 bne .L108
 1734              	 .loc 1 1646 0 is_stmt 0 discriminator 1
 1735 0042 FB68     	 ldr r3,[r7,#12]
 1736 0044 DB6A     	 ldr r3,[r3,#44]
 1737 0046 1A46     	 mov r2,r3
 1738 0048 0123     	 movs r3,#1
 1739 004a 9340     	 lsls r3,r3,r2
 1740 004c DA43     	 mvns r2,r3
 1741 004e 2E4B     	 ldr r3,.L119+8
 1742 0050 1B68     	 ldr r3,[r3]
 1743 0052 1340     	 ands r3,r3,r2
 1744 0054 2C4A     	 ldr r2,.L119+8
 1745 0056 1360     	 str r3,[r2]
 1746              	.L108:
1647:../Dave/Generated/FREERTOS/tasks.c **** 			}
1648:../Dave/Generated/FREERTOS/tasks.c **** 			else
1649:../Dave/Generated/FREERTOS/tasks.c **** 			{
1650:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1651:../Dave/Generated/FREERTOS/tasks.c **** 			}
1652:../Dave/Generated/FREERTOS/tasks.c **** 
1653:../Dave/Generated/FREERTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1654:../Dave/Generated/FREERTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1747              	 .loc 1 1654 0 is_stmt 1
 1748 0058 FB68     	 ldr r3,[r7,#12]
 1749 005a 9B6A     	 ldr r3,[r3,#40]
 1750 005c 002B     	 cmp r3,#0
 1751 005e 04D0     	 beq .L110
1655:../Dave/Generated/FREERTOS/tasks.c **** 			{
1656:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1752              	 .loc 1 1656 0
 1753 0060 FB68     	 ldr r3,[r7,#12]
 1754 0062 1833     	 adds r3,r3,#24
 1755 0064 1846     	 mov r0,r3
 1756 0066 FFF7FEFF 	 bl uxListRemove
 1757              	.L110:
1657:../Dave/Generated/FREERTOS/tasks.c **** 			}
1658:../Dave/Generated/FREERTOS/tasks.c **** 			else
1659:../Dave/Generated/FREERTOS/tasks.c **** 			{
1660:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1661:../Dave/Generated/FREERTOS/tasks.c **** 			}
1662:../Dave/Generated/FREERTOS/tasks.c **** 
1663:../Dave/Generated/FREERTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1758              	 .loc 1 1663 0
 1759 006a FB68     	 ldr r3,[r7,#12]
 1760 006c 0433     	 adds r3,r3,#4
 1761 006e 2748     	 ldr r0,.L119+12
 1762 0070 1946     	 mov r1,r3
 1763 0072 FFF7FEFF 	 bl vListInsertEnd
1664:../Dave/Generated/FREERTOS/tasks.c **** 
1665:../Dave/Generated/FREERTOS/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1666:../Dave/Generated/FREERTOS/tasks.c **** 			{
1667:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1764              	 .loc 1 1667 0
 1765 0076 FB68     	 ldr r3,[r7,#12]
 1766 0078 93F86C30 	 ldrb r3,[r3,#108]
 1767 007c DBB2     	 uxtb r3,r3
 1768 007e 012B     	 cmp r3,#1
 1769 0080 03D1     	 bne .L111
1668:../Dave/Generated/FREERTOS/tasks.c **** 				{
1669:../Dave/Generated/FREERTOS/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1670:../Dave/Generated/FREERTOS/tasks.c **** 					now suspended, so no notification was received. */
1671:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1770              	 .loc 1 1671 0
 1771 0082 FB68     	 ldr r3,[r7,#12]
 1772 0084 0022     	 movs r2,#0
 1773 0086 83F86C20 	 strb r2,[r3,#108]
 1774              	.L111:
1672:../Dave/Generated/FREERTOS/tasks.c **** 				}
1673:../Dave/Generated/FREERTOS/tasks.c **** 			}
1674:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
1675:../Dave/Generated/FREERTOS/tasks.c **** 		}
1676:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 1775              	 .loc 1 1676 0
 1776 008a FFF7FEFF 	 bl vPortExitCritical
1677:../Dave/Generated/FREERTOS/tasks.c **** 
1678:../Dave/Generated/FREERTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1777              	 .loc 1 1678 0
 1778 008e 204B     	 ldr r3,.L119+16
 1779 0090 1B68     	 ldr r3,[r3]
 1780 0092 002B     	 cmp r3,#0
 1781 0094 05D0     	 beq .L112
1679:../Dave/Generated/FREERTOS/tasks.c **** 		{
1680:../Dave/Generated/FREERTOS/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1681:../Dave/Generated/FREERTOS/tasks.c **** 			task that is now in the Suspended state. */
1682:../Dave/Generated/FREERTOS/tasks.c **** 			taskENTER_CRITICAL();
 1782              	 .loc 1 1682 0
 1783 0096 FFF7FEFF 	 bl vPortEnterCritical
1683:../Dave/Generated/FREERTOS/tasks.c **** 			{
1684:../Dave/Generated/FREERTOS/tasks.c **** 				prvResetNextTaskUnblockTime();
 1784              	 .loc 1 1684 0
 1785 009a FFF7FEFF 	 bl prvResetNextTaskUnblockTime
1685:../Dave/Generated/FREERTOS/tasks.c **** 			}
1686:../Dave/Generated/FREERTOS/tasks.c **** 			taskEXIT_CRITICAL();
 1786              	 .loc 1 1686 0
 1787 009e FFF7FEFF 	 bl vPortExitCritical
 1788              	.L112:
1687:../Dave/Generated/FREERTOS/tasks.c **** 		}
1688:../Dave/Generated/FREERTOS/tasks.c **** 		else
1689:../Dave/Generated/FREERTOS/tasks.c **** 		{
1690:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1691:../Dave/Generated/FREERTOS/tasks.c **** 		}
1692:../Dave/Generated/FREERTOS/tasks.c **** 
1693:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1789              	 .loc 1 1693 0
 1790 00a2 174B     	 ldr r3,.L119
 1791 00a4 1B68     	 ldr r3,[r3]
 1792 00a6 FA68     	 ldr r2,[r7,#12]
 1793 00a8 9A42     	 cmp r2,r3
 1794 00aa 26D1     	 bne .L105
1694:../Dave/Generated/FREERTOS/tasks.c **** 		{
1695:../Dave/Generated/FREERTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1795              	 .loc 1 1695 0
 1796 00ac 184B     	 ldr r3,.L119+16
 1797 00ae 1B68     	 ldr r3,[r3]
 1798 00b0 002B     	 cmp r3,#0
 1799 00b2 16D0     	 beq .L114
1696:../Dave/Generated/FREERTOS/tasks.c **** 			{
1697:../Dave/Generated/FREERTOS/tasks.c **** 				/* The current task has just been suspended. */
1698:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1800              	 .loc 1 1698 0
 1801 00b4 174B     	 ldr r3,.L119+20
 1802 00b6 1B68     	 ldr r3,[r3]
 1803 00b8 002B     	 cmp r3,#0
 1804 00ba 09D0     	 beq .L115
 1805              	.LBB133:
 1806              	.LBB134:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 1807              	 .loc 2 195 0 discriminator 1
 1808              	
 1809 00bc 4FF0FC03 	 mov r3,#252
 1810 00c0 83F31188 	 msr basepri,r3
 1811 00c4 BFF36F8F 	 isb 
 1812 00c8 BFF34F8F 	 dsb 
 1813              	
 1814              	
 1815              	 .thumb
 1816 00cc BB60     	 str r3,[r7,#8]
 1817              	.L116:
 1818              	.LBE134:
 1819              	.LBE133:
 1820              	 .loc 1 1698 0 discriminator 1
 1821 00ce FEE7     	 b .L116
 1822              	.L115:
1699:../Dave/Generated/FREERTOS/tasks.c **** 				portYIELD_WITHIN_API();
 1823              	 .loc 1 1699 0
 1824 00d0 114B     	 ldr r3,.L119+24
 1825 00d2 4FF08052 	 mov r2,#268435456
 1826 00d6 1A60     	 str r2,[r3]
 1827              	
 1828 00d8 BFF34F8F 	 dsb
 1829              	
 1830              	
 1831 00dc BFF36F8F 	 isb
 1832              	
 1833              	 .thumb
 1834 00e0 0BE0     	 b .L105
 1835              	.L114:
1700:../Dave/Generated/FREERTOS/tasks.c **** 			}
1701:../Dave/Generated/FREERTOS/tasks.c **** 			else
1702:../Dave/Generated/FREERTOS/tasks.c **** 			{
1703:../Dave/Generated/FREERTOS/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1704:../Dave/Generated/FREERTOS/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1705:../Dave/Generated/FREERTOS/tasks.c **** 				must be adjusted to point to a different task. */
1706:../Dave/Generated/FREERTOS/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 1836              	 .loc 1 1706 0
 1837 00e2 0A4B     	 ldr r3,.L119+12
 1838 00e4 1A68     	 ldr r2,[r3]
 1839 00e6 0D4B     	 ldr r3,.L119+28
 1840 00e8 1B68     	 ldr r3,[r3]
 1841 00ea 9A42     	 cmp r2,r3
 1842 00ec 03D1     	 bne .L118
1707:../Dave/Generated/FREERTOS/tasks.c **** 				{
1708:../Dave/Generated/FREERTOS/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1709:../Dave/Generated/FREERTOS/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1710:../Dave/Generated/FREERTOS/tasks.c **** 					be set to point to it no matter what its relative priority
1711:../Dave/Generated/FREERTOS/tasks.c **** 					is. */
1712:../Dave/Generated/FREERTOS/tasks.c **** 					pxCurrentTCB = NULL;
 1843              	 .loc 1 1712 0
 1844 00ee 044B     	 ldr r3,.L119
 1845 00f0 0022     	 movs r2,#0
 1846 00f2 1A60     	 str r2,[r3]
 1847 00f4 01E0     	 b .L105
 1848              	.L118:
1713:../Dave/Generated/FREERTOS/tasks.c **** 				}
1714:../Dave/Generated/FREERTOS/tasks.c **** 				else
1715:../Dave/Generated/FREERTOS/tasks.c **** 				{
1716:../Dave/Generated/FREERTOS/tasks.c **** 					vTaskSwitchContext();
 1849              	 .loc 1 1716 0
 1850 00f6 FFF7FEFF 	 bl vTaskSwitchContext
 1851              	.L105:
1717:../Dave/Generated/FREERTOS/tasks.c **** 				}
1718:../Dave/Generated/FREERTOS/tasks.c **** 			}
1719:../Dave/Generated/FREERTOS/tasks.c **** 		}
1720:../Dave/Generated/FREERTOS/tasks.c **** 		else
1721:../Dave/Generated/FREERTOS/tasks.c **** 		{
1722:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1723:../Dave/Generated/FREERTOS/tasks.c **** 		}
1724:../Dave/Generated/FREERTOS/tasks.c **** 	}
 1852              	 .loc 1 1724 0
 1853 00fa 1037     	 adds r7,r7,#16
 1854              	.LCFI53:
 1855              	 .cfi_def_cfa_offset 8
 1856 00fc BD46     	 mov sp,r7
 1857              	.LCFI54:
 1858              	 .cfi_def_cfa_register 13
 1859              	 
 1860 00fe 80BD     	 pop {r7,pc}
 1861              	.L120:
 1862              	 .align 2
 1863              	.L119:
 1864 0100 00000000 	 .word pxCurrentTCB
 1865 0104 00000000 	 .word pxReadyTasksLists
 1866 0108 00000000 	 .word uxTopReadyPriority
 1867 010c 00000000 	 .word xSuspendedTaskList
 1868 0110 00000000 	 .word xSchedulerRunning
 1869 0114 00000000 	 .word uxSchedulerSuspended
 1870 0118 04ED00E0 	 .word -536810236
 1871 011c 00000000 	 .word uxCurrentNumberOfTasks
 1872              	 .cfi_endproc
 1873              	.LFE145:
 1875              	 .section .text.prvTaskIsTaskSuspended,"ax",%progbits
 1876              	 .align 2
 1877              	 .thumb
 1878              	 .thumb_func
 1880              	prvTaskIsTaskSuspended:
 1881              	.LFB146:
1725:../Dave/Generated/FREERTOS/tasks.c **** 
1726:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1727:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1728:../Dave/Generated/FREERTOS/tasks.c **** 
1729:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1730:../Dave/Generated/FREERTOS/tasks.c **** 
1731:../Dave/Generated/FREERTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1732:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1882              	 .loc 1 1732 0
 1883              	 .cfi_startproc
 1884              	 
 1885              	 
 1886              	 
 1887 0000 80B4     	 push {r7}
 1888              	.LCFI55:
 1889              	 .cfi_def_cfa_offset 4
 1890              	 .cfi_offset 7,-4
 1891 0002 87B0     	 sub sp,sp,#28
 1892              	.LCFI56:
 1893              	 .cfi_def_cfa_offset 32
 1894 0004 00AF     	 add r7,sp,#0
 1895              	.LCFI57:
 1896              	 .cfi_def_cfa_register 7
 1897 0006 7860     	 str r0,[r7,#4]
1733:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1898              	 .loc 1 1733 0
 1899 0008 0023     	 movs r3,#0
 1900 000a 7B61     	 str r3,[r7,#20]
1734:../Dave/Generated/FREERTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1901              	 .loc 1 1734 0
 1902 000c 7B68     	 ldr r3,[r7,#4]
 1903 000e 3B61     	 str r3,[r7,#16]
1735:../Dave/Generated/FREERTOS/tasks.c **** 
1736:../Dave/Generated/FREERTOS/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1737:../Dave/Generated/FREERTOS/tasks.c **** 		section. */
1738:../Dave/Generated/FREERTOS/tasks.c **** 
1739:../Dave/Generated/FREERTOS/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1740:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTask );
 1904              	 .loc 1 1740 0
 1905 0010 7B68     	 ldr r3,[r7,#4]
 1906 0012 002B     	 cmp r3,#0
 1907 0014 09D1     	 bne .L122
 1908              	.LBB135:
 1909              	.LBB136:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 1910              	 .loc 2 195 0 discriminator 1
 1911              	
 1912 0016 4FF0FC03 	 mov r3,#252
 1913 001a 83F31188 	 msr basepri,r3
 1914 001e BFF36F8F 	 isb 
 1915 0022 BFF34F8F 	 dsb 
 1916              	
 1917              	
 1918              	 .thumb
 1919 0026 FB60     	 str r3,[r7,#12]
 1920              	.L123:
 1921              	.LBE136:
 1922              	.LBE135:
 1923              	 .loc 1 1740 0 discriminator 1
 1924 0028 FEE7     	 b .L123
 1925              	.L122:
1741:../Dave/Generated/FREERTOS/tasks.c **** 
1742:../Dave/Generated/FREERTOS/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1743:../Dave/Generated/FREERTOS/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1926              	 .loc 1 1743 0
 1927 002a 3B69     	 ldr r3,[r7,#16]
 1928 002c 5B69     	 ldr r3,[r3,#20]
 1929 002e 0F4A     	 ldr r2,.L130
 1930 0030 9342     	 cmp r3,r2
 1931 0032 01D1     	 bne .L124
 1932              	 .loc 1 1743 0 is_stmt 0 discriminator 1
 1933 0034 0123     	 movs r3,#1
 1934 0036 00E0     	 b .L125
 1935              	.L124:
 1936              	 .loc 1 1743 0 discriminator 2
 1937 0038 0023     	 movs r3,#0
 1938              	.L125:
 1939              	 .loc 1 1743 0 discriminator 4
 1940 003a 002B     	 cmp r3,#0
 1941 003c 0FD0     	 beq .L126
1744:../Dave/Generated/FREERTOS/tasks.c **** 		{
1745:../Dave/Generated/FREERTOS/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1746:../Dave/Generated/FREERTOS/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1942              	 .loc 1 1746 0 is_stmt 1
 1943 003e 3B69     	 ldr r3,[r7,#16]
 1944 0040 9B6A     	 ldr r3,[r3,#40]
 1945 0042 0B4A     	 ldr r2,.L130+4
 1946 0044 9342     	 cmp r3,r2
 1947 0046 0AD0     	 beq .L126
1747:../Dave/Generated/FREERTOS/tasks.c **** 			{
1748:../Dave/Generated/FREERTOS/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1749:../Dave/Generated/FREERTOS/tasks.c **** 				state, or because is is blocked with no timeout? */
1750:../Dave/Generated/FREERTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 1948              	 .loc 1 1750 0
 1949 0048 3B69     	 ldr r3,[r7,#16]
 1950 004a 9B6A     	 ldr r3,[r3,#40]
 1951 004c 002B     	 cmp r3,#0
 1952 004e 01D1     	 bne .L127
 1953              	 .loc 1 1750 0 is_stmt 0 discriminator 1
 1954 0050 0123     	 movs r3,#1
 1955 0052 00E0     	 b .L128
 1956              	.L127:
 1957              	 .loc 1 1750 0 discriminator 2
 1958 0054 0023     	 movs r3,#0
 1959              	.L128:
 1960              	 .loc 1 1750 0 discriminator 4
 1961 0056 002B     	 cmp r3,#0
 1962 0058 01D0     	 beq .L126
1751:../Dave/Generated/FREERTOS/tasks.c **** 				{
1752:../Dave/Generated/FREERTOS/tasks.c **** 					xReturn = pdTRUE;
 1963              	 .loc 1 1752 0 is_stmt 1
 1964 005a 0123     	 movs r3,#1
 1965 005c 7B61     	 str r3,[r7,#20]
 1966              	.L126:
1753:../Dave/Generated/FREERTOS/tasks.c **** 				}
1754:../Dave/Generated/FREERTOS/tasks.c **** 				else
1755:../Dave/Generated/FREERTOS/tasks.c **** 				{
1756:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1757:../Dave/Generated/FREERTOS/tasks.c **** 				}
1758:../Dave/Generated/FREERTOS/tasks.c **** 			}
1759:../Dave/Generated/FREERTOS/tasks.c **** 			else
1760:../Dave/Generated/FREERTOS/tasks.c **** 			{
1761:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1762:../Dave/Generated/FREERTOS/tasks.c **** 			}
1763:../Dave/Generated/FREERTOS/tasks.c **** 		}
1764:../Dave/Generated/FREERTOS/tasks.c **** 		else
1765:../Dave/Generated/FREERTOS/tasks.c **** 		{
1766:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1767:../Dave/Generated/FREERTOS/tasks.c **** 		}
1768:../Dave/Generated/FREERTOS/tasks.c **** 
1769:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 1967              	 .loc 1 1769 0
 1968 005e 7B69     	 ldr r3,[r7,#20]
1770:../Dave/Generated/FREERTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1969              	 .loc 1 1770 0
 1970 0060 1846     	 mov r0,r3
 1971 0062 1C37     	 adds r7,r7,#28
 1972              	.LCFI58:
 1973              	 .cfi_def_cfa_offset 4
 1974 0064 BD46     	 mov sp,r7
 1975              	.LCFI59:
 1976              	 .cfi_def_cfa_register 13
 1977              	 
 1978 0066 5DF8047B 	 ldr r7,[sp],#4
 1979              	.LCFI60:
 1980              	 .cfi_restore 7
 1981              	 .cfi_def_cfa_offset 0
 1982 006a 7047     	 bx lr
 1983              	.L131:
 1984              	 .align 2
 1985              	.L130:
 1986 006c 00000000 	 .word xSuspendedTaskList
 1987 0070 00000000 	 .word xPendingReadyList
 1988              	 .cfi_endproc
 1989              	.LFE146:
 1991              	 .section .text.vTaskResume,"ax",%progbits
 1992              	 .align 2
 1993              	 .global vTaskResume
 1994              	 .thumb
 1995              	 .thumb_func
 1997              	vTaskResume:
 1998              	.LFB147:
1771:../Dave/Generated/FREERTOS/tasks.c **** 
1772:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1773:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1774:../Dave/Generated/FREERTOS/tasks.c **** 
1775:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1776:../Dave/Generated/FREERTOS/tasks.c **** 
1777:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1778:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1999              	 .loc 1 1778 0
 2000              	 .cfi_startproc
 2001              	 
 2002              	 
 2003 0000 80B5     	 push {r7,lr}
 2004              	.LCFI61:
 2005              	 .cfi_def_cfa_offset 8
 2006              	 .cfi_offset 7,-8
 2007              	 .cfi_offset 14,-4
 2008 0002 84B0     	 sub sp,sp,#16
 2009              	.LCFI62:
 2010              	 .cfi_def_cfa_offset 24
 2011 0004 00AF     	 add r7,sp,#0
 2012              	.LCFI63:
 2013              	 .cfi_def_cfa_register 7
 2014 0006 7860     	 str r0,[r7,#4]
1779:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 2015              	 .loc 1 1779 0
 2016 0008 7B68     	 ldr r3,[r7,#4]
 2017 000a FB60     	 str r3,[r7,#12]
1780:../Dave/Generated/FREERTOS/tasks.c **** 
1781:../Dave/Generated/FREERTOS/tasks.c **** 		/* It does not make sense to resume the calling task. */
1782:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTaskToResume );
 2018              	 .loc 1 1782 0
 2019 000c 7B68     	 ldr r3,[r7,#4]
 2020 000e 002B     	 cmp r3,#0
 2021 0010 09D1     	 bne .L133
 2022              	.LBB137:
 2023              	.LBB138:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 2024              	 .loc 2 195 0 discriminator 1
 2025              	
 2026 0012 4FF0FC03 	 mov r3,#252
 2027 0016 83F31188 	 msr basepri,r3
 2028 001a BFF36F8F 	 isb 
 2029 001e BFF34F8F 	 dsb 
 2030              	
 2031              	
 2032              	 .thumb
 2033 0022 BB60     	 str r3,[r7,#8]
 2034              	.L134:
 2035              	.LBE138:
 2036              	.LBE137:
 2037              	 .loc 1 1782 0 discriminator 1
 2038 0024 FEE7     	 b .L134
 2039              	.L133:
1783:../Dave/Generated/FREERTOS/tasks.c **** 
1784:../Dave/Generated/FREERTOS/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1785:../Dave/Generated/FREERTOS/tasks.c **** 		currently executing task. */
1786:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 2040              	 .loc 1 1786 0
 2041 0026 FB68     	 ldr r3,[r7,#12]
 2042 0028 002B     	 cmp r3,#0
 2043 002a 3BD0     	 beq .L132
 2044              	 .loc 1 1786 0 is_stmt 0 discriminator 1
 2045 002c 1F4B     	 ldr r3,.L137
 2046 002e 1B68     	 ldr r3,[r3]
 2047 0030 FA68     	 ldr r2,[r7,#12]
 2048 0032 9A42     	 cmp r2,r3
 2049 0034 36D0     	 beq .L132
1787:../Dave/Generated/FREERTOS/tasks.c **** 		{
1788:../Dave/Generated/FREERTOS/tasks.c **** 			taskENTER_CRITICAL();
 2050              	 .loc 1 1788 0 is_stmt 1
 2051 0036 FFF7FEFF 	 bl vPortEnterCritical
1789:../Dave/Generated/FREERTOS/tasks.c **** 			{
1790:../Dave/Generated/FREERTOS/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2052              	 .loc 1 1790 0
 2053 003a F868     	 ldr r0,[r7,#12]
 2054 003c FFF7FEFF 	 bl prvTaskIsTaskSuspended
 2055 0040 0346     	 mov r3,r0
 2056 0042 002B     	 cmp r3,#0
 2057 0044 2CD0     	 beq .L136
1791:../Dave/Generated/FREERTOS/tasks.c **** 				{
1792:../Dave/Generated/FREERTOS/tasks.c **** 					traceTASK_RESUME( pxTCB );
1793:../Dave/Generated/FREERTOS/tasks.c **** 
1794:../Dave/Generated/FREERTOS/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1795:../Dave/Generated/FREERTOS/tasks.c **** 					suspended because this is inside a critical section. */
1796:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 2058              	 .loc 1 1796 0
 2059 0046 FB68     	 ldr r3,[r7,#12]
 2060 0048 0433     	 adds r3,r3,#4
 2061 004a 1846     	 mov r0,r3
 2062 004c FFF7FEFF 	 bl uxListRemove
1797:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2063              	 .loc 1 1797 0
 2064 0050 FB68     	 ldr r3,[r7,#12]
 2065 0052 DB6A     	 ldr r3,[r3,#44]
 2066 0054 1A46     	 mov r2,r3
 2067 0056 0123     	 movs r3,#1
 2068 0058 03FA02F2 	 lsl r2,r3,r2
 2069 005c 144B     	 ldr r3,.L137+4
 2070 005e 1B68     	 ldr r3,[r3]
 2071 0060 1343     	 orrs r3,r3,r2
 2072 0062 134A     	 ldr r2,.L137+4
 2073 0064 1360     	 str r3,[r2]
 2074 0066 FB68     	 ldr r3,[r7,#12]
 2075 0068 DA6A     	 ldr r2,[r3,#44]
 2076 006a 1346     	 mov r3,r2
 2077 006c 9B00     	 lsls r3,r3,#2
 2078 006e 1344     	 add r3,r3,r2
 2079 0070 9B00     	 lsls r3,r3,#2
 2080 0072 104A     	 ldr r2,.L137+8
 2081 0074 1A44     	 add r2,r2,r3
 2082 0076 FB68     	 ldr r3,[r7,#12]
 2083 0078 0433     	 adds r3,r3,#4
 2084 007a 1046     	 mov r0,r2
 2085 007c 1946     	 mov r1,r3
 2086 007e FFF7FEFF 	 bl vListInsertEnd
1798:../Dave/Generated/FREERTOS/tasks.c **** 
1799:../Dave/Generated/FREERTOS/tasks.c **** 					/* A higher priority task may have just been resumed. */
1800:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2087              	 .loc 1 1800 0
 2088 0082 FB68     	 ldr r3,[r7,#12]
 2089 0084 DA6A     	 ldr r2,[r3,#44]
 2090 0086 094B     	 ldr r3,.L137
 2091 0088 1B68     	 ldr r3,[r3]
 2092 008a DB6A     	 ldr r3,[r3,#44]
 2093 008c 9A42     	 cmp r2,r3
 2094 008e 07D3     	 bcc .L136
1801:../Dave/Generated/FREERTOS/tasks.c **** 					{
1802:../Dave/Generated/FREERTOS/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1803:../Dave/Generated/FREERTOS/tasks.c **** 						but will leave the lists in the correct state for the
1804:../Dave/Generated/FREERTOS/tasks.c **** 						next yield. */
1805:../Dave/Generated/FREERTOS/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 2095              	 .loc 1 1805 0
 2096 0090 094B     	 ldr r3,.L137+12
 2097 0092 4FF08052 	 mov r2,#268435456
 2098 0096 1A60     	 str r2,[r3]
 2099              	
 2100 0098 BFF34F8F 	 dsb
 2101              	
 2102              	
 2103 009c BFF36F8F 	 isb
 2104              	
 2105              	 .thumb
 2106              	.L136:
1806:../Dave/Generated/FREERTOS/tasks.c **** 					}
1807:../Dave/Generated/FREERTOS/tasks.c **** 					else
1808:../Dave/Generated/FREERTOS/tasks.c **** 					{
1809:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1810:../Dave/Generated/FREERTOS/tasks.c **** 					}
1811:../Dave/Generated/FREERTOS/tasks.c **** 				}
1812:../Dave/Generated/FREERTOS/tasks.c **** 				else
1813:../Dave/Generated/FREERTOS/tasks.c **** 				{
1814:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1815:../Dave/Generated/FREERTOS/tasks.c **** 				}
1816:../Dave/Generated/FREERTOS/tasks.c **** 			}
1817:../Dave/Generated/FREERTOS/tasks.c **** 			taskEXIT_CRITICAL();
 2107              	 .loc 1 1817 0
 2108 00a0 FFF7FEFF 	 bl vPortExitCritical
 2109              	.L132:
1818:../Dave/Generated/FREERTOS/tasks.c **** 		}
1819:../Dave/Generated/FREERTOS/tasks.c **** 		else
1820:../Dave/Generated/FREERTOS/tasks.c **** 		{
1821:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1822:../Dave/Generated/FREERTOS/tasks.c **** 		}
1823:../Dave/Generated/FREERTOS/tasks.c **** 	}
 2110              	 .loc 1 1823 0
 2111 00a4 1037     	 adds r7,r7,#16
 2112              	.LCFI64:
 2113              	 .cfi_def_cfa_offset 8
 2114 00a6 BD46     	 mov sp,r7
 2115              	.LCFI65:
 2116              	 .cfi_def_cfa_register 13
 2117              	 
 2118 00a8 80BD     	 pop {r7,pc}
 2119              	.L138:
 2120 00aa 00BF     	 .align 2
 2121              	.L137:
 2122 00ac 00000000 	 .word pxCurrentTCB
 2123 00b0 00000000 	 .word uxTopReadyPriority
 2124 00b4 00000000 	 .word pxReadyTasksLists
 2125 00b8 04ED00E0 	 .word -536810236
 2126              	 .cfi_endproc
 2127              	.LFE147:
 2129              	 .section .text.xTaskResumeFromISR,"ax",%progbits
 2130              	 .align 2
 2131              	 .global xTaskResumeFromISR
 2132              	 .thumb
 2133              	 .thumb_func
 2135              	xTaskResumeFromISR:
 2136              	.LFB148:
1824:../Dave/Generated/FREERTOS/tasks.c **** 
1825:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1826:../Dave/Generated/FREERTOS/tasks.c **** 
1827:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1828:../Dave/Generated/FREERTOS/tasks.c **** 
1829:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1830:../Dave/Generated/FREERTOS/tasks.c **** 
1831:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1832:../Dave/Generated/FREERTOS/tasks.c **** 	{
 2137              	 .loc 1 1832 0
 2138              	 .cfi_startproc
 2139              	 
 2140              	 
 2141 0000 80B5     	 push {r7,lr}
 2142              	.LCFI66:
 2143              	 .cfi_def_cfa_offset 8
 2144              	 .cfi_offset 7,-8
 2145              	 .cfi_offset 14,-4
 2146 0002 8AB0     	 sub sp,sp,#40
 2147              	.LCFI67:
 2148              	 .cfi_def_cfa_offset 48
 2149 0004 00AF     	 add r7,sp,#0
 2150              	.LCFI68:
 2151              	 .cfi_def_cfa_register 7
 2152 0006 7860     	 str r0,[r7,#4]
1833:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2153              	 .loc 1 1833 0
 2154 0008 0023     	 movs r3,#0
 2155 000a 7B62     	 str r3,[r7,#36]
1834:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 2156              	 .loc 1 1834 0
 2157 000c 7B68     	 ldr r3,[r7,#4]
 2158 000e 3B62     	 str r3,[r7,#32]
1835:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1836:../Dave/Generated/FREERTOS/tasks.c **** 
1837:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTaskToResume );
 2159              	 .loc 1 1837 0
 2160 0010 7B68     	 ldr r3,[r7,#4]
 2161 0012 002B     	 cmp r3,#0
 2162 0014 09D1     	 bne .L140
 2163              	.LBB139:
 2164              	.LBB140:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 2165              	 .loc 2 195 0 discriminator 1
 2166              	
 2167 0016 4FF0FC03 	 mov r3,#252
 2168 001a 83F31188 	 msr basepri,r3
 2169 001e BFF36F8F 	 isb 
 2170 0022 BFF34F8F 	 dsb 
 2171              	
 2172              	
 2173              	 .thumb
 2174 0026 BB61     	 str r3,[r7,#24]
 2175              	.L141:
 2176              	.LBE140:
 2177              	.LBE139:
 2178              	 .loc 1 1837 0 discriminator 1
 2179 0028 FEE7     	 b .L141
 2180              	.L140:
1838:../Dave/Generated/FREERTOS/tasks.c **** 
1839:../Dave/Generated/FREERTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1840:../Dave/Generated/FREERTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1841:../Dave/Generated/FREERTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1842:../Dave/Generated/FREERTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1843:../Dave/Generated/FREERTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1844:../Dave/Generated/FREERTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1845:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1846:../Dave/Generated/FREERTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1847:../Dave/Generated/FREERTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1848:../Dave/Generated/FREERTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1849:../Dave/Generated/FREERTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1850:../Dave/Generated/FREERTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1851:../Dave/Generated/FREERTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1852:../Dave/Generated/FREERTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1853:../Dave/Generated/FREERTOS/tasks.c **** 		provided on the following link:
1854:../Dave/Generated/FREERTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1855:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2181              	 .loc 1 1855 0
 2182 002a FFF7FEFF 	 bl vPortValidateInterruptPriority
 2183              	.LBB141:
 2184              	.LBB142:
 211:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 2185              	 .loc 2 211 0
 2186              	
 2187 002e EFF31182 	 mrs r2,basepri
 2188 0032 4FF0FC03 	 mov r3,#252
 2189 0036 83F31188 	 msr basepri,r3
 2190 003a BFF36F8F 	 isb 
 2191 003e BFF34F8F 	 dsb 
 2192              	
 2193              	
 2194              	 .thumb
 2195 0042 7A61     	 str r2,[r7,#20]
 2196 0044 3B61     	 str r3,[r7,#16]
 223:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
 2197              	 .loc 2 223 0
 2198 0046 7B69     	 ldr r3,[r7,#20]
 2199              	.LBE142:
 2200              	.LBE141:
1856:../Dave/Generated/FREERTOS/tasks.c **** 
1857:../Dave/Generated/FREERTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2201              	 .loc 1 1857 0
 2202 0048 FB61     	 str r3,[r7,#28]
1858:../Dave/Generated/FREERTOS/tasks.c **** 		{
1859:../Dave/Generated/FREERTOS/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2203              	 .loc 1 1859 0
 2204 004a 386A     	 ldr r0,[r7,#32]
 2205 004c FFF7FEFF 	 bl prvTaskIsTaskSuspended
 2206 0050 0346     	 mov r3,r0
 2207 0052 002B     	 cmp r3,#0
 2208 0054 31D0     	 beq .L143
1860:../Dave/Generated/FREERTOS/tasks.c **** 			{
1861:../Dave/Generated/FREERTOS/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1862:../Dave/Generated/FREERTOS/tasks.c **** 
1863:../Dave/Generated/FREERTOS/tasks.c **** 				/* Check the ready lists can be accessed. */
1864:../Dave/Generated/FREERTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2209              	 .loc 1 1864 0
 2210 0056 1E4B     	 ldr r3,.L148
 2211 0058 1B68     	 ldr r3,[r3]
 2212 005a 002B     	 cmp r3,#0
 2213 005c 27D1     	 bne .L144
1865:../Dave/Generated/FREERTOS/tasks.c **** 				{
1866:../Dave/Generated/FREERTOS/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1867:../Dave/Generated/FREERTOS/tasks.c **** 					suspended list to the ready list directly. */
1868:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2214              	 .loc 1 1868 0
 2215 005e 3B6A     	 ldr r3,[r7,#32]
 2216 0060 DA6A     	 ldr r2,[r3,#44]
 2217 0062 1C4B     	 ldr r3,.L148+4
 2218 0064 1B68     	 ldr r3,[r3]
 2219 0066 DB6A     	 ldr r3,[r3,#44]
 2220 0068 9A42     	 cmp r2,r3
 2221 006a 01D3     	 bcc .L145
1869:../Dave/Generated/FREERTOS/tasks.c **** 					{
1870:../Dave/Generated/FREERTOS/tasks.c **** 						xYieldRequired = pdTRUE;
 2222              	 .loc 1 1870 0
 2223 006c 0123     	 movs r3,#1
 2224 006e 7B62     	 str r3,[r7,#36]
 2225              	.L145:
1871:../Dave/Generated/FREERTOS/tasks.c **** 					}
1872:../Dave/Generated/FREERTOS/tasks.c **** 					else
1873:../Dave/Generated/FREERTOS/tasks.c **** 					{
1874:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1875:../Dave/Generated/FREERTOS/tasks.c **** 					}
1876:../Dave/Generated/FREERTOS/tasks.c **** 
1877:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2226              	 .loc 1 1877 0
 2227 0070 3B6A     	 ldr r3,[r7,#32]
 2228 0072 0433     	 adds r3,r3,#4
 2229 0074 1846     	 mov r0,r3
 2230 0076 FFF7FEFF 	 bl uxListRemove
1878:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2231              	 .loc 1 1878 0
 2232 007a 3B6A     	 ldr r3,[r7,#32]
 2233 007c DB6A     	 ldr r3,[r3,#44]
 2234 007e 1A46     	 mov r2,r3
 2235 0080 0123     	 movs r3,#1
 2236 0082 03FA02F2 	 lsl r2,r3,r2
 2237 0086 144B     	 ldr r3,.L148+8
 2238 0088 1B68     	 ldr r3,[r3]
 2239 008a 1343     	 orrs r3,r3,r2
 2240 008c 124A     	 ldr r2,.L148+8
 2241 008e 1360     	 str r3,[r2]
 2242 0090 3B6A     	 ldr r3,[r7,#32]
 2243 0092 DA6A     	 ldr r2,[r3,#44]
 2244 0094 1346     	 mov r3,r2
 2245 0096 9B00     	 lsls r3,r3,#2
 2246 0098 1344     	 add r3,r3,r2
 2247 009a 9B00     	 lsls r3,r3,#2
 2248 009c 0F4A     	 ldr r2,.L148+12
 2249 009e 1A44     	 add r2,r2,r3
 2250 00a0 3B6A     	 ldr r3,[r7,#32]
 2251 00a2 0433     	 adds r3,r3,#4
 2252 00a4 1046     	 mov r0,r2
 2253 00a6 1946     	 mov r1,r3
 2254 00a8 FFF7FEFF 	 bl vListInsertEnd
 2255 00ac 05E0     	 b .L143
 2256              	.L144:
1879:../Dave/Generated/FREERTOS/tasks.c **** 				}
1880:../Dave/Generated/FREERTOS/tasks.c **** 				else
1881:../Dave/Generated/FREERTOS/tasks.c **** 				{
1882:../Dave/Generated/FREERTOS/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1883:../Dave/Generated/FREERTOS/tasks.c **** 					is held in the pending ready list until the scheduler is
1884:../Dave/Generated/FREERTOS/tasks.c **** 					unsuspended. */
1885:../Dave/Generated/FREERTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2257              	 .loc 1 1885 0
 2258 00ae 3B6A     	 ldr r3,[r7,#32]
 2259 00b0 1833     	 adds r3,r3,#24
 2260 00b2 0B48     	 ldr r0,.L148+16
 2261 00b4 1946     	 mov r1,r3
 2262 00b6 FFF7FEFF 	 bl vListInsertEnd
 2263              	.L143:
 2264 00ba FB69     	 ldr r3,[r7,#28]
 2265 00bc FB60     	 str r3,[r7,#12]
 2266              	.LBB143:
 2267              	.LBB144:
 2268              	 .loc 2 229 0
 2269 00be FB68     	 ldr r3,[r7,#12]
 2270              	
 2271 00c0 83F31188 	 msr basepri,r3
 2272              	
 2273              	 .thumb
 2274              	.LBE144:
 2275              	.LBE143:
1886:../Dave/Generated/FREERTOS/tasks.c **** 				}
1887:../Dave/Generated/FREERTOS/tasks.c **** 			}
1888:../Dave/Generated/FREERTOS/tasks.c **** 			else
1889:../Dave/Generated/FREERTOS/tasks.c **** 			{
1890:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1891:../Dave/Generated/FREERTOS/tasks.c **** 			}
1892:../Dave/Generated/FREERTOS/tasks.c **** 		}
1893:../Dave/Generated/FREERTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1894:../Dave/Generated/FREERTOS/tasks.c **** 
1895:../Dave/Generated/FREERTOS/tasks.c **** 		return xYieldRequired;
 2276              	 .loc 1 1895 0
 2277 00c4 7B6A     	 ldr r3,[r7,#36]
1896:../Dave/Generated/FREERTOS/tasks.c **** 	}
 2278              	 .loc 1 1896 0
 2279 00c6 1846     	 mov r0,r3
 2280 00c8 2837     	 adds r7,r7,#40
 2281              	.LCFI69:
 2282              	 .cfi_def_cfa_offset 8
 2283 00ca BD46     	 mov sp,r7
 2284              	.LCFI70:
 2285              	 .cfi_def_cfa_register 13
 2286              	 
 2287 00cc 80BD     	 pop {r7,pc}
 2288              	.L149:
 2289 00ce 00BF     	 .align 2
 2290              	.L148:
 2291 00d0 00000000 	 .word uxSchedulerSuspended
 2292 00d4 00000000 	 .word pxCurrentTCB
 2293 00d8 00000000 	 .word uxTopReadyPriority
 2294 00dc 00000000 	 .word pxReadyTasksLists
 2295 00e0 00000000 	 .word xPendingReadyList
 2296              	 .cfi_endproc
 2297              	.LFE148:
 2299              	 .section .rodata
 2300              	 .align 2
 2301              	.LC0:
 2302 0000 49444C45 	 .ascii "IDLE\000"
 2302      00
 2303              	 .section .text.vTaskStartScheduler,"ax",%progbits
 2304              	 .align 2
 2305              	 .global vTaskStartScheduler
 2306              	 .thumb
 2307              	 .thumb_func
 2309              	vTaskStartScheduler:
 2310              	.LFB149:
1897:../Dave/Generated/FREERTOS/tasks.c **** 
1898:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1899:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1900:../Dave/Generated/FREERTOS/tasks.c **** 
1901:../Dave/Generated/FREERTOS/tasks.c **** void vTaskStartScheduler( void )
1902:../Dave/Generated/FREERTOS/tasks.c **** {
 2311              	 .loc 1 1902 0
 2312              	 .cfi_startproc
 2313              	 
 2314              	 
 2315 0000 80B5     	 push {r7,lr}
 2316              	.LCFI71:
 2317              	 .cfi_def_cfa_offset 8
 2318              	 .cfi_offset 7,-8
 2319              	 .cfi_offset 14,-4
 2320 0002 86B0     	 sub sp,sp,#24
 2321              	.LCFI72:
 2322              	 .cfi_def_cfa_offset 32
 2323 0004 02AF     	 add r7,sp,#8
 2324              	.LCFI73:
 2325              	 .cfi_def_cfa 7,24
1903:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xReturn;
1904:../Dave/Generated/FREERTOS/tasks.c **** 
1905:../Dave/Generated/FREERTOS/tasks.c **** 	/* Add the idle task at the lowest priority. */
1906:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1907:../Dave/Generated/FREERTOS/tasks.c **** 	{
1908:../Dave/Generated/FREERTOS/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1909:../Dave/Generated/FREERTOS/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1910:../Dave/Generated/FREERTOS/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1911:../Dave/Generated/FREERTOS/tasks.c **** 
1912:../Dave/Generated/FREERTOS/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1913:../Dave/Generated/FREERTOS/tasks.c **** 		address of the RAM then create the idle task. */
1914:../Dave/Generated/FREERTOS/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1915:../Dave/Generated/FREERTOS/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1916:../Dave/Generated/FREERTOS/tasks.c **** 												configIDLE_TASK_NAME,
1917:../Dave/Generated/FREERTOS/tasks.c **** 												ulIdleTaskStackSize,
1918:../Dave/Generated/FREERTOS/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1919:../Dave/Generated/FREERTOS/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1920:../Dave/Generated/FREERTOS/tasks.c **** 												pxIdleTaskStackBuffer,
1921:../Dave/Generated/FREERTOS/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1922:../Dave/Generated/FREERTOS/tasks.c **** 
1923:../Dave/Generated/FREERTOS/tasks.c **** 		if( xIdleTaskHandle != NULL )
1924:../Dave/Generated/FREERTOS/tasks.c **** 		{
1925:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdPASS;
1926:../Dave/Generated/FREERTOS/tasks.c **** 		}
1927:../Dave/Generated/FREERTOS/tasks.c **** 		else
1928:../Dave/Generated/FREERTOS/tasks.c **** 		{
1929:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdFAIL;
1930:../Dave/Generated/FREERTOS/tasks.c **** 		}
1931:../Dave/Generated/FREERTOS/tasks.c **** 	}
1932:../Dave/Generated/FREERTOS/tasks.c **** 	#else
1933:../Dave/Generated/FREERTOS/tasks.c **** 	{
1934:../Dave/Generated/FREERTOS/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1935:../Dave/Generated/FREERTOS/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
 2326              	 .loc 1 1935 0
 2327 0006 0023     	 movs r3,#0
 2328 0008 0093     	 str r3,[sp]
 2329 000a 1C4B     	 ldr r3,.L155
 2330 000c 0193     	 str r3,[sp,#4]
 2331 000e 1C48     	 ldr r0,.L155+4
 2332 0010 1C49     	 ldr r1,.L155+8
 2333 0012 8222     	 movs r2,#130
 2334 0014 0023     	 movs r3,#0
 2335 0016 FFF7FEFF 	 bl xTaskCreate
 2336 001a F860     	 str r0,[r7,#12]
1936:../Dave/Generated/FREERTOS/tasks.c **** 								configIDLE_TASK_NAME,
1937:../Dave/Generated/FREERTOS/tasks.c **** 								configMINIMAL_STACK_SIZE,
1938:../Dave/Generated/FREERTOS/tasks.c **** 								( void * ) NULL,
1939:../Dave/Generated/FREERTOS/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1940:../Dave/Generated/FREERTOS/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1941:../Dave/Generated/FREERTOS/tasks.c **** 	}
1942:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1943:../Dave/Generated/FREERTOS/tasks.c **** 
1944:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1945:../Dave/Generated/FREERTOS/tasks.c **** 	{
1946:../Dave/Generated/FREERTOS/tasks.c **** 		if( xReturn == pdPASS )
 2337              	 .loc 1 1946 0
 2338 001c FB68     	 ldr r3,[r7,#12]
 2339 001e 012B     	 cmp r3,#1
 2340 0020 02D1     	 bne .L151
1947:../Dave/Generated/FREERTOS/tasks.c **** 		{
1948:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 2341              	 .loc 1 1948 0
 2342 0022 FFF7FEFF 	 bl xTimerCreateTimerTask
 2343 0026 F860     	 str r0,[r7,#12]
 2344              	.L151:
1949:../Dave/Generated/FREERTOS/tasks.c **** 		}
1950:../Dave/Generated/FREERTOS/tasks.c **** 		else
1951:../Dave/Generated/FREERTOS/tasks.c **** 		{
1952:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1953:../Dave/Generated/FREERTOS/tasks.c **** 		}
1954:../Dave/Generated/FREERTOS/tasks.c **** 	}
1955:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configUSE_TIMERS */
1956:../Dave/Generated/FREERTOS/tasks.c **** 
1957:../Dave/Generated/FREERTOS/tasks.c **** 	if( xReturn == pdPASS )
 2345              	 .loc 1 1957 0
 2346 0028 FB68     	 ldr r3,[r7,#12]
 2347 002a 012B     	 cmp r3,#1
 2348 002c 15D1     	 bne .L152
 2349              	.LBB145:
 2350              	.LBB146:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 2351              	 .loc 2 195 0
 2352              	
 2353 002e 4FF0FC03 	 mov r3,#252
 2354 0032 83F31188 	 msr basepri,r3
 2355 0036 BFF36F8F 	 isb 
 2356 003a BFF34F8F 	 dsb 
 2357              	
 2358              	
 2359              	 .thumb
 2360 003e BB60     	 str r3,[r7,#8]
 2361              	.LBE146:
 2362              	.LBE145:
1958:../Dave/Generated/FREERTOS/tasks.c **** 	{
1959:../Dave/Generated/FREERTOS/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1960:../Dave/Generated/FREERTOS/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1961:../Dave/Generated/FREERTOS/tasks.c **** 		the only macro called by the function. */
1962:../Dave/Generated/FREERTOS/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1963:../Dave/Generated/FREERTOS/tasks.c **** 		{
1964:../Dave/Generated/FREERTOS/tasks.c **** 			freertos_tasks_c_additions_init();
1965:../Dave/Generated/FREERTOS/tasks.c **** 		}
1966:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
1967:../Dave/Generated/FREERTOS/tasks.c **** 
1968:../Dave/Generated/FREERTOS/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1969:../Dave/Generated/FREERTOS/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1970:../Dave/Generated/FREERTOS/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1971:../Dave/Generated/FREERTOS/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1972:../Dave/Generated/FREERTOS/tasks.c **** 		starts to run. */
1973:../Dave/Generated/FREERTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
1974:../Dave/Generated/FREERTOS/tasks.c **** 
1975:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1976:../Dave/Generated/FREERTOS/tasks.c **** 		{
1977:../Dave/Generated/FREERTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1978:../Dave/Generated/FREERTOS/tasks.c **** 			structure specific to the task that will run first. */
1979:../Dave/Generated/FREERTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1980:../Dave/Generated/FREERTOS/tasks.c **** 		}
1981:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1982:../Dave/Generated/FREERTOS/tasks.c **** 
1983:../Dave/Generated/FREERTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2363              	 .loc 1 1983 0
 2364 0040 114B     	 ldr r3,.L155+12
 2365 0042 4FF0FF32 	 mov r2,#-1
 2366 0046 1A60     	 str r2,[r3]
1984:../Dave/Generated/FREERTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2367              	 .loc 1 1984 0
 2368 0048 104B     	 ldr r3,.L155+16
 2369 004a 0122     	 movs r2,#1
 2370 004c 1A60     	 str r2,[r3]
1985:../Dave/Generated/FREERTOS/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 2371              	 .loc 1 1985 0
 2372 004e 104B     	 ldr r3,.L155+20
 2373 0050 0022     	 movs r2,#0
 2374 0052 1A60     	 str r2,[r3]
1986:../Dave/Generated/FREERTOS/tasks.c **** 
1987:../Dave/Generated/FREERTOS/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1988:../Dave/Generated/FREERTOS/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1989:../Dave/Generated/FREERTOS/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
1990:../Dave/Generated/FREERTOS/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
1991:../Dave/Generated/FREERTOS/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
1992:../Dave/Generated/FREERTOS/tasks.c **** 		FreeRTOSConfig.h file. */
1993:../Dave/Generated/FREERTOS/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1994:../Dave/Generated/FREERTOS/tasks.c **** 
1995:../Dave/Generated/FREERTOS/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1996:../Dave/Generated/FREERTOS/tasks.c **** 		portable interface. */
1997:../Dave/Generated/FREERTOS/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2375              	 .loc 1 1997 0
 2376 0054 FFF7FEFF 	 bl xPortStartScheduler
 2377 0058 0DE0     	 b .L150
 2378              	.L152:
1998:../Dave/Generated/FREERTOS/tasks.c **** 		{
1999:../Dave/Generated/FREERTOS/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2000:../Dave/Generated/FREERTOS/tasks.c **** 			function will not return. */
2001:../Dave/Generated/FREERTOS/tasks.c **** 		}
2002:../Dave/Generated/FREERTOS/tasks.c **** 		else
2003:../Dave/Generated/FREERTOS/tasks.c **** 		{
2004:../Dave/Generated/FREERTOS/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2005:../Dave/Generated/FREERTOS/tasks.c **** 		}
2006:../Dave/Generated/FREERTOS/tasks.c **** 	}
2007:../Dave/Generated/FREERTOS/tasks.c **** 	else
2008:../Dave/Generated/FREERTOS/tasks.c **** 	{
2009:../Dave/Generated/FREERTOS/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2010:../Dave/Generated/FREERTOS/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2011:../Dave/Generated/FREERTOS/tasks.c **** 		or the timer task. */
2012:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 2379              	 .loc 1 2012 0
 2380 005a FB68     	 ldr r3,[r7,#12]
 2381 005c B3F1FF3F 	 cmp r3,#-1
 2382 0060 09D1     	 bne .L150
 2383              	.LBB147:
 2384              	.LBB148:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 2385              	 .loc 2 195 0 discriminator 1
 2386              	
 2387 0062 4FF0FC03 	 mov r3,#252
 2388 0066 83F31188 	 msr basepri,r3
 2389 006a BFF36F8F 	 isb 
 2390 006e BFF34F8F 	 dsb 
 2391              	
 2392              	
 2393              	 .thumb
 2394 0072 7B60     	 str r3,[r7,#4]
 2395              	.L154:
 2396              	.LBE148:
 2397              	.LBE147:
 2398              	 .loc 1 2012 0 discriminator 2
 2399 0074 FEE7     	 b .L154
 2400              	.L150:
2013:../Dave/Generated/FREERTOS/tasks.c **** 	}
2014:../Dave/Generated/FREERTOS/tasks.c **** 
2015:../Dave/Generated/FREERTOS/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2016:../Dave/Generated/FREERTOS/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2017:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) xIdleTaskHandle;
2018:../Dave/Generated/FREERTOS/tasks.c **** }
 2401              	 .loc 1 2018 0
 2402 0076 1037     	 adds r7,r7,#16
 2403              	.LCFI74:
 2404              	 .cfi_def_cfa_offset 8
 2405 0078 BD46     	 mov sp,r7
 2406              	.LCFI75:
 2407              	 .cfi_def_cfa_register 13
 2408              	 
 2409 007a 80BD     	 pop {r7,pc}
 2410              	.L156:
 2411              	 .align 2
 2412              	.L155:
 2413 007c 00000000 	 .word xIdleTaskHandle
 2414 0080 00000000 	 .word prvIdleTask
 2415 0084 00000000 	 .word .LC0
 2416 0088 00000000 	 .word xNextTaskUnblockTime
 2417 008c 00000000 	 .word xSchedulerRunning
 2418 0090 00000000 	 .word xTickCount
 2419              	 .cfi_endproc
 2420              	.LFE149:
 2422              	 .section .text.vTaskEndScheduler,"ax",%progbits
 2423              	 .align 2
 2424              	 .global vTaskEndScheduler
 2425              	 .thumb
 2426              	 .thumb_func
 2428              	vTaskEndScheduler:
 2429              	.LFB150:
2019:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2020:../Dave/Generated/FREERTOS/tasks.c **** 
2021:../Dave/Generated/FREERTOS/tasks.c **** void vTaskEndScheduler( void )
2022:../Dave/Generated/FREERTOS/tasks.c **** {
 2430              	 .loc 1 2022 0
 2431              	 .cfi_startproc
 2432              	 
 2433              	 
 2434 0000 80B5     	 push {r7,lr}
 2435              	.LCFI76:
 2436              	 .cfi_def_cfa_offset 8
 2437              	 .cfi_offset 7,-8
 2438              	 .cfi_offset 14,-4
 2439 0002 82B0     	 sub sp,sp,#8
 2440              	.LCFI77:
 2441              	 .cfi_def_cfa_offset 16
 2442 0004 00AF     	 add r7,sp,#0
 2443              	.LCFI78:
 2444              	 .cfi_def_cfa_register 7
 2445              	.LBB149:
 2446              	.LBB150:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 2447              	 .loc 2 195 0
 2448              	
 2449 0006 4FF0FC03 	 mov r3,#252
 2450 000a 83F31188 	 msr basepri,r3
 2451 000e BFF36F8F 	 isb 
 2452 0012 BFF34F8F 	 dsb 
 2453              	
 2454              	
 2455              	 .thumb
 2456 0016 7B60     	 str r3,[r7,#4]
 2457              	.LBE150:
 2458              	.LBE149:
2023:../Dave/Generated/FREERTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2024:../Dave/Generated/FREERTOS/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2025:../Dave/Generated/FREERTOS/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2026:../Dave/Generated/FREERTOS/tasks.c **** 	portDISABLE_INTERRUPTS();
2027:../Dave/Generated/FREERTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2459              	 .loc 1 2027 0
 2460 0018 034B     	 ldr r3,.L158
 2461 001a 0022     	 movs r2,#0
 2462 001c 1A60     	 str r2,[r3]
2028:../Dave/Generated/FREERTOS/tasks.c **** 	vPortEndScheduler();
 2463              	 .loc 1 2028 0
 2464 001e FFF7FEFF 	 bl vPortEndScheduler
2029:../Dave/Generated/FREERTOS/tasks.c **** }
 2465              	 .loc 1 2029 0
 2466 0022 0837     	 adds r7,r7,#8
 2467              	.LCFI79:
 2468              	 .cfi_def_cfa_offset 8
 2469 0024 BD46     	 mov sp,r7
 2470              	.LCFI80:
 2471              	 .cfi_def_cfa_register 13
 2472              	 
 2473 0026 80BD     	 pop {r7,pc}
 2474              	.L159:
 2475              	 .align 2
 2476              	.L158:
 2477 0028 00000000 	 .word xSchedulerRunning
 2478              	 .cfi_endproc
 2479              	.LFE150:
 2481              	 .section .text.vTaskSuspendAll,"ax",%progbits
 2482              	 .align 2
 2483              	 .global vTaskSuspendAll
 2484              	 .thumb
 2485              	 .thumb_func
 2487              	vTaskSuspendAll:
 2488              	.LFB151:
2030:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2031:../Dave/Generated/FREERTOS/tasks.c **** 
2032:../Dave/Generated/FREERTOS/tasks.c **** void vTaskSuspendAll( void )
2033:../Dave/Generated/FREERTOS/tasks.c **** {
 2489              	 .loc 1 2033 0
 2490              	 .cfi_startproc
 2491              	 
 2492              	 
 2493              	 
 2494 0000 80B4     	 push {r7}
 2495              	.LCFI81:
 2496              	 .cfi_def_cfa_offset 4
 2497              	 .cfi_offset 7,-4
 2498 0002 00AF     	 add r7,sp,#0
 2499              	.LCFI82:
 2500              	 .cfi_def_cfa_register 7
2034:../Dave/Generated/FREERTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
2035:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2036:../Dave/Generated/FREERTOS/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2037:../Dave/Generated/FREERTOS/tasks.c **** 	http://goo.gl/wu4acr */
2038:../Dave/Generated/FREERTOS/tasks.c **** 	++uxSchedulerSuspended;
 2501              	 .loc 1 2038 0
 2502 0004 044B     	 ldr r3,.L161
 2503 0006 1B68     	 ldr r3,[r3]
 2504 0008 0133     	 adds r3,r3,#1
 2505 000a 034A     	 ldr r2,.L161
 2506 000c 1360     	 str r3,[r2]
2039:../Dave/Generated/FREERTOS/tasks.c **** }
 2507              	 .loc 1 2039 0
 2508 000e BD46     	 mov sp,r7
 2509              	.LCFI83:
 2510              	 .cfi_def_cfa_register 13
 2511              	 
 2512 0010 5DF8047B 	 ldr r7,[sp],#4
 2513              	.LCFI84:
 2514              	 .cfi_restore 7
 2515              	 .cfi_def_cfa_offset 0
 2516 0014 7047     	 bx lr
 2517              	.L162:
 2518 0016 00BF     	 .align 2
 2519              	.L161:
 2520 0018 00000000 	 .word uxSchedulerSuspended
 2521              	 .cfi_endproc
 2522              	.LFE151:
 2524              	 .section .text.xTaskResumeAll,"ax",%progbits
 2525              	 .align 2
 2526              	 .global xTaskResumeAll
 2527              	 .thumb
 2528              	 .thumb_func
 2530              	xTaskResumeAll:
 2531              	.LFB152:
2040:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2041:../Dave/Generated/FREERTOS/tasks.c **** 
2042:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2043:../Dave/Generated/FREERTOS/tasks.c **** 
2044:../Dave/Generated/FREERTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2045:../Dave/Generated/FREERTOS/tasks.c **** 	{
2046:../Dave/Generated/FREERTOS/tasks.c **** 	TickType_t xReturn;
2047:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2048:../Dave/Generated/FREERTOS/tasks.c **** 
2049:../Dave/Generated/FREERTOS/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2050:../Dave/Generated/FREERTOS/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2051:../Dave/Generated/FREERTOS/tasks.c **** 		task that are in the Ready state, even though the idle task is
2052:../Dave/Generated/FREERTOS/tasks.c **** 		running. */
2053:../Dave/Generated/FREERTOS/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2054:../Dave/Generated/FREERTOS/tasks.c **** 		{
2055:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2056:../Dave/Generated/FREERTOS/tasks.c **** 			{
2057:../Dave/Generated/FREERTOS/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2058:../Dave/Generated/FREERTOS/tasks.c **** 			}
2059:../Dave/Generated/FREERTOS/tasks.c **** 		}
2060:../Dave/Generated/FREERTOS/tasks.c **** 		#else
2061:../Dave/Generated/FREERTOS/tasks.c **** 		{
2062:../Dave/Generated/FREERTOS/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2063:../Dave/Generated/FREERTOS/tasks.c **** 
2064:../Dave/Generated/FREERTOS/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2065:../Dave/Generated/FREERTOS/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2066:../Dave/Generated/FREERTOS/tasks.c **** 			significant bit are set then there are tasks that have a priority
2067:../Dave/Generated/FREERTOS/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2068:../Dave/Generated/FREERTOS/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2069:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2070:../Dave/Generated/FREERTOS/tasks.c **** 			{
2071:../Dave/Generated/FREERTOS/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2072:../Dave/Generated/FREERTOS/tasks.c **** 			}
2073:../Dave/Generated/FREERTOS/tasks.c **** 		}
2074:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
2075:../Dave/Generated/FREERTOS/tasks.c **** 
2076:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2077:../Dave/Generated/FREERTOS/tasks.c **** 		{
2078:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = 0;
2079:../Dave/Generated/FREERTOS/tasks.c **** 		}
2080:../Dave/Generated/FREERTOS/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2081:../Dave/Generated/FREERTOS/tasks.c **** 		{
2082:../Dave/Generated/FREERTOS/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2083:../Dave/Generated/FREERTOS/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2084:../Dave/Generated/FREERTOS/tasks.c **** 			processed. */
2085:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = 0;
2086:../Dave/Generated/FREERTOS/tasks.c **** 		}
2087:../Dave/Generated/FREERTOS/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2088:../Dave/Generated/FREERTOS/tasks.c **** 		{
2089:../Dave/Generated/FREERTOS/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2090:../Dave/Generated/FREERTOS/tasks.c **** 			idle priority.  This path can only be reached if
2091:../Dave/Generated/FREERTOS/tasks.c **** 			configUSE_PREEMPTION is 0. */
2092:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = 0;
2093:../Dave/Generated/FREERTOS/tasks.c **** 		}
2094:../Dave/Generated/FREERTOS/tasks.c **** 		else
2095:../Dave/Generated/FREERTOS/tasks.c **** 		{
2096:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2097:../Dave/Generated/FREERTOS/tasks.c **** 		}
2098:../Dave/Generated/FREERTOS/tasks.c **** 
2099:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
2100:../Dave/Generated/FREERTOS/tasks.c **** 	}
2101:../Dave/Generated/FREERTOS/tasks.c **** 
2102:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2103:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2104:../Dave/Generated/FREERTOS/tasks.c **** 
2105:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskResumeAll( void )
2106:../Dave/Generated/FREERTOS/tasks.c **** {
 2532              	 .loc 1 2106 0
 2533              	 .cfi_startproc
 2534              	 
 2535              	 
 2536 0000 80B5     	 push {r7,lr}
 2537              	.LCFI85:
 2538              	 .cfi_def_cfa_offset 8
 2539              	 .cfi_offset 7,-8
 2540              	 .cfi_offset 14,-4
 2541 0002 84B0     	 sub sp,sp,#16
 2542              	.LCFI86:
 2543              	 .cfi_def_cfa_offset 24
 2544 0004 00AF     	 add r7,sp,#0
 2545              	.LCFI87:
 2546              	 .cfi_def_cfa_register 7
2107:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxTCB = NULL;
 2547              	 .loc 1 2107 0
 2548 0006 0023     	 movs r3,#0
 2549 0008 FB60     	 str r3,[r7,#12]
2108:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2550              	 .loc 1 2108 0
 2551 000a 0023     	 movs r3,#0
 2552 000c BB60     	 str r3,[r7,#8]
2109:../Dave/Generated/FREERTOS/tasks.c **** 
2110:../Dave/Generated/FREERTOS/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2111:../Dave/Generated/FREERTOS/tasks.c **** 	previous call to vTaskSuspendAll(). */
2112:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2553              	 .loc 1 2112 0
 2554 000e 424B     	 ldr r3,.L174
 2555 0010 1B68     	 ldr r3,[r3]
 2556 0012 002B     	 cmp r3,#0
 2557 0014 09D1     	 bne .L164
 2558              	.LBB151:
 2559              	.LBB152:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 2560              	 .loc 2 195 0 discriminator 1
 2561              	
 2562 0016 4FF0FC03 	 mov r3,#252
 2563 001a 83F31188 	 msr basepri,r3
 2564 001e BFF36F8F 	 isb 
 2565 0022 BFF34F8F 	 dsb 
 2566              	
 2567              	
 2568              	 .thumb
 2569 0026 3B60     	 str r3,[r7]
 2570              	.L165:
 2571              	.LBE152:
 2572              	.LBE151:
 2573              	 .loc 1 2112 0 discriminator 1
 2574 0028 FEE7     	 b .L165
 2575              	.L164:
2113:../Dave/Generated/FREERTOS/tasks.c **** 
2114:../Dave/Generated/FREERTOS/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2115:../Dave/Generated/FREERTOS/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2116:../Dave/Generated/FREERTOS/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2117:../Dave/Generated/FREERTOS/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2118:../Dave/Generated/FREERTOS/tasks.c **** 	tasks from this list into their appropriate ready list. */
2119:../Dave/Generated/FREERTOS/tasks.c **** 	taskENTER_CRITICAL();
 2576              	 .loc 1 2119 0
 2577 002a FFF7FEFF 	 bl vPortEnterCritical
2120:../Dave/Generated/FREERTOS/tasks.c **** 	{
2121:../Dave/Generated/FREERTOS/tasks.c **** 		--uxSchedulerSuspended;
 2578              	 .loc 1 2121 0
 2579 002e 3A4B     	 ldr r3,.L174
 2580 0030 1B68     	 ldr r3,[r3]
 2581 0032 013B     	 subs r3,r3,#1
 2582 0034 384A     	 ldr r2,.L174
 2583 0036 1360     	 str r3,[r2]
2122:../Dave/Generated/FREERTOS/tasks.c **** 
2123:../Dave/Generated/FREERTOS/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2584              	 .loc 1 2123 0
 2585 0038 374B     	 ldr r3,.L174
 2586 003a 1B68     	 ldr r3,[r3]
 2587 003c 002B     	 cmp r3,#0
 2588 003e 63D1     	 bne .L166
2124:../Dave/Generated/FREERTOS/tasks.c **** 		{
2125:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2589              	 .loc 1 2125 0
 2590 0040 364B     	 ldr r3,.L174+4
 2591 0042 1B68     	 ldr r3,[r3]
 2592 0044 002B     	 cmp r3,#0
 2593 0046 5FD0     	 beq .L166
2126:../Dave/Generated/FREERTOS/tasks.c **** 			{
2127:../Dave/Generated/FREERTOS/tasks.c **** 				/* Move any readied tasks from the pending list into the
2128:../Dave/Generated/FREERTOS/tasks.c **** 				appropriate ready list. */
2129:../Dave/Generated/FREERTOS/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2594              	 .loc 1 2129 0
 2595 0048 30E0     	 b .L167
 2596              	.L168:
2130:../Dave/Generated/FREERTOS/tasks.c **** 				{
2131:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 2597              	 .loc 1 2131 0
 2598 004a 354B     	 ldr r3,.L174+8
 2599 004c DB68     	 ldr r3,[r3,#12]
 2600 004e DB68     	 ldr r3,[r3,#12]
 2601 0050 FB60     	 str r3,[r7,#12]
2132:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2602              	 .loc 1 2132 0
 2603 0052 FB68     	 ldr r3,[r7,#12]
 2604 0054 1833     	 adds r3,r3,#24
 2605 0056 1846     	 mov r0,r3
 2606 0058 FFF7FEFF 	 bl uxListRemove
2133:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2607              	 .loc 1 2133 0
 2608 005c FB68     	 ldr r3,[r7,#12]
 2609 005e 0433     	 adds r3,r3,#4
 2610 0060 1846     	 mov r0,r3
 2611 0062 FFF7FEFF 	 bl uxListRemove
2134:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2612              	 .loc 1 2134 0
 2613 0066 FB68     	 ldr r3,[r7,#12]
 2614 0068 DB6A     	 ldr r3,[r3,#44]
 2615 006a 1A46     	 mov r2,r3
 2616 006c 0123     	 movs r3,#1
 2617 006e 03FA02F2 	 lsl r2,r3,r2
 2618 0072 2C4B     	 ldr r3,.L174+12
 2619 0074 1B68     	 ldr r3,[r3]
 2620 0076 1343     	 orrs r3,r3,r2
 2621 0078 2A4A     	 ldr r2,.L174+12
 2622 007a 1360     	 str r3,[r2]
 2623 007c FB68     	 ldr r3,[r7,#12]
 2624 007e DA6A     	 ldr r2,[r3,#44]
 2625 0080 1346     	 mov r3,r2
 2626 0082 9B00     	 lsls r3,r3,#2
 2627 0084 1344     	 add r3,r3,r2
 2628 0086 9B00     	 lsls r3,r3,#2
 2629 0088 274A     	 ldr r2,.L174+16
 2630 008a 1A44     	 add r2,r2,r3
 2631 008c FB68     	 ldr r3,[r7,#12]
 2632 008e 0433     	 adds r3,r3,#4
 2633 0090 1046     	 mov r0,r2
 2634 0092 1946     	 mov r1,r3
 2635 0094 FFF7FEFF 	 bl vListInsertEnd
2135:../Dave/Generated/FREERTOS/tasks.c **** 
2136:../Dave/Generated/FREERTOS/tasks.c **** 					/* If the moved task has a priority higher than the current
2137:../Dave/Generated/FREERTOS/tasks.c **** 					task then a yield must be performed. */
2138:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2636              	 .loc 1 2138 0
 2637 0098 FB68     	 ldr r3,[r7,#12]
 2638 009a DA6A     	 ldr r2,[r3,#44]
 2639 009c 234B     	 ldr r3,.L174+20
 2640 009e 1B68     	 ldr r3,[r3]
 2641 00a0 DB6A     	 ldr r3,[r3,#44]
 2642 00a2 9A42     	 cmp r2,r3
 2643 00a4 02D3     	 bcc .L167
2139:../Dave/Generated/FREERTOS/tasks.c **** 					{
2140:../Dave/Generated/FREERTOS/tasks.c **** 						xYieldPending = pdTRUE;
 2644              	 .loc 1 2140 0
 2645 00a6 224B     	 ldr r3,.L174+24
 2646 00a8 0122     	 movs r2,#1
 2647 00aa 1A60     	 str r2,[r3]
 2648              	.L167:
2129:../Dave/Generated/FREERTOS/tasks.c **** 				{
 2649              	 .loc 1 2129 0
 2650 00ac 1C4B     	 ldr r3,.L174+8
 2651 00ae 1B68     	 ldr r3,[r3]
 2652 00b0 002B     	 cmp r3,#0
 2653 00b2 CAD1     	 bne .L168
2141:../Dave/Generated/FREERTOS/tasks.c **** 					}
2142:../Dave/Generated/FREERTOS/tasks.c **** 					else
2143:../Dave/Generated/FREERTOS/tasks.c **** 					{
2144:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2145:../Dave/Generated/FREERTOS/tasks.c **** 					}
2146:../Dave/Generated/FREERTOS/tasks.c **** 				}
2147:../Dave/Generated/FREERTOS/tasks.c **** 
2148:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB != NULL )
 2654              	 .loc 1 2148 0
 2655 00b4 FB68     	 ldr r3,[r7,#12]
 2656 00b6 002B     	 cmp r3,#0
 2657 00b8 01D0     	 beq .L169
2149:../Dave/Generated/FREERTOS/tasks.c **** 				{
2150:../Dave/Generated/FREERTOS/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2151:../Dave/Generated/FREERTOS/tasks.c **** 					which may have prevented the next unblock time from being
2152:../Dave/Generated/FREERTOS/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2153:../Dave/Generated/FREERTOS/tasks.c **** 					important for low power tickless implementations, where
2154:../Dave/Generated/FREERTOS/tasks.c **** 					this can prevent an unnecessary exit from low power
2155:../Dave/Generated/FREERTOS/tasks.c **** 					state. */
2156:../Dave/Generated/FREERTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
 2658              	 .loc 1 2156 0
 2659 00ba FFF7FEFF 	 bl prvResetNextTaskUnblockTime
 2660              	.L169:
 2661              	.LBB153:
2157:../Dave/Generated/FREERTOS/tasks.c **** 				}
2158:../Dave/Generated/FREERTOS/tasks.c **** 
2159:../Dave/Generated/FREERTOS/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2160:../Dave/Generated/FREERTOS/tasks.c **** 				they should be processed now.  This ensures the tick count does
2161:../Dave/Generated/FREERTOS/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2162:../Dave/Generated/FREERTOS/tasks.c **** 				time. */
2163:../Dave/Generated/FREERTOS/tasks.c **** 				{
2164:../Dave/Generated/FREERTOS/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 2662              	 .loc 1 2164 0
 2663 00be 1D4B     	 ldr r3,.L174+28
 2664 00c0 1B68     	 ldr r3,[r3]
 2665 00c2 7B60     	 str r3,[r7,#4]
2165:../Dave/Generated/FREERTOS/tasks.c **** 
2166:../Dave/Generated/FREERTOS/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2666              	 .loc 1 2166 0
 2667 00c4 7B68     	 ldr r3,[r7,#4]
 2668 00c6 002B     	 cmp r3,#0
 2669 00c8 10D0     	 beq .L170
 2670              	.L172:
2167:../Dave/Generated/FREERTOS/tasks.c **** 					{
2168:../Dave/Generated/FREERTOS/tasks.c **** 						do
2169:../Dave/Generated/FREERTOS/tasks.c **** 						{
2170:../Dave/Generated/FREERTOS/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2671              	 .loc 1 2170 0
 2672 00ca FFF7FEFF 	 bl xTaskIncrementTick
 2673 00ce 0346     	 mov r3,r0
 2674 00d0 002B     	 cmp r3,#0
 2675 00d2 02D0     	 beq .L171
2171:../Dave/Generated/FREERTOS/tasks.c **** 							{
2172:../Dave/Generated/FREERTOS/tasks.c **** 								xYieldPending = pdTRUE;
 2676              	 .loc 1 2172 0
 2677 00d4 164B     	 ldr r3,.L174+24
 2678 00d6 0122     	 movs r2,#1
 2679 00d8 1A60     	 str r2,[r3]
 2680              	.L171:
2173:../Dave/Generated/FREERTOS/tasks.c **** 							}
2174:../Dave/Generated/FREERTOS/tasks.c **** 							else
2175:../Dave/Generated/FREERTOS/tasks.c **** 							{
2176:../Dave/Generated/FREERTOS/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2177:../Dave/Generated/FREERTOS/tasks.c **** 							}
2178:../Dave/Generated/FREERTOS/tasks.c **** 							--uxPendedCounts;
 2681              	 .loc 1 2178 0
 2682 00da 7B68     	 ldr r3,[r7,#4]
 2683 00dc 013B     	 subs r3,r3,#1
 2684 00de 7B60     	 str r3,[r7,#4]
2179:../Dave/Generated/FREERTOS/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2685              	 .loc 1 2179 0
 2686 00e0 7B68     	 ldr r3,[r7,#4]
 2687 00e2 002B     	 cmp r3,#0
 2688 00e4 F1D1     	 bne .L172
2180:../Dave/Generated/FREERTOS/tasks.c **** 
2181:../Dave/Generated/FREERTOS/tasks.c **** 						uxPendedTicks = 0;
 2689              	 .loc 1 2181 0
 2690 00e6 134B     	 ldr r3,.L174+28
 2691 00e8 0022     	 movs r2,#0
 2692 00ea 1A60     	 str r2,[r3]
 2693              	.L170:
 2694              	.LBE153:
2182:../Dave/Generated/FREERTOS/tasks.c **** 					}
2183:../Dave/Generated/FREERTOS/tasks.c **** 					else
2184:../Dave/Generated/FREERTOS/tasks.c **** 					{
2185:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2186:../Dave/Generated/FREERTOS/tasks.c **** 					}
2187:../Dave/Generated/FREERTOS/tasks.c **** 				}
2188:../Dave/Generated/FREERTOS/tasks.c **** 
2189:../Dave/Generated/FREERTOS/tasks.c **** 				if( xYieldPending != pdFALSE )
 2695              	 .loc 1 2189 0
 2696 00ec 104B     	 ldr r3,.L174+24
 2697 00ee 1B68     	 ldr r3,[r3]
 2698 00f0 002B     	 cmp r3,#0
 2699 00f2 09D0     	 beq .L166
2190:../Dave/Generated/FREERTOS/tasks.c **** 				{
2191:../Dave/Generated/FREERTOS/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2192:../Dave/Generated/FREERTOS/tasks.c **** 					{
2193:../Dave/Generated/FREERTOS/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2700              	 .loc 1 2193 0
 2701 00f4 0123     	 movs r3,#1
 2702 00f6 BB60     	 str r3,[r7,#8]
2194:../Dave/Generated/FREERTOS/tasks.c **** 					}
2195:../Dave/Generated/FREERTOS/tasks.c **** 					#endif
2196:../Dave/Generated/FREERTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2703              	 .loc 1 2196 0
 2704 00f8 0F4B     	 ldr r3,.L174+32
 2705 00fa 4FF08052 	 mov r2,#268435456
 2706 00fe 1A60     	 str r2,[r3]
 2707              	
 2708 0100 BFF34F8F 	 dsb
 2709              	
 2710              	
 2711 0104 BFF36F8F 	 isb
 2712              	
 2713              	 .thumb
 2714              	.L166:
2197:../Dave/Generated/FREERTOS/tasks.c **** 				}
2198:../Dave/Generated/FREERTOS/tasks.c **** 				else
2199:../Dave/Generated/FREERTOS/tasks.c **** 				{
2200:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2201:../Dave/Generated/FREERTOS/tasks.c **** 				}
2202:../Dave/Generated/FREERTOS/tasks.c **** 			}
2203:../Dave/Generated/FREERTOS/tasks.c **** 		}
2204:../Dave/Generated/FREERTOS/tasks.c **** 		else
2205:../Dave/Generated/FREERTOS/tasks.c **** 		{
2206:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2207:../Dave/Generated/FREERTOS/tasks.c **** 		}
2208:../Dave/Generated/FREERTOS/tasks.c **** 	}
2209:../Dave/Generated/FREERTOS/tasks.c **** 	taskEXIT_CRITICAL();
 2715              	 .loc 1 2209 0
 2716 0108 FFF7FEFF 	 bl vPortExitCritical
2210:../Dave/Generated/FREERTOS/tasks.c **** 
2211:../Dave/Generated/FREERTOS/tasks.c **** 	return xAlreadyYielded;
 2717              	 .loc 1 2211 0
 2718 010c BB68     	 ldr r3,[r7,#8]
2212:../Dave/Generated/FREERTOS/tasks.c **** }
 2719              	 .loc 1 2212 0
 2720 010e 1846     	 mov r0,r3
 2721 0110 1037     	 adds r7,r7,#16
 2722              	.LCFI88:
 2723              	 .cfi_def_cfa_offset 8
 2724 0112 BD46     	 mov sp,r7
 2725              	.LCFI89:
 2726              	 .cfi_def_cfa_register 13
 2727              	 
 2728 0114 80BD     	 pop {r7,pc}
 2729              	.L175:
 2730 0116 00BF     	 .align 2
 2731              	.L174:
 2732 0118 00000000 	 .word uxSchedulerSuspended
 2733 011c 00000000 	 .word uxCurrentNumberOfTasks
 2734 0120 00000000 	 .word xPendingReadyList
 2735 0124 00000000 	 .word uxTopReadyPriority
 2736 0128 00000000 	 .word pxReadyTasksLists
 2737 012c 00000000 	 .word pxCurrentTCB
 2738 0130 00000000 	 .word xYieldPending
 2739 0134 00000000 	 .word uxPendedTicks
 2740 0138 04ED00E0 	 .word -536810236
 2741              	 .cfi_endproc
 2742              	.LFE152:
 2744              	 .section .text.xTaskGetTickCount,"ax",%progbits
 2745              	 .align 2
 2746              	 .global xTaskGetTickCount
 2747              	 .thumb
 2748              	 .thumb_func
 2750              	xTaskGetTickCount:
 2751              	.LFB153:
2213:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2214:../Dave/Generated/FREERTOS/tasks.c **** 
2215:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTaskGetTickCount( void )
2216:../Dave/Generated/FREERTOS/tasks.c **** {
 2752              	 .loc 1 2216 0
 2753              	 .cfi_startproc
 2754              	 
 2755              	 
 2756              	 
 2757 0000 80B4     	 push {r7}
 2758              	.LCFI90:
 2759              	 .cfi_def_cfa_offset 4
 2760              	 .cfi_offset 7,-4
 2761 0002 83B0     	 sub sp,sp,#12
 2762              	.LCFI91:
 2763              	 .cfi_def_cfa_offset 16
 2764 0004 00AF     	 add r7,sp,#0
 2765              	.LCFI92:
 2766              	 .cfi_def_cfa_register 7
2217:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTicks;
2218:../Dave/Generated/FREERTOS/tasks.c **** 
2219:../Dave/Generated/FREERTOS/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2220:../Dave/Generated/FREERTOS/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2221:../Dave/Generated/FREERTOS/tasks.c **** 	{
2222:../Dave/Generated/FREERTOS/tasks.c **** 		xTicks = xTickCount;
 2767              	 .loc 1 2222 0
 2768 0006 054B     	 ldr r3,.L178
 2769 0008 1B68     	 ldr r3,[r3]
 2770 000a 7B60     	 str r3,[r7,#4]
2223:../Dave/Generated/FREERTOS/tasks.c **** 	}
2224:../Dave/Generated/FREERTOS/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2225:../Dave/Generated/FREERTOS/tasks.c **** 
2226:../Dave/Generated/FREERTOS/tasks.c **** 	return xTicks;
 2771              	 .loc 1 2226 0
 2772 000c 7B68     	 ldr r3,[r7,#4]
2227:../Dave/Generated/FREERTOS/tasks.c **** }
 2773              	 .loc 1 2227 0
 2774 000e 1846     	 mov r0,r3
 2775 0010 0C37     	 adds r7,r7,#12
 2776              	.LCFI93:
 2777              	 .cfi_def_cfa_offset 4
 2778 0012 BD46     	 mov sp,r7
 2779              	.LCFI94:
 2780              	 .cfi_def_cfa_register 13
 2781              	 
 2782 0014 5DF8047B 	 ldr r7,[sp],#4
 2783              	.LCFI95:
 2784              	 .cfi_restore 7
 2785              	 .cfi_def_cfa_offset 0
 2786 0018 7047     	 bx lr
 2787              	.L179:
 2788 001a 00BF     	 .align 2
 2789              	.L178:
 2790 001c 00000000 	 .word xTickCount
 2791              	 .cfi_endproc
 2792              	.LFE153:
 2794              	 .section .text.xTaskGetTickCountFromISR,"ax",%progbits
 2795              	 .align 2
 2796              	 .global xTaskGetTickCountFromISR
 2797              	 .thumb
 2798              	 .thumb_func
 2800              	xTaskGetTickCountFromISR:
 2801              	.LFB154:
2228:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2229:../Dave/Generated/FREERTOS/tasks.c **** 
2230:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2231:../Dave/Generated/FREERTOS/tasks.c **** {
 2802              	 .loc 1 2231 0
 2803              	 .cfi_startproc
 2804              	 
 2805              	 
 2806 0000 80B5     	 push {r7,lr}
 2807              	.LCFI96:
 2808              	 .cfi_def_cfa_offset 8
 2809              	 .cfi_offset 7,-8
 2810              	 .cfi_offset 14,-4
 2811 0002 82B0     	 sub sp,sp,#8
 2812              	.LCFI97:
 2813              	 .cfi_def_cfa_offset 16
 2814 0004 00AF     	 add r7,sp,#0
 2815              	.LCFI98:
 2816              	 .cfi_def_cfa_register 7
2232:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xReturn;
2233:../Dave/Generated/FREERTOS/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2234:../Dave/Generated/FREERTOS/tasks.c **** 
2235:../Dave/Generated/FREERTOS/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2236:../Dave/Generated/FREERTOS/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2237:../Dave/Generated/FREERTOS/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2238:../Dave/Generated/FREERTOS/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2239:../Dave/Generated/FREERTOS/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2240:../Dave/Generated/FREERTOS/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2241:../Dave/Generated/FREERTOS/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2242:../Dave/Generated/FREERTOS/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2243:../Dave/Generated/FREERTOS/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2244:../Dave/Generated/FREERTOS/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2245:../Dave/Generated/FREERTOS/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2246:../Dave/Generated/FREERTOS/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2247:../Dave/Generated/FREERTOS/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2248:../Dave/Generated/FREERTOS/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2249:../Dave/Generated/FREERTOS/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2817              	 .loc 1 2249 0
 2818 0006 FFF7FEFF 	 bl vPortValidateInterruptPriority
2250:../Dave/Generated/FREERTOS/tasks.c **** 
2251:../Dave/Generated/FREERTOS/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2819              	 .loc 1 2251 0
 2820 000a 0023     	 movs r3,#0
 2821 000c 7B60     	 str r3,[r7,#4]
2252:../Dave/Generated/FREERTOS/tasks.c **** 	{
2253:../Dave/Generated/FREERTOS/tasks.c **** 		xReturn = xTickCount;
 2822              	 .loc 1 2253 0
 2823 000e 044B     	 ldr r3,.L182
 2824 0010 1B68     	 ldr r3,[r3]
 2825 0012 3B60     	 str r3,[r7]
2254:../Dave/Generated/FREERTOS/tasks.c **** 	}
2255:../Dave/Generated/FREERTOS/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2256:../Dave/Generated/FREERTOS/tasks.c **** 
2257:../Dave/Generated/FREERTOS/tasks.c **** 	return xReturn;
 2826              	 .loc 1 2257 0
 2827 0014 3B68     	 ldr r3,[r7]
2258:../Dave/Generated/FREERTOS/tasks.c **** }
 2828              	 .loc 1 2258 0
 2829 0016 1846     	 mov r0,r3
 2830 0018 0837     	 adds r7,r7,#8
 2831              	.LCFI99:
 2832              	 .cfi_def_cfa_offset 8
 2833 001a BD46     	 mov sp,r7
 2834              	.LCFI100:
 2835              	 .cfi_def_cfa_register 13
 2836              	 
 2837 001c 80BD     	 pop {r7,pc}
 2838              	.L183:
 2839 001e 00BF     	 .align 2
 2840              	.L182:
 2841 0020 00000000 	 .word xTickCount
 2842              	 .cfi_endproc
 2843              	.LFE154:
 2845              	 .section .text.uxTaskGetNumberOfTasks,"ax",%progbits
 2846              	 .align 2
 2847              	 .global uxTaskGetNumberOfTasks
 2848              	 .thumb
 2849              	 .thumb_func
 2851              	uxTaskGetNumberOfTasks:
 2852              	.LFB155:
2259:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2260:../Dave/Generated/FREERTOS/tasks.c **** 
2261:../Dave/Generated/FREERTOS/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2262:../Dave/Generated/FREERTOS/tasks.c **** {
 2853              	 .loc 1 2262 0
 2854              	 .cfi_startproc
 2855              	 
 2856              	 
 2857              	 
 2858 0000 80B4     	 push {r7}
 2859              	.LCFI101:
 2860              	 .cfi_def_cfa_offset 4
 2861              	 .cfi_offset 7,-4
 2862 0002 00AF     	 add r7,sp,#0
 2863              	.LCFI102:
 2864              	 .cfi_def_cfa_register 7
2263:../Dave/Generated/FREERTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
2264:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t. */
2265:../Dave/Generated/FREERTOS/tasks.c **** 	return uxCurrentNumberOfTasks;
 2865              	 .loc 1 2265 0
 2866 0004 034B     	 ldr r3,.L186
 2867 0006 1B68     	 ldr r3,[r3]
2266:../Dave/Generated/FREERTOS/tasks.c **** }
 2868              	 .loc 1 2266 0
 2869 0008 1846     	 mov r0,r3
 2870 000a BD46     	 mov sp,r7
 2871              	.LCFI103:
 2872              	 .cfi_def_cfa_register 13
 2873              	 
 2874 000c 5DF8047B 	 ldr r7,[sp],#4
 2875              	.LCFI104:
 2876              	 .cfi_restore 7
 2877              	 .cfi_def_cfa_offset 0
 2878 0010 7047     	 bx lr
 2879              	.L187:
 2880 0012 00BF     	 .align 2
 2881              	.L186:
 2882 0014 00000000 	 .word uxCurrentNumberOfTasks
 2883              	 .cfi_endproc
 2884              	.LFE155:
 2886              	 .section .text.pcTaskGetName,"ax",%progbits
 2887              	 .align 2
 2888              	 .global pcTaskGetName
 2889              	 .thumb
 2890              	 .thumb_func
 2892              	pcTaskGetName:
 2893              	.LFB156:
2267:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2268:../Dave/Generated/FREERTOS/tasks.c **** 
2269:../Dave/Generated/FREERTOS/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2270:../Dave/Generated/FREERTOS/tasks.c **** {
 2894              	 .loc 1 2270 0
 2895              	 .cfi_startproc
 2896              	 
 2897              	 
 2898              	 
 2899 0000 80B4     	 push {r7}
 2900              	.LCFI105:
 2901              	 .cfi_def_cfa_offset 4
 2902              	 .cfi_offset 7,-4
 2903 0002 85B0     	 sub sp,sp,#20
 2904              	.LCFI106:
 2905              	 .cfi_def_cfa_offset 24
 2906 0004 00AF     	 add r7,sp,#0
 2907              	.LCFI107:
 2908              	 .cfi_def_cfa_register 7
 2909 0006 7860     	 str r0,[r7,#4]
2271:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxTCB;
2272:../Dave/Generated/FREERTOS/tasks.c **** 
2273:../Dave/Generated/FREERTOS/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2274:../Dave/Generated/FREERTOS/tasks.c **** 	queried. */
2275:../Dave/Generated/FREERTOS/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2910              	 .loc 1 2275 0
 2911 0008 7B68     	 ldr r3,[r7,#4]
 2912 000a 002B     	 cmp r3,#0
 2913 000c 02D1     	 bne .L189
 2914              	 .loc 1 2275 0 is_stmt 0 discriminator 1
 2915 000e 0D4B     	 ldr r3,.L194
 2916 0010 1B68     	 ldr r3,[r3]
 2917 0012 00E0     	 b .L190
 2918              	.L189:
 2919              	 .loc 1 2275 0 discriminator 2
 2920 0014 7B68     	 ldr r3,[r7,#4]
 2921              	.L190:
 2922              	 .loc 1 2275 0 discriminator 4
 2923 0016 FB60     	 str r3,[r7,#12]
2276:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxTCB );
 2924              	 .loc 1 2276 0 is_stmt 1 discriminator 4
 2925 0018 FB68     	 ldr r3,[r7,#12]
 2926 001a 002B     	 cmp r3,#0
 2927 001c 09D1     	 bne .L191
 2928              	.LBB154:
 2929              	.LBB155:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 2930              	 .loc 2 195 0 discriminator 1
 2931              	
 2932 001e 4FF0FC03 	 mov r3,#252
 2933 0022 83F31188 	 msr basepri,r3
 2934 0026 BFF36F8F 	 isb 
 2935 002a BFF34F8F 	 dsb 
 2936              	
 2937              	
 2938              	 .thumb
 2939 002e BB60     	 str r3,[r7,#8]
 2940              	.L192:
 2941              	.LBE155:
 2942              	.LBE154:
 2943              	 .loc 1 2276 0 discriminator 1
 2944 0030 FEE7     	 b .L192
 2945              	.L191:
2277:../Dave/Generated/FREERTOS/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2946              	 .loc 1 2277 0
 2947 0032 FB68     	 ldr r3,[r7,#12]
 2948 0034 3433     	 adds r3,r3,#52
2278:../Dave/Generated/FREERTOS/tasks.c **** }
 2949              	 .loc 1 2278 0
 2950 0036 1846     	 mov r0,r3
 2951 0038 1437     	 adds r7,r7,#20
 2952              	.LCFI108:
 2953              	 .cfi_def_cfa_offset 4
 2954 003a BD46     	 mov sp,r7
 2955              	.LCFI109:
 2956              	 .cfi_def_cfa_register 13
 2957              	 
 2958 003c 5DF8047B 	 ldr r7,[sp],#4
 2959              	.LCFI110:
 2960              	 .cfi_restore 7
 2961              	 .cfi_def_cfa_offset 0
 2962 0040 7047     	 bx lr
 2963              	.L195:
 2964 0042 00BF     	 .align 2
 2965              	.L194:
 2966 0044 00000000 	 .word pxCurrentTCB
 2967              	 .cfi_endproc
 2968              	.LFE156:
 2970              	 .section .text.prvSearchForNameWithinSingleList,"ax",%progbits
 2971              	 .align 2
 2972              	 .thumb
 2973              	 .thumb_func
 2975              	prvSearchForNameWithinSingleList:
 2976              	.LFB157:
2279:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2280:../Dave/Generated/FREERTOS/tasks.c **** 
2281:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2282:../Dave/Generated/FREERTOS/tasks.c **** 
2283:../Dave/Generated/FREERTOS/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2284:../Dave/Generated/FREERTOS/tasks.c **** 	{
 2977              	 .loc 1 2284 0
 2978              	 .cfi_startproc
 2979              	 
 2980              	 
 2981              	 
 2982 0000 80B4     	 push {r7}
 2983              	.LCFI111:
 2984              	 .cfi_def_cfa_offset 4
 2985              	 .cfi_offset 7,-4
 2986 0002 8BB0     	 sub sp,sp,#44
 2987              	.LCFI112:
 2988              	 .cfi_def_cfa_offset 48
 2989 0004 00AF     	 add r7,sp,#0
 2990              	.LCFI113:
 2991              	 .cfi_def_cfa_register 7
 2992 0006 7860     	 str r0,[r7,#4]
 2993 0008 3960     	 str r1,[r7]
2285:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 2994              	 .loc 1 2285 0
 2995 000a 0023     	 movs r3,#0
 2996 000c 7B62     	 str r3,[r7,#36]
2286:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t x;
2287:../Dave/Generated/FREERTOS/tasks.c **** 	char cNextChar;
2288:../Dave/Generated/FREERTOS/tasks.c **** 
2289:../Dave/Generated/FREERTOS/tasks.c **** 		/* This function is called with the scheduler suspended. */
2290:../Dave/Generated/FREERTOS/tasks.c **** 
2291:../Dave/Generated/FREERTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 2997              	 .loc 1 2291 0
 2998 000e 7B68     	 ldr r3,[r7,#4]
 2999 0010 1B68     	 ldr r3,[r3]
 3000 0012 002B     	 cmp r3,#0
 3001 0014 51D0     	 beq .L197
 3002              	.LBB156:
2292:../Dave/Generated/FREERTOS/tasks.c **** 		{
2293:../Dave/Generated/FREERTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 3003              	 .loc 1 2293 0
 3004 0016 7B68     	 ldr r3,[r7,#4]
 3005 0018 FB61     	 str r3,[r7,#28]
 3006 001a FB69     	 ldr r3,[r7,#28]
 3007 001c 5B68     	 ldr r3,[r3,#4]
 3008 001e 5A68     	 ldr r2,[r3,#4]
 3009 0020 FB69     	 ldr r3,[r7,#28]
 3010 0022 5A60     	 str r2,[r3,#4]
 3011 0024 FB69     	 ldr r3,[r7,#28]
 3012 0026 5A68     	 ldr r2,[r3,#4]
 3013 0028 FB69     	 ldr r3,[r7,#28]
 3014 002a 0833     	 adds r3,r3,#8
 3015 002c 9A42     	 cmp r2,r3
 3016 002e 04D1     	 bne .L198
 3017              	 .loc 1 2293 0 is_stmt 0 discriminator 1
 3018 0030 FB69     	 ldr r3,[r7,#28]
 3019 0032 5B68     	 ldr r3,[r3,#4]
 3020 0034 5A68     	 ldr r2,[r3,#4]
 3021 0036 FB69     	 ldr r3,[r7,#28]
 3022 0038 5A60     	 str r2,[r3,#4]
 3023              	.L198:
 3024              	 .loc 1 2293 0 discriminator 3
 3025 003a FB69     	 ldr r3,[r7,#28]
 3026 003c 5B68     	 ldr r3,[r3,#4]
 3027 003e DB68     	 ldr r3,[r3,#12]
 3028 0040 BB61     	 str r3,[r7,#24]
 3029              	.L207:
 3030              	.LBE156:
 3031              	.LBB157:
2294:../Dave/Generated/FREERTOS/tasks.c **** 
2295:../Dave/Generated/FREERTOS/tasks.c **** 			do
2296:../Dave/Generated/FREERTOS/tasks.c **** 			{
2297:../Dave/Generated/FREERTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 3032              	 .loc 1 2297 0 is_stmt 1
 3033 0042 7B68     	 ldr r3,[r7,#4]
 3034 0044 7B61     	 str r3,[r7,#20]
 3035 0046 7B69     	 ldr r3,[r7,#20]
 3036 0048 5B68     	 ldr r3,[r3,#4]
 3037 004a 5A68     	 ldr r2,[r3,#4]
 3038 004c 7B69     	 ldr r3,[r7,#20]
 3039 004e 5A60     	 str r2,[r3,#4]
 3040 0050 7B69     	 ldr r3,[r7,#20]
 3041 0052 5A68     	 ldr r2,[r3,#4]
 3042 0054 7B69     	 ldr r3,[r7,#20]
 3043 0056 0833     	 adds r3,r3,#8
 3044 0058 9A42     	 cmp r2,r3
 3045 005a 04D1     	 bne .L199
 3046              	 .loc 1 2297 0 is_stmt 0 discriminator 1
 3047 005c 7B69     	 ldr r3,[r7,#20]
 3048 005e 5B68     	 ldr r3,[r3,#4]
 3049 0060 5A68     	 ldr r2,[r3,#4]
 3050 0062 7B69     	 ldr r3,[r7,#20]
 3051 0064 5A60     	 str r2,[r3,#4]
 3052              	.L199:
 3053              	 .loc 1 2297 0 discriminator 3
 3054 0066 7B69     	 ldr r3,[r7,#20]
 3055 0068 5B68     	 ldr r3,[r3,#4]
 3056 006a DB68     	 ldr r3,[r3,#12]
 3057 006c 3B61     	 str r3,[r7,#16]
 3058              	.LBE157:
2298:../Dave/Generated/FREERTOS/tasks.c **** 
2299:../Dave/Generated/FREERTOS/tasks.c **** 				/* Check each character in the name looking for a match or
2300:../Dave/Generated/FREERTOS/tasks.c **** 				mismatch. */
2301:../Dave/Generated/FREERTOS/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 3059              	 .loc 1 2301 0 is_stmt 1 discriminator 3
 3060 006e 0023     	 movs r3,#0
 3061 0070 3B62     	 str r3,[r7,#32]
 3062 0072 16E0     	 b .L200
 3063              	.L204:
2302:../Dave/Generated/FREERTOS/tasks.c **** 				{
2303:../Dave/Generated/FREERTOS/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
 3064              	 .loc 1 2303 0
 3065 0074 3A69     	 ldr r2,[r7,#16]
 3066 0076 3B6A     	 ldr r3,[r7,#32]
 3067 0078 1344     	 add r3,r3,r2
 3068 007a 3033     	 adds r3,r3,#48
 3069 007c 1B79     	 ldrb r3,[r3,#4]
 3070 007e FB73     	 strb r3,[r7,#15]
2304:../Dave/Generated/FREERTOS/tasks.c **** 
2305:../Dave/Generated/FREERTOS/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
 3071              	 .loc 1 2305 0
 3072 0080 3A68     	 ldr r2,[r7]
 3073 0082 3B6A     	 ldr r3,[r7,#32]
 3074 0084 1344     	 add r3,r3,r2
 3075 0086 1B78     	 ldrb r3,[r3]
 3076 0088 FA7B     	 ldrb r2,[r7,#15]
 3077 008a 9A42     	 cmp r2,r3
 3078 008c 00D0     	 beq .L201
2306:../Dave/Generated/FREERTOS/tasks.c **** 					{
2307:../Dave/Generated/FREERTOS/tasks.c **** 						/* Characters didn't match. */
2308:../Dave/Generated/FREERTOS/tasks.c **** 						break;
 3079              	 .loc 1 2308 0
 3080 008e 0BE0     	 b .L202
 3081              	.L201:
2309:../Dave/Generated/FREERTOS/tasks.c **** 					}
2310:../Dave/Generated/FREERTOS/tasks.c **** 					else if( cNextChar == 0x00 )
 3082              	 .loc 1 2310 0
 3083 0090 FB7B     	 ldrb r3,[r7,#15]
 3084 0092 002B     	 cmp r3,#0
 3085 0094 02D1     	 bne .L203
2311:../Dave/Generated/FREERTOS/tasks.c **** 					{
2312:../Dave/Generated/FREERTOS/tasks.c **** 						/* Both strings terminated, a match must have been
2313:../Dave/Generated/FREERTOS/tasks.c **** 						found. */
2314:../Dave/Generated/FREERTOS/tasks.c **** 						pxReturn = pxNextTCB;
 3086              	 .loc 1 2314 0
 3087 0096 3B69     	 ldr r3,[r7,#16]
 3088 0098 7B62     	 str r3,[r7,#36]
2315:../Dave/Generated/FREERTOS/tasks.c **** 						break;
 3089              	 .loc 1 2315 0
 3090 009a 05E0     	 b .L202
 3091              	.L203:
2301:../Dave/Generated/FREERTOS/tasks.c **** 				{
 3092              	 .loc 1 2301 0 discriminator 2
 3093 009c 3B6A     	 ldr r3,[r7,#32]
 3094 009e 0133     	 adds r3,r3,#1
 3095 00a0 3B62     	 str r3,[r7,#32]
 3096              	.L200:
2301:../Dave/Generated/FREERTOS/tasks.c **** 				{
 3097              	 .loc 1 2301 0 is_stmt 0 discriminator 1
 3098 00a2 3B6A     	 ldr r3,[r7,#32]
 3099 00a4 0F2B     	 cmp r3,#15
 3100 00a6 E5D9     	 bls .L204
 3101              	.L202:
2316:../Dave/Generated/FREERTOS/tasks.c **** 					}
2317:../Dave/Generated/FREERTOS/tasks.c **** 					else
2318:../Dave/Generated/FREERTOS/tasks.c **** 					{
2319:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2320:../Dave/Generated/FREERTOS/tasks.c **** 					}
2321:../Dave/Generated/FREERTOS/tasks.c **** 				}
2322:../Dave/Generated/FREERTOS/tasks.c **** 
2323:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxReturn != NULL )
 3102              	 .loc 1 2323 0 is_stmt 1
 3103 00a8 7B6A     	 ldr r3,[r7,#36]
 3104 00aa 002B     	 cmp r3,#0
 3105 00ac 01D0     	 beq .L205
2324:../Dave/Generated/FREERTOS/tasks.c **** 				{
2325:../Dave/Generated/FREERTOS/tasks.c **** 					/* The handle has been found. */
2326:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 3106              	 .loc 1 2326 0
 3107 00ae 00BF     	 nop
 3108 00b0 03E0     	 b .L197
 3109              	.L205:
2327:../Dave/Generated/FREERTOS/tasks.c **** 				}
2328:../Dave/Generated/FREERTOS/tasks.c **** 
2329:../Dave/Generated/FREERTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 3110              	 .loc 1 2329 0
 3111 00b2 3A69     	 ldr r2,[r7,#16]
 3112 00b4 BB69     	 ldr r3,[r7,#24]
 3113 00b6 9A42     	 cmp r2,r3
 3114 00b8 C3D1     	 bne .L207
 3115              	.L197:
2330:../Dave/Generated/FREERTOS/tasks.c **** 		}
2331:../Dave/Generated/FREERTOS/tasks.c **** 		else
2332:../Dave/Generated/FREERTOS/tasks.c **** 		{
2333:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2334:../Dave/Generated/FREERTOS/tasks.c **** 		}
2335:../Dave/Generated/FREERTOS/tasks.c **** 
2336:../Dave/Generated/FREERTOS/tasks.c **** 		return pxReturn;
 3116              	 .loc 1 2336 0
 3117 00ba 7B6A     	 ldr r3,[r7,#36]
2337:../Dave/Generated/FREERTOS/tasks.c **** 	}
 3118              	 .loc 1 2337 0
 3119 00bc 1846     	 mov r0,r3
 3120 00be 2C37     	 adds r7,r7,#44
 3121              	.LCFI114:
 3122              	 .cfi_def_cfa_offset 4
 3123 00c0 BD46     	 mov sp,r7
 3124              	.LCFI115:
 3125              	 .cfi_def_cfa_register 13
 3126              	 
 3127 00c2 5DF8047B 	 ldr r7,[sp],#4
 3128              	.LCFI116:
 3129              	 .cfi_restore 7
 3130              	 .cfi_def_cfa_offset 0
 3131 00c6 7047     	 bx lr
 3132              	 .cfi_endproc
 3133              	.LFE157:
 3135              	 .section .text.xTaskGetHandle,"ax",%progbits
 3136              	 .align 2
 3137              	 .global xTaskGetHandle
 3138              	 .thumb
 3139              	 .thumb_func
 3141              	xTaskGetHandle:
 3142              	.LFB158:
2338:../Dave/Generated/FREERTOS/tasks.c **** 
2339:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2340:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2341:../Dave/Generated/FREERTOS/tasks.c **** 
2342:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2343:../Dave/Generated/FREERTOS/tasks.c **** 
2344:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2345:../Dave/Generated/FREERTOS/tasks.c **** 	{
 3143              	 .loc 1 2345 0
 3144              	 .cfi_startproc
 3145              	 
 3146              	 
 3147 0000 80B5     	 push {r7,lr}
 3148              	.LCFI117:
 3149              	 .cfi_def_cfa_offset 8
 3150              	 .cfi_offset 7,-8
 3151              	 .cfi_offset 14,-4
 3152 0002 86B0     	 sub sp,sp,#24
 3153              	.LCFI118:
 3154              	 .cfi_def_cfa_offset 32
 3155 0004 00AF     	 add r7,sp,#0
 3156              	.LCFI119:
 3157              	 .cfi_def_cfa_register 7
 3158 0006 7860     	 str r0,[r7,#4]
2346:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
 3159              	 .loc 1 2346 0
 3160 0008 0523     	 movs r3,#5
 3161 000a 7B61     	 str r3,[r7,#20]
2347:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t* pxTCB;
2348:../Dave/Generated/FREERTOS/tasks.c **** 
2349:../Dave/Generated/FREERTOS/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2350:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 3162              	 .loc 1 2350 0
 3163 000c 7868     	 ldr r0,[r7,#4]
 3164 000e FFF7FEFF 	 bl strlen
 3165 0012 0346     	 mov r3,r0
 3166 0014 0F2B     	 cmp r3,#15
 3167 0016 09D9     	 bls .L210
 3168              	.LBB158:
 3169              	.LBB159:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 3170              	 .loc 2 195 0 discriminator 1
 3171              	
 3172 0018 4FF0FC03 	 mov r3,#252
 3173 001c 83F31188 	 msr basepri,r3
 3174 0020 BFF36F8F 	 isb 
 3175 0024 BFF34F8F 	 dsb 
 3176              	
 3177              	
 3178              	 .thumb
 3179 0028 FB60     	 str r3,[r7,#12]
 3180              	.L211:
 3181              	.LBE159:
 3182              	.LBE158:
 3183              	 .loc 1 2350 0 discriminator 1
 3184 002a FEE7     	 b .L211
 3185              	.L210:
2351:../Dave/Generated/FREERTOS/tasks.c **** 
2352:../Dave/Generated/FREERTOS/tasks.c **** 		vTaskSuspendAll();
 3186              	 .loc 1 2352 0
 3187 002c FFF7FEFF 	 bl vTaskSuspendAll
 3188              	.L214:
2353:../Dave/Generated/FREERTOS/tasks.c **** 		{
2354:../Dave/Generated/FREERTOS/tasks.c **** 			/* Search the ready lists. */
2355:../Dave/Generated/FREERTOS/tasks.c **** 			do
2356:../Dave/Generated/FREERTOS/tasks.c **** 			{
2357:../Dave/Generated/FREERTOS/tasks.c **** 				uxQueue--;
 3189              	 .loc 1 2357 0
 3190 0030 7B69     	 ldr r3,[r7,#20]
 3191 0032 013B     	 subs r3,r3,#1
 3192 0034 7B61     	 str r3,[r7,#20]
2358:../Dave/Generated/FREERTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
 3193              	 .loc 1 2358 0
 3194 0036 7A69     	 ldr r2,[r7,#20]
 3195 0038 1346     	 mov r3,r2
 3196 003a 9B00     	 lsls r3,r3,#2
 3197 003c 1344     	 add r3,r3,r2
 3198 003e 9B00     	 lsls r3,r3,#2
 3199 0040 1C4A     	 ldr r2,.L220
 3200 0042 1344     	 add r3,r3,r2
 3201 0044 1846     	 mov r0,r3
 3202 0046 7968     	 ldr r1,[r7,#4]
 3203 0048 FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3204 004c 3861     	 str r0,[r7,#16]
2359:../Dave/Generated/FREERTOS/tasks.c **** 
2360:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB != NULL )
 3205              	 .loc 1 2360 0
 3206 004e 3B69     	 ldr r3,[r7,#16]
 3207 0050 002B     	 cmp r3,#0
 3208 0052 00D0     	 beq .L212
2361:../Dave/Generated/FREERTOS/tasks.c **** 				{
2362:../Dave/Generated/FREERTOS/tasks.c **** 					/* Found the handle. */
2363:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 3209              	 .loc 1 2363 0
 3210 0054 02E0     	 b .L213
 3211              	.L212:
2364:../Dave/Generated/FREERTOS/tasks.c **** 				}
2365:../Dave/Generated/FREERTOS/tasks.c **** 
2366:../Dave/Generated/FREERTOS/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
 3212              	 .loc 1 2366 0
 3213 0056 7B69     	 ldr r3,[r7,#20]
 3214 0058 002B     	 cmp r3,#0
 3215 005a E9D1     	 bne .L214
 3216              	.L213:
2367:../Dave/Generated/FREERTOS/tasks.c **** 
2368:../Dave/Generated/FREERTOS/tasks.c **** 			/* Search the delayed lists. */
2369:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB == NULL )
 3217              	 .loc 1 2369 0
 3218 005c 3B69     	 ldr r3,[r7,#16]
 3219 005e 002B     	 cmp r3,#0
 3220 0060 06D1     	 bne .L215
2370:../Dave/Generated/FREERTOS/tasks.c **** 			{
2371:../Dave/Generated/FREERTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 3221              	 .loc 1 2371 0
 3222 0062 154B     	 ldr r3,.L220+4
 3223 0064 1B68     	 ldr r3,[r3]
 3224 0066 1846     	 mov r0,r3
 3225 0068 7968     	 ldr r1,[r7,#4]
 3226 006a FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3227 006e 3861     	 str r0,[r7,#16]
 3228              	.L215:
2372:../Dave/Generated/FREERTOS/tasks.c **** 			}
2373:../Dave/Generated/FREERTOS/tasks.c **** 
2374:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB == NULL )
 3229              	 .loc 1 2374 0
 3230 0070 3B69     	 ldr r3,[r7,#16]
 3231 0072 002B     	 cmp r3,#0
 3232 0074 06D1     	 bne .L216
2375:../Dave/Generated/FREERTOS/tasks.c **** 			{
2376:../Dave/Generated/FREERTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
 3233              	 .loc 1 2376 0
 3234 0076 114B     	 ldr r3,.L220+8
 3235 0078 1B68     	 ldr r3,[r3]
 3236 007a 1846     	 mov r0,r3
 3237 007c 7968     	 ldr r1,[r7,#4]
 3238 007e FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3239 0082 3861     	 str r0,[r7,#16]
 3240              	.L216:
2377:../Dave/Generated/FREERTOS/tasks.c **** 			}
2378:../Dave/Generated/FREERTOS/tasks.c **** 
2379:../Dave/Generated/FREERTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2380:../Dave/Generated/FREERTOS/tasks.c **** 			{
2381:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB == NULL )
 3241              	 .loc 1 2381 0
 3242 0084 3B69     	 ldr r3,[r7,#16]
 3243 0086 002B     	 cmp r3,#0
 3244 0088 04D1     	 bne .L217
2382:../Dave/Generated/FREERTOS/tasks.c **** 				{
2383:../Dave/Generated/FREERTOS/tasks.c **** 					/* Search the suspended list. */
2384:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 3245              	 .loc 1 2384 0
 3246 008a 0D48     	 ldr r0,.L220+12
 3247 008c 7968     	 ldr r1,[r7,#4]
 3248 008e FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3249 0092 3861     	 str r0,[r7,#16]
 3250              	.L217:
2385:../Dave/Generated/FREERTOS/tasks.c **** 				}
2386:../Dave/Generated/FREERTOS/tasks.c **** 			}
2387:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
2388:../Dave/Generated/FREERTOS/tasks.c **** 
2389:../Dave/Generated/FREERTOS/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2390:../Dave/Generated/FREERTOS/tasks.c **** 			{
2391:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB == NULL )
 3251              	 .loc 1 2391 0
 3252 0094 3B69     	 ldr r3,[r7,#16]
 3253 0096 002B     	 cmp r3,#0
 3254 0098 04D1     	 bne .L218
2392:../Dave/Generated/FREERTOS/tasks.c **** 				{
2393:../Dave/Generated/FREERTOS/tasks.c **** 					/* Search the deleted list. */
2394:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 3255              	 .loc 1 2394 0
 3256 009a 0A48     	 ldr r0,.L220+16
 3257 009c 7968     	 ldr r1,[r7,#4]
 3258 009e FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3259 00a2 3861     	 str r0,[r7,#16]
 3260              	.L218:
2395:../Dave/Generated/FREERTOS/tasks.c **** 				}
2396:../Dave/Generated/FREERTOS/tasks.c **** 			}
2397:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
2398:../Dave/Generated/FREERTOS/tasks.c **** 		}
2399:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) xTaskResumeAll();
 3261              	 .loc 1 2399 0
 3262 00a4 FFF7FEFF 	 bl xTaskResumeAll
2400:../Dave/Generated/FREERTOS/tasks.c **** 
2401:../Dave/Generated/FREERTOS/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
 3263              	 .loc 1 2401 0
 3264 00a8 3B69     	 ldr r3,[r7,#16]
2402:../Dave/Generated/FREERTOS/tasks.c **** 	}
 3265              	 .loc 1 2402 0
 3266 00aa 1846     	 mov r0,r3
 3267 00ac 1837     	 adds r7,r7,#24
 3268              	.LCFI120:
 3269              	 .cfi_def_cfa_offset 8
 3270 00ae BD46     	 mov sp,r7
 3271              	.LCFI121:
 3272              	 .cfi_def_cfa_register 13
 3273              	 
 3274 00b0 80BD     	 pop {r7,pc}
 3275              	.L221:
 3276 00b2 00BF     	 .align 2
 3277              	.L220:
 3278 00b4 00000000 	 .word pxReadyTasksLists
 3279 00b8 00000000 	 .word pxDelayedTaskList
 3280 00bc 00000000 	 .word pxOverflowDelayedTaskList
 3281 00c0 00000000 	 .word xSuspendedTaskList
 3282 00c4 00000000 	 .word xTasksWaitingTermination
 3283              	 .cfi_endproc
 3284              	.LFE158:
 3286              	 .section .text.uxTaskGetSystemState,"ax",%progbits
 3287              	 .align 2
 3288              	 .global uxTaskGetSystemState
 3289              	 .thumb
 3290              	 .thumb_func
 3292              	uxTaskGetSystemState:
 3293              	.LFB159:
2403:../Dave/Generated/FREERTOS/tasks.c **** 
2404:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2405:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2406:../Dave/Generated/FREERTOS/tasks.c **** 
2407:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2408:../Dave/Generated/FREERTOS/tasks.c **** 
2409:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2410:../Dave/Generated/FREERTOS/tasks.c **** 	{
 3294              	 .loc 1 2410 0
 3295              	 .cfi_startproc
 3296              	 
 3297              	 
 3298 0000 80B5     	 push {r7,lr}
 3299              	.LCFI122:
 3300              	 .cfi_def_cfa_offset 8
 3301              	 .cfi_offset 7,-8
 3302              	 .cfi_offset 14,-4
 3303 0002 86B0     	 sub sp,sp,#24
 3304              	.LCFI123:
 3305              	 .cfi_def_cfa_offset 32
 3306 0004 00AF     	 add r7,sp,#0
 3307              	.LCFI124:
 3308              	 .cfi_def_cfa_register 7
 3309 0006 F860     	 str r0,[r7,#12]
 3310 0008 B960     	 str r1,[r7,#8]
 3311 000a 7A60     	 str r2,[r7,#4]
2411:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3312              	 .loc 1 2411 0
 3313 000c 0023     	 movs r3,#0
 3314 000e 7B61     	 str r3,[r7,#20]
 3315 0010 0523     	 movs r3,#5
 3316 0012 3B61     	 str r3,[r7,#16]
2412:../Dave/Generated/FREERTOS/tasks.c **** 
2413:../Dave/Generated/FREERTOS/tasks.c **** 		vTaskSuspendAll();
 3317              	 .loc 1 2413 0
 3318 0014 FFF7FEFF 	 bl vTaskSuspendAll
2414:../Dave/Generated/FREERTOS/tasks.c **** 		{
2415:../Dave/Generated/FREERTOS/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2416:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 3319              	 .loc 1 2416 0
 3320 0018 3B4B     	 ldr r3,.L227
 3321 001a 1B68     	 ldr r3,[r3]
 3322 001c BA68     	 ldr r2,[r7,#8]
 3323 001e 9A42     	 cmp r2,r3
 3324 0020 6BD3     	 bcc .L223
 3325              	.L224:
2417:../Dave/Generated/FREERTOS/tasks.c **** 			{
2418:../Dave/Generated/FREERTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2419:../Dave/Generated/FREERTOS/tasks.c **** 				task in the Ready state. */
2420:../Dave/Generated/FREERTOS/tasks.c **** 				do
2421:../Dave/Generated/FREERTOS/tasks.c **** 				{
2422:../Dave/Generated/FREERTOS/tasks.c **** 					uxQueue--;
 3326              	 .loc 1 2422 0 discriminator 1
 3327 0022 3B69     	 ldr r3,[r7,#16]
 3328 0024 013B     	 subs r3,r3,#1
 3329 0026 3B61     	 str r3,[r7,#16]
2423:../Dave/Generated/FREERTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 3330              	 .loc 1 2423 0 discriminator 1
 3331 0028 7A69     	 ldr r2,[r7,#20]
 3332 002a 1346     	 mov r3,r2
 3333 002c DB00     	 lsls r3,r3,#3
 3334 002e 1344     	 add r3,r3,r2
 3335 0030 9B00     	 lsls r3,r3,#2
 3336 0032 1A46     	 mov r2,r3
 3337 0034 FB68     	 ldr r3,[r7,#12]
 3338 0036 9918     	 adds r1,r3,r2
 3339 0038 3A69     	 ldr r2,[r7,#16]
 3340 003a 1346     	 mov r3,r2
 3341 003c 9B00     	 lsls r3,r3,#2
 3342 003e 1344     	 add r3,r3,r2
 3343 0040 9B00     	 lsls r3,r3,#2
 3344 0042 324A     	 ldr r2,.L227+4
 3345 0044 1344     	 add r3,r3,r2
 3346 0046 0846     	 mov r0,r1
 3347 0048 1946     	 mov r1,r3
 3348 004a 0122     	 movs r2,#1
 3349 004c FFF7FEFF 	 bl prvListTasksWithinSingleList
 3350 0050 0246     	 mov r2,r0
 3351 0052 7B69     	 ldr r3,[r7,#20]
 3352 0054 1344     	 add r3,r3,r2
 3353 0056 7B61     	 str r3,[r7,#20]
2424:../Dave/Generated/FREERTOS/tasks.c **** 
2425:../Dave/Generated/FREERTOS/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
 3354              	 .loc 1 2425 0 discriminator 1
 3355 0058 3B69     	 ldr r3,[r7,#16]
 3356 005a 002B     	 cmp r3,#0
 3357 005c E1D1     	 bne .L224
2426:../Dave/Generated/FREERTOS/tasks.c **** 
2427:../Dave/Generated/FREERTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2428:../Dave/Generated/FREERTOS/tasks.c **** 				task in the Blocked state. */
2429:../Dave/Generated/FREERTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
 3358              	 .loc 1 2429 0
 3359 005e 7A69     	 ldr r2,[r7,#20]
 3360 0060 1346     	 mov r3,r2
 3361 0062 DB00     	 lsls r3,r3,#3
 3362 0064 1344     	 add r3,r3,r2
 3363 0066 9B00     	 lsls r3,r3,#2
 3364 0068 1A46     	 mov r2,r3
 3365 006a FB68     	 ldr r3,[r7,#12]
 3366 006c 1A44     	 add r2,r2,r3
 3367 006e 284B     	 ldr r3,.L227+8
 3368 0070 1B68     	 ldr r3,[r3]
 3369 0072 1046     	 mov r0,r2
 3370 0074 1946     	 mov r1,r3
 3371 0076 0222     	 movs r2,#2
 3372 0078 FFF7FEFF 	 bl prvListTasksWithinSingleList
 3373 007c 0246     	 mov r2,r0
 3374 007e 7B69     	 ldr r3,[r7,#20]
 3375 0080 1344     	 add r3,r3,r2
 3376 0082 7B61     	 str r3,[r7,#20]
2430:../Dave/Generated/FREERTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 3377              	 .loc 1 2430 0
 3378 0084 7A69     	 ldr r2,[r7,#20]
 3379 0086 1346     	 mov r3,r2
 3380 0088 DB00     	 lsls r3,r3,#3
 3381 008a 1344     	 add r3,r3,r2
 3382 008c 9B00     	 lsls r3,r3,#2
 3383 008e 1A46     	 mov r2,r3
 3384 0090 FB68     	 ldr r3,[r7,#12]
 3385 0092 1A44     	 add r2,r2,r3
 3386 0094 1F4B     	 ldr r3,.L227+12
 3387 0096 1B68     	 ldr r3,[r3]
 3388 0098 1046     	 mov r0,r2
 3389 009a 1946     	 mov r1,r3
 3390 009c 0222     	 movs r2,#2
 3391 009e FFF7FEFF 	 bl prvListTasksWithinSingleList
 3392 00a2 0246     	 mov r2,r0
 3393 00a4 7B69     	 ldr r3,[r7,#20]
 3394 00a6 1344     	 add r3,r3,r2
 3395 00a8 7B61     	 str r3,[r7,#20]
2431:../Dave/Generated/FREERTOS/tasks.c **** 
2432:../Dave/Generated/FREERTOS/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2433:../Dave/Generated/FREERTOS/tasks.c **** 				{
2434:../Dave/Generated/FREERTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2435:../Dave/Generated/FREERTOS/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2436:../Dave/Generated/FREERTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
 3396              	 .loc 1 2436 0
 3397 00aa 7A69     	 ldr r2,[r7,#20]
 3398 00ac 1346     	 mov r3,r2
 3399 00ae DB00     	 lsls r3,r3,#3
 3400 00b0 1344     	 add r3,r3,r2
 3401 00b2 9B00     	 lsls r3,r3,#2
 3402 00b4 1A46     	 mov r2,r3
 3403 00b6 FB68     	 ldr r3,[r7,#12]
 3404 00b8 1344     	 add r3,r3,r2
 3405 00ba 1846     	 mov r0,r3
 3406 00bc 1649     	 ldr r1,.L227+16
 3407 00be 0422     	 movs r2,#4
 3408 00c0 FFF7FEFF 	 bl prvListTasksWithinSingleList
 3409 00c4 0246     	 mov r2,r0
 3410 00c6 7B69     	 ldr r3,[r7,#20]
 3411 00c8 1344     	 add r3,r3,r2
 3412 00ca 7B61     	 str r3,[r7,#20]
2437:../Dave/Generated/FREERTOS/tasks.c **** 				}
2438:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
2439:../Dave/Generated/FREERTOS/tasks.c **** 
2440:../Dave/Generated/FREERTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2441:../Dave/Generated/FREERTOS/tasks.c **** 				{
2442:../Dave/Generated/FREERTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2443:../Dave/Generated/FREERTOS/tasks.c **** 					each task in the Suspended state. */
2444:../Dave/Generated/FREERTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
 3413              	 .loc 1 2444 0
 3414 00cc 7A69     	 ldr r2,[r7,#20]
 3415 00ce 1346     	 mov r3,r2
 3416 00d0 DB00     	 lsls r3,r3,#3
 3417 00d2 1344     	 add r3,r3,r2
 3418 00d4 9B00     	 lsls r3,r3,#2
 3419 00d6 1A46     	 mov r2,r3
 3420 00d8 FB68     	 ldr r3,[r7,#12]
 3421 00da 1344     	 add r3,r3,r2
 3422 00dc 1846     	 mov r0,r3
 3423 00de 0F49     	 ldr r1,.L227+20
 3424 00e0 0322     	 movs r2,#3
 3425 00e2 FFF7FEFF 	 bl prvListTasksWithinSingleList
 3426 00e6 0246     	 mov r2,r0
 3427 00e8 7B69     	 ldr r3,[r7,#20]
 3428 00ea 1344     	 add r3,r3,r2
 3429 00ec 7B61     	 str r3,[r7,#20]
2445:../Dave/Generated/FREERTOS/tasks.c **** 				}
2446:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
2447:../Dave/Generated/FREERTOS/tasks.c **** 
2448:../Dave/Generated/FREERTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2449:../Dave/Generated/FREERTOS/tasks.c **** 				{
2450:../Dave/Generated/FREERTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
2451:../Dave/Generated/FREERTOS/tasks.c **** 					{
2452:../Dave/Generated/FREERTOS/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2453:../Dave/Generated/FREERTOS/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2454:../Dave/Generated/FREERTOS/tasks.c **** 						#else
2455:../Dave/Generated/FREERTOS/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2456:../Dave/Generated/FREERTOS/tasks.c **** 						#endif
2457:../Dave/Generated/FREERTOS/tasks.c **** 					}
2458:../Dave/Generated/FREERTOS/tasks.c **** 				}
2459:../Dave/Generated/FREERTOS/tasks.c **** 				#else
2460:../Dave/Generated/FREERTOS/tasks.c **** 				{
2461:../Dave/Generated/FREERTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
 3430              	 .loc 1 2461 0
 3431 00ee 7B68     	 ldr r3,[r7,#4]
 3432 00f0 002B     	 cmp r3,#0
 3433 00f2 02D0     	 beq .L223
2462:../Dave/Generated/FREERTOS/tasks.c **** 					{
2463:../Dave/Generated/FREERTOS/tasks.c **** 						*pulTotalRunTime = 0;
 3434              	 .loc 1 2463 0
 3435 00f4 7B68     	 ldr r3,[r7,#4]
 3436 00f6 0022     	 movs r2,#0
 3437 00f8 1A60     	 str r2,[r3]
 3438              	.L223:
2464:../Dave/Generated/FREERTOS/tasks.c **** 					}
2465:../Dave/Generated/FREERTOS/tasks.c **** 				}
2466:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
2467:../Dave/Generated/FREERTOS/tasks.c **** 			}
2468:../Dave/Generated/FREERTOS/tasks.c **** 			else
2469:../Dave/Generated/FREERTOS/tasks.c **** 			{
2470:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2471:../Dave/Generated/FREERTOS/tasks.c **** 			}
2472:../Dave/Generated/FREERTOS/tasks.c **** 		}
2473:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) xTaskResumeAll();
 3439              	 .loc 1 2473 0
 3440 00fa FFF7FEFF 	 bl xTaskResumeAll
2474:../Dave/Generated/FREERTOS/tasks.c **** 
2475:../Dave/Generated/FREERTOS/tasks.c **** 		return uxTask;
 3441              	 .loc 1 2475 0
 3442 00fe 7B69     	 ldr r3,[r7,#20]
2476:../Dave/Generated/FREERTOS/tasks.c **** 	}
 3443              	 .loc 1 2476 0
 3444 0100 1846     	 mov r0,r3
 3445 0102 1837     	 adds r7,r7,#24
 3446              	.LCFI125:
 3447              	 .cfi_def_cfa_offset 8
 3448 0104 BD46     	 mov sp,r7
 3449              	.LCFI126:
 3450              	 .cfi_def_cfa_register 13
 3451              	 
 3452 0106 80BD     	 pop {r7,pc}
 3453              	.L228:
 3454              	 .align 2
 3455              	.L227:
 3456 0108 00000000 	 .word uxCurrentNumberOfTasks
 3457 010c 00000000 	 .word pxReadyTasksLists
 3458 0110 00000000 	 .word pxDelayedTaskList
 3459 0114 00000000 	 .word pxOverflowDelayedTaskList
 3460 0118 00000000 	 .word xTasksWaitingTermination
 3461 011c 00000000 	 .word xSuspendedTaskList
 3462              	 .cfi_endproc
 3463              	.LFE159:
 3465              	 .section .text.xTaskGetIdleTaskHandle,"ax",%progbits
 3466              	 .align 2
 3467              	 .global xTaskGetIdleTaskHandle
 3468              	 .thumb
 3469              	 .thumb_func
 3471              	xTaskGetIdleTaskHandle:
 3472              	.LFB160:
2477:../Dave/Generated/FREERTOS/tasks.c **** 
2478:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2479:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2480:../Dave/Generated/FREERTOS/tasks.c **** 
2481:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2482:../Dave/Generated/FREERTOS/tasks.c **** 
2483:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2484:../Dave/Generated/FREERTOS/tasks.c **** 	{
 3473              	 .loc 1 2484 0
 3474              	 .cfi_startproc
 3475              	 
 3476              	 
 3477              	 
 3478 0000 80B4     	 push {r7}
 3479              	.LCFI127:
 3480              	 .cfi_def_cfa_offset 4
 3481              	 .cfi_offset 7,-4
 3482 0002 83B0     	 sub sp,sp,#12
 3483              	.LCFI128:
 3484              	 .cfi_def_cfa_offset 16
 3485 0004 00AF     	 add r7,sp,#0
 3486              	.LCFI129:
 3487              	 .cfi_def_cfa_register 7
2485:../Dave/Generated/FREERTOS/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2486:../Dave/Generated/FREERTOS/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2487:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
 3488              	 .loc 1 2487 0
 3489 0006 0B4B     	 ldr r3,.L233
 3490 0008 1B68     	 ldr r3,[r3]
 3491 000a 002B     	 cmp r3,#0
 3492 000c 09D1     	 bne .L230
 3493              	.LBB160:
 3494              	.LBB161:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 3495              	 .loc 2 195 0 discriminator 1
 3496              	
 3497 000e 4FF0FC03 	 mov r3,#252
 3498 0012 83F31188 	 msr basepri,r3
 3499 0016 BFF36F8F 	 isb 
 3500 001a BFF34F8F 	 dsb 
 3501              	
 3502              	
 3503              	 .thumb
 3504 001e 7B60     	 str r3,[r7,#4]
 3505              	.L231:
 3506              	.LBE161:
 3507              	.LBE160:
 3508              	 .loc 1 2487 0 discriminator 1
 3509 0020 FEE7     	 b .L231
 3510              	.L230:
2488:../Dave/Generated/FREERTOS/tasks.c **** 		return xIdleTaskHandle;
 3511              	 .loc 1 2488 0
 3512 0022 044B     	 ldr r3,.L233
 3513 0024 1B68     	 ldr r3,[r3]
2489:../Dave/Generated/FREERTOS/tasks.c **** 	}
 3514              	 .loc 1 2489 0
 3515 0026 1846     	 mov r0,r3
 3516 0028 0C37     	 adds r7,r7,#12
 3517              	.LCFI130:
 3518              	 .cfi_def_cfa_offset 4
 3519 002a BD46     	 mov sp,r7
 3520              	.LCFI131:
 3521              	 .cfi_def_cfa_register 13
 3522              	 
 3523 002c 5DF8047B 	 ldr r7,[sp],#4
 3524              	.LCFI132:
 3525              	 .cfi_restore 7
 3526              	 .cfi_def_cfa_offset 0
 3527 0030 7047     	 bx lr
 3528              	.L234:
 3529 0032 00BF     	 .align 2
 3530              	.L233:
 3531 0034 00000000 	 .word xIdleTaskHandle
 3532              	 .cfi_endproc
 3533              	.LFE160:
 3535              	 .section .text.xTaskAbortDelay,"ax",%progbits
 3536              	 .align 2
 3537              	 .global xTaskAbortDelay
 3538              	 .thumb
 3539              	 .thumb_func
 3541              	xTaskAbortDelay:
 3542              	.LFB161:
2490:../Dave/Generated/FREERTOS/tasks.c **** 
2491:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2492:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2493:../Dave/Generated/FREERTOS/tasks.c **** 
2494:../Dave/Generated/FREERTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2495:../Dave/Generated/FREERTOS/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2496:../Dave/Generated/FREERTOS/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2497:../Dave/Generated/FREERTOS/tasks.c **** 1. */
2498:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2499:../Dave/Generated/FREERTOS/tasks.c **** 
2500:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2501:../Dave/Generated/FREERTOS/tasks.c **** 	{
2502:../Dave/Generated/FREERTOS/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2503:../Dave/Generated/FREERTOS/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2504:../Dave/Generated/FREERTOS/tasks.c **** 		each stepped tick. */
2505:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2506:../Dave/Generated/FREERTOS/tasks.c **** 		xTickCount += xTicksToJump;
2507:../Dave/Generated/FREERTOS/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2508:../Dave/Generated/FREERTOS/tasks.c **** 	}
2509:../Dave/Generated/FREERTOS/tasks.c **** 
2510:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2511:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2512:../Dave/Generated/FREERTOS/tasks.c **** 
2513:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2514:../Dave/Generated/FREERTOS/tasks.c **** 
2515:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2516:../Dave/Generated/FREERTOS/tasks.c **** 	{
 3543              	 .loc 1 2516 0
 3544              	 .cfi_startproc
 3545              	 
 3546              	 
 3547 0000 80B5     	 push {r7,lr}
 3548              	.LCFI133:
 3549              	 .cfi_def_cfa_offset 8
 3550              	 .cfi_offset 7,-8
 3551              	 .cfi_offset 14,-4
 3552 0002 86B0     	 sub sp,sp,#24
 3553              	.LCFI134:
 3554              	 .cfi_def_cfa_offset 32
 3555 0004 00AF     	 add r7,sp,#0
 3556              	.LCFI135:
 3557              	 .cfi_def_cfa_register 7
 3558 0006 7860     	 str r0,[r7,#4]
2517:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
 3559              	 .loc 1 2517 0
 3560 0008 7B68     	 ldr r3,[r7,#4]
 3561 000a 3B61     	 str r3,[r7,#16]
2518:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
2519:../Dave/Generated/FREERTOS/tasks.c **** 
2520:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxTCB );
 3562              	 .loc 1 2520 0
 3563 000c 3B69     	 ldr r3,[r7,#16]
 3564 000e 002B     	 cmp r3,#0
 3565 0010 09D1     	 bne .L236
 3566              	.LBB162:
 3567              	.LBB163:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 3568              	 .loc 2 195 0 discriminator 1
 3569              	
 3570 0012 4FF0FC03 	 mov r3,#252
 3571 0016 83F31188 	 msr basepri,r3
 3572 001a BFF36F8F 	 isb 
 3573 001e BFF34F8F 	 dsb 
 3574              	
 3575              	
 3576              	 .thumb
 3577 0022 FB60     	 str r3,[r7,#12]
 3578              	.L237:
 3579              	.LBE163:
 3580              	.LBE162:
 3581              	 .loc 1 2520 0 discriminator 1
 3582 0024 FEE7     	 b .L237
 3583              	.L236:
2521:../Dave/Generated/FREERTOS/tasks.c **** 
2522:../Dave/Generated/FREERTOS/tasks.c **** 		vTaskSuspendAll();
 3584              	 .loc 1 2522 0
 3585 0026 FFF7FEFF 	 bl vTaskSuspendAll
2523:../Dave/Generated/FREERTOS/tasks.c **** 		{
2524:../Dave/Generated/FREERTOS/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2525:../Dave/Generated/FREERTOS/tasks.c **** 			it is actually in the Blocked state. */
2526:../Dave/Generated/FREERTOS/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
 3586              	 .loc 1 2526 0
 3587 002a 7868     	 ldr r0,[r7,#4]
 3588 002c FFF7FEFF 	 bl eTaskGetState
 3589 0030 0346     	 mov r3,r0
 3590 0032 022B     	 cmp r3,#2
 3591 0034 3BD1     	 bne .L238
2527:../Dave/Generated/FREERTOS/tasks.c **** 			{
2528:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdPASS;
 3592              	 .loc 1 2528 0
 3593 0036 0123     	 movs r3,#1
 3594 0038 7B61     	 str r3,[r7,#20]
2529:../Dave/Generated/FREERTOS/tasks.c **** 
2530:../Dave/Generated/FREERTOS/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2531:../Dave/Generated/FREERTOS/tasks.c **** 				interrupt won't touch the xStateListItem because the
2532:../Dave/Generated/FREERTOS/tasks.c **** 				scheduler is suspended. */
2533:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3595              	 .loc 1 2533 0
 3596 003a 3B69     	 ldr r3,[r7,#16]
 3597 003c 0433     	 adds r3,r3,#4
 3598 003e 1846     	 mov r0,r3
 3599 0040 FFF7FEFF 	 bl uxListRemove
2534:../Dave/Generated/FREERTOS/tasks.c **** 
2535:../Dave/Generated/FREERTOS/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2536:../Dave/Generated/FREERTOS/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2537:../Dave/Generated/FREERTOS/tasks.c **** 				even though the scheduler is suspended, so a critical section
2538:../Dave/Generated/FREERTOS/tasks.c **** 				is used. */
2539:../Dave/Generated/FREERTOS/tasks.c **** 				taskENTER_CRITICAL();
 3600              	 .loc 1 2539 0
 3601 0044 FFF7FEFF 	 bl vPortEnterCritical
2540:../Dave/Generated/FREERTOS/tasks.c **** 				{
2541:../Dave/Generated/FREERTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3602              	 .loc 1 2541 0
 3603 0048 3B69     	 ldr r3,[r7,#16]
 3604 004a 9B6A     	 ldr r3,[r3,#40]
 3605 004c 002B     	 cmp r3,#0
 3606 004e 08D0     	 beq .L239
2542:../Dave/Generated/FREERTOS/tasks.c **** 					{
2543:../Dave/Generated/FREERTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3607              	 .loc 1 2543 0
 3608 0050 3B69     	 ldr r3,[r7,#16]
 3609 0052 1833     	 adds r3,r3,#24
 3610 0054 1846     	 mov r0,r3
 3611 0056 FFF7FEFF 	 bl uxListRemove
2544:../Dave/Generated/FREERTOS/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
 3612              	 .loc 1 2544 0
 3613 005a 3B69     	 ldr r3,[r7,#16]
 3614 005c 0122     	 movs r2,#1
 3615 005e 83F86D20 	 strb r2,[r3,#109]
 3616              	.L239:
2545:../Dave/Generated/FREERTOS/tasks.c **** 					}
2546:../Dave/Generated/FREERTOS/tasks.c **** 					else
2547:../Dave/Generated/FREERTOS/tasks.c **** 					{
2548:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2549:../Dave/Generated/FREERTOS/tasks.c **** 					}
2550:../Dave/Generated/FREERTOS/tasks.c **** 				}
2551:../Dave/Generated/FREERTOS/tasks.c **** 				taskEXIT_CRITICAL();
 3617              	 .loc 1 2551 0
 3618 0062 FFF7FEFF 	 bl vPortExitCritical
2552:../Dave/Generated/FREERTOS/tasks.c **** 
2553:../Dave/Generated/FREERTOS/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2554:../Dave/Generated/FREERTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 3619              	 .loc 1 2554 0
 3620 0066 3B69     	 ldr r3,[r7,#16]
 3621 0068 DB6A     	 ldr r3,[r3,#44]
 3622 006a 1A46     	 mov r2,r3
 3623 006c 0123     	 movs r3,#1
 3624 006e 03FA02F2 	 lsl r2,r3,r2
 3625 0072 134B     	 ldr r3,.L242
 3626 0074 1B68     	 ldr r3,[r3]
 3627 0076 1343     	 orrs r3,r3,r2
 3628 0078 114A     	 ldr r2,.L242
 3629 007a 1360     	 str r3,[r2]
 3630 007c 3B69     	 ldr r3,[r7,#16]
 3631 007e DA6A     	 ldr r2,[r3,#44]
 3632 0080 1346     	 mov r3,r2
 3633 0082 9B00     	 lsls r3,r3,#2
 3634 0084 1344     	 add r3,r3,r2
 3635 0086 9B00     	 lsls r3,r3,#2
 3636 0088 0E4A     	 ldr r2,.L242+4
 3637 008a 1A44     	 add r2,r2,r3
 3638 008c 3B69     	 ldr r3,[r7,#16]
 3639 008e 0433     	 adds r3,r3,#4
 3640 0090 1046     	 mov r0,r2
 3641 0092 1946     	 mov r1,r3
 3642 0094 FFF7FEFF 	 bl vListInsertEnd
2555:../Dave/Generated/FREERTOS/tasks.c **** 
2556:../Dave/Generated/FREERTOS/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2557:../Dave/Generated/FREERTOS/tasks.c **** 				switch if preemption is turned off. */
2558:../Dave/Generated/FREERTOS/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2559:../Dave/Generated/FREERTOS/tasks.c **** 				{
2560:../Dave/Generated/FREERTOS/tasks.c **** 					/* Preemption is on, but a context switch should only be
2561:../Dave/Generated/FREERTOS/tasks.c **** 					performed if the unblocked task has a priority that is
2562:../Dave/Generated/FREERTOS/tasks.c **** 					equal to or higher than the currently executing task. */
2563:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 3643              	 .loc 1 2563 0
 3644 0098 3B69     	 ldr r3,[r7,#16]
 3645 009a DA6A     	 ldr r2,[r3,#44]
 3646 009c 0A4B     	 ldr r3,.L242+8
 3647 009e 1B68     	 ldr r3,[r3]
 3648 00a0 DB6A     	 ldr r3,[r3,#44]
 3649 00a2 9A42     	 cmp r2,r3
 3650 00a4 05D9     	 bls .L240
2564:../Dave/Generated/FREERTOS/tasks.c **** 					{
2565:../Dave/Generated/FREERTOS/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2566:../Dave/Generated/FREERTOS/tasks.c **** 						is unsuspended. */
2567:../Dave/Generated/FREERTOS/tasks.c **** 						xYieldPending = pdTRUE;
 3651              	 .loc 1 2567 0
 3652 00a6 094B     	 ldr r3,.L242+12
 3653 00a8 0122     	 movs r2,#1
 3654 00aa 1A60     	 str r2,[r3]
 3655 00ac 01E0     	 b .L240
 3656              	.L238:
2568:../Dave/Generated/FREERTOS/tasks.c **** 					}
2569:../Dave/Generated/FREERTOS/tasks.c **** 					else
2570:../Dave/Generated/FREERTOS/tasks.c **** 					{
2571:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2572:../Dave/Generated/FREERTOS/tasks.c **** 					}
2573:../Dave/Generated/FREERTOS/tasks.c **** 				}
2574:../Dave/Generated/FREERTOS/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2575:../Dave/Generated/FREERTOS/tasks.c **** 			}
2576:../Dave/Generated/FREERTOS/tasks.c **** 			else
2577:../Dave/Generated/FREERTOS/tasks.c **** 			{
2578:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdFAIL;
 3657              	 .loc 1 2578 0
 3658 00ae 0023     	 movs r3,#0
 3659 00b0 7B61     	 str r3,[r7,#20]
 3660              	.L240:
2579:../Dave/Generated/FREERTOS/tasks.c **** 			}
2580:../Dave/Generated/FREERTOS/tasks.c **** 		}
2581:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) xTaskResumeAll();
 3661              	 .loc 1 2581 0
 3662 00b2 FFF7FEFF 	 bl xTaskResumeAll
2582:../Dave/Generated/FREERTOS/tasks.c **** 
2583:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 3663              	 .loc 1 2583 0
 3664 00b6 7B69     	 ldr r3,[r7,#20]
2584:../Dave/Generated/FREERTOS/tasks.c **** 	}
 3665              	 .loc 1 2584 0
 3666 00b8 1846     	 mov r0,r3
 3667 00ba 1837     	 adds r7,r7,#24
 3668              	.LCFI136:
 3669              	 .cfi_def_cfa_offset 8
 3670 00bc BD46     	 mov sp,r7
 3671              	.LCFI137:
 3672              	 .cfi_def_cfa_register 13
 3673              	 
 3674 00be 80BD     	 pop {r7,pc}
 3675              	.L243:
 3676              	 .align 2
 3677              	.L242:
 3678 00c0 00000000 	 .word uxTopReadyPriority
 3679 00c4 00000000 	 .word pxReadyTasksLists
 3680 00c8 00000000 	 .word pxCurrentTCB
 3681 00cc 00000000 	 .word xYieldPending
 3682              	 .cfi_endproc
 3683              	.LFE161:
 3685              	 .section .text.xTaskIncrementTick,"ax",%progbits
 3686              	 .align 2
 3687              	 .global xTaskIncrementTick
 3688              	 .thumb
 3689              	 .thumb_func
 3691              	xTaskIncrementTick:
 3692              	.LFB162:
2585:../Dave/Generated/FREERTOS/tasks.c **** 
2586:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2587:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2588:../Dave/Generated/FREERTOS/tasks.c **** 
2589:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskIncrementTick( void )
2590:../Dave/Generated/FREERTOS/tasks.c **** {
 3693              	 .loc 1 2590 0
 3694              	 .cfi_startproc
 3695              	 
 3696              	 
 3697 0000 80B5     	 push {r7,lr}
 3698              	.LCFI138:
 3699              	 .cfi_def_cfa_offset 8
 3700              	 .cfi_offset 7,-8
 3701              	 .cfi_offset 14,-4
 3702 0002 86B0     	 sub sp,sp,#24
 3703              	.LCFI139:
 3704              	 .cfi_def_cfa_offset 32
 3705 0004 00AF     	 add r7,sp,#0
 3706              	.LCFI140:
 3707              	 .cfi_def_cfa_register 7
2591:../Dave/Generated/FREERTOS/tasks.c **** TCB_t * pxTCB;
2592:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xItemValue;
2593:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 3708              	 .loc 1 2593 0
 3709 0006 0023     	 movs r3,#0
 3710 0008 7B61     	 str r3,[r7,#20]
2594:../Dave/Generated/FREERTOS/tasks.c **** 
2595:../Dave/Generated/FREERTOS/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2596:../Dave/Generated/FREERTOS/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2597:../Dave/Generated/FREERTOS/tasks.c **** 	tasks to be unblocked. */
2598:../Dave/Generated/FREERTOS/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2599:../Dave/Generated/FREERTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3711              	 .loc 1 2599 0
 3712 000a 514B     	 ldr r3,.L261
 3713 000c 1B68     	 ldr r3,[r3]
 3714 000e 002B     	 cmp r3,#0
 3715 0010 40F08E80 	 bne .L245
 3716              	.LBB164:
2600:../Dave/Generated/FREERTOS/tasks.c **** 	{
2601:../Dave/Generated/FREERTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2602:../Dave/Generated/FREERTOS/tasks.c **** 		block. */
2603:../Dave/Generated/FREERTOS/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 3717              	 .loc 1 2603 0
 3718 0014 4F4B     	 ldr r3,.L261+4
 3719 0016 1B68     	 ldr r3,[r3]
 3720 0018 0133     	 adds r3,r3,#1
 3721 001a 3B61     	 str r3,[r7,#16]
2604:../Dave/Generated/FREERTOS/tasks.c **** 
2605:../Dave/Generated/FREERTOS/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2606:../Dave/Generated/FREERTOS/tasks.c **** 		delayed lists if it wraps to 0. */
2607:../Dave/Generated/FREERTOS/tasks.c **** 		xTickCount = xConstTickCount;
 3722              	 .loc 1 2607 0
 3723 001c 4D4A     	 ldr r2,.L261+4
 3724 001e 3B69     	 ldr r3,[r7,#16]
 3725 0020 1360     	 str r3,[r2]
2608:../Dave/Generated/FREERTOS/tasks.c **** 
2609:../Dave/Generated/FREERTOS/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 3726              	 .loc 1 2609 0
 3727 0022 3B69     	 ldr r3,[r7,#16]
 3728 0024 002B     	 cmp r3,#0
 3729 0026 1FD1     	 bne .L246
 3730              	.LBB165:
2610:../Dave/Generated/FREERTOS/tasks.c **** 		{
2611:../Dave/Generated/FREERTOS/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 3731              	 .loc 1 2611 0
 3732 0028 4B4B     	 ldr r3,.L261+8
 3733 002a 1B68     	 ldr r3,[r3]
 3734 002c 1B68     	 ldr r3,[r3]
 3735 002e 002B     	 cmp r3,#0
 3736 0030 09D0     	 beq .L247
 3737              	.LBB166:
 3738              	.LBB167:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 3739              	 .loc 2 195 0 discriminator 1
 3740              	
 3741 0032 4FF0FC03 	 mov r3,#252
 3742 0036 83F31188 	 msr basepri,r3
 3743 003a BFF36F8F 	 isb 
 3744 003e BFF34F8F 	 dsb 
 3745              	
 3746              	
 3747              	 .thumb
 3748 0042 3B60     	 str r3,[r7]
 3749              	.L248:
 3750              	.LBE167:
 3751              	.LBE166:
 3752              	 .loc 1 2611 0 discriminator 1
 3753 0044 FEE7     	 b .L248
 3754              	.L247:
 3755              	 .loc 1 2611 0 is_stmt 0 discriminator 2
 3756 0046 444B     	 ldr r3,.L261+8
 3757 0048 1B68     	 ldr r3,[r3]
 3758 004a FB60     	 str r3,[r7,#12]
 3759 004c 434B     	 ldr r3,.L261+12
 3760 004e 1B68     	 ldr r3,[r3]
 3761 0050 414A     	 ldr r2,.L261+8
 3762 0052 1360     	 str r3,[r2]
 3763 0054 414A     	 ldr r2,.L261+12
 3764 0056 FB68     	 ldr r3,[r7,#12]
 3765 0058 1360     	 str r3,[r2]
 3766 005a 414B     	 ldr r3,.L261+16
 3767 005c 1B68     	 ldr r3,[r3]
 3768 005e 0133     	 adds r3,r3,#1
 3769 0060 3F4A     	 ldr r2,.L261+16
 3770 0062 1360     	 str r3,[r2]
 3771 0064 FFF7FEFF 	 bl prvResetNextTaskUnblockTime
 3772              	.L246:
 3773              	.LBE165:
2612:../Dave/Generated/FREERTOS/tasks.c **** 		}
2613:../Dave/Generated/FREERTOS/tasks.c **** 		else
2614:../Dave/Generated/FREERTOS/tasks.c **** 		{
2615:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2616:../Dave/Generated/FREERTOS/tasks.c **** 		}
2617:../Dave/Generated/FREERTOS/tasks.c **** 
2618:../Dave/Generated/FREERTOS/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2619:../Dave/Generated/FREERTOS/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2620:../Dave/Generated/FREERTOS/tasks.c **** 		has been found whose block time has not expired there is no need to
2621:../Dave/Generated/FREERTOS/tasks.c **** 		look any further down the list. */
2622:../Dave/Generated/FREERTOS/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 3774              	 .loc 1 2622 0 is_stmt 1
 3775 0068 3E4B     	 ldr r3,.L261+20
 3776 006a 1B68     	 ldr r3,[r3]
 3777 006c 3A69     	 ldr r2,[r7,#16]
 3778 006e 9A42     	 cmp r2,r3
 3779 0070 4FD3     	 bcc .L249
 3780              	.L256:
2623:../Dave/Generated/FREERTOS/tasks.c **** 		{
2624:../Dave/Generated/FREERTOS/tasks.c **** 			for( ;; )
2625:../Dave/Generated/FREERTOS/tasks.c **** 			{
2626:../Dave/Generated/FREERTOS/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3781              	 .loc 1 2626 0
 3782 0072 394B     	 ldr r3,.L261+8
 3783 0074 1B68     	 ldr r3,[r3]
 3784 0076 1B68     	 ldr r3,[r3]
 3785 0078 002B     	 cmp r3,#0
 3786 007a 01D1     	 bne .L250
 3787              	 .loc 1 2626 0 is_stmt 0 discriminator 1
 3788 007c 0123     	 movs r3,#1
 3789 007e 00E0     	 b .L251
 3790              	.L250:
 3791              	 .loc 1 2626 0 discriminator 2
 3792 0080 0023     	 movs r3,#0
 3793              	.L251:
 3794              	 .loc 1 2626 0 discriminator 4
 3795 0082 002B     	 cmp r3,#0
 3796 0084 04D0     	 beq .L252
2627:../Dave/Generated/FREERTOS/tasks.c **** 				{
2628:../Dave/Generated/FREERTOS/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2629:../Dave/Generated/FREERTOS/tasks.c **** 					to the maximum possible value so it is extremely
2630:../Dave/Generated/FREERTOS/tasks.c **** 					unlikely that the
2631:../Dave/Generated/FREERTOS/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2632:../Dave/Generated/FREERTOS/tasks.c **** 					next time through. */
2633:../Dave/Generated/FREERTOS/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 3797              	 .loc 1 2633 0 is_stmt 1
 3798 0086 374B     	 ldr r3,.L261+20
 3799 0088 4FF0FF32 	 mov r2,#-1
 3800 008c 1A60     	 str r2,[r3]
2634:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 3801              	 .loc 1 2634 0
 3802 008e 40E0     	 b .L249
 3803              	.L252:
2635:../Dave/Generated/FREERTOS/tasks.c **** 				}
2636:../Dave/Generated/FREERTOS/tasks.c **** 				else
2637:../Dave/Generated/FREERTOS/tasks.c **** 				{
2638:../Dave/Generated/FREERTOS/tasks.c **** 					/* The delayed list is not empty, get the value of the
2639:../Dave/Generated/FREERTOS/tasks.c **** 					item at the head of the delayed list.  This is the time
2640:../Dave/Generated/FREERTOS/tasks.c **** 					at which the task at the head of the delayed list must
2641:../Dave/Generated/FREERTOS/tasks.c **** 					be removed from the Blocked state. */
2642:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 3804              	 .loc 1 2642 0
 3805 0090 314B     	 ldr r3,.L261+8
 3806 0092 1B68     	 ldr r3,[r3]
 3807 0094 DB68     	 ldr r3,[r3,#12]
 3808 0096 DB68     	 ldr r3,[r3,#12]
 3809 0098 BB60     	 str r3,[r7,#8]
2643:../Dave/Generated/FREERTOS/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3810              	 .loc 1 2643 0
 3811 009a BB68     	 ldr r3,[r7,#8]
 3812 009c 5B68     	 ldr r3,[r3,#4]
 3813 009e 7B60     	 str r3,[r7,#4]
2644:../Dave/Generated/FREERTOS/tasks.c **** 
2645:../Dave/Generated/FREERTOS/tasks.c **** 					if( xConstTickCount < xItemValue )
 3814              	 .loc 1 2645 0
 3815 00a0 3A69     	 ldr r2,[r7,#16]
 3816 00a2 7B68     	 ldr r3,[r7,#4]
 3817 00a4 9A42     	 cmp r2,r3
 3818 00a6 03D2     	 bcs .L253
2646:../Dave/Generated/FREERTOS/tasks.c **** 					{
2647:../Dave/Generated/FREERTOS/tasks.c **** 						/* It is not time to unblock this item yet, but the
2648:../Dave/Generated/FREERTOS/tasks.c **** 						item value is the time at which the task at the head
2649:../Dave/Generated/FREERTOS/tasks.c **** 						of the blocked list must be removed from the Blocked
2650:../Dave/Generated/FREERTOS/tasks.c **** 						state -	so record the item value in
2651:../Dave/Generated/FREERTOS/tasks.c **** 						xNextTaskUnblockTime. */
2652:../Dave/Generated/FREERTOS/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3819              	 .loc 1 2652 0
 3820 00a8 2E4A     	 ldr r2,.L261+20
 3821 00aa 7B68     	 ldr r3,[r7,#4]
 3822 00ac 1360     	 str r3,[r2]
2653:../Dave/Generated/FREERTOS/tasks.c **** 						break;
 3823              	 .loc 1 2653 0
 3824 00ae 30E0     	 b .L249
 3825              	.L253:
2654:../Dave/Generated/FREERTOS/tasks.c **** 					}
2655:../Dave/Generated/FREERTOS/tasks.c **** 					else
2656:../Dave/Generated/FREERTOS/tasks.c **** 					{
2657:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2658:../Dave/Generated/FREERTOS/tasks.c **** 					}
2659:../Dave/Generated/FREERTOS/tasks.c **** 
2660:../Dave/Generated/FREERTOS/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2661:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3826              	 .loc 1 2661 0
 3827 00b0 BB68     	 ldr r3,[r7,#8]
 3828 00b2 0433     	 adds r3,r3,#4
 3829 00b4 1846     	 mov r0,r3
 3830 00b6 FFF7FEFF 	 bl uxListRemove
2662:../Dave/Generated/FREERTOS/tasks.c **** 
2663:../Dave/Generated/FREERTOS/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2664:../Dave/Generated/FREERTOS/tasks.c **** 					it from the event list. */
2665:../Dave/Generated/FREERTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3831              	 .loc 1 2665 0
 3832 00ba BB68     	 ldr r3,[r7,#8]
 3833 00bc 9B6A     	 ldr r3,[r3,#40]
 3834 00be 002B     	 cmp r3,#0
 3835 00c0 04D0     	 beq .L254
2666:../Dave/Generated/FREERTOS/tasks.c **** 					{
2667:../Dave/Generated/FREERTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3836              	 .loc 1 2667 0
 3837 00c2 BB68     	 ldr r3,[r7,#8]
 3838 00c4 1833     	 adds r3,r3,#24
 3839 00c6 1846     	 mov r0,r3
 3840 00c8 FFF7FEFF 	 bl uxListRemove
 3841              	.L254:
2668:../Dave/Generated/FREERTOS/tasks.c **** 					}
2669:../Dave/Generated/FREERTOS/tasks.c **** 					else
2670:../Dave/Generated/FREERTOS/tasks.c **** 					{
2671:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2672:../Dave/Generated/FREERTOS/tasks.c **** 					}
2673:../Dave/Generated/FREERTOS/tasks.c **** 
2674:../Dave/Generated/FREERTOS/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2675:../Dave/Generated/FREERTOS/tasks.c **** 					list. */
2676:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3842              	 .loc 1 2676 0
 3843 00cc BB68     	 ldr r3,[r7,#8]
 3844 00ce DB6A     	 ldr r3,[r3,#44]
 3845 00d0 1A46     	 mov r2,r3
 3846 00d2 0123     	 movs r3,#1
 3847 00d4 03FA02F2 	 lsl r2,r3,r2
 3848 00d8 234B     	 ldr r3,.L261+24
 3849 00da 1B68     	 ldr r3,[r3]
 3850 00dc 1343     	 orrs r3,r3,r2
 3851 00de 224A     	 ldr r2,.L261+24
 3852 00e0 1360     	 str r3,[r2]
 3853 00e2 BB68     	 ldr r3,[r7,#8]
 3854 00e4 DA6A     	 ldr r2,[r3,#44]
 3855 00e6 1346     	 mov r3,r2
 3856 00e8 9B00     	 lsls r3,r3,#2
 3857 00ea 1344     	 add r3,r3,r2
 3858 00ec 9B00     	 lsls r3,r3,#2
 3859 00ee 1F4A     	 ldr r2,.L261+28
 3860 00f0 1A44     	 add r2,r2,r3
 3861 00f2 BB68     	 ldr r3,[r7,#8]
 3862 00f4 0433     	 adds r3,r3,#4
 3863 00f6 1046     	 mov r0,r2
 3864 00f8 1946     	 mov r1,r3
 3865 00fa FFF7FEFF 	 bl vListInsertEnd
2677:../Dave/Generated/FREERTOS/tasks.c **** 
2678:../Dave/Generated/FREERTOS/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2679:../Dave/Generated/FREERTOS/tasks.c **** 					context switch if preemption is turned off. */
2680:../Dave/Generated/FREERTOS/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2681:../Dave/Generated/FREERTOS/tasks.c **** 					{
2682:../Dave/Generated/FREERTOS/tasks.c **** 						/* Preemption is on, but a context switch should
2683:../Dave/Generated/FREERTOS/tasks.c **** 						only be performed if the unblocked task has a
2684:../Dave/Generated/FREERTOS/tasks.c **** 						priority that is equal to or higher than the
2685:../Dave/Generated/FREERTOS/tasks.c **** 						currently executing task. */
2686:../Dave/Generated/FREERTOS/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3866              	 .loc 1 2686 0
 3867 00fe BB68     	 ldr r3,[r7,#8]
 3868 0100 DA6A     	 ldr r2,[r3,#44]
 3869 0102 1B4B     	 ldr r3,.L261+32
 3870 0104 1B68     	 ldr r3,[r3]
 3871 0106 DB6A     	 ldr r3,[r3,#44]
 3872 0108 9A42     	 cmp r2,r3
 3873 010a 01D3     	 bcc .L255
2687:../Dave/Generated/FREERTOS/tasks.c **** 						{
2688:../Dave/Generated/FREERTOS/tasks.c **** 							xSwitchRequired = pdTRUE;
 3874              	 .loc 1 2688 0
 3875 010c 0123     	 movs r3,#1
 3876 010e 7B61     	 str r3,[r7,#20]
 3877              	.L255:
2689:../Dave/Generated/FREERTOS/tasks.c **** 						}
2690:../Dave/Generated/FREERTOS/tasks.c **** 						else
2691:../Dave/Generated/FREERTOS/tasks.c **** 						{
2692:../Dave/Generated/FREERTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2693:../Dave/Generated/FREERTOS/tasks.c **** 						}
2694:../Dave/Generated/FREERTOS/tasks.c **** 					}
2695:../Dave/Generated/FREERTOS/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2696:../Dave/Generated/FREERTOS/tasks.c **** 				}
2697:../Dave/Generated/FREERTOS/tasks.c **** 			}
 3878              	 .loc 1 2697 0
 3879 0110 AFE7     	 b .L256
 3880              	.L249:
2698:../Dave/Generated/FREERTOS/tasks.c **** 		}
2699:../Dave/Generated/FREERTOS/tasks.c **** 
2700:../Dave/Generated/FREERTOS/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2701:../Dave/Generated/FREERTOS/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2702:../Dave/Generated/FREERTOS/tasks.c **** 		writer has not explicitly turned time slicing off. */
2703:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2704:../Dave/Generated/FREERTOS/tasks.c **** 		{
2705:../Dave/Generated/FREERTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 3881              	 .loc 1 2705 0
 3882 0112 174B     	 ldr r3,.L261+32
 3883 0114 1B68     	 ldr r3,[r3]
 3884 0116 DA6A     	 ldr r2,[r3,#44]
 3885 0118 1449     	 ldr r1,.L261+28
 3886 011a 1346     	 mov r3,r2
 3887 011c 9B00     	 lsls r3,r3,#2
 3888 011e 1344     	 add r3,r3,r2
 3889 0120 9B00     	 lsls r3,r3,#2
 3890 0122 0B44     	 add r3,r3,r1
 3891 0124 1B68     	 ldr r3,[r3]
 3892 0126 012B     	 cmp r3,#1
 3893 0128 01D9     	 bls .L257
2706:../Dave/Generated/FREERTOS/tasks.c **** 			{
2707:../Dave/Generated/FREERTOS/tasks.c **** 				xSwitchRequired = pdTRUE;
 3894              	 .loc 1 2707 0
 3895 012a 0123     	 movs r3,#1
 3896 012c 7B61     	 str r3,[r7,#20]
 3897              	.L257:
 3898              	.LBE164:
 3899 012e 04E0     	 b .L258
 3900              	.L245:
2708:../Dave/Generated/FREERTOS/tasks.c **** 			}
2709:../Dave/Generated/FREERTOS/tasks.c **** 			else
2710:../Dave/Generated/FREERTOS/tasks.c **** 			{
2711:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2712:../Dave/Generated/FREERTOS/tasks.c **** 			}
2713:../Dave/Generated/FREERTOS/tasks.c **** 		}
2714:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2715:../Dave/Generated/FREERTOS/tasks.c **** 
2716:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2717:../Dave/Generated/FREERTOS/tasks.c **** 		{
2718:../Dave/Generated/FREERTOS/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2719:../Dave/Generated/FREERTOS/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2720:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2721:../Dave/Generated/FREERTOS/tasks.c **** 			{
2722:../Dave/Generated/FREERTOS/tasks.c **** 				vApplicationTickHook();
2723:../Dave/Generated/FREERTOS/tasks.c **** 			}
2724:../Dave/Generated/FREERTOS/tasks.c **** 			else
2725:../Dave/Generated/FREERTOS/tasks.c **** 			{
2726:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2727:../Dave/Generated/FREERTOS/tasks.c **** 			}
2728:../Dave/Generated/FREERTOS/tasks.c **** 		}
2729:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2730:../Dave/Generated/FREERTOS/tasks.c **** 	}
2731:../Dave/Generated/FREERTOS/tasks.c **** 	else
2732:../Dave/Generated/FREERTOS/tasks.c **** 	{
2733:../Dave/Generated/FREERTOS/tasks.c **** 		++uxPendedTicks;
 3901              	 .loc 1 2733 0
 3902 0130 104B     	 ldr r3,.L261+36
 3903 0132 1B68     	 ldr r3,[r3]
 3904 0134 0133     	 adds r3,r3,#1
 3905 0136 0F4A     	 ldr r2,.L261+36
 3906 0138 1360     	 str r3,[r2]
 3907              	.L258:
2734:../Dave/Generated/FREERTOS/tasks.c **** 
2735:../Dave/Generated/FREERTOS/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2736:../Dave/Generated/FREERTOS/tasks.c **** 		scheduler is locked. */
2737:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2738:../Dave/Generated/FREERTOS/tasks.c **** 		{
2739:../Dave/Generated/FREERTOS/tasks.c **** 			vApplicationTickHook();
2740:../Dave/Generated/FREERTOS/tasks.c **** 		}
2741:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
2742:../Dave/Generated/FREERTOS/tasks.c **** 	}
2743:../Dave/Generated/FREERTOS/tasks.c **** 
2744:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2745:../Dave/Generated/FREERTOS/tasks.c **** 	{
2746:../Dave/Generated/FREERTOS/tasks.c **** 		if( xYieldPending != pdFALSE )
 3908              	 .loc 1 2746 0
 3909 013a 0F4B     	 ldr r3,.L261+40
 3910 013c 1B68     	 ldr r3,[r3]
 3911 013e 002B     	 cmp r3,#0
 3912 0140 01D0     	 beq .L259
2747:../Dave/Generated/FREERTOS/tasks.c **** 		{
2748:../Dave/Generated/FREERTOS/tasks.c **** 			xSwitchRequired = pdTRUE;
 3913              	 .loc 1 2748 0
 3914 0142 0123     	 movs r3,#1
 3915 0144 7B61     	 str r3,[r7,#20]
 3916              	.L259:
2749:../Dave/Generated/FREERTOS/tasks.c **** 		}
2750:../Dave/Generated/FREERTOS/tasks.c **** 		else
2751:../Dave/Generated/FREERTOS/tasks.c **** 		{
2752:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2753:../Dave/Generated/FREERTOS/tasks.c **** 		}
2754:../Dave/Generated/FREERTOS/tasks.c **** 	}
2755:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2756:../Dave/Generated/FREERTOS/tasks.c **** 
2757:../Dave/Generated/FREERTOS/tasks.c **** 	return xSwitchRequired;
 3917              	 .loc 1 2757 0
 3918 0146 7B69     	 ldr r3,[r7,#20]
2758:../Dave/Generated/FREERTOS/tasks.c **** }
 3919              	 .loc 1 2758 0
 3920 0148 1846     	 mov r0,r3
 3921 014a 1837     	 adds r7,r7,#24
 3922              	.LCFI141:
 3923              	 .cfi_def_cfa_offset 8
 3924 014c BD46     	 mov sp,r7
 3925              	.LCFI142:
 3926              	 .cfi_def_cfa_register 13
 3927              	 
 3928 014e 80BD     	 pop {r7,pc}
 3929              	.L262:
 3930              	 .align 2
 3931              	.L261:
 3932 0150 00000000 	 .word uxSchedulerSuspended
 3933 0154 00000000 	 .word xTickCount
 3934 0158 00000000 	 .word pxDelayedTaskList
 3935 015c 00000000 	 .word pxOverflowDelayedTaskList
 3936 0160 00000000 	 .word xNumOfOverflows
 3937 0164 00000000 	 .word xNextTaskUnblockTime
 3938 0168 00000000 	 .word uxTopReadyPriority
 3939 016c 00000000 	 .word pxReadyTasksLists
 3940 0170 00000000 	 .word pxCurrentTCB
 3941 0174 00000000 	 .word uxPendedTicks
 3942 0178 00000000 	 .word xYieldPending
 3943              	 .cfi_endproc
 3944              	.LFE162:
 3946              	 .section .text.vTaskSwitchContext,"ax",%progbits
 3947              	 .align 2
 3948              	 .global vTaskSwitchContext
 3949              	 .thumb
 3950              	 .thumb_func
 3952              	vTaskSwitchContext:
 3953              	.LFB163:
2759:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2760:../Dave/Generated/FREERTOS/tasks.c **** 
2761:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2762:../Dave/Generated/FREERTOS/tasks.c **** 
2763:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2764:../Dave/Generated/FREERTOS/tasks.c **** 	{
2765:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *xTCB;
2766:../Dave/Generated/FREERTOS/tasks.c **** 
2767:../Dave/Generated/FREERTOS/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2768:../Dave/Generated/FREERTOS/tasks.c **** 		getting set. */
2769:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTask == NULL )
2770:../Dave/Generated/FREERTOS/tasks.c **** 		{
2771:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2772:../Dave/Generated/FREERTOS/tasks.c **** 		}
2773:../Dave/Generated/FREERTOS/tasks.c **** 		else
2774:../Dave/Generated/FREERTOS/tasks.c **** 		{
2775:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2776:../Dave/Generated/FREERTOS/tasks.c **** 		}
2777:../Dave/Generated/FREERTOS/tasks.c **** 
2778:../Dave/Generated/FREERTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2779:../Dave/Generated/FREERTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2780:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
2781:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2782:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
2783:../Dave/Generated/FREERTOS/tasks.c **** 	}
2784:../Dave/Generated/FREERTOS/tasks.c **** 
2785:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2786:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2787:../Dave/Generated/FREERTOS/tasks.c **** 
2788:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2789:../Dave/Generated/FREERTOS/tasks.c **** 
2790:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2791:../Dave/Generated/FREERTOS/tasks.c **** 	{
2792:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *xTCB;
2793:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHookFunction_t xReturn;
2794:../Dave/Generated/FREERTOS/tasks.c **** 
2795:../Dave/Generated/FREERTOS/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2796:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTask == NULL )
2797:../Dave/Generated/FREERTOS/tasks.c **** 		{
2798:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2799:../Dave/Generated/FREERTOS/tasks.c **** 		}
2800:../Dave/Generated/FREERTOS/tasks.c **** 		else
2801:../Dave/Generated/FREERTOS/tasks.c **** 		{
2802:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2803:../Dave/Generated/FREERTOS/tasks.c **** 		}
2804:../Dave/Generated/FREERTOS/tasks.c **** 
2805:../Dave/Generated/FREERTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2806:../Dave/Generated/FREERTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2807:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
2808:../Dave/Generated/FREERTOS/tasks.c **** 		{
2809:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2810:../Dave/Generated/FREERTOS/tasks.c **** 		}
2811:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
2812:../Dave/Generated/FREERTOS/tasks.c **** 
2813:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
2814:../Dave/Generated/FREERTOS/tasks.c **** 	}
2815:../Dave/Generated/FREERTOS/tasks.c **** 
2816:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2817:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2818:../Dave/Generated/FREERTOS/tasks.c **** 
2819:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2820:../Dave/Generated/FREERTOS/tasks.c **** 
2821:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2822:../Dave/Generated/FREERTOS/tasks.c **** 	{
2823:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *xTCB;
2824:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
2825:../Dave/Generated/FREERTOS/tasks.c **** 
2826:../Dave/Generated/FREERTOS/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2827:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTask == NULL )
2828:../Dave/Generated/FREERTOS/tasks.c **** 		{
2829:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2830:../Dave/Generated/FREERTOS/tasks.c **** 		}
2831:../Dave/Generated/FREERTOS/tasks.c **** 		else
2832:../Dave/Generated/FREERTOS/tasks.c **** 		{
2833:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2834:../Dave/Generated/FREERTOS/tasks.c **** 		}
2835:../Dave/Generated/FREERTOS/tasks.c **** 
2836:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2837:../Dave/Generated/FREERTOS/tasks.c **** 		{
2838:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2839:../Dave/Generated/FREERTOS/tasks.c **** 		}
2840:../Dave/Generated/FREERTOS/tasks.c **** 		else
2841:../Dave/Generated/FREERTOS/tasks.c **** 		{
2842:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdFAIL;
2843:../Dave/Generated/FREERTOS/tasks.c **** 		}
2844:../Dave/Generated/FREERTOS/tasks.c **** 
2845:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
2846:../Dave/Generated/FREERTOS/tasks.c **** 	}
2847:../Dave/Generated/FREERTOS/tasks.c **** 
2848:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2849:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2850:../Dave/Generated/FREERTOS/tasks.c **** 
2851:../Dave/Generated/FREERTOS/tasks.c **** void vTaskSwitchContext( void )
2852:../Dave/Generated/FREERTOS/tasks.c **** {
 3954              	 .loc 1 2852 0
 3955              	 .cfi_startproc
 3956              	 
 3957              	 
 3958              	 
 3959 0000 80B4     	 push {r7}
 3960              	.LCFI143:
 3961              	 .cfi_def_cfa_offset 4
 3962              	 .cfi_offset 7,-4
 3963 0002 87B0     	 sub sp,sp,#28
 3964              	.LCFI144:
 3965              	 .cfi_def_cfa_offset 32
 3966 0004 00AF     	 add r7,sp,#0
 3967              	.LCFI145:
 3968              	 .cfi_def_cfa_register 7
2853:../Dave/Generated/FREERTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3969              	 .loc 1 2853 0
 3970 0006 264B     	 ldr r3,.L270
 3971 0008 1B68     	 ldr r3,[r3]
 3972 000a 002B     	 cmp r3,#0
 3973 000c 03D0     	 beq .L264
2854:../Dave/Generated/FREERTOS/tasks.c **** 	{
2855:../Dave/Generated/FREERTOS/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2856:../Dave/Generated/FREERTOS/tasks.c **** 		switch. */
2857:../Dave/Generated/FREERTOS/tasks.c **** 		xYieldPending = pdTRUE;
 3974              	 .loc 1 2857 0
 3975 000e 254B     	 ldr r3,.L270+4
 3976 0010 0122     	 movs r2,#1
 3977 0012 1A60     	 str r2,[r3]
 3978 0014 3EE0     	 b .L263
 3979              	.L264:
2858:../Dave/Generated/FREERTOS/tasks.c **** 	}
2859:../Dave/Generated/FREERTOS/tasks.c **** 	else
2860:../Dave/Generated/FREERTOS/tasks.c **** 	{
2861:../Dave/Generated/FREERTOS/tasks.c **** 		xYieldPending = pdFALSE;
 3980              	 .loc 1 2861 0
 3981 0016 234B     	 ldr r3,.L270+4
 3982 0018 0022     	 movs r2,#0
 3983 001a 1A60     	 str r2,[r3]
 3984              	.LBB168:
2862:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
2863:../Dave/Generated/FREERTOS/tasks.c **** 
2864:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2865:../Dave/Generated/FREERTOS/tasks.c **** 		{
2866:../Dave/Generated/FREERTOS/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2867:../Dave/Generated/FREERTOS/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2868:../Dave/Generated/FREERTOS/tasks.c **** 				#else
2869:../Dave/Generated/FREERTOS/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2870:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
2871:../Dave/Generated/FREERTOS/tasks.c **** 
2872:../Dave/Generated/FREERTOS/tasks.c **** 				/* Add the amount of time the task has been running to the
2873:../Dave/Generated/FREERTOS/tasks.c **** 				accumulated time so far.  The time the task started running was
2874:../Dave/Generated/FREERTOS/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2875:../Dave/Generated/FREERTOS/tasks.c **** 				protection here so count values are only valid until the timer
2876:../Dave/Generated/FREERTOS/tasks.c **** 				overflows.  The guard against negative values is to protect
2877:../Dave/Generated/FREERTOS/tasks.c **** 				against suspect run time stat counter implementations - which
2878:../Dave/Generated/FREERTOS/tasks.c **** 				are provided by the application, not the kernel. */
2879:../Dave/Generated/FREERTOS/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2880:../Dave/Generated/FREERTOS/tasks.c **** 				{
2881:../Dave/Generated/FREERTOS/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2882:../Dave/Generated/FREERTOS/tasks.c **** 				}
2883:../Dave/Generated/FREERTOS/tasks.c **** 				else
2884:../Dave/Generated/FREERTOS/tasks.c **** 				{
2885:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2886:../Dave/Generated/FREERTOS/tasks.c **** 				}
2887:../Dave/Generated/FREERTOS/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2888:../Dave/Generated/FREERTOS/tasks.c **** 		}
2889:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2890:../Dave/Generated/FREERTOS/tasks.c **** 
2891:../Dave/Generated/FREERTOS/tasks.c **** 		/* Check for stack overflow, if configured. */
2892:../Dave/Generated/FREERTOS/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2893:../Dave/Generated/FREERTOS/tasks.c **** 
2894:../Dave/Generated/FREERTOS/tasks.c **** 		/* Select a new task to run using either the generic C or port
2895:../Dave/Generated/FREERTOS/tasks.c **** 		optimised asm code. */
2896:../Dave/Generated/FREERTOS/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 3985              	 .loc 1 2896 0
 3986 001c 224B     	 ldr r3,.L270+8
 3987 001e 1B68     	 ldr r3,[r3]
 3988 0020 FB60     	 str r3,[r7,#12]
 3989              	.LBB169:
 3990              	.LBB170:
 134:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		return ucReturn;
 3991              	 .loc 2 134 0
 3992 0022 FB68     	 ldr r3,[r7,#12]
 3993              	
 3994 0024 B3FA83F3 	 clz r3,r3
 3995              	
 3996              	 .thumb
 3997 0028 FB72     	 strb r3,[r7,#11]
 135:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	}
 3998              	 .loc 2 135 0
 3999 002a FB7A     	 ldrb r3,[r7,#11]
 4000              	.LBE170:
 4001              	.LBE169:
 4002              	 .loc 1 2896 0
 4003 002c C3F11F03 	 rsb r3,r3,#31
 4004 0030 7B61     	 str r3,[r7,#20]
 4005 0032 1E49     	 ldr r1,.L270+12
 4006 0034 7A69     	 ldr r2,[r7,#20]
 4007 0036 1346     	 mov r3,r2
 4008 0038 9B00     	 lsls r3,r3,#2
 4009 003a 1344     	 add r3,r3,r2
 4010 003c 9B00     	 lsls r3,r3,#2
 4011 003e 0B44     	 add r3,r3,r1
 4012 0040 1B68     	 ldr r3,[r3]
 4013 0042 002B     	 cmp r3,#0
 4014 0044 09D1     	 bne .L267
 4015              	.LBB171:
 4016              	.LBB172:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4017              	 .loc 2 195 0 discriminator 1
 4018              	
 4019 0046 4FF0FC03 	 mov r3,#252
 4020 004a 83F31188 	 msr basepri,r3
 4021 004e BFF36F8F 	 isb 
 4022 0052 BFF34F8F 	 dsb 
 4023              	
 4024              	
 4025              	 .thumb
 4026 0056 7B60     	 str r3,[r7,#4]
 4027              	.L268:
 4028              	.LBE172:
 4029              	.LBE171:
 4030              	 .loc 1 2896 0 discriminator 1
 4031 0058 FEE7     	 b .L268
 4032              	.L267:
 4033              	.LBB173:
 4034              	 .loc 1 2896 0 is_stmt 0 discriminator 2
 4035 005a 7A69     	 ldr r2,[r7,#20]
 4036 005c 1346     	 mov r3,r2
 4037 005e 9B00     	 lsls r3,r3,#2
 4038 0060 1344     	 add r3,r3,r2
 4039 0062 9B00     	 lsls r3,r3,#2
 4040 0064 114A     	 ldr r2,.L270+12
 4041 0066 1344     	 add r3,r3,r2
 4042 0068 3B61     	 str r3,[r7,#16]
 4043 006a 3B69     	 ldr r3,[r7,#16]
 4044 006c 5B68     	 ldr r3,[r3,#4]
 4045 006e 5A68     	 ldr r2,[r3,#4]
 4046 0070 3B69     	 ldr r3,[r7,#16]
 4047 0072 5A60     	 str r2,[r3,#4]
 4048 0074 3B69     	 ldr r3,[r7,#16]
 4049 0076 5A68     	 ldr r2,[r3,#4]
 4050 0078 3B69     	 ldr r3,[r7,#16]
 4051 007a 0833     	 adds r3,r3,#8
 4052 007c 9A42     	 cmp r2,r3
 4053 007e 04D1     	 bne .L269
 4054              	 .loc 1 2896 0 discriminator 3
 4055 0080 3B69     	 ldr r3,[r7,#16]
 4056 0082 5B68     	 ldr r3,[r3,#4]
 4057 0084 5A68     	 ldr r2,[r3,#4]
 4058 0086 3B69     	 ldr r3,[r7,#16]
 4059 0088 5A60     	 str r2,[r3,#4]
 4060              	.L269:
 4061              	 .loc 1 2896 0 discriminator 5
 4062 008a 3B69     	 ldr r3,[r7,#16]
 4063 008c 5B68     	 ldr r3,[r3,#4]
 4064 008e DB68     	 ldr r3,[r3,#12]
 4065 0090 074A     	 ldr r2,.L270+16
 4066 0092 1360     	 str r3,[r2]
 4067              	.L263:
 4068              	.LBE173:
 4069              	.LBE168:
2897:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
2898:../Dave/Generated/FREERTOS/tasks.c **** 
2899:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2900:../Dave/Generated/FREERTOS/tasks.c **** 		{
2901:../Dave/Generated/FREERTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2902:../Dave/Generated/FREERTOS/tasks.c **** 			structure specific to this task. */
2903:../Dave/Generated/FREERTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2904:../Dave/Generated/FREERTOS/tasks.c **** 		}
2905:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2906:../Dave/Generated/FREERTOS/tasks.c **** 	}
2907:../Dave/Generated/FREERTOS/tasks.c **** }
 4070              	 .loc 1 2907 0 is_stmt 1
 4071 0094 1C37     	 adds r7,r7,#28
 4072              	.LCFI146:
 4073              	 .cfi_def_cfa_offset 4
 4074 0096 BD46     	 mov sp,r7
 4075              	.LCFI147:
 4076              	 .cfi_def_cfa_register 13
 4077              	 
 4078 0098 5DF8047B 	 ldr r7,[sp],#4
 4079              	.LCFI148:
 4080              	 .cfi_restore 7
 4081              	 .cfi_def_cfa_offset 0
 4082 009c 7047     	 bx lr
 4083              	.L271:
 4084 009e 00BF     	 .align 2
 4085              	.L270:
 4086 00a0 00000000 	 .word uxSchedulerSuspended
 4087 00a4 00000000 	 .word xYieldPending
 4088 00a8 00000000 	 .word uxTopReadyPriority
 4089 00ac 00000000 	 .word pxReadyTasksLists
 4090 00b0 00000000 	 .word pxCurrentTCB
 4091              	 .cfi_endproc
 4092              	.LFE163:
 4094              	 .section .text.vTaskPlaceOnEventList,"ax",%progbits
 4095              	 .align 2
 4096              	 .global vTaskPlaceOnEventList
 4097              	 .thumb
 4098              	 .thumb_func
 4100              	vTaskPlaceOnEventList:
 4101              	.LFB164:
2908:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2909:../Dave/Generated/FREERTOS/tasks.c **** 
2910:../Dave/Generated/FREERTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2911:../Dave/Generated/FREERTOS/tasks.c **** {
 4102              	 .loc 1 2911 0
 4103              	 .cfi_startproc
 4104              	 
 4105              	 
 4106 0000 80B5     	 push {r7,lr}
 4107              	.LCFI149:
 4108              	 .cfi_def_cfa_offset 8
 4109              	 .cfi_offset 7,-8
 4110              	 .cfi_offset 14,-4
 4111 0002 84B0     	 sub sp,sp,#16
 4112              	.LCFI150:
 4113              	 .cfi_def_cfa_offset 24
 4114 0004 00AF     	 add r7,sp,#0
 4115              	.LCFI151:
 4116              	 .cfi_def_cfa_register 7
 4117 0006 7860     	 str r0,[r7,#4]
 4118 0008 3960     	 str r1,[r7]
2912:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxEventList );
 4119              	 .loc 1 2912 0
 4120 000a 7B68     	 ldr r3,[r7,#4]
 4121 000c 002B     	 cmp r3,#0
 4122 000e 09D1     	 bne .L273
 4123              	.LBB174:
 4124              	.LBB175:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4125              	 .loc 2 195 0 discriminator 1
 4126              	
 4127 0010 4FF0FC03 	 mov r3,#252
 4128 0014 83F31188 	 msr basepri,r3
 4129 0018 BFF36F8F 	 isb 
 4130 001c BFF34F8F 	 dsb 
 4131              	
 4132              	
 4133              	 .thumb
 4134 0020 FB60     	 str r3,[r7,#12]
 4135              	.L274:
 4136              	.LBE175:
 4137              	.LBE174:
 4138              	 .loc 1 2912 0 discriminator 1
 4139 0022 FEE7     	 b .L274
 4140              	.L273:
2913:../Dave/Generated/FREERTOS/tasks.c **** 
2914:../Dave/Generated/FREERTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2915:../Dave/Generated/FREERTOS/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2916:../Dave/Generated/FREERTOS/tasks.c **** 
2917:../Dave/Generated/FREERTOS/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2918:../Dave/Generated/FREERTOS/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2919:../Dave/Generated/FREERTOS/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2920:../Dave/Generated/FREERTOS/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2921:../Dave/Generated/FREERTOS/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4141              	 .loc 1 2921 0
 4142 0024 064B     	 ldr r3,.L275
 4143 0026 1B68     	 ldr r3,[r3]
 4144 0028 1833     	 adds r3,r3,#24
 4145 002a 7868     	 ldr r0,[r7,#4]
 4146 002c 1946     	 mov r1,r3
 4147 002e FFF7FEFF 	 bl vListInsert
2922:../Dave/Generated/FREERTOS/tasks.c **** 
2923:../Dave/Generated/FREERTOS/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4148              	 .loc 1 2923 0
 4149 0032 3868     	 ldr r0,[r7]
 4150 0034 0121     	 movs r1,#1
 4151 0036 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
2924:../Dave/Generated/FREERTOS/tasks.c **** }
 4152              	 .loc 1 2924 0
 4153 003a 1037     	 adds r7,r7,#16
 4154              	.LCFI152:
 4155              	 .cfi_def_cfa_offset 8
 4156 003c BD46     	 mov sp,r7
 4157              	.LCFI153:
 4158              	 .cfi_def_cfa_register 13
 4159              	 
 4160 003e 80BD     	 pop {r7,pc}
 4161              	.L276:
 4162              	 .align 2
 4163              	.L275:
 4164 0040 00000000 	 .word pxCurrentTCB
 4165              	 .cfi_endproc
 4166              	.LFE164:
 4168              	 .section .text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4169              	 .align 2
 4170              	 .global vTaskPlaceOnUnorderedEventList
 4171              	 .thumb
 4172              	 .thumb_func
 4174              	vTaskPlaceOnUnorderedEventList:
 4175              	.LFB165:
2925:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2926:../Dave/Generated/FREERTOS/tasks.c **** 
2927:../Dave/Generated/FREERTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2928:../Dave/Generated/FREERTOS/tasks.c **** {
 4176              	 .loc 1 2928 0
 4177              	 .cfi_startproc
 4178              	 
 4179              	 
 4180 0000 80B5     	 push {r7,lr}
 4181              	.LCFI154:
 4182              	 .cfi_def_cfa_offset 8
 4183              	 .cfi_offset 7,-8
 4184              	 .cfi_offset 14,-4
 4185 0002 86B0     	 sub sp,sp,#24
 4186              	.LCFI155:
 4187              	 .cfi_def_cfa_offset 32
 4188 0004 00AF     	 add r7,sp,#0
 4189              	.LCFI156:
 4190              	 .cfi_def_cfa_register 7
 4191 0006 F860     	 str r0,[r7,#12]
 4192 0008 B960     	 str r1,[r7,#8]
 4193 000a 7A60     	 str r2,[r7,#4]
2929:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxEventList );
 4194              	 .loc 1 2929 0
 4195 000c FB68     	 ldr r3,[r7,#12]
 4196 000e 002B     	 cmp r3,#0
 4197 0010 09D1     	 bne .L278
 4198              	.LBB176:
 4199              	.LBB177:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4200              	 .loc 2 195 0 discriminator 1
 4201              	
 4202 0012 4FF0FC03 	 mov r3,#252
 4203 0016 83F31188 	 msr basepri,r3
 4204 001a BFF36F8F 	 isb 
 4205 001e BFF34F8F 	 dsb 
 4206              	
 4207              	
 4208              	 .thumb
 4209 0022 7B61     	 str r3,[r7,#20]
 4210              	.L279:
 4211              	.LBE177:
 4212              	.LBE176:
 4213              	 .loc 1 2929 0 discriminator 1
 4214 0024 FEE7     	 b .L279
 4215              	.L278:
2930:../Dave/Generated/FREERTOS/tasks.c **** 
2931:../Dave/Generated/FREERTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2932:../Dave/Generated/FREERTOS/tasks.c **** 	the event groups implementation. */
2933:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 4216              	 .loc 1 2933 0
 4217 0026 114B     	 ldr r3,.L282
 4218 0028 1B68     	 ldr r3,[r3]
 4219 002a 002B     	 cmp r3,#0
 4220 002c 09D1     	 bne .L280
 4221              	.LBB178:
 4222              	.LBB179:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4223              	 .loc 2 195 0 discriminator 1
 4224              	
 4225 002e 4FF0FC03 	 mov r3,#252
 4226 0032 83F31188 	 msr basepri,r3
 4227 0036 BFF36F8F 	 isb 
 4228 003a BFF34F8F 	 dsb 
 4229              	
 4230              	
 4231              	 .thumb
 4232 003e 3B61     	 str r3,[r7,#16]
 4233              	.L281:
 4234              	.LBE179:
 4235              	.LBE178:
 4236              	 .loc 1 2933 0 discriminator 2
 4237 0040 FEE7     	 b .L281
 4238              	.L280:
2934:../Dave/Generated/FREERTOS/tasks.c **** 
2935:../Dave/Generated/FREERTOS/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2936:../Dave/Generated/FREERTOS/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2937:../Dave/Generated/FREERTOS/tasks.c **** 	task that is not in the Blocked state. */
2938:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 4239              	 .loc 1 2938 0
 4240 0042 0B4B     	 ldr r3,.L282+4
 4241 0044 1B68     	 ldr r3,[r3]
 4242 0046 BA68     	 ldr r2,[r7,#8]
 4243 0048 42F00042 	 orr r2,r2,#-2147483648
 4244 004c 9A61     	 str r2,[r3,#24]
2939:../Dave/Generated/FREERTOS/tasks.c **** 
2940:../Dave/Generated/FREERTOS/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2941:../Dave/Generated/FREERTOS/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2942:../Dave/Generated/FREERTOS/tasks.c **** 	event group implementation - and interrupts don't access event groups
2943:../Dave/Generated/FREERTOS/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2944:../Dave/Generated/FREERTOS/tasks.c **** 	the task level). */
2945:../Dave/Generated/FREERTOS/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4245              	 .loc 1 2945 0
 4246 004e 084B     	 ldr r3,.L282+4
 4247 0050 1B68     	 ldr r3,[r3]
 4248 0052 1833     	 adds r3,r3,#24
 4249 0054 F868     	 ldr r0,[r7,#12]
 4250 0056 1946     	 mov r1,r3
 4251 0058 FFF7FEFF 	 bl vListInsertEnd
2946:../Dave/Generated/FREERTOS/tasks.c **** 
2947:../Dave/Generated/FREERTOS/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4252              	 .loc 1 2947 0
 4253 005c 7868     	 ldr r0,[r7,#4]
 4254 005e 0121     	 movs r1,#1
 4255 0060 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
2948:../Dave/Generated/FREERTOS/tasks.c **** }
 4256              	 .loc 1 2948 0
 4257 0064 1837     	 adds r7,r7,#24
 4258              	.LCFI157:
 4259              	 .cfi_def_cfa_offset 8
 4260 0066 BD46     	 mov sp,r7
 4261              	.LCFI158:
 4262              	 .cfi_def_cfa_register 13
 4263              	 
 4264 0068 80BD     	 pop {r7,pc}
 4265              	.L283:
 4266 006a 00BF     	 .align 2
 4267              	.L282:
 4268 006c 00000000 	 .word uxSchedulerSuspended
 4269 0070 00000000 	 .word pxCurrentTCB
 4270              	 .cfi_endproc
 4271              	.LFE165:
 4273              	 .section .text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4274              	 .align 2
 4275              	 .global vTaskPlaceOnEventListRestricted
 4276              	 .thumb
 4277              	 .thumb_func
 4279              	vTaskPlaceOnEventListRestricted:
 4280              	.LFB166:
2949:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2950:../Dave/Generated/FREERTOS/tasks.c **** 
2951:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TIMERS == 1 )
2952:../Dave/Generated/FREERTOS/tasks.c **** 
2953:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2954:../Dave/Generated/FREERTOS/tasks.c **** 	{
 4281              	 .loc 1 2954 0
 4282              	 .cfi_startproc
 4283              	 
 4284              	 
 4285 0000 80B5     	 push {r7,lr}
 4286              	.LCFI159:
 4287              	 .cfi_def_cfa_offset 8
 4288              	 .cfi_offset 7,-8
 4289              	 .cfi_offset 14,-4
 4290 0002 86B0     	 sub sp,sp,#24
 4291              	.LCFI160:
 4292              	 .cfi_def_cfa_offset 32
 4293 0004 00AF     	 add r7,sp,#0
 4294              	.LCFI161:
 4295              	 .cfi_def_cfa_register 7
 4296 0006 F860     	 str r0,[r7,#12]
 4297 0008 B960     	 str r1,[r7,#8]
 4298 000a 7A60     	 str r2,[r7,#4]
2955:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxEventList );
 4299              	 .loc 1 2955 0
 4300 000c FB68     	 ldr r3,[r7,#12]
 4301 000e 002B     	 cmp r3,#0
 4302 0010 09D1     	 bne .L285
 4303              	.LBB180:
 4304              	.LBB181:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4305              	 .loc 2 195 0 discriminator 1
 4306              	
 4307 0012 4FF0FC03 	 mov r3,#252
 4308 0016 83F31188 	 msr basepri,r3
 4309 001a BFF36F8F 	 isb 
 4310 001e BFF34F8F 	 dsb 
 4311              	
 4312              	
 4313              	 .thumb
 4314 0022 7B61     	 str r3,[r7,#20]
 4315              	.L286:
 4316              	.LBE181:
 4317              	.LBE180:
 4318              	 .loc 1 2955 0 discriminator 1
 4319 0024 FEE7     	 b .L286
 4320              	.L285:
2956:../Dave/Generated/FREERTOS/tasks.c **** 
2957:../Dave/Generated/FREERTOS/tasks.c **** 		/* This function should not be called by application code hence the
2958:../Dave/Generated/FREERTOS/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2959:../Dave/Generated/FREERTOS/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2960:../Dave/Generated/FREERTOS/tasks.c **** 		it should be called with the scheduler suspended. */
2961:../Dave/Generated/FREERTOS/tasks.c **** 
2962:../Dave/Generated/FREERTOS/tasks.c **** 
2963:../Dave/Generated/FREERTOS/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2964:../Dave/Generated/FREERTOS/tasks.c **** 		In this case it is assume that this is the only task that is going to
2965:../Dave/Generated/FREERTOS/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2966:../Dave/Generated/FREERTOS/tasks.c **** 		can be used in place of vListInsert. */
2967:../Dave/Generated/FREERTOS/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4321              	 .loc 1 2967 0
 4322 0026 0A4B     	 ldr r3,.L288
 4323 0028 1B68     	 ldr r3,[r3]
 4324 002a 1833     	 adds r3,r3,#24
 4325 002c F868     	 ldr r0,[r7,#12]
 4326 002e 1946     	 mov r1,r3
 4327 0030 FFF7FEFF 	 bl vListInsertEnd
2968:../Dave/Generated/FREERTOS/tasks.c **** 
2969:../Dave/Generated/FREERTOS/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2970:../Dave/Generated/FREERTOS/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2971:../Dave/Generated/FREERTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2972:../Dave/Generated/FREERTOS/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
 4328              	 .loc 1 2972 0
 4329 0034 7B68     	 ldr r3,[r7,#4]
 4330 0036 002B     	 cmp r3,#0
 4331 0038 02D0     	 beq .L287
2973:../Dave/Generated/FREERTOS/tasks.c **** 		{
2974:../Dave/Generated/FREERTOS/tasks.c **** 			xTicksToWait = portMAX_DELAY;
 4332              	 .loc 1 2974 0
 4333 003a 4FF0FF33 	 mov r3,#-1
 4334 003e BB60     	 str r3,[r7,#8]
 4335              	.L287:
2975:../Dave/Generated/FREERTOS/tasks.c **** 		}
2976:../Dave/Generated/FREERTOS/tasks.c **** 
2977:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2978:../Dave/Generated/FREERTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4336              	 .loc 1 2978 0
 4337 0040 B868     	 ldr r0,[r7,#8]
 4338 0042 7968     	 ldr r1,[r7,#4]
 4339 0044 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
2979:../Dave/Generated/FREERTOS/tasks.c **** 	}
 4340              	 .loc 1 2979 0
 4341 0048 1837     	 adds r7,r7,#24
 4342              	.LCFI162:
 4343              	 .cfi_def_cfa_offset 8
 4344 004a BD46     	 mov sp,r7
 4345              	.LCFI163:
 4346              	 .cfi_def_cfa_register 13
 4347              	 
 4348 004c 80BD     	 pop {r7,pc}
 4349              	.L289:
 4350 004e 00BF     	 .align 2
 4351              	.L288:
 4352 0050 00000000 	 .word pxCurrentTCB
 4353              	 .cfi_endproc
 4354              	.LFE166:
 4356              	 .section .text.xTaskRemoveFromEventList,"ax",%progbits
 4357              	 .align 2
 4358              	 .global xTaskRemoveFromEventList
 4359              	 .thumb
 4360              	 .thumb_func
 4362              	xTaskRemoveFromEventList:
 4363              	.LFB167:
2980:../Dave/Generated/FREERTOS/tasks.c **** 
2981:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TIMERS */
2982:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2983:../Dave/Generated/FREERTOS/tasks.c **** 
2984:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2985:../Dave/Generated/FREERTOS/tasks.c **** {
 4364              	 .loc 1 2985 0
 4365              	 .cfi_startproc
 4366              	 
 4367              	 
 4368 0000 80B5     	 push {r7,lr}
 4369              	.LCFI164:
 4370              	 .cfi_def_cfa_offset 8
 4371              	 .cfi_offset 7,-8
 4372              	 .cfi_offset 14,-4
 4373 0002 86B0     	 sub sp,sp,#24
 4374              	.LCFI165:
 4375              	 .cfi_def_cfa_offset 32
 4376 0004 00AF     	 add r7,sp,#0
 4377              	.LCFI166:
 4378              	 .cfi_def_cfa_register 7
 4379 0006 7860     	 str r0,[r7,#4]
2986:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2987:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xReturn;
2988:../Dave/Generated/FREERTOS/tasks.c **** 
2989:../Dave/Generated/FREERTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2990:../Dave/Generated/FREERTOS/tasks.c **** 	called from a critical section within an ISR. */
2991:../Dave/Generated/FREERTOS/tasks.c **** 
2992:../Dave/Generated/FREERTOS/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2993:../Dave/Generated/FREERTOS/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2994:../Dave/Generated/FREERTOS/tasks.c **** 	the delayed list, and add it to the ready list.
2995:../Dave/Generated/FREERTOS/tasks.c **** 
2996:../Dave/Generated/FREERTOS/tasks.c **** 	If an event is for a queue that is locked then this function will never
2997:../Dave/Generated/FREERTOS/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2998:../Dave/Generated/FREERTOS/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2999:../Dave/Generated/FREERTOS/tasks.c **** 
3000:../Dave/Generated/FREERTOS/tasks.c **** 	This function assumes that a check has already been made to ensure that
3001:../Dave/Generated/FREERTOS/tasks.c **** 	pxEventList is not empty. */
3002:../Dave/Generated/FREERTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 4380              	 .loc 1 3002 0
 4381 0008 7B68     	 ldr r3,[r7,#4]
 4382 000a DB68     	 ldr r3,[r3,#12]
 4383 000c DB68     	 ldr r3,[r3,#12]
 4384 000e 3B61     	 str r3,[r7,#16]
3003:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4385              	 .loc 1 3003 0
 4386 0010 3B69     	 ldr r3,[r7,#16]
 4387 0012 002B     	 cmp r3,#0
 4388 0014 09D1     	 bne .L291
 4389              	.LBB182:
 4390              	.LBB183:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4391              	 .loc 2 195 0 discriminator 1
 4392              	
 4393 0016 4FF0FC03 	 mov r3,#252
 4394 001a 83F31188 	 msr basepri,r3
 4395 001e BFF36F8F 	 isb 
 4396 0022 BFF34F8F 	 dsb 
 4397              	
 4398              	
 4399              	 .thumb
 4400 0026 FB60     	 str r3,[r7,#12]
 4401              	.L292:
 4402              	.LBE183:
 4403              	.LBE182:
 4404              	 .loc 1 3003 0 discriminator 1
 4405 0028 FEE7     	 b .L292
 4406              	.L291:
3004:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4407              	 .loc 1 3004 0
 4408 002a 3B69     	 ldr r3,[r7,#16]
 4409 002c 1833     	 adds r3,r3,#24
 4410 002e 1846     	 mov r0,r3
 4411 0030 FFF7FEFF 	 bl uxListRemove
3005:../Dave/Generated/FREERTOS/tasks.c **** 
3006:../Dave/Generated/FREERTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4412              	 .loc 1 3006 0
 4413 0034 1E4B     	 ldr r3,.L298
 4414 0036 1B68     	 ldr r3,[r3]
 4415 0038 002B     	 cmp r3,#0
 4416 003a 1ED1     	 bne .L293
3007:../Dave/Generated/FREERTOS/tasks.c **** 	{
3008:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4417              	 .loc 1 3008 0
 4418 003c 3B69     	 ldr r3,[r7,#16]
 4419 003e 0433     	 adds r3,r3,#4
 4420 0040 1846     	 mov r0,r3
 4421 0042 FFF7FEFF 	 bl uxListRemove
3009:../Dave/Generated/FREERTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 4422              	 .loc 1 3009 0
 4423 0046 3B69     	 ldr r3,[r7,#16]
 4424 0048 DB6A     	 ldr r3,[r3,#44]
 4425 004a 1A46     	 mov r2,r3
 4426 004c 0123     	 movs r3,#1
 4427 004e 03FA02F2 	 lsl r2,r3,r2
 4428 0052 184B     	 ldr r3,.L298+4
 4429 0054 1B68     	 ldr r3,[r3]
 4430 0056 1343     	 orrs r3,r3,r2
 4431 0058 164A     	 ldr r2,.L298+4
 4432 005a 1360     	 str r3,[r2]
 4433 005c 3B69     	 ldr r3,[r7,#16]
 4434 005e DA6A     	 ldr r2,[r3,#44]
 4435 0060 1346     	 mov r3,r2
 4436 0062 9B00     	 lsls r3,r3,#2
 4437 0064 1344     	 add r3,r3,r2
 4438 0066 9B00     	 lsls r3,r3,#2
 4439 0068 134A     	 ldr r2,.L298+8
 4440 006a 1A44     	 add r2,r2,r3
 4441 006c 3B69     	 ldr r3,[r7,#16]
 4442 006e 0433     	 adds r3,r3,#4
 4443 0070 1046     	 mov r0,r2
 4444 0072 1946     	 mov r1,r3
 4445 0074 FFF7FEFF 	 bl vListInsertEnd
 4446 0078 05E0     	 b .L294
 4447              	.L293:
3010:../Dave/Generated/FREERTOS/tasks.c **** 	}
3011:../Dave/Generated/FREERTOS/tasks.c **** 	else
3012:../Dave/Generated/FREERTOS/tasks.c **** 	{
3013:../Dave/Generated/FREERTOS/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3014:../Dave/Generated/FREERTOS/tasks.c **** 		pending until the scheduler is resumed. */
3015:../Dave/Generated/FREERTOS/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 4448              	 .loc 1 3015 0
 4449 007a 3B69     	 ldr r3,[r7,#16]
 4450 007c 1833     	 adds r3,r3,#24
 4451 007e 0F48     	 ldr r0,.L298+12
 4452 0080 1946     	 mov r1,r3
 4453 0082 FFF7FEFF 	 bl vListInsertEnd
 4454              	.L294:
3016:../Dave/Generated/FREERTOS/tasks.c **** 	}
3017:../Dave/Generated/FREERTOS/tasks.c **** 
3018:../Dave/Generated/FREERTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4455              	 .loc 1 3018 0
 4456 0086 3B69     	 ldr r3,[r7,#16]
 4457 0088 DA6A     	 ldr r2,[r3,#44]
 4458 008a 0D4B     	 ldr r3,.L298+16
 4459 008c 1B68     	 ldr r3,[r3]
 4460 008e DB6A     	 ldr r3,[r3,#44]
 4461 0090 9A42     	 cmp r2,r3
 4462 0092 05D9     	 bls .L295
3019:../Dave/Generated/FREERTOS/tasks.c **** 	{
3020:../Dave/Generated/FREERTOS/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3021:../Dave/Generated/FREERTOS/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3022:../Dave/Generated/FREERTOS/tasks.c **** 		it should force a context switch now. */
3023:../Dave/Generated/FREERTOS/tasks.c **** 		xReturn = pdTRUE;
 4463              	 .loc 1 3023 0
 4464 0094 0123     	 movs r3,#1
 4465 0096 7B61     	 str r3,[r7,#20]
3024:../Dave/Generated/FREERTOS/tasks.c **** 
3025:../Dave/Generated/FREERTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3026:../Dave/Generated/FREERTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3027:../Dave/Generated/FREERTOS/tasks.c **** 		xYieldPending = pdTRUE;
 4466              	 .loc 1 3027 0
 4467 0098 0A4B     	 ldr r3,.L298+20
 4468 009a 0122     	 movs r2,#1
 4469 009c 1A60     	 str r2,[r3]
 4470 009e 01E0     	 b .L296
 4471              	.L295:
3028:../Dave/Generated/FREERTOS/tasks.c **** 	}
3029:../Dave/Generated/FREERTOS/tasks.c **** 	else
3030:../Dave/Generated/FREERTOS/tasks.c **** 	{
3031:../Dave/Generated/FREERTOS/tasks.c **** 		xReturn = pdFALSE;
 4472              	 .loc 1 3031 0
 4473 00a0 0023     	 movs r3,#0
 4474 00a2 7B61     	 str r3,[r7,#20]
 4475              	.L296:
3032:../Dave/Generated/FREERTOS/tasks.c **** 	}
3033:../Dave/Generated/FREERTOS/tasks.c **** 
3034:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3035:../Dave/Generated/FREERTOS/tasks.c **** 	{
3036:../Dave/Generated/FREERTOS/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3037:../Dave/Generated/FREERTOS/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3038:../Dave/Generated/FREERTOS/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3039:../Dave/Generated/FREERTOS/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3040:../Dave/Generated/FREERTOS/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3041:../Dave/Generated/FREERTOS/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3042:../Dave/Generated/FREERTOS/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3043:../Dave/Generated/FREERTOS/tasks.c **** 		ensure it is updated at the earliest possible time. */
3044:../Dave/Generated/FREERTOS/tasks.c **** 		prvResetNextTaskUnblockTime();
3045:../Dave/Generated/FREERTOS/tasks.c **** 	}
3046:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
3047:../Dave/Generated/FREERTOS/tasks.c **** 
3048:../Dave/Generated/FREERTOS/tasks.c **** 	return xReturn;
 4476              	 .loc 1 3048 0
 4477 00a4 7B69     	 ldr r3,[r7,#20]
3049:../Dave/Generated/FREERTOS/tasks.c **** }
 4478              	 .loc 1 3049 0
 4479 00a6 1846     	 mov r0,r3
 4480 00a8 1837     	 adds r7,r7,#24
 4481              	.LCFI167:
 4482              	 .cfi_def_cfa_offset 8
 4483 00aa BD46     	 mov sp,r7
 4484              	.LCFI168:
 4485              	 .cfi_def_cfa_register 13
 4486              	 
 4487 00ac 80BD     	 pop {r7,pc}
 4488              	.L299:
 4489 00ae 00BF     	 .align 2
 4490              	.L298:
 4491 00b0 00000000 	 .word uxSchedulerSuspended
 4492 00b4 00000000 	 .word uxTopReadyPriority
 4493 00b8 00000000 	 .word pxReadyTasksLists
 4494 00bc 00000000 	 .word xPendingReadyList
 4495 00c0 00000000 	 .word pxCurrentTCB
 4496 00c4 00000000 	 .word xYieldPending
 4497              	 .cfi_endproc
 4498              	.LFE167:
 4500              	 .section .text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4501              	 .align 2
 4502              	 .global vTaskRemoveFromUnorderedEventList
 4503              	 .thumb
 4504              	 .thumb_func
 4506              	vTaskRemoveFromUnorderedEventList:
 4507              	.LFB168:
3050:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3051:../Dave/Generated/FREERTOS/tasks.c **** 
3052:../Dave/Generated/FREERTOS/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3053:../Dave/Generated/FREERTOS/tasks.c **** {
 4508              	 .loc 1 3053 0
 4509              	 .cfi_startproc
 4510              	 
 4511              	 
 4512 0000 80B5     	 push {r7,lr}
 4513              	.LCFI169:
 4514              	 .cfi_def_cfa_offset 8
 4515              	 .cfi_offset 7,-8
 4516              	 .cfi_offset 14,-4
 4517 0002 86B0     	 sub sp,sp,#24
 4518              	.LCFI170:
 4519              	 .cfi_def_cfa_offset 32
 4520 0004 00AF     	 add r7,sp,#0
 4521              	.LCFI171:
 4522              	 .cfi_def_cfa_register 7
 4523 0006 7860     	 str r0,[r7,#4]
 4524 0008 3960     	 str r1,[r7]
3054:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxUnblockedTCB;
3055:../Dave/Generated/FREERTOS/tasks.c **** 
3056:../Dave/Generated/FREERTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3057:../Dave/Generated/FREERTOS/tasks.c **** 	the event flags implementation. */
3058:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 4525              	 .loc 1 3058 0
 4526 000a 284B     	 ldr r3,.L306
 4527 000c 1B68     	 ldr r3,[r3]
 4528 000e 002B     	 cmp r3,#0
 4529 0010 09D1     	 bne .L301
 4530              	.LBB184:
 4531              	.LBB185:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4532              	 .loc 2 195 0 discriminator 1
 4533              	
 4534 0012 4FF0FC03 	 mov r3,#252
 4535 0016 83F31188 	 msr basepri,r3
 4536 001a BFF36F8F 	 isb 
 4537 001e BFF34F8F 	 dsb 
 4538              	
 4539              	
 4540              	 .thumb
 4541 0022 3B61     	 str r3,[r7,#16]
 4542              	.L302:
 4543              	.LBE185:
 4544              	.LBE184:
 4545              	 .loc 1 3058 0 discriminator 1
 4546 0024 FEE7     	 b .L302
 4547              	.L301:
3059:../Dave/Generated/FREERTOS/tasks.c **** 
3060:../Dave/Generated/FREERTOS/tasks.c **** 	/* Store the new item value in the event list. */
3061:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 4548              	 .loc 1 3061 0
 4549 0026 3B68     	 ldr r3,[r7]
 4550 0028 43F00042 	 orr r2,r3,#-2147483648
 4551 002c 7B68     	 ldr r3,[r7,#4]
 4552 002e 1A60     	 str r2,[r3]
3062:../Dave/Generated/FREERTOS/tasks.c **** 
3063:../Dave/Generated/FREERTOS/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3064:../Dave/Generated/FREERTOS/tasks.c **** 	event flags. */
3065:../Dave/Generated/FREERTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 4553              	 .loc 1 3065 0
 4554 0030 7B68     	 ldr r3,[r7,#4]
 4555 0032 DB68     	 ldr r3,[r3,#12]
 4556 0034 7B61     	 str r3,[r7,#20]
3066:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4557              	 .loc 1 3066 0
 4558 0036 7B69     	 ldr r3,[r7,#20]
 4559 0038 002B     	 cmp r3,#0
 4560 003a 09D1     	 bne .L303
 4561              	.LBB186:
 4562              	.LBB187:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4563              	 .loc 2 195 0 discriminator 1
 4564              	
 4565 003c 4FF0FC03 	 mov r3,#252
 4566 0040 83F31188 	 msr basepri,r3
 4567 0044 BFF36F8F 	 isb 
 4568 0048 BFF34F8F 	 dsb 
 4569              	
 4570              	
 4571              	 .thumb
 4572 004c FB60     	 str r3,[r7,#12]
 4573              	.L304:
 4574              	.LBE187:
 4575              	.LBE186:
 4576              	 .loc 1 3066 0 discriminator 2
 4577 004e FEE7     	 b .L304
 4578              	.L303:
3067:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4579              	 .loc 1 3067 0
 4580 0050 7868     	 ldr r0,[r7,#4]
 4581 0052 FFF7FEFF 	 bl uxListRemove
3068:../Dave/Generated/FREERTOS/tasks.c **** 
3069:../Dave/Generated/FREERTOS/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3070:../Dave/Generated/FREERTOS/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3071:../Dave/Generated/FREERTOS/tasks.c **** 	lists. */
3072:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4582              	 .loc 1 3072 0
 4583 0056 7B69     	 ldr r3,[r7,#20]
 4584 0058 0433     	 adds r3,r3,#4
 4585 005a 1846     	 mov r0,r3
 4586 005c FFF7FEFF 	 bl uxListRemove
3073:../Dave/Generated/FREERTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 4587              	 .loc 1 3073 0
 4588 0060 7B69     	 ldr r3,[r7,#20]
 4589 0062 DB6A     	 ldr r3,[r3,#44]
 4590 0064 1A46     	 mov r2,r3
 4591 0066 0123     	 movs r3,#1
 4592 0068 03FA02F2 	 lsl r2,r3,r2
 4593 006c 104B     	 ldr r3,.L306+4
 4594 006e 1B68     	 ldr r3,[r3]
 4595 0070 1343     	 orrs r3,r3,r2
 4596 0072 0F4A     	 ldr r2,.L306+4
 4597 0074 1360     	 str r3,[r2]
 4598 0076 7B69     	 ldr r3,[r7,#20]
 4599 0078 DA6A     	 ldr r2,[r3,#44]
 4600 007a 1346     	 mov r3,r2
 4601 007c 9B00     	 lsls r3,r3,#2
 4602 007e 1344     	 add r3,r3,r2
 4603 0080 9B00     	 lsls r3,r3,#2
 4604 0082 0C4A     	 ldr r2,.L306+8
 4605 0084 1A44     	 add r2,r2,r3
 4606 0086 7B69     	 ldr r3,[r7,#20]
 4607 0088 0433     	 adds r3,r3,#4
 4608 008a 1046     	 mov r0,r2
 4609 008c 1946     	 mov r1,r3
 4610 008e FFF7FEFF 	 bl vListInsertEnd
3074:../Dave/Generated/FREERTOS/tasks.c **** 
3075:../Dave/Generated/FREERTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4611              	 .loc 1 3075 0
 4612 0092 7B69     	 ldr r3,[r7,#20]
 4613 0094 DA6A     	 ldr r2,[r3,#44]
 4614 0096 084B     	 ldr r3,.L306+12
 4615 0098 1B68     	 ldr r3,[r3]
 4616 009a DB6A     	 ldr r3,[r3,#44]
 4617 009c 9A42     	 cmp r2,r3
 4618 009e 02D9     	 bls .L300
3076:../Dave/Generated/FREERTOS/tasks.c **** 	{
3077:../Dave/Generated/FREERTOS/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3078:../Dave/Generated/FREERTOS/tasks.c **** 		a context switch is required.  This function is called with the
3079:../Dave/Generated/FREERTOS/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3080:../Dave/Generated/FREERTOS/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3081:../Dave/Generated/FREERTOS/tasks.c **** 		xYieldPending = pdTRUE;
 4619              	 .loc 1 3081 0
 4620 00a0 064B     	 ldr r3,.L306+16
 4621 00a2 0122     	 movs r2,#1
 4622 00a4 1A60     	 str r2,[r3]
 4623              	.L300:
3082:../Dave/Generated/FREERTOS/tasks.c **** 	}
3083:../Dave/Generated/FREERTOS/tasks.c **** }
 4624              	 .loc 1 3083 0
 4625 00a6 1837     	 adds r7,r7,#24
 4626              	.LCFI172:
 4627              	 .cfi_def_cfa_offset 8
 4628 00a8 BD46     	 mov sp,r7
 4629              	.LCFI173:
 4630              	 .cfi_def_cfa_register 13
 4631              	 
 4632 00aa 80BD     	 pop {r7,pc}
 4633              	.L307:
 4634              	 .align 2
 4635              	.L306:
 4636 00ac 00000000 	 .word uxSchedulerSuspended
 4637 00b0 00000000 	 .word uxTopReadyPriority
 4638 00b4 00000000 	 .word pxReadyTasksLists
 4639 00b8 00000000 	 .word pxCurrentTCB
 4640 00bc 00000000 	 .word xYieldPending
 4641              	 .cfi_endproc
 4642              	.LFE168:
 4644              	 .section .text.vTaskSetTimeOutState,"ax",%progbits
 4645              	 .align 2
 4646              	 .global vTaskSetTimeOutState
 4647              	 .thumb
 4648              	 .thumb_func
 4650              	vTaskSetTimeOutState:
 4651              	.LFB169:
3084:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3085:../Dave/Generated/FREERTOS/tasks.c **** 
3086:../Dave/Generated/FREERTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3087:../Dave/Generated/FREERTOS/tasks.c **** {
 4652              	 .loc 1 3087 0
 4653              	 .cfi_startproc
 4654              	 
 4655              	 
 4656 0000 80B5     	 push {r7,lr}
 4657              	.LCFI174:
 4658              	 .cfi_def_cfa_offset 8
 4659              	 .cfi_offset 7,-8
 4660              	 .cfi_offset 14,-4
 4661 0002 84B0     	 sub sp,sp,#16
 4662              	.LCFI175:
 4663              	 .cfi_def_cfa_offset 24
 4664 0004 00AF     	 add r7,sp,#0
 4665              	.LCFI176:
 4666              	 .cfi_def_cfa_register 7
 4667 0006 7860     	 str r0,[r7,#4]
3088:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxTimeOut );
 4668              	 .loc 1 3088 0
 4669 0008 7B68     	 ldr r3,[r7,#4]
 4670 000a 002B     	 cmp r3,#0
 4671 000c 09D1     	 bne .L309
 4672              	.LBB188:
 4673              	.LBB189:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4674              	 .loc 2 195 0 discriminator 1
 4675              	
 4676 000e 4FF0FC03 	 mov r3,#252
 4677 0012 83F31188 	 msr basepri,r3
 4678 0016 BFF36F8F 	 isb 
 4679 001a BFF34F8F 	 dsb 
 4680              	
 4681              	
 4682              	 .thumb
 4683 001e FB60     	 str r3,[r7,#12]
 4684              	.L310:
 4685              	.LBE189:
 4686              	.LBE188:
 4687              	 .loc 1 3088 0 discriminator 1
 4688 0020 FEE7     	 b .L310
 4689              	.L309:
3089:../Dave/Generated/FREERTOS/tasks.c **** 	taskENTER_CRITICAL();
 4690              	 .loc 1 3089 0
 4691 0022 FFF7FEFF 	 bl vPortEnterCritical
3090:../Dave/Generated/FREERTOS/tasks.c **** 	{
3091:../Dave/Generated/FREERTOS/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 4692              	 .loc 1 3091 0
 4693 0026 064B     	 ldr r3,.L311
 4694 0028 1A68     	 ldr r2,[r3]
 4695 002a 7B68     	 ldr r3,[r7,#4]
 4696 002c 1A60     	 str r2,[r3]
3092:../Dave/Generated/FREERTOS/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 4697              	 .loc 1 3092 0
 4698 002e 054B     	 ldr r3,.L311+4
 4699 0030 1A68     	 ldr r2,[r3]
 4700 0032 7B68     	 ldr r3,[r7,#4]
 4701 0034 5A60     	 str r2,[r3,#4]
3093:../Dave/Generated/FREERTOS/tasks.c **** 	}
3094:../Dave/Generated/FREERTOS/tasks.c **** 	taskEXIT_CRITICAL();
 4702              	 .loc 1 3094 0
 4703 0036 FFF7FEFF 	 bl vPortExitCritical
3095:../Dave/Generated/FREERTOS/tasks.c **** }
 4704              	 .loc 1 3095 0
 4705 003a 1037     	 adds r7,r7,#16
 4706              	.LCFI177:
 4707              	 .cfi_def_cfa_offset 8
 4708 003c BD46     	 mov sp,r7
 4709              	.LCFI178:
 4710              	 .cfi_def_cfa_register 13
 4711              	 
 4712 003e 80BD     	 pop {r7,pc}
 4713              	.L312:
 4714              	 .align 2
 4715              	.L311:
 4716 0040 00000000 	 .word xNumOfOverflows
 4717 0044 00000000 	 .word xTickCount
 4718              	 .cfi_endproc
 4719              	.LFE169:
 4721              	 .section .text.vTaskInternalSetTimeOutState,"ax",%progbits
 4722              	 .align 2
 4723              	 .global vTaskInternalSetTimeOutState
 4724              	 .thumb
 4725              	 .thumb_func
 4727              	vTaskInternalSetTimeOutState:
 4728              	.LFB170:
3096:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3097:../Dave/Generated/FREERTOS/tasks.c **** 
3098:../Dave/Generated/FREERTOS/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3099:../Dave/Generated/FREERTOS/tasks.c **** {
 4729              	 .loc 1 3099 0
 4730              	 .cfi_startproc
 4731              	 
 4732              	 
 4733              	 
 4734 0000 80B4     	 push {r7}
 4735              	.LCFI179:
 4736              	 .cfi_def_cfa_offset 4
 4737              	 .cfi_offset 7,-4
 4738 0002 83B0     	 sub sp,sp,#12
 4739              	.LCFI180:
 4740              	 .cfi_def_cfa_offset 16
 4741 0004 00AF     	 add r7,sp,#0
 4742              	.LCFI181:
 4743              	 .cfi_def_cfa_register 7
 4744 0006 7860     	 str r0,[r7,#4]
3100:../Dave/Generated/FREERTOS/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3101:../Dave/Generated/FREERTOS/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 4745              	 .loc 1 3101 0
 4746 0008 064B     	 ldr r3,.L314
 4747 000a 1A68     	 ldr r2,[r3]
 4748 000c 7B68     	 ldr r3,[r7,#4]
 4749 000e 1A60     	 str r2,[r3]
3102:../Dave/Generated/FREERTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4750              	 .loc 1 3102 0
 4751 0010 054B     	 ldr r3,.L314+4
 4752 0012 1A68     	 ldr r2,[r3]
 4753 0014 7B68     	 ldr r3,[r7,#4]
 4754 0016 5A60     	 str r2,[r3,#4]
3103:../Dave/Generated/FREERTOS/tasks.c **** }
 4755              	 .loc 1 3103 0
 4756 0018 0C37     	 adds r7,r7,#12
 4757              	.LCFI182:
 4758              	 .cfi_def_cfa_offset 4
 4759 001a BD46     	 mov sp,r7
 4760              	.LCFI183:
 4761              	 .cfi_def_cfa_register 13
 4762              	 
 4763 001c 5DF8047B 	 ldr r7,[sp],#4
 4764              	.LCFI184:
 4765              	 .cfi_restore 7
 4766              	 .cfi_def_cfa_offset 0
 4767 0020 7047     	 bx lr
 4768              	.L315:
 4769 0022 00BF     	 .align 2
 4770              	.L314:
 4771 0024 00000000 	 .word xNumOfOverflows
 4772 0028 00000000 	 .word xTickCount
 4773              	 .cfi_endproc
 4774              	.LFE170:
 4776              	 .section .text.xTaskCheckForTimeOut,"ax",%progbits
 4777              	 .align 2
 4778              	 .global xTaskCheckForTimeOut
 4779              	 .thumb
 4780              	 .thumb_func
 4782              	xTaskCheckForTimeOut:
 4783              	.LFB171:
3104:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3105:../Dave/Generated/FREERTOS/tasks.c **** 
3106:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3107:../Dave/Generated/FREERTOS/tasks.c **** {
 4784              	 .loc 1 3107 0
 4785              	 .cfi_startproc
 4786              	 
 4787              	 
 4788 0000 80B5     	 push {r7,lr}
 4789              	.LCFI185:
 4790              	 .cfi_def_cfa_offset 8
 4791              	 .cfi_offset 7,-8
 4792              	 .cfi_offset 14,-4
 4793 0002 88B0     	 sub sp,sp,#32
 4794              	.LCFI186:
 4795              	 .cfi_def_cfa_offset 40
 4796 0004 00AF     	 add r7,sp,#0
 4797              	.LCFI187:
 4798              	 .cfi_def_cfa_register 7
 4799 0006 7860     	 str r0,[r7,#4]
 4800 0008 3960     	 str r1,[r7]
3108:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xReturn;
3109:../Dave/Generated/FREERTOS/tasks.c **** 
3110:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxTimeOut );
 4801              	 .loc 1 3110 0
 4802 000a 7B68     	 ldr r3,[r7,#4]
 4803 000c 002B     	 cmp r3,#0
 4804 000e 09D1     	 bne .L317
 4805              	.LBB190:
 4806              	.LBB191:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4807              	 .loc 2 195 0 discriminator 1
 4808              	
 4809 0010 4FF0FC03 	 mov r3,#252
 4810 0014 83F31188 	 msr basepri,r3
 4811 0018 BFF36F8F 	 isb 
 4812 001c BFF34F8F 	 dsb 
 4813              	
 4814              	
 4815              	 .thumb
 4816 0020 3B61     	 str r3,[r7,#16]
 4817              	.L318:
 4818              	.LBE191:
 4819              	.LBE190:
 4820              	 .loc 1 3110 0 discriminator 1
 4821 0022 FEE7     	 b .L318
 4822              	.L317:
3111:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxTicksToWait );
 4823              	 .loc 1 3111 0
 4824 0024 3B68     	 ldr r3,[r7]
 4825 0026 002B     	 cmp r3,#0
 4826 0028 09D1     	 bne .L319
 4827              	.LBB192:
 4828              	.LBB193:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4829              	 .loc 2 195 0 discriminator 1
 4830              	
 4831 002a 4FF0FC03 	 mov r3,#252
 4832 002e 83F31188 	 msr basepri,r3
 4833 0032 BFF36F8F 	 isb 
 4834 0036 BFF34F8F 	 dsb 
 4835              	
 4836              	
 4837              	 .thumb
 4838 003a FB60     	 str r3,[r7,#12]
 4839              	.L320:
 4840              	.LBE193:
 4841              	.LBE192:
 4842              	 .loc 1 3111 0 discriminator 2
 4843 003c FEE7     	 b .L320
 4844              	.L319:
3112:../Dave/Generated/FREERTOS/tasks.c **** 
3113:../Dave/Generated/FREERTOS/tasks.c **** 	taskENTER_CRITICAL();
 4845              	 .loc 1 3113 0
 4846 003e FFF7FEFF 	 bl vPortEnterCritical
 4847              	.LBB194:
3114:../Dave/Generated/FREERTOS/tasks.c **** 	{
3115:../Dave/Generated/FREERTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3116:../Dave/Generated/FREERTOS/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 4848              	 .loc 1 3116 0
 4849 0042 244B     	 ldr r3,.L327
 4850 0044 1B68     	 ldr r3,[r3]
 4851 0046 BB61     	 str r3,[r7,#24]
3117:../Dave/Generated/FREERTOS/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4852              	 .loc 1 3117 0
 4853 0048 7B68     	 ldr r3,[r7,#4]
 4854 004a 5B68     	 ldr r3,[r3,#4]
 4855 004c BA69     	 ldr r2,[r7,#24]
 4856 004e D31A     	 subs r3,r2,r3
 4857 0050 7B61     	 str r3,[r7,#20]
3118:../Dave/Generated/FREERTOS/tasks.c **** 
3119:../Dave/Generated/FREERTOS/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3120:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
 4858              	 .loc 1 3120 0
 4859 0052 214B     	 ldr r3,.L327+4
 4860 0054 1B68     	 ldr r3,[r3]
 4861 0056 93F86D30 	 ldrb r3,[r3,#109]
 4862 005a 002B     	 cmp r3,#0
 4863 005c 07D0     	 beq .L321
3121:../Dave/Generated/FREERTOS/tasks.c **** 			{
3122:../Dave/Generated/FREERTOS/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3123:../Dave/Generated/FREERTOS/tasks.c **** 				but has the same result. */
3124:../Dave/Generated/FREERTOS/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
 4864              	 .loc 1 3124 0
 4865 005e 1E4B     	 ldr r3,.L327+4
 4866 0060 1B68     	 ldr r3,[r3]
 4867 0062 0022     	 movs r2,#0
 4868 0064 83F86D20 	 strb r2,[r3,#109]
3125:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdTRUE;
 4869              	 .loc 1 3125 0
 4870 0068 0123     	 movs r3,#1
 4871 006a FB61     	 str r3,[r7,#28]
 4872 006c 2BE0     	 b .L322
 4873              	.L321:
3126:../Dave/Generated/FREERTOS/tasks.c **** 			}
3127:../Dave/Generated/FREERTOS/tasks.c **** 			else
3128:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
3129:../Dave/Generated/FREERTOS/tasks.c **** 
3130:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3131:../Dave/Generated/FREERTOS/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 4874              	 .loc 1 3131 0
 4875 006e 3B68     	 ldr r3,[r7]
 4876 0070 1B68     	 ldr r3,[r3]
 4877 0072 B3F1FF3F 	 cmp r3,#-1
 4878 0076 02D1     	 bne .L323
3132:../Dave/Generated/FREERTOS/tasks.c **** 			{
3133:../Dave/Generated/FREERTOS/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3134:../Dave/Generated/FREERTOS/tasks.c **** 				specified is the maximum block time then the task should block
3135:../Dave/Generated/FREERTOS/tasks.c **** 				indefinitely, and therefore never time out. */
3136:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdFALSE;
 4879              	 .loc 1 3136 0
 4880 0078 0023     	 movs r3,#0
 4881 007a FB61     	 str r3,[r7,#28]
 4882 007c 23E0     	 b .L322
 4883              	.L323:
3137:../Dave/Generated/FREERTOS/tasks.c **** 			}
3138:../Dave/Generated/FREERTOS/tasks.c **** 			else
3139:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
3140:../Dave/Generated/FREERTOS/tasks.c **** 
3141:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 4884              	 .loc 1 3141 0
 4885 007e 7B68     	 ldr r3,[r7,#4]
 4886 0080 1A68     	 ldr r2,[r3]
 4887 0082 164B     	 ldr r3,.L327+8
 4888 0084 1B68     	 ldr r3,[r3]
 4889 0086 9A42     	 cmp r2,r3
 4890 0088 07D0     	 beq .L324
 4891              	 .loc 1 3141 0 is_stmt 0 discriminator 1
 4892 008a 7B68     	 ldr r3,[r7,#4]
 4893 008c 5A68     	 ldr r2,[r3,#4]
 4894 008e BB69     	 ldr r3,[r7,#24]
 4895 0090 9A42     	 cmp r2,r3
 4896 0092 02D8     	 bhi .L324
3142:../Dave/Generated/FREERTOS/tasks.c **** 		{
3143:../Dave/Generated/FREERTOS/tasks.c **** 			/* The tick count is greater than the time at which
3144:../Dave/Generated/FREERTOS/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3145:../Dave/Generated/FREERTOS/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3146:../Dave/Generated/FREERTOS/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3147:../Dave/Generated/FREERTOS/tasks.c **** 			was called. */
3148:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdTRUE;
 4897              	 .loc 1 3148 0 is_stmt 1
 4898 0094 0123     	 movs r3,#1
 4899 0096 FB61     	 str r3,[r7,#28]
 4900 0098 15E0     	 b .L322
 4901              	.L324:
3149:../Dave/Generated/FREERTOS/tasks.c **** 		}
3150:../Dave/Generated/FREERTOS/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 4902              	 .loc 1 3150 0
 4903 009a 3B68     	 ldr r3,[r7]
 4904 009c 1A68     	 ldr r2,[r3]
 4905 009e 7B69     	 ldr r3,[r7,#20]
 4906 00a0 9A42     	 cmp r2,r3
 4907 00a2 0BD9     	 bls .L325
3151:../Dave/Generated/FREERTOS/tasks.c **** 		{
3152:../Dave/Generated/FREERTOS/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3153:../Dave/Generated/FREERTOS/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 4908              	 .loc 1 3153 0
 4909 00a4 3B68     	 ldr r3,[r7]
 4910 00a6 1A68     	 ldr r2,[r3]
 4911 00a8 7B69     	 ldr r3,[r7,#20]
 4912 00aa D21A     	 subs r2,r2,r3
 4913 00ac 3B68     	 ldr r3,[r7]
 4914 00ae 1A60     	 str r2,[r3]
3154:../Dave/Generated/FREERTOS/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4915              	 .loc 1 3154 0
 4916 00b0 7868     	 ldr r0,[r7,#4]
 4917 00b2 FFF7FEFF 	 bl vTaskInternalSetTimeOutState
3155:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdFALSE;
 4918              	 .loc 1 3155 0
 4919 00b6 0023     	 movs r3,#0
 4920 00b8 FB61     	 str r3,[r7,#28]
 4921 00ba 04E0     	 b .L322
 4922              	.L325:
3156:../Dave/Generated/FREERTOS/tasks.c **** 		}
3157:../Dave/Generated/FREERTOS/tasks.c **** 		else
3158:../Dave/Generated/FREERTOS/tasks.c **** 		{
3159:../Dave/Generated/FREERTOS/tasks.c **** 			*pxTicksToWait = 0;
 4923              	 .loc 1 3159 0
 4924 00bc 3B68     	 ldr r3,[r7]
 4925 00be 0022     	 movs r2,#0
 4926 00c0 1A60     	 str r2,[r3]
3160:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdTRUE;
 4927              	 .loc 1 3160 0
 4928 00c2 0123     	 movs r3,#1
 4929 00c4 FB61     	 str r3,[r7,#28]
 4930              	.L322:
 4931              	.LBE194:
3161:../Dave/Generated/FREERTOS/tasks.c **** 		}
3162:../Dave/Generated/FREERTOS/tasks.c **** 	}
3163:../Dave/Generated/FREERTOS/tasks.c **** 	taskEXIT_CRITICAL();
 4932              	 .loc 1 3163 0
 4933 00c6 FFF7FEFF 	 bl vPortExitCritical
3164:../Dave/Generated/FREERTOS/tasks.c **** 
3165:../Dave/Generated/FREERTOS/tasks.c **** 	return xReturn;
 4934              	 .loc 1 3165 0
 4935 00ca FB69     	 ldr r3,[r7,#28]
3166:../Dave/Generated/FREERTOS/tasks.c **** }
 4936              	 .loc 1 3166 0
 4937 00cc 1846     	 mov r0,r3
 4938 00ce 2037     	 adds r7,r7,#32
 4939              	.LCFI188:
 4940              	 .cfi_def_cfa_offset 8
 4941 00d0 BD46     	 mov sp,r7
 4942              	.LCFI189:
 4943              	 .cfi_def_cfa_register 13
 4944              	 
 4945 00d2 80BD     	 pop {r7,pc}
 4946              	.L328:
 4947              	 .align 2
 4948              	.L327:
 4949 00d4 00000000 	 .word xTickCount
 4950 00d8 00000000 	 .word pxCurrentTCB
 4951 00dc 00000000 	 .word xNumOfOverflows
 4952              	 .cfi_endproc
 4953              	.LFE171:
 4955              	 .section .text.vTaskMissedYield,"ax",%progbits
 4956              	 .align 2
 4957              	 .global vTaskMissedYield
 4958              	 .thumb
 4959              	 .thumb_func
 4961              	vTaskMissedYield:
 4962              	.LFB172:
3167:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3168:../Dave/Generated/FREERTOS/tasks.c **** 
3169:../Dave/Generated/FREERTOS/tasks.c **** void vTaskMissedYield( void )
3170:../Dave/Generated/FREERTOS/tasks.c **** {
 4963              	 .loc 1 3170 0
 4964              	 .cfi_startproc
 4965              	 
 4966              	 
 4967              	 
 4968 0000 80B4     	 push {r7}
 4969              	.LCFI190:
 4970              	 .cfi_def_cfa_offset 4
 4971              	 .cfi_offset 7,-4
 4972 0002 00AF     	 add r7,sp,#0
 4973              	.LCFI191:
 4974              	 .cfi_def_cfa_register 7
3171:../Dave/Generated/FREERTOS/tasks.c **** 	xYieldPending = pdTRUE;
 4975              	 .loc 1 3171 0
 4976 0004 034B     	 ldr r3,.L330
 4977 0006 0122     	 movs r2,#1
 4978 0008 1A60     	 str r2,[r3]
3172:../Dave/Generated/FREERTOS/tasks.c **** }
 4979              	 .loc 1 3172 0
 4980 000a BD46     	 mov sp,r7
 4981              	.LCFI192:
 4982              	 .cfi_def_cfa_register 13
 4983              	 
 4984 000c 5DF8047B 	 ldr r7,[sp],#4
 4985              	.LCFI193:
 4986              	 .cfi_restore 7
 4987              	 .cfi_def_cfa_offset 0
 4988 0010 7047     	 bx lr
 4989              	.L331:
 4990 0012 00BF     	 .align 2
 4991              	.L330:
 4992 0014 00000000 	 .word xYieldPending
 4993              	 .cfi_endproc
 4994              	.LFE172:
 4996              	 .section .text.uxTaskGetTaskNumber,"ax",%progbits
 4997              	 .align 2
 4998              	 .global uxTaskGetTaskNumber
 4999              	 .thumb
 5000              	 .thumb_func
 5002              	uxTaskGetTaskNumber:
 5003              	.LFB173:
3173:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3174:../Dave/Generated/FREERTOS/tasks.c **** 
3175:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3176:../Dave/Generated/FREERTOS/tasks.c **** 
3177:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3178:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5004              	 .loc 1 3178 0
 5005              	 .cfi_startproc
 5006              	 
 5007              	 
 5008              	 
 5009 0000 80B4     	 push {r7}
 5010              	.LCFI194:
 5011              	 .cfi_def_cfa_offset 4
 5012              	 .cfi_offset 7,-4
 5013 0002 85B0     	 sub sp,sp,#20
 5014              	.LCFI195:
 5015              	 .cfi_def_cfa_offset 24
 5016 0004 00AF     	 add r7,sp,#0
 5017              	.LCFI196:
 5018              	 .cfi_def_cfa_register 7
 5019 0006 7860     	 str r0,[r7,#4]
3179:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxReturn;
3180:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3181:../Dave/Generated/FREERTOS/tasks.c **** 
3182:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTask != NULL )
 5020              	 .loc 1 3182 0
 5021 0008 7B68     	 ldr r3,[r7,#4]
 5022 000a 002B     	 cmp r3,#0
 5023 000c 05D0     	 beq .L333
3183:../Dave/Generated/FREERTOS/tasks.c **** 		{
3184:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 5024              	 .loc 1 3184 0
 5025 000e 7B68     	 ldr r3,[r7,#4]
 5026 0010 BB60     	 str r3,[r7,#8]
3185:../Dave/Generated/FREERTOS/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 5027              	 .loc 1 3185 0
 5028 0012 BB68     	 ldr r3,[r7,#8]
 5029 0014 9B6C     	 ldr r3,[r3,#72]
 5030 0016 FB60     	 str r3,[r7,#12]
 5031 0018 01E0     	 b .L334
 5032              	.L333:
3186:../Dave/Generated/FREERTOS/tasks.c **** 		}
3187:../Dave/Generated/FREERTOS/tasks.c **** 		else
3188:../Dave/Generated/FREERTOS/tasks.c **** 		{
3189:../Dave/Generated/FREERTOS/tasks.c **** 			uxReturn = 0U;
 5033              	 .loc 1 3189 0
 5034 001a 0023     	 movs r3,#0
 5035 001c FB60     	 str r3,[r7,#12]
 5036              	.L334:
3190:../Dave/Generated/FREERTOS/tasks.c **** 		}
3191:../Dave/Generated/FREERTOS/tasks.c **** 
3192:../Dave/Generated/FREERTOS/tasks.c **** 		return uxReturn;
 5037              	 .loc 1 3192 0
 5038 001e FB68     	 ldr r3,[r7,#12]
3193:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5039              	 .loc 1 3193 0
 5040 0020 1846     	 mov r0,r3
 5041 0022 1437     	 adds r7,r7,#20
 5042              	.LCFI197:
 5043              	 .cfi_def_cfa_offset 4
 5044 0024 BD46     	 mov sp,r7
 5045              	.LCFI198:
 5046              	 .cfi_def_cfa_register 13
 5047              	 
 5048 0026 5DF8047B 	 ldr r7,[sp],#4
 5049              	.LCFI199:
 5050              	 .cfi_restore 7
 5051              	 .cfi_def_cfa_offset 0
 5052 002a 7047     	 bx lr
 5053              	 .cfi_endproc
 5054              	.LFE173:
 5056              	 .section .text.vTaskSetTaskNumber,"ax",%progbits
 5057              	 .align 2
 5058              	 .global vTaskSetTaskNumber
 5059              	 .thumb
 5060              	 .thumb_func
 5062              	vTaskSetTaskNumber:
 5063              	.LFB174:
3194:../Dave/Generated/FREERTOS/tasks.c **** 
3195:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3196:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3197:../Dave/Generated/FREERTOS/tasks.c **** 
3198:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3199:../Dave/Generated/FREERTOS/tasks.c **** 
3200:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3201:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5064              	 .loc 1 3201 0
 5065              	 .cfi_startproc
 5066              	 
 5067              	 
 5068              	 
 5069 0000 80B4     	 push {r7}
 5070              	.LCFI200:
 5071              	 .cfi_def_cfa_offset 4
 5072              	 .cfi_offset 7,-4
 5073 0002 85B0     	 sub sp,sp,#20
 5074              	.LCFI201:
 5075              	 .cfi_def_cfa_offset 24
 5076 0004 00AF     	 add r7,sp,#0
 5077              	.LCFI202:
 5078              	 .cfi_def_cfa_register 7
 5079 0006 7860     	 str r0,[r7,#4]
 5080 0008 3960     	 str r1,[r7]
3202:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3203:../Dave/Generated/FREERTOS/tasks.c **** 
3204:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTask != NULL )
 5081              	 .loc 1 3204 0
 5082 000a 7B68     	 ldr r3,[r7,#4]
 5083 000c 002B     	 cmp r3,#0
 5084 000e 04D0     	 beq .L336
3205:../Dave/Generated/FREERTOS/tasks.c **** 		{
3206:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 5085              	 .loc 1 3206 0
 5086 0010 7B68     	 ldr r3,[r7,#4]
 5087 0012 FB60     	 str r3,[r7,#12]
3207:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 5088              	 .loc 1 3207 0
 5089 0014 FB68     	 ldr r3,[r7,#12]
 5090 0016 3A68     	 ldr r2,[r7]
 5091 0018 9A64     	 str r2,[r3,#72]
 5092              	.L336:
3208:../Dave/Generated/FREERTOS/tasks.c **** 		}
3209:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5093              	 .loc 1 3209 0
 5094 001a 1437     	 adds r7,r7,#20
 5095              	.LCFI203:
 5096              	 .cfi_def_cfa_offset 4
 5097 001c BD46     	 mov sp,r7
 5098              	.LCFI204:
 5099              	 .cfi_def_cfa_register 13
 5100              	 
 5101 001e 5DF8047B 	 ldr r7,[sp],#4
 5102              	.LCFI205:
 5103              	 .cfi_restore 7
 5104              	 .cfi_def_cfa_offset 0
 5105 0022 7047     	 bx lr
 5106              	 .cfi_endproc
 5107              	.LFE174:
 5109              	 .section .text.prvIdleTask,"ax",%progbits
 5110              	 .align 2
 5111              	 .thumb
 5112              	 .thumb_func
 5114              	prvIdleTask:
 5115              	.LFB175:
3210:../Dave/Generated/FREERTOS/tasks.c **** 
3211:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3212:../Dave/Generated/FREERTOS/tasks.c **** 
3213:../Dave/Generated/FREERTOS/tasks.c **** /*
3214:../Dave/Generated/FREERTOS/tasks.c ****  * -----------------------------------------------------------
3215:../Dave/Generated/FREERTOS/tasks.c ****  * The Idle task.
3216:../Dave/Generated/FREERTOS/tasks.c ****  * ----------------------------------------------------------
3217:../Dave/Generated/FREERTOS/tasks.c ****  *
3218:../Dave/Generated/FREERTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3219:../Dave/Generated/FREERTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3220:../Dave/Generated/FREERTOS/tasks.c ****  *
3221:../Dave/Generated/FREERTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
3222:../Dave/Generated/FREERTOS/tasks.c ****  *
3223:../Dave/Generated/FREERTOS/tasks.c ****  */
3224:../Dave/Generated/FREERTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3225:../Dave/Generated/FREERTOS/tasks.c **** {
 5116              	 .loc 1 3225 0
 5117              	 .cfi_startproc
 5118              	 
 5119              	 
 5120 0000 80B5     	 push {r7,lr}
 5121              	.LCFI206:
 5122              	 .cfi_def_cfa_offset 8
 5123              	 .cfi_offset 7,-8
 5124              	 .cfi_offset 14,-4
 5125 0002 82B0     	 sub sp,sp,#8
 5126              	.LCFI207:
 5127              	 .cfi_def_cfa_offset 16
 5128 0004 00AF     	 add r7,sp,#0
 5129              	.LCFI208:
 5130              	 .cfi_def_cfa_register 7
 5131 0006 7860     	 str r0,[r7,#4]
 5132              	.L340:
3226:../Dave/Generated/FREERTOS/tasks.c **** 	/* Stop warnings. */
3227:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) pvParameters;
3228:../Dave/Generated/FREERTOS/tasks.c **** 
3229:../Dave/Generated/FREERTOS/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3230:../Dave/Generated/FREERTOS/tasks.c **** 	SCHEDULER IS STARTED. **/
3231:../Dave/Generated/FREERTOS/tasks.c **** 
3232:../Dave/Generated/FREERTOS/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3233:../Dave/Generated/FREERTOS/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3234:../Dave/Generated/FREERTOS/tasks.c **** 	any. */
3235:../Dave/Generated/FREERTOS/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3236:../Dave/Generated/FREERTOS/tasks.c **** 
3237:../Dave/Generated/FREERTOS/tasks.c **** 	for( ;; )
3238:../Dave/Generated/FREERTOS/tasks.c **** 	{
3239:../Dave/Generated/FREERTOS/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3240:../Dave/Generated/FREERTOS/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3241:../Dave/Generated/FREERTOS/tasks.c **** 		prvCheckTasksWaitingTermination();
 5133              	 .loc 1 3241 0
 5134 0008 FFF7FEFF 	 bl prvCheckTasksWaitingTermination
3242:../Dave/Generated/FREERTOS/tasks.c **** 
3243:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3244:../Dave/Generated/FREERTOS/tasks.c **** 		{
3245:../Dave/Generated/FREERTOS/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3246:../Dave/Generated/FREERTOS/tasks.c **** 			see if any other task has become available.  If we are using
3247:../Dave/Generated/FREERTOS/tasks.c **** 			preemption we don't need to do this as any task becoming available
3248:../Dave/Generated/FREERTOS/tasks.c **** 			will automatically get the processor anyway. */
3249:../Dave/Generated/FREERTOS/tasks.c **** 			taskYIELD();
3250:../Dave/Generated/FREERTOS/tasks.c **** 		}
3251:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3252:../Dave/Generated/FREERTOS/tasks.c **** 
3253:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3254:../Dave/Generated/FREERTOS/tasks.c **** 		{
3255:../Dave/Generated/FREERTOS/tasks.c **** 			/* When using preemption tasks of equal priority will be
3256:../Dave/Generated/FREERTOS/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3257:../Dave/Generated/FREERTOS/tasks.c **** 			to run then the idle task should yield before the end of the
3258:../Dave/Generated/FREERTOS/tasks.c **** 			timeslice.
3259:../Dave/Generated/FREERTOS/tasks.c **** 
3260:../Dave/Generated/FREERTOS/tasks.c **** 			A critical region is not required here as we are just reading from
3261:../Dave/Generated/FREERTOS/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3262:../Dave/Generated/FREERTOS/tasks.c **** 			the ready list at the idle priority contains more than one task
3263:../Dave/Generated/FREERTOS/tasks.c **** 			then a task other than the idle task is ready to execute. */
3264:../Dave/Generated/FREERTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 5135              	 .loc 1 3264 0
 5136 000c 064B     	 ldr r3,.L341
 5137 000e 1B68     	 ldr r3,[r3]
 5138 0010 012B     	 cmp r3,#1
 5139 0012 07D9     	 bls .L339
3265:../Dave/Generated/FREERTOS/tasks.c **** 			{
3266:../Dave/Generated/FREERTOS/tasks.c **** 				taskYIELD();
 5140              	 .loc 1 3266 0
 5141 0014 054B     	 ldr r3,.L341+4
 5142 0016 4FF08052 	 mov r2,#268435456
 5143 001a 1A60     	 str r2,[r3]
 5144              	
 5145 001c BFF34F8F 	 dsb
 5146              	
 5147              	
 5148 0020 BFF36F8F 	 isb
 5149              	
 5150              	 .thumb
 5151              	.L339:
3267:../Dave/Generated/FREERTOS/tasks.c **** 			}
3268:../Dave/Generated/FREERTOS/tasks.c **** 			else
3269:../Dave/Generated/FREERTOS/tasks.c **** 			{
3270:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3271:../Dave/Generated/FREERTOS/tasks.c **** 			}
3272:../Dave/Generated/FREERTOS/tasks.c **** 		}
3273:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3274:../Dave/Generated/FREERTOS/tasks.c **** 
3275:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3276:../Dave/Generated/FREERTOS/tasks.c **** 		{
3277:../Dave/Generated/FREERTOS/tasks.c **** 			extern void vApplicationIdleHook( void );
3278:../Dave/Generated/FREERTOS/tasks.c **** 
3279:../Dave/Generated/FREERTOS/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3280:../Dave/Generated/FREERTOS/tasks.c **** 			allows the application designer to add background functionality
3281:../Dave/Generated/FREERTOS/tasks.c **** 			without the overhead of a separate task.
3282:../Dave/Generated/FREERTOS/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3283:../Dave/Generated/FREERTOS/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3284:../Dave/Generated/FREERTOS/tasks.c **** 			vApplicationIdleHook();
3285:../Dave/Generated/FREERTOS/tasks.c **** 		}
3286:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3287:../Dave/Generated/FREERTOS/tasks.c **** 
3288:../Dave/Generated/FREERTOS/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3289:../Dave/Generated/FREERTOS/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3290:../Dave/Generated/FREERTOS/tasks.c **** 		user defined low power mode	implementations require
3291:../Dave/Generated/FREERTOS/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3292:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3293:../Dave/Generated/FREERTOS/tasks.c **** 		{
3294:../Dave/Generated/FREERTOS/tasks.c **** 		TickType_t xExpectedIdleTime;
3295:../Dave/Generated/FREERTOS/tasks.c **** 
3296:../Dave/Generated/FREERTOS/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3297:../Dave/Generated/FREERTOS/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3298:../Dave/Generated/FREERTOS/tasks.c **** 			test of the expected idle time is performed without the
3299:../Dave/Generated/FREERTOS/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3300:../Dave/Generated/FREERTOS/tasks.c **** 			valid. */
3301:../Dave/Generated/FREERTOS/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3302:../Dave/Generated/FREERTOS/tasks.c **** 
3303:../Dave/Generated/FREERTOS/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3304:../Dave/Generated/FREERTOS/tasks.c **** 			{
3305:../Dave/Generated/FREERTOS/tasks.c **** 				vTaskSuspendAll();
3306:../Dave/Generated/FREERTOS/tasks.c **** 				{
3307:../Dave/Generated/FREERTOS/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3308:../Dave/Generated/FREERTOS/tasks.c **** 					time can be sampled again, and this time its value can
3309:../Dave/Generated/FREERTOS/tasks.c **** 					be used. */
3310:../Dave/Generated/FREERTOS/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3311:../Dave/Generated/FREERTOS/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3312:../Dave/Generated/FREERTOS/tasks.c **** 
3313:../Dave/Generated/FREERTOS/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3314:../Dave/Generated/FREERTOS/tasks.c **** 					if the application does not want
3315:../Dave/Generated/FREERTOS/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3316:../Dave/Generated/FREERTOS/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3317:../Dave/Generated/FREERTOS/tasks.c **** 
3318:../Dave/Generated/FREERTOS/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3319:../Dave/Generated/FREERTOS/tasks.c **** 					{
3320:../Dave/Generated/FREERTOS/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3321:../Dave/Generated/FREERTOS/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3322:../Dave/Generated/FREERTOS/tasks.c **** 						traceLOW_POWER_IDLE_END();
3323:../Dave/Generated/FREERTOS/tasks.c **** 					}
3324:../Dave/Generated/FREERTOS/tasks.c **** 					else
3325:../Dave/Generated/FREERTOS/tasks.c **** 					{
3326:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3327:../Dave/Generated/FREERTOS/tasks.c **** 					}
3328:../Dave/Generated/FREERTOS/tasks.c **** 				}
3329:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) xTaskResumeAll();
3330:../Dave/Generated/FREERTOS/tasks.c **** 			}
3331:../Dave/Generated/FREERTOS/tasks.c **** 			else
3332:../Dave/Generated/FREERTOS/tasks.c **** 			{
3333:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3334:../Dave/Generated/FREERTOS/tasks.c **** 			}
3335:../Dave/Generated/FREERTOS/tasks.c **** 		}
3336:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3337:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5152              	 .loc 1 3337 0
 5153 0024 F0E7     	 b .L340
 5154              	.L342:
 5155 0026 00BF     	 .align 2
 5156              	.L341:
 5157 0028 00000000 	 .word pxReadyTasksLists
 5158 002c 04ED00E0 	 .word -536810236
 5159              	 .cfi_endproc
 5160              	.LFE175:
 5162              	 .section .text.vTaskSetThreadLocalStoragePointer,"ax",%progbits
 5163              	 .align 2
 5164              	 .global vTaskSetThreadLocalStoragePointer
 5165              	 .thumb
 5166              	 .thumb_func
 5168              	vTaskSetThreadLocalStoragePointer:
 5169              	.LFB176:
3338:../Dave/Generated/FREERTOS/tasks.c **** }
3339:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3340:../Dave/Generated/FREERTOS/tasks.c **** 
3341:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3342:../Dave/Generated/FREERTOS/tasks.c **** 
3343:../Dave/Generated/FREERTOS/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3344:../Dave/Generated/FREERTOS/tasks.c **** 	{
3345:../Dave/Generated/FREERTOS/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3346:../Dave/Generated/FREERTOS/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3347:../Dave/Generated/FREERTOS/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3348:../Dave/Generated/FREERTOS/tasks.c **** 
3349:../Dave/Generated/FREERTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3350:../Dave/Generated/FREERTOS/tasks.c **** 		{
3351:../Dave/Generated/FREERTOS/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3352:../Dave/Generated/FREERTOS/tasks.c **** 			eReturn = eAbortSleep;
3353:../Dave/Generated/FREERTOS/tasks.c **** 		}
3354:../Dave/Generated/FREERTOS/tasks.c **** 		else if( xYieldPending != pdFALSE )
3355:../Dave/Generated/FREERTOS/tasks.c **** 		{
3356:../Dave/Generated/FREERTOS/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3357:../Dave/Generated/FREERTOS/tasks.c **** 			eReturn = eAbortSleep;
3358:../Dave/Generated/FREERTOS/tasks.c **** 		}
3359:../Dave/Generated/FREERTOS/tasks.c **** 		else
3360:../Dave/Generated/FREERTOS/tasks.c **** 		{
3361:../Dave/Generated/FREERTOS/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3362:../Dave/Generated/FREERTOS/tasks.c **** 			have an infinite block time rather than actually being suspended)
3363:../Dave/Generated/FREERTOS/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3364:../Dave/Generated/FREERTOS/tasks.c **** 			interrupts. */
3365:../Dave/Generated/FREERTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3366:../Dave/Generated/FREERTOS/tasks.c **** 			{
3367:../Dave/Generated/FREERTOS/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3368:../Dave/Generated/FREERTOS/tasks.c **** 			}
3369:../Dave/Generated/FREERTOS/tasks.c **** 			else
3370:../Dave/Generated/FREERTOS/tasks.c **** 			{
3371:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3372:../Dave/Generated/FREERTOS/tasks.c **** 			}
3373:../Dave/Generated/FREERTOS/tasks.c **** 		}
3374:../Dave/Generated/FREERTOS/tasks.c **** 
3375:../Dave/Generated/FREERTOS/tasks.c **** 		return eReturn;
3376:../Dave/Generated/FREERTOS/tasks.c **** 	}
3377:../Dave/Generated/FREERTOS/tasks.c **** 
3378:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3379:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3380:../Dave/Generated/FREERTOS/tasks.c **** 
3381:../Dave/Generated/FREERTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3382:../Dave/Generated/FREERTOS/tasks.c **** 
3383:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3384:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5170              	 .loc 1 3384 0
 5171              	 .cfi_startproc
 5172              	 
 5173              	 
 5174              	 
 5175 0000 80B4     	 push {r7}
 5176              	.LCFI209:
 5177              	 .cfi_def_cfa_offset 4
 5178              	 .cfi_offset 7,-4
 5179 0002 87B0     	 sub sp,sp,#28
 5180              	.LCFI210:
 5181              	 .cfi_def_cfa_offset 32
 5182 0004 00AF     	 add r7,sp,#0
 5183              	.LCFI211:
 5184              	 .cfi_def_cfa_register 7
 5185 0006 F860     	 str r0,[r7,#12]
 5186 0008 B960     	 str r1,[r7,#8]
 5187 000a 7A60     	 str r2,[r7,#4]
3385:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3386:../Dave/Generated/FREERTOS/tasks.c **** 
3387:../Dave/Generated/FREERTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 5188              	 .loc 1 3387 0
 5189 000c BB68     	 ldr r3,[r7,#8]
 5190 000e 042B     	 cmp r3,#4
 5191 0010 0EDC     	 bgt .L343
3388:../Dave/Generated/FREERTOS/tasks.c **** 		{
3389:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
 5192              	 .loc 1 3389 0
 5193 0012 FB68     	 ldr r3,[r7,#12]
 5194 0014 002B     	 cmp r3,#0
 5195 0016 02D1     	 bne .L345
 5196              	 .loc 1 3389 0 is_stmt 0 discriminator 1
 5197 0018 084B     	 ldr r3,.L347
 5198 001a 1B68     	 ldr r3,[r3]
 5199 001c 00E0     	 b .L346
 5200              	.L345:
 5201              	 .loc 1 3389 0 discriminator 2
 5202 001e FB68     	 ldr r3,[r7,#12]
 5203              	.L346:
 5204              	 .loc 1 3389 0 discriminator 4
 5205 0020 7B61     	 str r3,[r7,#20]
3390:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 5206              	 .loc 1 3390 0 is_stmt 1 discriminator 4
 5207 0022 7A69     	 ldr r2,[r7,#20]
 5208 0024 BB68     	 ldr r3,[r7,#8]
 5209 0026 1433     	 adds r3,r3,#20
 5210 0028 9B00     	 lsls r3,r3,#2
 5211 002a 1344     	 add r3,r3,r2
 5212 002c 7A68     	 ldr r2,[r7,#4]
 5213 002e 5A60     	 str r2,[r3,#4]
 5214              	.L343:
3391:../Dave/Generated/FREERTOS/tasks.c **** 		}
3392:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5215              	 .loc 1 3392 0
 5216 0030 1C37     	 adds r7,r7,#28
 5217              	.LCFI212:
 5218              	 .cfi_def_cfa_offset 4
 5219 0032 BD46     	 mov sp,r7
 5220              	.LCFI213:
 5221              	 .cfi_def_cfa_register 13
 5222              	 
 5223 0034 5DF8047B 	 ldr r7,[sp],#4
 5224              	.LCFI214:
 5225              	 .cfi_restore 7
 5226              	 .cfi_def_cfa_offset 0
 5227 0038 7047     	 bx lr
 5228              	.L348:
 5229 003a 00BF     	 .align 2
 5230              	.L347:
 5231 003c 00000000 	 .word pxCurrentTCB
 5232              	 .cfi_endproc
 5233              	.LFE176:
 5235              	 .section .text.pvTaskGetThreadLocalStoragePointer,"ax",%progbits
 5236              	 .align 2
 5237              	 .global pvTaskGetThreadLocalStoragePointer
 5238              	 .thumb
 5239              	 .thumb_func
 5241              	pvTaskGetThreadLocalStoragePointer:
 5242              	.LFB177:
3393:../Dave/Generated/FREERTOS/tasks.c **** 
3394:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3395:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3396:../Dave/Generated/FREERTOS/tasks.c **** 
3397:../Dave/Generated/FREERTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3398:../Dave/Generated/FREERTOS/tasks.c **** 
3399:../Dave/Generated/FREERTOS/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3400:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5243              	 .loc 1 3400 0
 5244              	 .cfi_startproc
 5245              	 
 5246              	 
 5247              	 
 5248 0000 80B4     	 push {r7}
 5249              	.LCFI215:
 5250              	 .cfi_def_cfa_offset 4
 5251              	 .cfi_offset 7,-4
 5252 0002 85B0     	 sub sp,sp,#20
 5253              	.LCFI216:
 5254              	 .cfi_def_cfa_offset 24
 5255 0004 00AF     	 add r7,sp,#0
 5256              	.LCFI217:
 5257              	 .cfi_def_cfa_register 7
 5258 0006 7860     	 str r0,[r7,#4]
 5259 0008 3960     	 str r1,[r7]
3401:../Dave/Generated/FREERTOS/tasks.c **** 	void *pvReturn = NULL;
 5260              	 .loc 1 3401 0
 5261 000a 0023     	 movs r3,#0
 5262 000c FB60     	 str r3,[r7,#12]
3402:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3403:../Dave/Generated/FREERTOS/tasks.c **** 
3404:../Dave/Generated/FREERTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 5263              	 .loc 1 3404 0
 5264 000e 3B68     	 ldr r3,[r7]
 5265 0010 042B     	 cmp r3,#4
 5266 0012 0FDC     	 bgt .L350
3405:../Dave/Generated/FREERTOS/tasks.c **** 		{
3406:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 5267              	 .loc 1 3406 0
 5268 0014 7B68     	 ldr r3,[r7,#4]
 5269 0016 002B     	 cmp r3,#0
 5270 0018 02D1     	 bne .L351
 5271              	 .loc 1 3406 0 is_stmt 0 discriminator 1
 5272 001a 0B4B     	 ldr r3,.L355
 5273 001c 1B68     	 ldr r3,[r3]
 5274 001e 00E0     	 b .L352
 5275              	.L351:
 5276              	 .loc 1 3406 0 discriminator 2
 5277 0020 7B68     	 ldr r3,[r7,#4]
 5278              	.L352:
 5279              	 .loc 1 3406 0 discriminator 4
 5280 0022 BB60     	 str r3,[r7,#8]
3407:../Dave/Generated/FREERTOS/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 5281              	 .loc 1 3407 0 is_stmt 1 discriminator 4
 5282 0024 BA68     	 ldr r2,[r7,#8]
 5283 0026 3B68     	 ldr r3,[r7]
 5284 0028 1433     	 adds r3,r3,#20
 5285 002a 9B00     	 lsls r3,r3,#2
 5286 002c 1344     	 add r3,r3,r2
 5287 002e 5B68     	 ldr r3,[r3,#4]
 5288 0030 FB60     	 str r3,[r7,#12]
 5289 0032 01E0     	 b .L353
 5290              	.L350:
3408:../Dave/Generated/FREERTOS/tasks.c **** 		}
3409:../Dave/Generated/FREERTOS/tasks.c **** 		else
3410:../Dave/Generated/FREERTOS/tasks.c **** 		{
3411:../Dave/Generated/FREERTOS/tasks.c **** 			pvReturn = NULL;
 5291              	 .loc 1 3411 0
 5292 0034 0023     	 movs r3,#0
 5293 0036 FB60     	 str r3,[r7,#12]
 5294              	.L353:
3412:../Dave/Generated/FREERTOS/tasks.c **** 		}
3413:../Dave/Generated/FREERTOS/tasks.c **** 
3414:../Dave/Generated/FREERTOS/tasks.c **** 		return pvReturn;
 5295              	 .loc 1 3414 0
 5296 0038 FB68     	 ldr r3,[r7,#12]
3415:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5297              	 .loc 1 3415 0
 5298 003a 1846     	 mov r0,r3
 5299 003c 1437     	 adds r7,r7,#20
 5300              	.LCFI218:
 5301              	 .cfi_def_cfa_offset 4
 5302 003e BD46     	 mov sp,r7
 5303              	.LCFI219:
 5304              	 .cfi_def_cfa_register 13
 5305              	 
 5306 0040 5DF8047B 	 ldr r7,[sp],#4
 5307              	.LCFI220:
 5308              	 .cfi_restore 7
 5309              	 .cfi_def_cfa_offset 0
 5310 0044 7047     	 bx lr
 5311              	.L356:
 5312 0046 00BF     	 .align 2
 5313              	.L355:
 5314 0048 00000000 	 .word pxCurrentTCB
 5315              	 .cfi_endproc
 5316              	.LFE177:
 5318              	 .section .text.prvInitialiseTaskLists,"ax",%progbits
 5319              	 .align 2
 5320              	 .thumb
 5321              	 .thumb_func
 5323              	prvInitialiseTaskLists:
 5324              	.LFB178:
3416:../Dave/Generated/FREERTOS/tasks.c **** 
3417:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3418:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3419:../Dave/Generated/FREERTOS/tasks.c **** 
3420:../Dave/Generated/FREERTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3421:../Dave/Generated/FREERTOS/tasks.c **** 
3422:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3423:../Dave/Generated/FREERTOS/tasks.c **** 	{
3424:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3425:../Dave/Generated/FREERTOS/tasks.c **** 
3426:../Dave/Generated/FREERTOS/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3427:../Dave/Generated/FREERTOS/tasks.c **** 		the calling task. */
3428:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3429:../Dave/Generated/FREERTOS/tasks.c **** 
3430:../Dave/Generated/FREERTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3431:../Dave/Generated/FREERTOS/tasks.c **** 	}
3432:../Dave/Generated/FREERTOS/tasks.c **** 
3433:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3434:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3435:../Dave/Generated/FREERTOS/tasks.c **** 
3436:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseTaskLists( void )
3437:../Dave/Generated/FREERTOS/tasks.c **** {
 5325              	 .loc 1 3437 0
 5326              	 .cfi_startproc
 5327              	 
 5328              	 
 5329 0000 80B5     	 push {r7,lr}
 5330              	.LCFI221:
 5331              	 .cfi_def_cfa_offset 8
 5332              	 .cfi_offset 7,-8
 5333              	 .cfi_offset 14,-4
 5334 0002 82B0     	 sub sp,sp,#8
 5335              	.LCFI222:
 5336              	 .cfi_def_cfa_offset 16
 5337 0004 00AF     	 add r7,sp,#0
 5338              	.LCFI223:
 5339              	 .cfi_def_cfa_register 7
3438:../Dave/Generated/FREERTOS/tasks.c **** UBaseType_t uxPriority;
3439:../Dave/Generated/FREERTOS/tasks.c **** 
3440:../Dave/Generated/FREERTOS/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 5340              	 .loc 1 3440 0
 5341 0006 0023     	 movs r3,#0
 5342 0008 7B60     	 str r3,[r7,#4]
 5343 000a 0CE0     	 b .L358
 5344              	.L359:
3441:../Dave/Generated/FREERTOS/tasks.c **** 	{
3442:../Dave/Generated/FREERTOS/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 5345              	 .loc 1 3442 0 discriminator 3
 5346 000c 7A68     	 ldr r2,[r7,#4]
 5347 000e 1346     	 mov r3,r2
 5348 0010 9B00     	 lsls r3,r3,#2
 5349 0012 1344     	 add r3,r3,r2
 5350 0014 9B00     	 lsls r3,r3,#2
 5351 0016 114A     	 ldr r2,.L360
 5352 0018 1344     	 add r3,r3,r2
 5353 001a 1846     	 mov r0,r3
 5354 001c FFF7FEFF 	 bl vListInitialise
3440:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5355              	 .loc 1 3440 0 discriminator 3
 5356 0020 7B68     	 ldr r3,[r7,#4]
 5357 0022 0133     	 adds r3,r3,#1
 5358 0024 7B60     	 str r3,[r7,#4]
 5359              	.L358:
3440:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5360              	 .loc 1 3440 0 is_stmt 0 discriminator 1
 5361 0026 7B68     	 ldr r3,[r7,#4]
 5362 0028 042B     	 cmp r3,#4
 5363 002a EFD9     	 bls .L359
3443:../Dave/Generated/FREERTOS/tasks.c **** 	}
3444:../Dave/Generated/FREERTOS/tasks.c **** 
3445:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 5364              	 .loc 1 3445 0 is_stmt 1
 5365 002c 0C48     	 ldr r0,.L360+4
 5366 002e FFF7FEFF 	 bl vListInitialise
3446:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 5367              	 .loc 1 3446 0
 5368 0032 0C48     	 ldr r0,.L360+8
 5369 0034 FFF7FEFF 	 bl vListInitialise
3447:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
 5370              	 .loc 1 3447 0
 5371 0038 0B48     	 ldr r0,.L360+12
 5372 003a FFF7FEFF 	 bl vListInitialise
3448:../Dave/Generated/FREERTOS/tasks.c **** 
3449:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3450:../Dave/Generated/FREERTOS/tasks.c **** 	{
3451:../Dave/Generated/FREERTOS/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 5373              	 .loc 1 3451 0
 5374 003e 0B48     	 ldr r0,.L360+16
 5375 0040 FFF7FEFF 	 bl vListInitialise
3452:../Dave/Generated/FREERTOS/tasks.c **** 	}
3453:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3454:../Dave/Generated/FREERTOS/tasks.c **** 
3455:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3456:../Dave/Generated/FREERTOS/tasks.c **** 	{
3457:../Dave/Generated/FREERTOS/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 5376              	 .loc 1 3457 0
 5377 0044 0A48     	 ldr r0,.L360+20
 5378 0046 FFF7FEFF 	 bl vListInitialise
3458:../Dave/Generated/FREERTOS/tasks.c **** 	}
3459:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3460:../Dave/Generated/FREERTOS/tasks.c **** 
3461:../Dave/Generated/FREERTOS/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3462:../Dave/Generated/FREERTOS/tasks.c **** 	using list2. */
3463:../Dave/Generated/FREERTOS/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 5379              	 .loc 1 3463 0
 5380 004a 0A4B     	 ldr r3,.L360+24
 5381 004c 044A     	 ldr r2,.L360+4
 5382 004e 1A60     	 str r2,[r3]
3464:../Dave/Generated/FREERTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 5383              	 .loc 1 3464 0
 5384 0050 094B     	 ldr r3,.L360+28
 5385 0052 044A     	 ldr r2,.L360+8
 5386 0054 1A60     	 str r2,[r3]
3465:../Dave/Generated/FREERTOS/tasks.c **** }
 5387              	 .loc 1 3465 0
 5388 0056 0837     	 adds r7,r7,#8
 5389              	.LCFI224:
 5390              	 .cfi_def_cfa_offset 8
 5391 0058 BD46     	 mov sp,r7
 5392              	.LCFI225:
 5393              	 .cfi_def_cfa_register 13
 5394              	 
 5395 005a 80BD     	 pop {r7,pc}
 5396              	.L361:
 5397              	 .align 2
 5398              	.L360:
 5399 005c 00000000 	 .word pxReadyTasksLists
 5400 0060 00000000 	 .word xDelayedTaskList1
 5401 0064 00000000 	 .word xDelayedTaskList2
 5402 0068 00000000 	 .word xPendingReadyList
 5403 006c 00000000 	 .word xTasksWaitingTermination
 5404 0070 00000000 	 .word xSuspendedTaskList
 5405 0074 00000000 	 .word pxDelayedTaskList
 5406 0078 00000000 	 .word pxOverflowDelayedTaskList
 5407              	 .cfi_endproc
 5408              	.LFE178:
 5410              	 .section .text.prvCheckTasksWaitingTermination,"ax",%progbits
 5411              	 .align 2
 5412              	 .thumb
 5413              	 .thumb_func
 5415              	prvCheckTasksWaitingTermination:
 5416              	.LFB179:
3466:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3467:../Dave/Generated/FREERTOS/tasks.c **** 
3468:../Dave/Generated/FREERTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3469:../Dave/Generated/FREERTOS/tasks.c **** {
 5417              	 .loc 1 3469 0
 5418              	 .cfi_startproc
 5419              	 
 5420              	 
 5421 0000 80B5     	 push {r7,lr}
 5422              	.LCFI226:
 5423              	 .cfi_def_cfa_offset 8
 5424              	 .cfi_offset 7,-8
 5425              	 .cfi_offset 14,-4
 5426 0002 82B0     	 sub sp,sp,#8
 5427              	.LCFI227:
 5428              	 .cfi_def_cfa_offset 16
 5429 0004 00AF     	 add r7,sp,#0
 5430              	.LCFI228:
 5431              	 .cfi_def_cfa_register 7
 5432              	.LBB195:
3470:../Dave/Generated/FREERTOS/tasks.c **** 
3471:../Dave/Generated/FREERTOS/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3472:../Dave/Generated/FREERTOS/tasks.c **** 
3473:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3474:../Dave/Generated/FREERTOS/tasks.c **** 	{
3475:../Dave/Generated/FREERTOS/tasks.c **** 		TCB_t *pxTCB;
3476:../Dave/Generated/FREERTOS/tasks.c **** 
3477:../Dave/Generated/FREERTOS/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
3478:../Dave/Generated/FREERTOS/tasks.c **** 		being called too often in the idle task. */
3479:../Dave/Generated/FREERTOS/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 5433              	 .loc 1 3479 0
 5434 0006 19E0     	 b .L363
 5435              	.L364:
3480:../Dave/Generated/FREERTOS/tasks.c **** 		{
3481:../Dave/Generated/FREERTOS/tasks.c **** 			taskENTER_CRITICAL();
 5436              	 .loc 1 3481 0
 5437 0008 FFF7FEFF 	 bl vPortEnterCritical
3482:../Dave/Generated/FREERTOS/tasks.c **** 			{
3483:../Dave/Generated/FREERTOS/tasks.c **** 				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 5438              	 .loc 1 3483 0
 5439 000c 0F4B     	 ldr r3,.L365
 5440 000e DB68     	 ldr r3,[r3,#12]
 5441 0010 DB68     	 ldr r3,[r3,#12]
 5442 0012 7B60     	 str r3,[r7,#4]
3484:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5443              	 .loc 1 3484 0
 5444 0014 7B68     	 ldr r3,[r7,#4]
 5445 0016 0433     	 adds r3,r3,#4
 5446 0018 1846     	 mov r0,r3
 5447 001a FFF7FEFF 	 bl uxListRemove
3485:../Dave/Generated/FREERTOS/tasks.c **** 				--uxCurrentNumberOfTasks;
 5448              	 .loc 1 3485 0
 5449 001e 0C4B     	 ldr r3,.L365+4
 5450 0020 1B68     	 ldr r3,[r3]
 5451 0022 013B     	 subs r3,r3,#1
 5452 0024 0A4A     	 ldr r2,.L365+4
 5453 0026 1360     	 str r3,[r2]
3486:../Dave/Generated/FREERTOS/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 5454              	 .loc 1 3486 0
 5455 0028 0A4B     	 ldr r3,.L365+8
 5456 002a 1B68     	 ldr r3,[r3]
 5457 002c 013B     	 subs r3,r3,#1
 5458 002e 094A     	 ldr r2,.L365+8
 5459 0030 1360     	 str r3,[r2]
3487:../Dave/Generated/FREERTOS/tasks.c **** 			}
3488:../Dave/Generated/FREERTOS/tasks.c **** 			taskEXIT_CRITICAL();
 5460              	 .loc 1 3488 0
 5461 0032 FFF7FEFF 	 bl vPortExitCritical
3489:../Dave/Generated/FREERTOS/tasks.c **** 
3490:../Dave/Generated/FREERTOS/tasks.c **** 			prvDeleteTCB( pxTCB );
 5462              	 .loc 1 3490 0
 5463 0036 7868     	 ldr r0,[r7,#4]
 5464 0038 FFF7FEFF 	 bl prvDeleteTCB
 5465              	.L363:
3479:../Dave/Generated/FREERTOS/tasks.c **** 		{
 5466              	 .loc 1 3479 0
 5467 003c 054B     	 ldr r3,.L365+8
 5468 003e 1B68     	 ldr r3,[r3]
 5469 0040 002B     	 cmp r3,#0
 5470 0042 E1D1     	 bne .L364
 5471              	.LBE195:
3491:../Dave/Generated/FREERTOS/tasks.c **** 		}
3492:../Dave/Generated/FREERTOS/tasks.c **** 	}
3493:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3494:../Dave/Generated/FREERTOS/tasks.c **** }
 5472              	 .loc 1 3494 0
 5473 0044 0837     	 adds r7,r7,#8
 5474              	.LCFI229:
 5475              	 .cfi_def_cfa_offset 8
 5476 0046 BD46     	 mov sp,r7
 5477              	.LCFI230:
 5478              	 .cfi_def_cfa_register 13
 5479              	 
 5480 0048 80BD     	 pop {r7,pc}
 5481              	.L366:
 5482 004a 00BF     	 .align 2
 5483              	.L365:
 5484 004c 00000000 	 .word xTasksWaitingTermination
 5485 0050 00000000 	 .word uxCurrentNumberOfTasks
 5486 0054 00000000 	 .word uxDeletedTasksWaitingCleanUp
 5487              	 .cfi_endproc
 5488              	.LFE179:
 5490              	 .section .text.vTaskGetInfo,"ax",%progbits
 5491              	 .align 2
 5492              	 .global vTaskGetInfo
 5493              	 .thumb
 5494              	 .thumb_func
 5496              	vTaskGetInfo:
 5497              	.LFB180:
3495:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3496:../Dave/Generated/FREERTOS/tasks.c **** 
3497:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3498:../Dave/Generated/FREERTOS/tasks.c **** 
3499:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3500:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5498              	 .loc 1 3500 0
 5499              	 .cfi_startproc
 5500              	 
 5501              	 
 5502 0000 80B5     	 push {r7,lr}
 5503              	.LCFI231:
 5504              	 .cfi_def_cfa_offset 8
 5505              	 .cfi_offset 7,-8
 5506              	 .cfi_offset 14,-4
 5507 0002 86B0     	 sub sp,sp,#24
 5508              	.LCFI232:
 5509              	 .cfi_def_cfa_offset 32
 5510 0004 00AF     	 add r7,sp,#0
 5511              	.LCFI233:
 5512              	 .cfi_def_cfa_register 7
 5513 0006 F860     	 str r0,[r7,#12]
 5514 0008 B960     	 str r1,[r7,#8]
 5515 000a 7A60     	 str r2,[r7,#4]
 5516 000c FB70     	 strb r3,[r7,#3]
3501:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3502:../Dave/Generated/FREERTOS/tasks.c **** 
3503:../Dave/Generated/FREERTOS/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3504:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5517              	 .loc 1 3504 0
 5518 000e FB68     	 ldr r3,[r7,#12]
 5519 0010 002B     	 cmp r3,#0
 5520 0012 02D1     	 bne .L368
 5521              	 .loc 1 3504 0 is_stmt 0 discriminator 1
 5522 0014 2B4B     	 ldr r3,.L377
 5523 0016 1B68     	 ldr r3,[r3]
 5524 0018 00E0     	 b .L369
 5525              	.L368:
 5526              	 .loc 1 3504 0 discriminator 2
 5527 001a FB68     	 ldr r3,[r7,#12]
 5528              	.L369:
 5529              	 .loc 1 3504 0 discriminator 4
 5530 001c 7B61     	 str r3,[r7,#20]
3505:../Dave/Generated/FREERTOS/tasks.c **** 
3506:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 5531              	 .loc 1 3506 0 is_stmt 1 discriminator 4
 5532 001e BB68     	 ldr r3,[r7,#8]
 5533 0020 7A69     	 ldr r2,[r7,#20]
 5534 0022 1A60     	 str r2,[r3]
3507:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 5535              	 .loc 1 3507 0 discriminator 4
 5536 0024 7B69     	 ldr r3,[r7,#20]
 5537 0026 03F13402 	 add r2,r3,#52
 5538 002a BB68     	 ldr r3,[r7,#8]
 5539 002c 5A60     	 str r2,[r3,#4]
3508:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5540              	 .loc 1 3508 0 discriminator 4
 5541 002e 7B69     	 ldr r3,[r7,#20]
 5542 0030 DA6A     	 ldr r2,[r3,#44]
 5543 0032 BB68     	 ldr r3,[r7,#8]
 5544 0034 1A61     	 str r2,[r3,#16]
3509:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5545              	 .loc 1 3509 0 discriminator 4
 5546 0036 7B69     	 ldr r3,[r7,#20]
 5547 0038 1A6B     	 ldr r2,[r3,#48]
 5548 003a BB68     	 ldr r3,[r7,#8]
 5549 003c DA61     	 str r2,[r3,#28]
3510:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5550              	 .loc 1 3510 0 discriminator 4
 5551 003e 7B69     	 ldr r3,[r7,#20]
 5552 0040 5A6C     	 ldr r2,[r3,#68]
 5553 0042 BB68     	 ldr r3,[r7,#8]
 5554 0044 9A60     	 str r2,[r3,#8]
3511:../Dave/Generated/FREERTOS/tasks.c **** 
3512:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3513:../Dave/Generated/FREERTOS/tasks.c **** 		{
3514:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 5555              	 .loc 1 3514 0 discriminator 4
 5556 0046 7B69     	 ldr r3,[r7,#20]
 5557 0048 DA6C     	 ldr r2,[r3,#76]
 5558 004a BB68     	 ldr r3,[r7,#8]
 5559 004c 5A61     	 str r2,[r3,#20]
3515:../Dave/Generated/FREERTOS/tasks.c **** 		}
3516:../Dave/Generated/FREERTOS/tasks.c **** 		#else
3517:../Dave/Generated/FREERTOS/tasks.c **** 		{
3518:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3519:../Dave/Generated/FREERTOS/tasks.c **** 		}
3520:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
3521:../Dave/Generated/FREERTOS/tasks.c **** 
3522:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3523:../Dave/Generated/FREERTOS/tasks.c **** 		{
3524:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3525:../Dave/Generated/FREERTOS/tasks.c **** 		}
3526:../Dave/Generated/FREERTOS/tasks.c **** 		#else
3527:../Dave/Generated/FREERTOS/tasks.c **** 		{
3528:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
 5560              	 .loc 1 3528 0 discriminator 4
 5561 004e BB68     	 ldr r3,[r7,#8]
 5562 0050 0022     	 movs r2,#0
 5563 0052 9A61     	 str r2,[r3,#24]
3529:../Dave/Generated/FREERTOS/tasks.c **** 		}
3530:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
3531:../Dave/Generated/FREERTOS/tasks.c **** 
3532:../Dave/Generated/FREERTOS/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3533:../Dave/Generated/FREERTOS/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3534:../Dave/Generated/FREERTOS/tasks.c **** 		state is just set to whatever is passed in. */
3535:../Dave/Generated/FREERTOS/tasks.c **** 		if( eState != eInvalid )
 5564              	 .loc 1 3535 0 discriminator 4
 5565 0054 FB78     	 ldrb r3,[r7,#3]
 5566 0056 052B     	 cmp r3,#5
 5567 0058 1AD0     	 beq .L370
3536:../Dave/Generated/FREERTOS/tasks.c **** 		{
3537:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 5568              	 .loc 1 3537 0
 5569 005a 1A4B     	 ldr r3,.L377
 5570 005c 1B68     	 ldr r3,[r3]
 5571 005e 7A69     	 ldr r2,[r7,#20]
 5572 0060 9A42     	 cmp r2,r3
 5573 0062 03D1     	 bne .L371
3538:../Dave/Generated/FREERTOS/tasks.c **** 			{
3539:../Dave/Generated/FREERTOS/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
 5574              	 .loc 1 3539 0
 5575 0064 BB68     	 ldr r3,[r7,#8]
 5576 0066 0022     	 movs r2,#0
 5577 0068 1A73     	 strb r2,[r3,#12]
 5578 006a 18E0     	 b .L374
 5579              	.L371:
3540:../Dave/Generated/FREERTOS/tasks.c **** 			}
3541:../Dave/Generated/FREERTOS/tasks.c **** 			else
3542:../Dave/Generated/FREERTOS/tasks.c **** 			{
3543:../Dave/Generated/FREERTOS/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
 5580              	 .loc 1 3543 0
 5581 006c BB68     	 ldr r3,[r7,#8]
 5582 006e FA78     	 ldrb r2,[r7,#3]
 5583 0070 1A73     	 strb r2,[r3,#12]
3544:../Dave/Generated/FREERTOS/tasks.c **** 
3545:../Dave/Generated/FREERTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3546:../Dave/Generated/FREERTOS/tasks.c **** 				{
3547:../Dave/Generated/FREERTOS/tasks.c **** 					/* If the task is in the suspended list then there is a
3548:../Dave/Generated/FREERTOS/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3549:../Dave/Generated/FREERTOS/tasks.c **** 					it should be reported as being in the Blocked state. */
3550:../Dave/Generated/FREERTOS/tasks.c **** 					if( eState == eSuspended )
 5584              	 .loc 1 3550 0
 5585 0072 FB78     	 ldrb r3,[r7,#3]
 5586 0074 032B     	 cmp r3,#3
 5587 0076 12D1     	 bne .L374
3551:../Dave/Generated/FREERTOS/tasks.c **** 					{
3552:../Dave/Generated/FREERTOS/tasks.c **** 						vTaskSuspendAll();
 5588              	 .loc 1 3552 0
 5589 0078 FFF7FEFF 	 bl vTaskSuspendAll
3553:../Dave/Generated/FREERTOS/tasks.c **** 						{
3554:../Dave/Generated/FREERTOS/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 5590              	 .loc 1 3554 0
 5591 007c 7B69     	 ldr r3,[r7,#20]
 5592 007e 9B6A     	 ldr r3,[r3,#40]
 5593 0080 002B     	 cmp r3,#0
 5594 0082 02D0     	 beq .L373
3555:../Dave/Generated/FREERTOS/tasks.c **** 							{
3556:../Dave/Generated/FREERTOS/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
 5595              	 .loc 1 3556 0
 5596 0084 BB68     	 ldr r3,[r7,#8]
 5597 0086 0222     	 movs r2,#2
 5598 0088 1A73     	 strb r2,[r3,#12]
 5599              	.L373:
3557:../Dave/Generated/FREERTOS/tasks.c **** 							}
3558:../Dave/Generated/FREERTOS/tasks.c **** 						}
3559:../Dave/Generated/FREERTOS/tasks.c **** 						( void ) xTaskResumeAll();
 5600              	 .loc 1 3559 0
 5601 008a FFF7FEFF 	 bl xTaskResumeAll
 5602 008e 06E0     	 b .L374
 5603              	.L370:
3560:../Dave/Generated/FREERTOS/tasks.c **** 					}
3561:../Dave/Generated/FREERTOS/tasks.c **** 				}
3562:../Dave/Generated/FREERTOS/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3563:../Dave/Generated/FREERTOS/tasks.c **** 			}
3564:../Dave/Generated/FREERTOS/tasks.c **** 		}
3565:../Dave/Generated/FREERTOS/tasks.c **** 		else
3566:../Dave/Generated/FREERTOS/tasks.c **** 		{
3567:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 5604              	 .loc 1 3567 0
 5605 0090 7869     	 ldr r0,[r7,#20]
 5606 0092 FFF7FEFF 	 bl eTaskGetState
 5607 0096 0346     	 mov r3,r0
 5608 0098 1A46     	 mov r2,r3
 5609 009a BB68     	 ldr r3,[r7,#8]
 5610 009c 1A73     	 strb r2,[r3,#12]
 5611              	.L374:
3568:../Dave/Generated/FREERTOS/tasks.c **** 		}
3569:../Dave/Generated/FREERTOS/tasks.c **** 
3570:../Dave/Generated/FREERTOS/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3571:../Dave/Generated/FREERTOS/tasks.c **** 		parameter is provided to allow it to be skipped. */
3572:../Dave/Generated/FREERTOS/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
 5612              	 .loc 1 3572 0
 5613 009e 7B68     	 ldr r3,[r7,#4]
 5614 00a0 002B     	 cmp r3,#0
 5615 00a2 09D0     	 beq .L375
3573:../Dave/Generated/FREERTOS/tasks.c **** 		{
3574:../Dave/Generated/FREERTOS/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3575:../Dave/Generated/FREERTOS/tasks.c **** 			{
3576:../Dave/Generated/FREERTOS/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3577:../Dave/Generated/FREERTOS/tasks.c **** 			}
3578:../Dave/Generated/FREERTOS/tasks.c **** 			#else
3579:../Dave/Generated/FREERTOS/tasks.c **** 			{
3580:../Dave/Generated/FREERTOS/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
 5616              	 .loc 1 3580 0
 5617 00a4 7B69     	 ldr r3,[r7,#20]
 5618 00a6 1B6B     	 ldr r3,[r3,#48]
 5619 00a8 1846     	 mov r0,r3
 5620 00aa FFF7FEFF 	 bl prvTaskCheckFreeStackSpace
 5621 00ae 0346     	 mov r3,r0
 5622 00b0 1A46     	 mov r2,r3
 5623 00b2 BB68     	 ldr r3,[r7,#8]
 5624 00b4 1A84     	 strh r2,[r3,#32]
 5625 00b6 02E0     	 b .L367
 5626              	.L375:
3581:../Dave/Generated/FREERTOS/tasks.c **** 			}
3582:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
3583:../Dave/Generated/FREERTOS/tasks.c **** 		}
3584:../Dave/Generated/FREERTOS/tasks.c **** 		else
3585:../Dave/Generated/FREERTOS/tasks.c **** 		{
3586:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
 5627              	 .loc 1 3586 0
 5628 00b8 BB68     	 ldr r3,[r7,#8]
 5629 00ba 0022     	 movs r2,#0
 5630 00bc 1A84     	 strh r2,[r3,#32]
 5631              	.L367:
3587:../Dave/Generated/FREERTOS/tasks.c **** 		}
3588:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5632              	 .loc 1 3588 0
 5633 00be 1837     	 adds r7,r7,#24
 5634              	.LCFI234:
 5635              	 .cfi_def_cfa_offset 8
 5636 00c0 BD46     	 mov sp,r7
 5637              	.LCFI235:
 5638              	 .cfi_def_cfa_register 13
 5639              	 
 5640 00c2 80BD     	 pop {r7,pc}
 5641              	.L378:
 5642              	 .align 2
 5643              	.L377:
 5644 00c4 00000000 	 .word pxCurrentTCB
 5645              	 .cfi_endproc
 5646              	.LFE180:
 5648              	 .section .text.prvListTasksWithinSingleList,"ax",%progbits
 5649              	 .align 2
 5650              	 .thumb
 5651              	 .thumb_func
 5653              	prvListTasksWithinSingleList:
 5654              	.LFB181:
3589:../Dave/Generated/FREERTOS/tasks.c **** 
3590:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3591:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3592:../Dave/Generated/FREERTOS/tasks.c **** 
3593:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3594:../Dave/Generated/FREERTOS/tasks.c **** 
3595:../Dave/Generated/FREERTOS/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3596:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5655              	 .loc 1 3596 0
 5656              	 .cfi_startproc
 5657              	 
 5658              	 
 5659 0000 80B5     	 push {r7,lr}
 5660              	.LCFI236:
 5661              	 .cfi_def_cfa_offset 8
 5662              	 .cfi_offset 7,-8
 5663              	 .cfi_offset 14,-4
 5664 0002 8AB0     	 sub sp,sp,#40
 5665              	.LCFI237:
 5666              	 .cfi_def_cfa_offset 48
 5667 0004 00AF     	 add r7,sp,#0
 5668              	.LCFI238:
 5669              	 .cfi_def_cfa_register 7
 5670 0006 F860     	 str r0,[r7,#12]
 5671 0008 B960     	 str r1,[r7,#8]
 5672 000a 1346     	 mov r3,r2
 5673 000c FB71     	 strb r3,[r7,#7]
3597:../Dave/Generated/FREERTOS/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3598:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTask = 0;
 5674              	 .loc 1 3598 0
 5675 000e 0023     	 movs r3,#0
 5676 0010 7B62     	 str r3,[r7,#36]
3599:../Dave/Generated/FREERTOS/tasks.c **** 
3600:../Dave/Generated/FREERTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 5677              	 .loc 1 3600 0
 5678 0012 BB68     	 ldr r3,[r7,#8]
 5679 0014 1B68     	 ldr r3,[r3]
 5680 0016 002B     	 cmp r3,#0
 5681 0018 40D0     	 beq .L380
 5682              	.LBB196:
3601:../Dave/Generated/FREERTOS/tasks.c **** 		{
3602:../Dave/Generated/FREERTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 5683              	 .loc 1 3602 0
 5684 001a BB68     	 ldr r3,[r7,#8]
 5685 001c 3B62     	 str r3,[r7,#32]
 5686 001e 3B6A     	 ldr r3,[r7,#32]
 5687 0020 5B68     	 ldr r3,[r3,#4]
 5688 0022 5A68     	 ldr r2,[r3,#4]
 5689 0024 3B6A     	 ldr r3,[r7,#32]
 5690 0026 5A60     	 str r2,[r3,#4]
 5691 0028 3B6A     	 ldr r3,[r7,#32]
 5692 002a 5A68     	 ldr r2,[r3,#4]
 5693 002c 3B6A     	 ldr r3,[r7,#32]
 5694 002e 0833     	 adds r3,r3,#8
 5695 0030 9A42     	 cmp r2,r3
 5696 0032 04D1     	 bne .L381
 5697              	 .loc 1 3602 0 is_stmt 0 discriminator 1
 5698 0034 3B6A     	 ldr r3,[r7,#32]
 5699 0036 5B68     	 ldr r3,[r3,#4]
 5700 0038 5A68     	 ldr r2,[r3,#4]
 5701 003a 3B6A     	 ldr r3,[r7,#32]
 5702 003c 5A60     	 str r2,[r3,#4]
 5703              	.L381:
 5704              	 .loc 1 3602 0 discriminator 3
 5705 003e 3B6A     	 ldr r3,[r7,#32]
 5706 0040 5B68     	 ldr r3,[r3,#4]
 5707 0042 DB68     	 ldr r3,[r3,#12]
 5708 0044 FB61     	 str r3,[r7,#28]
 5709              	.L383:
 5710              	.LBE196:
 5711              	.LBB197:
3603:../Dave/Generated/FREERTOS/tasks.c **** 
3604:../Dave/Generated/FREERTOS/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3605:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3606:../Dave/Generated/FREERTOS/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3607:../Dave/Generated/FREERTOS/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3608:../Dave/Generated/FREERTOS/tasks.c **** 			do
3609:../Dave/Generated/FREERTOS/tasks.c **** 			{
3610:../Dave/Generated/FREERTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 5712              	 .loc 1 3610 0 is_stmt 1
 5713 0046 BB68     	 ldr r3,[r7,#8]
 5714 0048 BB61     	 str r3,[r7,#24]
 5715 004a BB69     	 ldr r3,[r7,#24]
 5716 004c 5B68     	 ldr r3,[r3,#4]
 5717 004e 5A68     	 ldr r2,[r3,#4]
 5718 0050 BB69     	 ldr r3,[r7,#24]
 5719 0052 5A60     	 str r2,[r3,#4]
 5720 0054 BB69     	 ldr r3,[r7,#24]
 5721 0056 5A68     	 ldr r2,[r3,#4]
 5722 0058 BB69     	 ldr r3,[r7,#24]
 5723 005a 0833     	 adds r3,r3,#8
 5724 005c 9A42     	 cmp r2,r3
 5725 005e 04D1     	 bne .L382
 5726              	 .loc 1 3610 0 is_stmt 0 discriminator 1
 5727 0060 BB69     	 ldr r3,[r7,#24]
 5728 0062 5B68     	 ldr r3,[r3,#4]
 5729 0064 5A68     	 ldr r2,[r3,#4]
 5730 0066 BB69     	 ldr r3,[r7,#24]
 5731 0068 5A60     	 str r2,[r3,#4]
 5732              	.L382:
 5733              	 .loc 1 3610 0 discriminator 3
 5734 006a BB69     	 ldr r3,[r7,#24]
 5735 006c 5B68     	 ldr r3,[r3,#4]
 5736 006e DB68     	 ldr r3,[r3,#12]
 5737 0070 7B61     	 str r3,[r7,#20]
 5738              	.LBE197:
3611:../Dave/Generated/FREERTOS/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5739              	 .loc 1 3611 0 is_stmt 1 discriminator 3
 5740 0072 7A6A     	 ldr r2,[r7,#36]
 5741 0074 1346     	 mov r3,r2
 5742 0076 DB00     	 lsls r3,r3,#3
 5743 0078 1344     	 add r3,r3,r2
 5744 007a 9B00     	 lsls r3,r3,#2
 5745 007c 1A46     	 mov r2,r3
 5746 007e FB68     	 ldr r3,[r7,#12]
 5747 0080 1A44     	 add r2,r2,r3
 5748 0082 FB79     	 ldrb r3,[r7,#7]
 5749 0084 7869     	 ldr r0,[r7,#20]
 5750 0086 1146     	 mov r1,r2
 5751 0088 0122     	 movs r2,#1
 5752 008a FFF7FEFF 	 bl vTaskGetInfo
3612:../Dave/Generated/FREERTOS/tasks.c **** 				uxTask++;
 5753              	 .loc 1 3612 0 discriminator 3
 5754 008e 7B6A     	 ldr r3,[r7,#36]
 5755 0090 0133     	 adds r3,r3,#1
 5756 0092 7B62     	 str r3,[r7,#36]
3613:../Dave/Generated/FREERTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 5757              	 .loc 1 3613 0 discriminator 3
 5758 0094 7A69     	 ldr r2,[r7,#20]
 5759 0096 FB69     	 ldr r3,[r7,#28]
 5760 0098 9A42     	 cmp r2,r3
 5761 009a D4D1     	 bne .L383
 5762              	.L380:
3614:../Dave/Generated/FREERTOS/tasks.c **** 		}
3615:../Dave/Generated/FREERTOS/tasks.c **** 		else
3616:../Dave/Generated/FREERTOS/tasks.c **** 		{
3617:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3618:../Dave/Generated/FREERTOS/tasks.c **** 		}
3619:../Dave/Generated/FREERTOS/tasks.c **** 
3620:../Dave/Generated/FREERTOS/tasks.c **** 		return uxTask;
 5763              	 .loc 1 3620 0
 5764 009c 7B6A     	 ldr r3,[r7,#36]
3621:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5765              	 .loc 1 3621 0
 5766 009e 1846     	 mov r0,r3
 5767 00a0 2837     	 adds r7,r7,#40
 5768              	.LCFI239:
 5769              	 .cfi_def_cfa_offset 8
 5770 00a2 BD46     	 mov sp,r7
 5771              	.LCFI240:
 5772              	 .cfi_def_cfa_register 13
 5773              	 
 5774 00a4 80BD     	 pop {r7,pc}
 5775              	 .cfi_endproc
 5776              	.LFE181:
 5778 00a6 00BF     	 .section .text.prvTaskCheckFreeStackSpace,"ax",%progbits
 5779              	 .align 2
 5780              	 .thumb
 5781              	 .thumb_func
 5783              	prvTaskCheckFreeStackSpace:
 5784              	.LFB182:
3622:../Dave/Generated/FREERTOS/tasks.c **** 
3623:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3624:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3625:../Dave/Generated/FREERTOS/tasks.c **** 
3626:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3627:../Dave/Generated/FREERTOS/tasks.c **** 
3628:../Dave/Generated/FREERTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3629:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5785              	 .loc 1 3629 0
 5786              	 .cfi_startproc
 5787              	 
 5788              	 
 5789              	 
 5790 0000 80B4     	 push {r7}
 5791              	.LCFI241:
 5792              	 .cfi_def_cfa_offset 4
 5793              	 .cfi_offset 7,-4
 5794 0002 85B0     	 sub sp,sp,#20
 5795              	.LCFI242:
 5796              	 .cfi_def_cfa_offset 24
 5797 0004 00AF     	 add r7,sp,#0
 5798              	.LCFI243:
 5799              	 .cfi_def_cfa_register 7
 5800 0006 7860     	 str r0,[r7,#4]
3630:../Dave/Generated/FREERTOS/tasks.c **** 	uint32_t ulCount = 0U;
 5801              	 .loc 1 3630 0
 5802 0008 0023     	 movs r3,#0
 5803 000a FB60     	 str r3,[r7,#12]
3631:../Dave/Generated/FREERTOS/tasks.c **** 
3632:../Dave/Generated/FREERTOS/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 5804              	 .loc 1 3632 0
 5805 000c 05E0     	 b .L386
 5806              	.L387:
3633:../Dave/Generated/FREERTOS/tasks.c **** 		{
3634:../Dave/Generated/FREERTOS/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 5807              	 .loc 1 3634 0
 5808 000e 7B68     	 ldr r3,[r7,#4]
 5809 0010 0133     	 adds r3,r3,#1
 5810 0012 7B60     	 str r3,[r7,#4]
3635:../Dave/Generated/FREERTOS/tasks.c **** 			ulCount++;
 5811              	 .loc 1 3635 0
 5812 0014 FB68     	 ldr r3,[r7,#12]
 5813 0016 0133     	 adds r3,r3,#1
 5814 0018 FB60     	 str r3,[r7,#12]
 5815              	.L386:
3632:../Dave/Generated/FREERTOS/tasks.c **** 		{
 5816              	 .loc 1 3632 0
 5817 001a 7B68     	 ldr r3,[r7,#4]
 5818 001c 1B78     	 ldrb r3,[r3]
 5819 001e A52B     	 cmp r3,#165
 5820 0020 F5D0     	 beq .L387
3636:../Dave/Generated/FREERTOS/tasks.c **** 		}
3637:../Dave/Generated/FREERTOS/tasks.c **** 
3638:../Dave/Generated/FREERTOS/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 5821              	 .loc 1 3638 0
 5822 0022 FB68     	 ldr r3,[r7,#12]
 5823 0024 9B08     	 lsrs r3,r3,#2
 5824 0026 FB60     	 str r3,[r7,#12]
3639:../Dave/Generated/FREERTOS/tasks.c **** 
3640:../Dave/Generated/FREERTOS/tasks.c **** 		return ( uint16_t ) ulCount;
 5825              	 .loc 1 3640 0
 5826 0028 FB68     	 ldr r3,[r7,#12]
 5827 002a 9BB2     	 uxth r3,r3
3641:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5828              	 .loc 1 3641 0
 5829 002c 1846     	 mov r0,r3
 5830 002e 1437     	 adds r7,r7,#20
 5831              	.LCFI244:
 5832              	 .cfi_def_cfa_offset 4
 5833 0030 BD46     	 mov sp,r7
 5834              	.LCFI245:
 5835              	 .cfi_def_cfa_register 13
 5836              	 
 5837 0032 5DF8047B 	 ldr r7,[sp],#4
 5838              	.LCFI246:
 5839              	 .cfi_restore 7
 5840              	 .cfi_def_cfa_offset 0
 5841 0036 7047     	 bx lr
 5842              	 .cfi_endproc
 5843              	.LFE182:
 5845              	 .section .text.uxTaskGetStackHighWaterMark,"ax",%progbits
 5846              	 .align 2
 5847              	 .global uxTaskGetStackHighWaterMark
 5848              	 .thumb
 5849              	 .thumb_func
 5851              	uxTaskGetStackHighWaterMark:
 5852              	.LFB183:
3642:../Dave/Generated/FREERTOS/tasks.c **** 
3643:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3644:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3645:../Dave/Generated/FREERTOS/tasks.c **** 
3646:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3647:../Dave/Generated/FREERTOS/tasks.c **** 
3648:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3649:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5853              	 .loc 1 3649 0
 5854              	 .cfi_startproc
 5855              	 
 5856              	 
 5857 0000 80B5     	 push {r7,lr}
 5858              	.LCFI247:
 5859              	 .cfi_def_cfa_offset 8
 5860              	 .cfi_offset 7,-8
 5861              	 .cfi_offset 14,-4
 5862 0002 86B0     	 sub sp,sp,#24
 5863              	.LCFI248:
 5864              	 .cfi_def_cfa_offset 32
 5865 0004 00AF     	 add r7,sp,#0
 5866              	.LCFI249:
 5867              	 .cfi_def_cfa_register 7
 5868 0006 7860     	 str r0,[r7,#4]
3650:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3651:../Dave/Generated/FREERTOS/tasks.c **** 	uint8_t *pucEndOfStack;
3652:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxReturn;
3653:../Dave/Generated/FREERTOS/tasks.c **** 
3654:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5869              	 .loc 1 3654 0
 5870 0008 7B68     	 ldr r3,[r7,#4]
 5871 000a 002B     	 cmp r3,#0
 5872 000c 02D1     	 bne .L390
 5873              	 .loc 1 3654 0 is_stmt 0 discriminator 1
 5874 000e 094B     	 ldr r3,.L393
 5875 0010 1B68     	 ldr r3,[r3]
 5876 0012 00E0     	 b .L391
 5877              	.L390:
 5878              	 .loc 1 3654 0 discriminator 2
 5879 0014 7B68     	 ldr r3,[r7,#4]
 5880              	.L391:
 5881              	 .loc 1 3654 0 discriminator 4
 5882 0016 7B61     	 str r3,[r7,#20]
3655:../Dave/Generated/FREERTOS/tasks.c **** 
3656:../Dave/Generated/FREERTOS/tasks.c **** 		#if portSTACK_GROWTH < 0
3657:../Dave/Generated/FREERTOS/tasks.c **** 		{
3658:../Dave/Generated/FREERTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 5883              	 .loc 1 3658 0 is_stmt 1 discriminator 4
 5884 0018 7B69     	 ldr r3,[r7,#20]
 5885 001a 1B6B     	 ldr r3,[r3,#48]
 5886 001c 3B61     	 str r3,[r7,#16]
3659:../Dave/Generated/FREERTOS/tasks.c **** 		}
3660:../Dave/Generated/FREERTOS/tasks.c **** 		#else
3661:../Dave/Generated/FREERTOS/tasks.c **** 		{
3662:../Dave/Generated/FREERTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3663:../Dave/Generated/FREERTOS/tasks.c **** 		}
3664:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
3665:../Dave/Generated/FREERTOS/tasks.c **** 
3666:../Dave/Generated/FREERTOS/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 5887              	 .loc 1 3666 0 discriminator 4
 5888 001e 3869     	 ldr r0,[r7,#16]
 5889 0020 FFF7FEFF 	 bl prvTaskCheckFreeStackSpace
 5890 0024 0346     	 mov r3,r0
 5891 0026 FB60     	 str r3,[r7,#12]
3667:../Dave/Generated/FREERTOS/tasks.c **** 
3668:../Dave/Generated/FREERTOS/tasks.c **** 		return uxReturn;
 5892              	 .loc 1 3668 0 discriminator 4
 5893 0028 FB68     	 ldr r3,[r7,#12]
3669:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5894              	 .loc 1 3669 0 discriminator 4
 5895 002a 1846     	 mov r0,r3
 5896 002c 1837     	 adds r7,r7,#24
 5897              	.LCFI250:
 5898              	 .cfi_def_cfa_offset 8
 5899 002e BD46     	 mov sp,r7
 5900              	.LCFI251:
 5901              	 .cfi_def_cfa_register 13
 5902              	 
 5903 0030 80BD     	 pop {r7,pc}
 5904              	.L394:
 5905 0032 00BF     	 .align 2
 5906              	.L393:
 5907 0034 00000000 	 .word pxCurrentTCB
 5908              	 .cfi_endproc
 5909              	.LFE183:
 5911              	 .section .text.prvDeleteTCB,"ax",%progbits
 5912              	 .align 2
 5913              	 .thumb
 5914              	 .thumb_func
 5916              	prvDeleteTCB:
 5917              	.LFB184:
3670:../Dave/Generated/FREERTOS/tasks.c **** 
3671:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3672:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3673:../Dave/Generated/FREERTOS/tasks.c **** 
3674:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3675:../Dave/Generated/FREERTOS/tasks.c **** 
3676:../Dave/Generated/FREERTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3677:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5918              	 .loc 1 3677 0
 5919              	 .cfi_startproc
 5920              	 
 5921              	 
 5922 0000 80B5     	 push {r7,lr}
 5923              	.LCFI252:
 5924              	 .cfi_def_cfa_offset 8
 5925              	 .cfi_offset 7,-8
 5926              	 .cfi_offset 14,-4
 5927 0002 82B0     	 sub sp,sp,#8
 5928              	.LCFI253:
 5929              	 .cfi_def_cfa_offset 16
 5930 0004 00AF     	 add r7,sp,#0
 5931              	.LCFI254:
 5932              	 .cfi_def_cfa_register 7
 5933 0006 7860     	 str r0,[r7,#4]
3678:../Dave/Generated/FREERTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3679:../Dave/Generated/FREERTOS/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3680:../Dave/Generated/FREERTOS/tasks.c **** 		want to allocate and clean RAM statically. */
3681:../Dave/Generated/FREERTOS/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3682:../Dave/Generated/FREERTOS/tasks.c **** 
3683:../Dave/Generated/FREERTOS/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3684:../Dave/Generated/FREERTOS/tasks.c **** 		to the task to free any memory allocated at the application level. */
3685:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3686:../Dave/Generated/FREERTOS/tasks.c **** 		{
3687:../Dave/Generated/FREERTOS/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3688:../Dave/Generated/FREERTOS/tasks.c **** 		}
3689:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3690:../Dave/Generated/FREERTOS/tasks.c **** 
3691:../Dave/Generated/FREERTOS/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3692:../Dave/Generated/FREERTOS/tasks.c **** 		{
3693:../Dave/Generated/FREERTOS/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3694:../Dave/Generated/FREERTOS/tasks.c **** 			the stack and TCB. */
3695:../Dave/Generated/FREERTOS/tasks.c **** 			vPortFree( pxTCB->pxStack );
 5934              	 .loc 1 3695 0
 5935 0008 7B68     	 ldr r3,[r7,#4]
 5936 000a 1B6B     	 ldr r3,[r3,#48]
 5937 000c 1846     	 mov r0,r3
 5938 000e FFF7FEFF 	 bl vPortFree
3696:../Dave/Generated/FREERTOS/tasks.c **** 			vPortFree( pxTCB );
 5939              	 .loc 1 3696 0
 5940 0012 7868     	 ldr r0,[r7,#4]
 5941 0014 FFF7FEFF 	 bl vPortFree
3697:../Dave/Generated/FREERTOS/tasks.c **** 		}
3698:../Dave/Generated/FREERTOS/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated 
3699:../Dave/Generated/FREERTOS/tasks.c **** 		{
3700:../Dave/Generated/FREERTOS/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3701:../Dave/Generated/FREERTOS/tasks.c **** 			check what was statically allocated before trying to free the
3702:../Dave/Generated/FREERTOS/tasks.c **** 			memory. */
3703:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3704:../Dave/Generated/FREERTOS/tasks.c **** 			{
3705:../Dave/Generated/FREERTOS/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3706:../Dave/Generated/FREERTOS/tasks.c **** 				must be freed. */
3707:../Dave/Generated/FREERTOS/tasks.c **** 				vPortFree( pxTCB->pxStack );
3708:../Dave/Generated/FREERTOS/tasks.c **** 				vPortFree( pxTCB );
3709:../Dave/Generated/FREERTOS/tasks.c **** 			}
3710:../Dave/Generated/FREERTOS/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3711:../Dave/Generated/FREERTOS/tasks.c **** 			{
3712:../Dave/Generated/FREERTOS/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3713:../Dave/Generated/FREERTOS/tasks.c **** 				only memory that must be freed. */
3714:../Dave/Generated/FREERTOS/tasks.c **** 				vPortFree( pxTCB );
3715:../Dave/Generated/FREERTOS/tasks.c **** 			}
3716:../Dave/Generated/FREERTOS/tasks.c **** 			else
3717:../Dave/Generated/FREERTOS/tasks.c **** 			{
3718:../Dave/Generated/FREERTOS/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3719:../Dave/Generated/FREERTOS/tasks.c **** 				nothing needs to be freed. */
3720:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3721:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3722:../Dave/Generated/FREERTOS/tasks.c **** 			}
3723:../Dave/Generated/FREERTOS/tasks.c **** 		}
3724:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3725:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5942              	 .loc 1 3725 0
 5943 0018 0837     	 adds r7,r7,#8
 5944              	.LCFI255:
 5945              	 .cfi_def_cfa_offset 8
 5946 001a BD46     	 mov sp,r7
 5947              	.LCFI256:
 5948              	 .cfi_def_cfa_register 13
 5949              	 
 5950 001c 80BD     	 pop {r7,pc}
 5951              	 .cfi_endproc
 5952              	.LFE184:
 5954 001e 00BF     	 .section .text.prvResetNextTaskUnblockTime,"ax",%progbits
 5955              	 .align 2
 5956              	 .thumb
 5957              	 .thumb_func
 5959              	prvResetNextTaskUnblockTime:
 5960              	.LFB185:
3726:../Dave/Generated/FREERTOS/tasks.c **** 
3727:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3728:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3729:../Dave/Generated/FREERTOS/tasks.c **** 
3730:../Dave/Generated/FREERTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3731:../Dave/Generated/FREERTOS/tasks.c **** {
 5961              	 .loc 1 3731 0
 5962              	 .cfi_startproc
 5963              	 
 5964              	 
 5965              	 
 5966 0000 80B4     	 push {r7}
 5967              	.LCFI257:
 5968              	 .cfi_def_cfa_offset 4
 5969              	 .cfi_offset 7,-4
 5970 0002 83B0     	 sub sp,sp,#12
 5971              	.LCFI258:
 5972              	 .cfi_def_cfa_offset 16
 5973 0004 00AF     	 add r7,sp,#0
 5974              	.LCFI259:
 5975              	 .cfi_def_cfa_register 7
3732:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxTCB;
3733:../Dave/Generated/FREERTOS/tasks.c **** 
3734:../Dave/Generated/FREERTOS/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 5976              	 .loc 1 3734 0
 5977 0006 0E4B     	 ldr r3,.L401
 5978 0008 1B68     	 ldr r3,[r3]
 5979 000a 1B68     	 ldr r3,[r3]
 5980 000c 002B     	 cmp r3,#0
 5981 000e 01D1     	 bne .L397
 5982              	 .loc 1 3734 0 is_stmt 0 discriminator 1
 5983 0010 0123     	 movs r3,#1
 5984 0012 00E0     	 b .L398
 5985              	.L397:
 5986              	 .loc 1 3734 0 discriminator 2
 5987 0014 0023     	 movs r3,#0
 5988              	.L398:
 5989              	 .loc 1 3734 0 discriminator 4
 5990 0016 002B     	 cmp r3,#0
 5991 0018 04D0     	 beq .L399
3735:../Dave/Generated/FREERTOS/tasks.c **** 	{
3736:../Dave/Generated/FREERTOS/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3737:../Dave/Generated/FREERTOS/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3738:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3739:../Dave/Generated/FREERTOS/tasks.c **** 		there is an item in the delayed list. */
3740:../Dave/Generated/FREERTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 5992              	 .loc 1 3740 0 is_stmt 1
 5993 001a 0A4B     	 ldr r3,.L401+4
 5994 001c 4FF0FF32 	 mov r2,#-1
 5995 0020 1A60     	 str r2,[r3]
 5996 0022 08E0     	 b .L396
 5997              	.L399:
3741:../Dave/Generated/FREERTOS/tasks.c **** 	}
3742:../Dave/Generated/FREERTOS/tasks.c **** 	else
3743:../Dave/Generated/FREERTOS/tasks.c **** 	{
3744:../Dave/Generated/FREERTOS/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3745:../Dave/Generated/FREERTOS/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3746:../Dave/Generated/FREERTOS/tasks.c **** 		which the task at the head of the delayed list should be removed
3747:../Dave/Generated/FREERTOS/tasks.c **** 		from the Blocked state. */
3748:../Dave/Generated/FREERTOS/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 5998              	 .loc 1 3748 0
 5999 0024 064B     	 ldr r3,.L401
 6000 0026 1B68     	 ldr r3,[r3]
 6001 0028 DB68     	 ldr r3,[r3,#12]
 6002 002a DB68     	 ldr r3,[r3,#12]
 6003 002c 7B60     	 str r3,[r7,#4]
3749:../Dave/Generated/FREERTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 6004              	 .loc 1 3749 0
 6005 002e 7B68     	 ldr r3,[r7,#4]
 6006 0030 5B68     	 ldr r3,[r3,#4]
 6007 0032 044A     	 ldr r2,.L401+4
 6008 0034 1360     	 str r3,[r2]
 6009              	.L396:
3750:../Dave/Generated/FREERTOS/tasks.c **** 	}
3751:../Dave/Generated/FREERTOS/tasks.c **** }
 6010              	 .loc 1 3751 0
 6011 0036 0C37     	 adds r7,r7,#12
 6012              	.LCFI260:
 6013              	 .cfi_def_cfa_offset 4
 6014 0038 BD46     	 mov sp,r7
 6015              	.LCFI261:
 6016              	 .cfi_def_cfa_register 13
 6017              	 
 6018 003a 5DF8047B 	 ldr r7,[sp],#4
 6019              	.LCFI262:
 6020              	 .cfi_restore 7
 6021              	 .cfi_def_cfa_offset 0
 6022 003e 7047     	 bx lr
 6023              	.L402:
 6024              	 .align 2
 6025              	.L401:
 6026 0040 00000000 	 .word pxDelayedTaskList
 6027 0044 00000000 	 .word xNextTaskUnblockTime
 6028              	 .cfi_endproc
 6029              	.LFE185:
 6031              	 .section .text.xTaskGetCurrentTaskHandle,"ax",%progbits
 6032              	 .align 2
 6033              	 .global xTaskGetCurrentTaskHandle
 6034              	 .thumb
 6035              	 .thumb_func
 6037              	xTaskGetCurrentTaskHandle:
 6038              	.LFB186:
3752:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3753:../Dave/Generated/FREERTOS/tasks.c **** 
3754:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3755:../Dave/Generated/FREERTOS/tasks.c **** 
3756:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3757:../Dave/Generated/FREERTOS/tasks.c **** 	{
 6039              	 .loc 1 3757 0
 6040              	 .cfi_startproc
 6041              	 
 6042              	 
 6043              	 
 6044 0000 80B4     	 push {r7}
 6045              	.LCFI263:
 6046              	 .cfi_def_cfa_offset 4
 6047              	 .cfi_offset 7,-4
 6048 0002 83B0     	 sub sp,sp,#12
 6049              	.LCFI264:
 6050              	 .cfi_def_cfa_offset 16
 6051 0004 00AF     	 add r7,sp,#0
 6052              	.LCFI265:
 6053              	 .cfi_def_cfa_register 7
3758:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xReturn;
3759:../Dave/Generated/FREERTOS/tasks.c **** 
3760:../Dave/Generated/FREERTOS/tasks.c **** 		/* A critical section is not required as this is not called from
3761:../Dave/Generated/FREERTOS/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3762:../Dave/Generated/FREERTOS/tasks.c **** 		individual execution thread. */
3763:../Dave/Generated/FREERTOS/tasks.c **** 		xReturn = pxCurrentTCB;
 6054              	 .loc 1 3763 0
 6055 0006 054B     	 ldr r3,.L405
 6056 0008 1B68     	 ldr r3,[r3]
 6057 000a 7B60     	 str r3,[r7,#4]
3764:../Dave/Generated/FREERTOS/tasks.c **** 
3765:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 6058              	 .loc 1 3765 0
 6059 000c 7B68     	 ldr r3,[r7,#4]
3766:../Dave/Generated/FREERTOS/tasks.c **** 	}
 6060              	 .loc 1 3766 0
 6061 000e 1846     	 mov r0,r3
 6062 0010 0C37     	 adds r7,r7,#12
 6063              	.LCFI266:
 6064              	 .cfi_def_cfa_offset 4
 6065 0012 BD46     	 mov sp,r7
 6066              	.LCFI267:
 6067              	 .cfi_def_cfa_register 13
 6068              	 
 6069 0014 5DF8047B 	 ldr r7,[sp],#4
 6070              	.LCFI268:
 6071              	 .cfi_restore 7
 6072              	 .cfi_def_cfa_offset 0
 6073 0018 7047     	 bx lr
 6074              	.L406:
 6075 001a 00BF     	 .align 2
 6076              	.L405:
 6077 001c 00000000 	 .word pxCurrentTCB
 6078              	 .cfi_endproc
 6079              	.LFE186:
 6081              	 .section .text.xTaskGetSchedulerState,"ax",%progbits
 6082              	 .align 2
 6083              	 .global xTaskGetSchedulerState
 6084              	 .thumb
 6085              	 .thumb_func
 6087              	xTaskGetSchedulerState:
 6088              	.LFB187:
3767:../Dave/Generated/FREERTOS/tasks.c **** 
3768:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3769:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3770:../Dave/Generated/FREERTOS/tasks.c **** 
3771:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3772:../Dave/Generated/FREERTOS/tasks.c **** 
3773:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3774:../Dave/Generated/FREERTOS/tasks.c **** 	{
 6089              	 .loc 1 3774 0
 6090              	 .cfi_startproc
 6091              	 
 6092              	 
 6093              	 
 6094 0000 80B4     	 push {r7}
 6095              	.LCFI269:
 6096              	 .cfi_def_cfa_offset 4
 6097              	 .cfi_offset 7,-4
 6098 0002 83B0     	 sub sp,sp,#12
 6099              	.LCFI270:
 6100              	 .cfi_def_cfa_offset 16
 6101 0004 00AF     	 add r7,sp,#0
 6102              	.LCFI271:
 6103              	 .cfi_def_cfa_register 7
3775:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
3776:../Dave/Generated/FREERTOS/tasks.c **** 
3777:../Dave/Generated/FREERTOS/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 6104              	 .loc 1 3777 0
 6105 0006 0B4B     	 ldr r3,.L412
 6106 0008 1B68     	 ldr r3,[r3]
 6107 000a 002B     	 cmp r3,#0
 6108 000c 02D1     	 bne .L408
3778:../Dave/Generated/FREERTOS/tasks.c **** 		{
3779:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 6109              	 .loc 1 3779 0
 6110 000e 0123     	 movs r3,#1
 6111 0010 7B60     	 str r3,[r7,#4]
 6112 0012 08E0     	 b .L409
 6113              	.L408:
3780:../Dave/Generated/FREERTOS/tasks.c **** 		}
3781:../Dave/Generated/FREERTOS/tasks.c **** 		else
3782:../Dave/Generated/FREERTOS/tasks.c **** 		{
3783:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6114              	 .loc 1 3783 0
 6115 0014 084B     	 ldr r3,.L412+4
 6116 0016 1B68     	 ldr r3,[r3]
 6117 0018 002B     	 cmp r3,#0
 6118 001a 02D1     	 bne .L410
3784:../Dave/Generated/FREERTOS/tasks.c **** 			{
3785:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 6119              	 .loc 1 3785 0
 6120 001c 0223     	 movs r3,#2
 6121 001e 7B60     	 str r3,[r7,#4]
 6122 0020 01E0     	 b .L409
 6123              	.L410:
3786:../Dave/Generated/FREERTOS/tasks.c **** 			}
3787:../Dave/Generated/FREERTOS/tasks.c **** 			else
3788:../Dave/Generated/FREERTOS/tasks.c **** 			{
3789:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 6124              	 .loc 1 3789 0
 6125 0022 0023     	 movs r3,#0
 6126 0024 7B60     	 str r3,[r7,#4]
 6127              	.L409:
3790:../Dave/Generated/FREERTOS/tasks.c **** 			}
3791:../Dave/Generated/FREERTOS/tasks.c **** 		}
3792:../Dave/Generated/FREERTOS/tasks.c **** 
3793:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 6128              	 .loc 1 3793 0
 6129 0026 7B68     	 ldr r3,[r7,#4]
3794:../Dave/Generated/FREERTOS/tasks.c **** 	}
 6130              	 .loc 1 3794 0
 6131 0028 1846     	 mov r0,r3
 6132 002a 0C37     	 adds r7,r7,#12
 6133              	.LCFI272:
 6134              	 .cfi_def_cfa_offset 4
 6135 002c BD46     	 mov sp,r7
 6136              	.LCFI273:
 6137              	 .cfi_def_cfa_register 13
 6138              	 
 6139 002e 5DF8047B 	 ldr r7,[sp],#4
 6140              	.LCFI274:
 6141              	 .cfi_restore 7
 6142              	 .cfi_def_cfa_offset 0
 6143 0032 7047     	 bx lr
 6144              	.L413:
 6145              	 .align 2
 6146              	.L412:
 6147 0034 00000000 	 .word xSchedulerRunning
 6148 0038 00000000 	 .word uxSchedulerSuspended
 6149              	 .cfi_endproc
 6150              	.LFE187:
 6152              	 .section .text.xTaskPriorityInherit,"ax",%progbits
 6153              	 .align 2
 6154              	 .global xTaskPriorityInherit
 6155              	 .thumb
 6156              	 .thumb_func
 6158              	xTaskPriorityInherit:
 6159              	.LFB188:
3795:../Dave/Generated/FREERTOS/tasks.c **** 
3796:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3797:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3798:../Dave/Generated/FREERTOS/tasks.c **** 
3799:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3800:../Dave/Generated/FREERTOS/tasks.c **** 
3801:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3802:../Dave/Generated/FREERTOS/tasks.c **** 	{
 6160              	 .loc 1 3802 0
 6161              	 .cfi_startproc
 6162              	 
 6163              	 
 6164 0000 80B5     	 push {r7,lr}
 6165              	.LCFI275:
 6166              	 .cfi_def_cfa_offset 8
 6167              	 .cfi_offset 7,-8
 6168              	 .cfi_offset 14,-4
 6169 0002 84B0     	 sub sp,sp,#16
 6170              	.LCFI276:
 6171              	 .cfi_def_cfa_offset 24
 6172 0004 00AF     	 add r7,sp,#0
 6173              	.LCFI277:
 6174              	 .cfi_def_cfa_register 7
 6175 0006 7860     	 str r0,[r7,#4]
3803:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 6176              	 .loc 1 3803 0
 6177 0008 7B68     	 ldr r3,[r7,#4]
 6178 000a BB60     	 str r3,[r7,#8]
3804:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6179              	 .loc 1 3804 0
 6180 000c 0023     	 movs r3,#0
 6181 000e FB60     	 str r3,[r7,#12]
3805:../Dave/Generated/FREERTOS/tasks.c **** 
3806:../Dave/Generated/FREERTOS/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3807:../Dave/Generated/FREERTOS/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3808:../Dave/Generated/FREERTOS/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3809:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 6182              	 .loc 1 3809 0
 6183 0010 7B68     	 ldr r3,[r7,#4]
 6184 0012 002B     	 cmp r3,#0
 6185 0014 70D0     	 beq .L415
3810:../Dave/Generated/FREERTOS/tasks.c **** 		{
3811:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3812:../Dave/Generated/FREERTOS/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3813:../Dave/Generated/FREERTOS/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3814:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 6186              	 .loc 1 3814 0
 6187 0016 BB68     	 ldr r3,[r7,#8]
 6188 0018 DA6A     	 ldr r2,[r3,#44]
 6189 001a 3A4B     	 ldr r3,.L425
 6190 001c 1B68     	 ldr r3,[r3]
 6191 001e DB6A     	 ldr r3,[r3,#44]
 6192 0020 9A42     	 cmp r2,r3
 6193 0022 60D2     	 bcs .L416
3815:../Dave/Generated/FREERTOS/tasks.c **** 			{
3816:../Dave/Generated/FREERTOS/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3817:../Dave/Generated/FREERTOS/tasks.c **** 				priority.  Only reset the event list item value if the value is
3818:../Dave/Generated/FREERTOS/tasks.c **** 				not being used for anything else. */
3819:../Dave/Generated/FREERTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
 6194              	 .loc 1 3819 0
 6195 0024 BB68     	 ldr r3,[r7,#8]
 6196 0026 9B69     	 ldr r3,[r3,#24]
 6197 0028 002B     	 cmp r3,#0
 6198 002a 06DB     	 blt .L417
3820:../Dave/Generated/FREERTOS/tasks.c **** 				{
3821:../Dave/Generated/FREERTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
 6199              	 .loc 1 3821 0
 6200 002c 354B     	 ldr r3,.L425
 6201 002e 1B68     	 ldr r3,[r3]
 6202 0030 DB6A     	 ldr r3,[r3,#44]
 6203 0032 C3F10502 	 rsb r2,r3,#5
 6204 0036 BB68     	 ldr r3,[r7,#8]
 6205 0038 9A61     	 str r2,[r3,#24]
 6206              	.L417:
3822:../Dave/Generated/FREERTOS/tasks.c **** 				}
3823:../Dave/Generated/FREERTOS/tasks.c **** 				else
3824:../Dave/Generated/FREERTOS/tasks.c **** 				{
3825:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3826:../Dave/Generated/FREERTOS/tasks.c **** 				}
3827:../Dave/Generated/FREERTOS/tasks.c **** 
3828:../Dave/Generated/FREERTOS/tasks.c **** 				/* If the task being modified is in the ready state it will need
3829:../Dave/Generated/FREERTOS/tasks.c **** 				to be moved into a new list. */
3830:../Dave/Generated/FREERTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
 6207              	 .loc 1 3830 0
 6208 003a BB68     	 ldr r3,[r7,#8]
 6209 003c 5969     	 ldr r1,[r3,#20]
 6210 003e BB68     	 ldr r3,[r7,#8]
 6211 0040 DA6A     	 ldr r2,[r3,#44]
 6212 0042 1346     	 mov r3,r2
 6213 0044 9B00     	 lsls r3,r3,#2
 6214 0046 1344     	 add r3,r3,r2
 6215 0048 9B00     	 lsls r3,r3,#2
 6216 004a 2F4A     	 ldr r2,.L425+4
 6217 004c 1344     	 add r3,r3,r2
 6218 004e 9942     	 cmp r1,r3
 6219 0050 01D1     	 bne .L418
 6220              	 .loc 1 3830 0 is_stmt 0 discriminator 1
 6221 0052 0123     	 movs r3,#1
 6222 0054 00E0     	 b .L419
 6223              	.L418:
 6224              	 .loc 1 3830 0 discriminator 2
 6225 0056 0023     	 movs r3,#0
 6226              	.L419:
 6227              	 .loc 1 3830 0 discriminator 4
 6228 0058 002B     	 cmp r3,#0
 6229 005a 3CD0     	 beq .L420
3831:../Dave/Generated/FREERTOS/tasks.c **** 				{
3832:../Dave/Generated/FREERTOS/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6230              	 .loc 1 3832 0 is_stmt 1
 6231 005c BB68     	 ldr r3,[r7,#8]
 6232 005e 0433     	 adds r3,r3,#4
 6233 0060 1846     	 mov r0,r3
 6234 0062 FFF7FEFF 	 bl uxListRemove
 6235 0066 0346     	 mov r3,r0
 6236 0068 002B     	 cmp r3,#0
 6237 006a 15D1     	 bne .L421
3833:../Dave/Generated/FREERTOS/tasks.c **** 					{
3834:../Dave/Generated/FREERTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 6238              	 .loc 1 3834 0
 6239 006c BB68     	 ldr r3,[r7,#8]
 6240 006e DA6A     	 ldr r2,[r3,#44]
 6241 0070 2549     	 ldr r1,.L425+4
 6242 0072 1346     	 mov r3,r2
 6243 0074 9B00     	 lsls r3,r3,#2
 6244 0076 1344     	 add r3,r3,r2
 6245 0078 9B00     	 lsls r3,r3,#2
 6246 007a 0B44     	 add r3,r3,r1
 6247 007c 1B68     	 ldr r3,[r3]
 6248 007e 002B     	 cmp r3,#0
 6249 0080 0AD1     	 bne .L421
 6250              	 .loc 1 3834 0 is_stmt 0 discriminator 1
 6251 0082 BB68     	 ldr r3,[r7,#8]
 6252 0084 DB6A     	 ldr r3,[r3,#44]
 6253 0086 1A46     	 mov r2,r3
 6254 0088 0123     	 movs r3,#1
 6255 008a 9340     	 lsls r3,r3,r2
 6256 008c DA43     	 mvns r2,r3
 6257 008e 1F4B     	 ldr r3,.L425+8
 6258 0090 1B68     	 ldr r3,[r3]
 6259 0092 1340     	 ands r3,r3,r2
 6260 0094 1D4A     	 ldr r2,.L425+8
 6261 0096 1360     	 str r3,[r2]
 6262              	.L421:
3835:../Dave/Generated/FREERTOS/tasks.c **** 					}
3836:../Dave/Generated/FREERTOS/tasks.c **** 					else
3837:../Dave/Generated/FREERTOS/tasks.c **** 					{
3838:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3839:../Dave/Generated/FREERTOS/tasks.c **** 					}
3840:../Dave/Generated/FREERTOS/tasks.c **** 
3841:../Dave/Generated/FREERTOS/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3842:../Dave/Generated/FREERTOS/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6263              	 .loc 1 3842 0 is_stmt 1
 6264 0098 1A4B     	 ldr r3,.L425
 6265 009a 1B68     	 ldr r3,[r3]
 6266 009c DA6A     	 ldr r2,[r3,#44]
 6267 009e BB68     	 ldr r3,[r7,#8]
 6268 00a0 DA62     	 str r2,[r3,#44]
3843:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 6269              	 .loc 1 3843 0
 6270 00a2 BB68     	 ldr r3,[r7,#8]
 6271 00a4 DB6A     	 ldr r3,[r3,#44]
 6272 00a6 1A46     	 mov r2,r3
 6273 00a8 0123     	 movs r3,#1
 6274 00aa 03FA02F2 	 lsl r2,r3,r2
 6275 00ae 174B     	 ldr r3,.L425+8
 6276 00b0 1B68     	 ldr r3,[r3]
 6277 00b2 1343     	 orrs r3,r3,r2
 6278 00b4 154A     	 ldr r2,.L425+8
 6279 00b6 1360     	 str r3,[r2]
 6280 00b8 BB68     	 ldr r3,[r7,#8]
 6281 00ba DA6A     	 ldr r2,[r3,#44]
 6282 00bc 1346     	 mov r3,r2
 6283 00be 9B00     	 lsls r3,r3,#2
 6284 00c0 1344     	 add r3,r3,r2
 6285 00c2 9B00     	 lsls r3,r3,#2
 6286 00c4 104A     	 ldr r2,.L425+4
 6287 00c6 1A44     	 add r2,r2,r3
 6288 00c8 BB68     	 ldr r3,[r7,#8]
 6289 00ca 0433     	 adds r3,r3,#4
 6290 00cc 1046     	 mov r0,r2
 6291 00ce 1946     	 mov r1,r3
 6292 00d0 FFF7FEFF 	 bl vListInsertEnd
 6293 00d4 04E0     	 b .L423
 6294              	.L420:
3844:../Dave/Generated/FREERTOS/tasks.c **** 				}
3845:../Dave/Generated/FREERTOS/tasks.c **** 				else
3846:../Dave/Generated/FREERTOS/tasks.c **** 				{
3847:../Dave/Generated/FREERTOS/tasks.c **** 					/* Just inherit the priority. */
3848:../Dave/Generated/FREERTOS/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6295              	 .loc 1 3848 0
 6296 00d6 0B4B     	 ldr r3,.L425
 6297 00d8 1B68     	 ldr r3,[r3]
 6298 00da DA6A     	 ldr r2,[r3,#44]
 6299 00dc BB68     	 ldr r3,[r7,#8]
 6300 00de DA62     	 str r2,[r3,#44]
 6301              	.L423:
3849:../Dave/Generated/FREERTOS/tasks.c **** 				}
3850:../Dave/Generated/FREERTOS/tasks.c **** 
3851:../Dave/Generated/FREERTOS/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3852:../Dave/Generated/FREERTOS/tasks.c **** 
3853:../Dave/Generated/FREERTOS/tasks.c **** 				/* Inheritance occurred. */
3854:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdTRUE;
 6302              	 .loc 1 3854 0
 6303 00e0 0123     	 movs r3,#1
 6304 00e2 FB60     	 str r3,[r7,#12]
 6305 00e4 08E0     	 b .L415
 6306              	.L416:
3855:../Dave/Generated/FREERTOS/tasks.c **** 			}
3856:../Dave/Generated/FREERTOS/tasks.c **** 			else
3857:../Dave/Generated/FREERTOS/tasks.c **** 			{
3858:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 6307              	 .loc 1 3858 0
 6308 00e6 BB68     	 ldr r3,[r7,#8]
 6309 00e8 DA6C     	 ldr r2,[r3,#76]
 6310 00ea 064B     	 ldr r3,.L425
 6311 00ec 1B68     	 ldr r3,[r3]
 6312 00ee DB6A     	 ldr r3,[r3,#44]
 6313 00f0 9A42     	 cmp r2,r3
 6314 00f2 01D2     	 bcs .L415
3859:../Dave/Generated/FREERTOS/tasks.c **** 				{
3860:../Dave/Generated/FREERTOS/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3861:../Dave/Generated/FREERTOS/tasks.c **** 					priority of the task attempting to take the mutex, but the
3862:../Dave/Generated/FREERTOS/tasks.c **** 					current priority of the mutex holder is not lower than the
3863:../Dave/Generated/FREERTOS/tasks.c **** 					priority of the task attempting to take the mutex.
3864:../Dave/Generated/FREERTOS/tasks.c **** 					Therefore the mutex holder must have already inherited a
3865:../Dave/Generated/FREERTOS/tasks.c **** 					priority, but inheritance would have occurred if that had
3866:../Dave/Generated/FREERTOS/tasks.c **** 					not been the case. */
3867:../Dave/Generated/FREERTOS/tasks.c **** 					xReturn = pdTRUE;
 6315              	 .loc 1 3867 0
 6316 00f4 0123     	 movs r3,#1
 6317 00f6 FB60     	 str r3,[r7,#12]
 6318              	.L415:
3868:../Dave/Generated/FREERTOS/tasks.c **** 				}
3869:../Dave/Generated/FREERTOS/tasks.c **** 				else
3870:../Dave/Generated/FREERTOS/tasks.c **** 				{
3871:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3872:../Dave/Generated/FREERTOS/tasks.c **** 				}
3873:../Dave/Generated/FREERTOS/tasks.c **** 			}
3874:../Dave/Generated/FREERTOS/tasks.c **** 		}
3875:../Dave/Generated/FREERTOS/tasks.c **** 		else
3876:../Dave/Generated/FREERTOS/tasks.c **** 		{
3877:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3878:../Dave/Generated/FREERTOS/tasks.c **** 		}
3879:../Dave/Generated/FREERTOS/tasks.c **** 
3880:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 6319              	 .loc 1 3880 0
 6320 00f8 FB68     	 ldr r3,[r7,#12]
3881:../Dave/Generated/FREERTOS/tasks.c **** 	}
 6321              	 .loc 1 3881 0
 6322 00fa 1846     	 mov r0,r3
 6323 00fc 1037     	 adds r7,r7,#16
 6324              	.LCFI278:
 6325              	 .cfi_def_cfa_offset 8
 6326 00fe BD46     	 mov sp,r7
 6327              	.LCFI279:
 6328              	 .cfi_def_cfa_register 13
 6329              	 
 6330 0100 80BD     	 pop {r7,pc}
 6331              	.L426:
 6332 0102 00BF     	 .align 2
 6333              	.L425:
 6334 0104 00000000 	 .word pxCurrentTCB
 6335 0108 00000000 	 .word pxReadyTasksLists
 6336 010c 00000000 	 .word uxTopReadyPriority
 6337              	 .cfi_endproc
 6338              	.LFE188:
 6340              	 .section .text.xTaskPriorityDisinherit,"ax",%progbits
 6341              	 .align 2
 6342              	 .global xTaskPriorityDisinherit
 6343              	 .thumb
 6344              	 .thumb_func
 6346              	xTaskPriorityDisinherit:
 6347              	.LFB189:
3882:../Dave/Generated/FREERTOS/tasks.c **** 
3883:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3884:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3885:../Dave/Generated/FREERTOS/tasks.c **** 
3886:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3887:../Dave/Generated/FREERTOS/tasks.c **** 
3888:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3889:../Dave/Generated/FREERTOS/tasks.c **** 	{
 6348              	 .loc 1 3889 0
 6349              	 .cfi_startproc
 6350              	 
 6351              	 
 6352 0000 80B5     	 push {r7,lr}
 6353              	.LCFI280:
 6354              	 .cfi_def_cfa_offset 8
 6355              	 .cfi_offset 7,-8
 6356              	 .cfi_offset 14,-4
 6357 0002 86B0     	 sub sp,sp,#24
 6358              	.LCFI281:
 6359              	 .cfi_def_cfa_offset 32
 6360 0004 00AF     	 add r7,sp,#0
 6361              	.LCFI282:
 6362              	 .cfi_def_cfa_register 7
 6363 0006 7860     	 str r0,[r7,#4]
3890:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 6364              	 .loc 1 3890 0
 6365 0008 7B68     	 ldr r3,[r7,#4]
 6366 000a 3B61     	 str r3,[r7,#16]
3891:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6367              	 .loc 1 3891 0
 6368 000c 0023     	 movs r3,#0
 6369 000e 7B61     	 str r3,[r7,#20]
3892:../Dave/Generated/FREERTOS/tasks.c **** 
3893:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 6370              	 .loc 1 3893 0
 6371 0010 7B68     	 ldr r3,[r7,#4]
 6372 0012 002B     	 cmp r3,#0
 6373 0014 6ED0     	 beq .L428
3894:../Dave/Generated/FREERTOS/tasks.c **** 		{
3895:../Dave/Generated/FREERTOS/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3896:../Dave/Generated/FREERTOS/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3897:../Dave/Generated/FREERTOS/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3898:../Dave/Generated/FREERTOS/tasks.c **** 			be the running state task. */
3899:../Dave/Generated/FREERTOS/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 6374              	 .loc 1 3899 0
 6375 0016 3A4B     	 ldr r3,.L436
 6376 0018 1B68     	 ldr r3,[r3]
 6377 001a 3A69     	 ldr r2,[r7,#16]
 6378 001c 9A42     	 cmp r2,r3
 6379 001e 09D0     	 beq .L429
 6380              	.LBB198:
 6381              	.LBB199:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 6382              	 .loc 2 195 0 discriminator 1
 6383              	
 6384 0020 4FF0FC03 	 mov r3,#252
 6385 0024 83F31188 	 msr basepri,r3
 6386 0028 BFF36F8F 	 isb 
 6387 002c BFF34F8F 	 dsb 
 6388              	
 6389              	
 6390              	 .thumb
 6391 0030 FB60     	 str r3,[r7,#12]
 6392              	.L430:
 6393              	.LBE199:
 6394              	.LBE198:
 6395              	 .loc 1 3899 0 discriminator 1
 6396 0032 FEE7     	 b .L430
 6397              	.L429:
3900:../Dave/Generated/FREERTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6398              	 .loc 1 3900 0
 6399 0034 3B69     	 ldr r3,[r7,#16]
 6400 0036 1B6D     	 ldr r3,[r3,#80]
 6401 0038 002B     	 cmp r3,#0
 6402 003a 09D1     	 bne .L431
 6403              	.LBB200:
 6404              	.LBB201:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 6405              	 .loc 2 195 0 discriminator 1
 6406              	
 6407 003c 4FF0FC03 	 mov r3,#252
 6408 0040 83F31188 	 msr basepri,r3
 6409 0044 BFF36F8F 	 isb 
 6410 0048 BFF34F8F 	 dsb 
 6411              	
 6412              	
 6413              	 .thumb
 6414 004c BB60     	 str r3,[r7,#8]
 6415              	.L432:
 6416              	.LBE201:
 6417              	.LBE200:
 6418              	 .loc 1 3900 0 discriminator 2
 6419 004e FEE7     	 b .L432
 6420              	.L431:
3901:../Dave/Generated/FREERTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6421              	 .loc 1 3901 0
 6422 0050 3B69     	 ldr r3,[r7,#16]
 6423 0052 1B6D     	 ldr r3,[r3,#80]
 6424 0054 5A1E     	 subs r2,r3,#1
 6425 0056 3B69     	 ldr r3,[r7,#16]
 6426 0058 1A65     	 str r2,[r3,#80]
3902:../Dave/Generated/FREERTOS/tasks.c **** 
3903:../Dave/Generated/FREERTOS/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3904:../Dave/Generated/FREERTOS/tasks.c **** 			task? */
3905:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 6427              	 .loc 1 3905 0
 6428 005a 3B69     	 ldr r3,[r7,#16]
 6429 005c DA6A     	 ldr r2,[r3,#44]
 6430 005e 3B69     	 ldr r3,[r7,#16]
 6431 0060 DB6C     	 ldr r3,[r3,#76]
 6432 0062 9A42     	 cmp r2,r3
 6433 0064 46D0     	 beq .L428
3906:../Dave/Generated/FREERTOS/tasks.c **** 			{
3907:../Dave/Generated/FREERTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3908:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 6434              	 .loc 1 3908 0
 6435 0066 3B69     	 ldr r3,[r7,#16]
 6436 0068 1B6D     	 ldr r3,[r3,#80]
 6437 006a 002B     	 cmp r3,#0
 6438 006c 42D1     	 bne .L428
3909:../Dave/Generated/FREERTOS/tasks.c **** 				{
3910:../Dave/Generated/FREERTOS/tasks.c **** 					/* A task can only have an inherited priority if it holds
3911:../Dave/Generated/FREERTOS/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3912:../Dave/Generated/FREERTOS/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3913:../Dave/Generated/FREERTOS/tasks.c **** 					holding task then it must be the running state task.  Remove
3914:../Dave/Generated/FREERTOS/tasks.c **** 					the holding task from the ready list. */
3915:../Dave/Generated/FREERTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6439              	 .loc 1 3915 0
 6440 006e 3B69     	 ldr r3,[r7,#16]
 6441 0070 0433     	 adds r3,r3,#4
 6442 0072 1846     	 mov r0,r3
 6443 0074 FFF7FEFF 	 bl uxListRemove
 6444 0078 0346     	 mov r3,r0
 6445 007a 002B     	 cmp r3,#0
 6446 007c 15D1     	 bne .L433
3916:../Dave/Generated/FREERTOS/tasks.c **** 					{
3917:../Dave/Generated/FREERTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 6447              	 .loc 1 3917 0
 6448 007e 3B69     	 ldr r3,[r7,#16]
 6449 0080 DA6A     	 ldr r2,[r3,#44]
 6450 0082 2049     	 ldr r1,.L436+4
 6451 0084 1346     	 mov r3,r2
 6452 0086 9B00     	 lsls r3,r3,#2
 6453 0088 1344     	 add r3,r3,r2
 6454 008a 9B00     	 lsls r3,r3,#2
 6455 008c 0B44     	 add r3,r3,r1
 6456 008e 1B68     	 ldr r3,[r3]
 6457 0090 002B     	 cmp r3,#0
 6458 0092 0AD1     	 bne .L433
 6459              	 .loc 1 3917 0 is_stmt 0 discriminator 1
 6460 0094 3B69     	 ldr r3,[r7,#16]
 6461 0096 DB6A     	 ldr r3,[r3,#44]
 6462 0098 1A46     	 mov r2,r3
 6463 009a 0123     	 movs r3,#1
 6464 009c 9340     	 lsls r3,r3,r2
 6465 009e DA43     	 mvns r2,r3
 6466 00a0 194B     	 ldr r3,.L436+8
 6467 00a2 1B68     	 ldr r3,[r3]
 6468 00a4 1340     	 ands r3,r3,r2
 6469 00a6 184A     	 ldr r2,.L436+8
 6470 00a8 1360     	 str r3,[r2]
 6471              	.L433:
3918:../Dave/Generated/FREERTOS/tasks.c **** 					}
3919:../Dave/Generated/FREERTOS/tasks.c **** 					else
3920:../Dave/Generated/FREERTOS/tasks.c **** 					{
3921:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3922:../Dave/Generated/FREERTOS/tasks.c **** 					}
3923:../Dave/Generated/FREERTOS/tasks.c **** 
3924:../Dave/Generated/FREERTOS/tasks.c **** 					/* Disinherit the priority before adding the task into the
3925:../Dave/Generated/FREERTOS/tasks.c **** 					new	ready list. */
3926:../Dave/Generated/FREERTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3927:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 6472              	 .loc 1 3927 0 is_stmt 1
 6473 00aa 3B69     	 ldr r3,[r7,#16]
 6474 00ac DA6C     	 ldr r2,[r3,#76]
 6475 00ae 3B69     	 ldr r3,[r7,#16]
 6476 00b0 DA62     	 str r2,[r3,#44]
3928:../Dave/Generated/FREERTOS/tasks.c **** 
3929:../Dave/Generated/FREERTOS/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3930:../Dave/Generated/FREERTOS/tasks.c **** 					any other purpose if this task is running, and it must be
3931:../Dave/Generated/FREERTOS/tasks.c **** 					running to give back the mutex. */
3932:../Dave/Generated/FREERTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 6477              	 .loc 1 3932 0
 6478 00b2 3B69     	 ldr r3,[r7,#16]
 6479 00b4 DB6A     	 ldr r3,[r3,#44]
 6480 00b6 C3F10502 	 rsb r2,r3,#5
 6481 00ba 3B69     	 ldr r3,[r7,#16]
 6482 00bc 9A61     	 str r2,[r3,#24]
3933:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6483              	 .loc 1 3933 0
 6484 00be 3B69     	 ldr r3,[r7,#16]
 6485 00c0 DB6A     	 ldr r3,[r3,#44]
 6486 00c2 1A46     	 mov r2,r3
 6487 00c4 0123     	 movs r3,#1
 6488 00c6 03FA02F2 	 lsl r2,r3,r2
 6489 00ca 0F4B     	 ldr r3,.L436+8
 6490 00cc 1B68     	 ldr r3,[r3]
 6491 00ce 1343     	 orrs r3,r3,r2
 6492 00d0 0D4A     	 ldr r2,.L436+8
 6493 00d2 1360     	 str r3,[r2]
 6494 00d4 3B69     	 ldr r3,[r7,#16]
 6495 00d6 DA6A     	 ldr r2,[r3,#44]
 6496 00d8 1346     	 mov r3,r2
 6497 00da 9B00     	 lsls r3,r3,#2
 6498 00dc 1344     	 add r3,r3,r2
 6499 00de 9B00     	 lsls r3,r3,#2
 6500 00e0 084A     	 ldr r2,.L436+4
 6501 00e2 1A44     	 add r2,r2,r3
 6502 00e4 3B69     	 ldr r3,[r7,#16]
 6503 00e6 0433     	 adds r3,r3,#4
 6504 00e8 1046     	 mov r0,r2
 6505 00ea 1946     	 mov r1,r3
 6506 00ec FFF7FEFF 	 bl vListInsertEnd
3934:../Dave/Generated/FREERTOS/tasks.c **** 
3935:../Dave/Generated/FREERTOS/tasks.c **** 					/* Return true to indicate that a context switch is required.
3936:../Dave/Generated/FREERTOS/tasks.c **** 					This is only actually required in the corner case whereby
3937:../Dave/Generated/FREERTOS/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3938:../Dave/Generated/FREERTOS/tasks.c **** 					in an order different to that in which they were taken.
3939:../Dave/Generated/FREERTOS/tasks.c **** 					If a context switch did not occur when the first mutex was
3940:../Dave/Generated/FREERTOS/tasks.c **** 					returned, even if a task was waiting on it, then a context
3941:../Dave/Generated/FREERTOS/tasks.c **** 					switch should occur when the last mutex is returned whether
3942:../Dave/Generated/FREERTOS/tasks.c **** 					a task is waiting on it or not. */
3943:../Dave/Generated/FREERTOS/tasks.c **** 					xReturn = pdTRUE;
 6507              	 .loc 1 3943 0
 6508 00f0 0123     	 movs r3,#1
 6509 00f2 7B61     	 str r3,[r7,#20]
 6510              	.L428:
3944:../Dave/Generated/FREERTOS/tasks.c **** 				}
3945:../Dave/Generated/FREERTOS/tasks.c **** 				else
3946:../Dave/Generated/FREERTOS/tasks.c **** 				{
3947:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3948:../Dave/Generated/FREERTOS/tasks.c **** 				}
3949:../Dave/Generated/FREERTOS/tasks.c **** 			}
3950:../Dave/Generated/FREERTOS/tasks.c **** 			else
3951:../Dave/Generated/FREERTOS/tasks.c **** 			{
3952:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3953:../Dave/Generated/FREERTOS/tasks.c **** 			}
3954:../Dave/Generated/FREERTOS/tasks.c **** 		}
3955:../Dave/Generated/FREERTOS/tasks.c **** 		else
3956:../Dave/Generated/FREERTOS/tasks.c **** 		{
3957:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3958:../Dave/Generated/FREERTOS/tasks.c **** 		}
3959:../Dave/Generated/FREERTOS/tasks.c **** 
3960:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 6511              	 .loc 1 3960 0
 6512 00f4 7B69     	 ldr r3,[r7,#20]
3961:../Dave/Generated/FREERTOS/tasks.c **** 	}
 6513              	 .loc 1 3961 0
 6514 00f6 1846     	 mov r0,r3
 6515 00f8 1837     	 adds r7,r7,#24
 6516              	.LCFI283:
 6517              	 .cfi_def_cfa_offset 8
 6518 00fa BD46     	 mov sp,r7
 6519              	.LCFI284:
 6520              	 .cfi_def_cfa_register 13
 6521              	 
 6522 00fc 80BD     	 pop {r7,pc}
 6523              	.L437:
 6524 00fe 00BF     	 .align 2
 6525              	.L436:
 6526 0100 00000000 	 .word pxCurrentTCB
 6527 0104 00000000 	 .word pxReadyTasksLists
 6528 0108 00000000 	 .word uxTopReadyPriority
 6529              	 .cfi_endproc
 6530              	.LFE189:
 6532              	 .section .text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 6533              	 .align 2
 6534              	 .global vTaskPriorityDisinheritAfterTimeout
 6535              	 .thumb
 6536              	 .thumb_func
 6538              	vTaskPriorityDisinheritAfterTimeout:
 6539              	.LFB190:
3962:../Dave/Generated/FREERTOS/tasks.c **** 
3963:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3964:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3965:../Dave/Generated/FREERTOS/tasks.c **** 
3966:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3967:../Dave/Generated/FREERTOS/tasks.c **** 
3968:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
3969:../Dave/Generated/FREERTOS/tasks.c **** 	{
 6540              	 .loc 1 3969 0
 6541              	 .cfi_startproc
 6542              	 
 6543              	 
 6544 0000 80B5     	 push {r7,lr}
 6545              	.LCFI285:
 6546              	 .cfi_def_cfa_offset 8
 6547              	 .cfi_offset 7,-8
 6548              	 .cfi_offset 14,-4
 6549 0002 88B0     	 sub sp,sp,#32
 6550              	.LCFI286:
 6551              	 .cfi_def_cfa_offset 40
 6552 0004 00AF     	 add r7,sp,#0
 6553              	.LCFI287:
 6554              	 .cfi_def_cfa_register 7
 6555 0006 7860     	 str r0,[r7,#4]
 6556 0008 3960     	 str r1,[r7]
3970:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 6557              	 .loc 1 3970 0
 6558 000a 7B68     	 ldr r3,[r7,#4]
 6559 000c BB61     	 str r3,[r7,#24]
3971:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
3972:../Dave/Generated/FREERTOS/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 6560              	 .loc 1 3972 0
 6561 000e 0123     	 movs r3,#1
 6562 0010 7B61     	 str r3,[r7,#20]
3973:../Dave/Generated/FREERTOS/tasks.c **** 
3974:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 6563              	 .loc 1 3974 0
 6564 0012 7B68     	 ldr r3,[r7,#4]
 6565 0014 002B     	 cmp r3,#0
 6566 0016 00F08880 	 beq .L438
3975:../Dave/Generated/FREERTOS/tasks.c **** 		{
3976:../Dave/Generated/FREERTOS/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
3977:../Dave/Generated/FREERTOS/tasks.c **** 			one mutex. */
3978:../Dave/Generated/FREERTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6567              	 .loc 1 3978 0
 6568 001a BB69     	 ldr r3,[r7,#24]
 6569 001c 1B6D     	 ldr r3,[r3,#80]
 6570 001e 002B     	 cmp r3,#0
 6571 0020 09D1     	 bne .L440
 6572              	.LBB202:
 6573              	.LBB203:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 6574              	 .loc 2 195 0 discriminator 1
 6575              	
 6576 0022 4FF0FC03 	 mov r3,#252
 6577 0026 83F31188 	 msr basepri,r3
 6578 002a BFF36F8F 	 isb 
 6579 002e BFF34F8F 	 dsb 
 6580              	
 6581              	
 6582              	 .thumb
 6583 0032 FB60     	 str r3,[r7,#12]
 6584              	.L441:
 6585              	.LBE203:
 6586              	.LBE202:
 6587              	 .loc 1 3978 0 discriminator 1
 6588 0034 FEE7     	 b .L441
 6589              	.L440:
3979:../Dave/Generated/FREERTOS/tasks.c **** 
3980:../Dave/Generated/FREERTOS/tasks.c **** 			/* Determine the priority to which the priority of the task that
3981:../Dave/Generated/FREERTOS/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
3982:../Dave/Generated/FREERTOS/tasks.c **** 			holding task's base priority and the priority of the highest
3983:../Dave/Generated/FREERTOS/tasks.c **** 			priority task that is waiting to obtain the mutex. */
3984:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 6590              	 .loc 1 3984 0
 6591 0036 BB69     	 ldr r3,[r7,#24]
 6592 0038 DA6C     	 ldr r2,[r3,#76]
 6593 003a 3B68     	 ldr r3,[r7]
 6594 003c 9A42     	 cmp r2,r3
 6595 003e 02D2     	 bcs .L442
3985:../Dave/Generated/FREERTOS/tasks.c **** 			{
3986:../Dave/Generated/FREERTOS/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
 6596              	 .loc 1 3986 0
 6597 0040 3B68     	 ldr r3,[r7]
 6598 0042 FB61     	 str r3,[r7,#28]
 6599 0044 02E0     	 b .L443
 6600              	.L442:
3987:../Dave/Generated/FREERTOS/tasks.c **** 			}
3988:../Dave/Generated/FREERTOS/tasks.c **** 			else
3989:../Dave/Generated/FREERTOS/tasks.c **** 			{
3990:../Dave/Generated/FREERTOS/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
 6601              	 .loc 1 3990 0
 6602 0046 BB69     	 ldr r3,[r7,#24]
 6603 0048 DB6C     	 ldr r3,[r3,#76]
 6604 004a FB61     	 str r3,[r7,#28]
 6605              	.L443:
3991:../Dave/Generated/FREERTOS/tasks.c **** 			}
3992:../Dave/Generated/FREERTOS/tasks.c **** 
3993:../Dave/Generated/FREERTOS/tasks.c **** 			/* Does the priority need to change? */
3994:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
 6606              	 .loc 1 3994 0
 6607 004c BB69     	 ldr r3,[r7,#24]
 6608 004e DA6A     	 ldr r2,[r3,#44]
 6609 0050 FB69     	 ldr r3,[r7,#28]
 6610 0052 9A42     	 cmp r2,r3
 6611 0054 69D0     	 beq .L438
3995:../Dave/Generated/FREERTOS/tasks.c **** 			{
3996:../Dave/Generated/FREERTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
3997:../Dave/Generated/FREERTOS/tasks.c **** 				simplification in the priority inheritance implementation.  If
3998:../Dave/Generated/FREERTOS/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
3999:../Dave/Generated/FREERTOS/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4000:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 6612              	 .loc 1 4000 0
 6613 0056 BB69     	 ldr r3,[r7,#24]
 6614 0058 1A6D     	 ldr r2,[r3,#80]
 6615 005a 7B69     	 ldr r3,[r7,#20]
 6616 005c 9A42     	 cmp r2,r3
 6617 005e 64D1     	 bne .L438
4001:../Dave/Generated/FREERTOS/tasks.c **** 				{
4002:../Dave/Generated/FREERTOS/tasks.c **** 					/* If a task has timed out because it already holds the
4003:../Dave/Generated/FREERTOS/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4004:../Dave/Generated/FREERTOS/tasks.c **** 					its own priority. */
4005:../Dave/Generated/FREERTOS/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
 6618              	 .loc 1 4005 0
 6619 0060 334B     	 ldr r3,.L451
 6620 0062 1B68     	 ldr r3,[r3]
 6621 0064 BA69     	 ldr r2,[r7,#24]
 6622 0066 9A42     	 cmp r2,r3
 6623 0068 09D1     	 bne .L444
 6624              	.LBB204:
 6625              	.LBB205:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 6626              	 .loc 2 195 0 discriminator 1
 6627              	
 6628 006a 4FF0FC03 	 mov r3,#252
 6629 006e 83F31188 	 msr basepri,r3
 6630 0072 BFF36F8F 	 isb 
 6631 0076 BFF34F8F 	 dsb 
 6632              	
 6633              	
 6634              	 .thumb
 6635 007a BB60     	 str r3,[r7,#8]
 6636              	.L445:
 6637              	.LBE205:
 6638              	.LBE204:
 6639              	 .loc 1 4005 0 discriminator 2
 6640 007c FEE7     	 b .L445
 6641              	.L444:
4006:../Dave/Generated/FREERTOS/tasks.c **** 
4007:../Dave/Generated/FREERTOS/tasks.c **** 					/* Disinherit the priority, remembering the previous
4008:../Dave/Generated/FREERTOS/tasks.c **** 					priority to facilitate determining the subject task's
4009:../Dave/Generated/FREERTOS/tasks.c **** 					state. */
4010:../Dave/Generated/FREERTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4011:../Dave/Generated/FREERTOS/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 6642              	 .loc 1 4011 0
 6643 007e BB69     	 ldr r3,[r7,#24]
 6644 0080 DB6A     	 ldr r3,[r3,#44]
 6645 0082 3B61     	 str r3,[r7,#16]
4012:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 6646              	 .loc 1 4012 0
 6647 0084 BB69     	 ldr r3,[r7,#24]
 6648 0086 FA69     	 ldr r2,[r7,#28]
 6649 0088 DA62     	 str r2,[r3,#44]
4013:../Dave/Generated/FREERTOS/tasks.c **** 
4014:../Dave/Generated/FREERTOS/tasks.c **** 					/* Only reset the event list item value if the value is not
4015:../Dave/Generated/FREERTOS/tasks.c **** 					being used for anything else. */
4016:../Dave/Generated/FREERTOS/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
 6650              	 .loc 1 4016 0
 6651 008a BB69     	 ldr r3,[r7,#24]
 6652 008c 9B69     	 ldr r3,[r3,#24]
 6653 008e 002B     	 cmp r3,#0
 6654 0090 04DB     	 blt .L446
4017:../Dave/Generated/FREERTOS/tasks.c **** 					{
4018:../Dave/Generated/FREERTOS/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
 6655              	 .loc 1 4018 0
 6656 0092 FB69     	 ldr r3,[r7,#28]
 6657 0094 C3F10502 	 rsb r2,r3,#5
 6658 0098 BB69     	 ldr r3,[r7,#24]
 6659 009a 9A61     	 str r2,[r3,#24]
 6660              	.L446:
4019:../Dave/Generated/FREERTOS/tasks.c **** 					}
4020:../Dave/Generated/FREERTOS/tasks.c **** 					else
4021:../Dave/Generated/FREERTOS/tasks.c **** 					{
4022:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4023:../Dave/Generated/FREERTOS/tasks.c **** 					}
4024:../Dave/Generated/FREERTOS/tasks.c **** 
4025:../Dave/Generated/FREERTOS/tasks.c **** 					/* If the running task is not the task that holds the mutex
4026:../Dave/Generated/FREERTOS/tasks.c **** 					then the task that holds the mutex could be in either the
4027:../Dave/Generated/FREERTOS/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4028:../Dave/Generated/FREERTOS/tasks.c **** 					from its current state list if it is in the Ready state as
4029:../Dave/Generated/FREERTOS/tasks.c **** 					the task's priority is going to change and there is one
4030:../Dave/Generated/FREERTOS/tasks.c **** 					Ready list per priority. */
4031:../Dave/Generated/FREERTOS/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
 6661              	 .loc 1 4031 0
 6662 009c BB69     	 ldr r3,[r7,#24]
 6663 009e 5969     	 ldr r1,[r3,#20]
 6664 00a0 3A69     	 ldr r2,[r7,#16]
 6665 00a2 1346     	 mov r3,r2
 6666 00a4 9B00     	 lsls r3,r3,#2
 6667 00a6 1344     	 add r3,r3,r2
 6668 00a8 9B00     	 lsls r3,r3,#2
 6669 00aa 224A     	 ldr r2,.L451+4
 6670 00ac 1344     	 add r3,r3,r2
 6671 00ae 9942     	 cmp r1,r3
 6672 00b0 01D1     	 bne .L447
 6673              	 .loc 1 4031 0 is_stmt 0 discriminator 1
 6674 00b2 0123     	 movs r3,#1
 6675 00b4 00E0     	 b .L448
 6676              	.L447:
 6677              	 .loc 1 4031 0 discriminator 2
 6678 00b6 0023     	 movs r3,#0
 6679              	.L448:
 6680              	 .loc 1 4031 0 discriminator 4
 6681 00b8 002B     	 cmp r3,#0
 6682 00ba 36D0     	 beq .L438
4032:../Dave/Generated/FREERTOS/tasks.c **** 					{
4033:../Dave/Generated/FREERTOS/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6683              	 .loc 1 4033 0 is_stmt 1
 6684 00bc BB69     	 ldr r3,[r7,#24]
 6685 00be 0433     	 adds r3,r3,#4
 6686 00c0 1846     	 mov r0,r3
 6687 00c2 FFF7FEFF 	 bl uxListRemove
 6688 00c6 0346     	 mov r3,r0
 6689 00c8 002B     	 cmp r3,#0
 6690 00ca 15D1     	 bne .L449
4034:../Dave/Generated/FREERTOS/tasks.c **** 						{
4035:../Dave/Generated/FREERTOS/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 6691              	 .loc 1 4035 0
 6692 00cc BB69     	 ldr r3,[r7,#24]
 6693 00ce DA6A     	 ldr r2,[r3,#44]
 6694 00d0 1849     	 ldr r1,.L451+4
 6695 00d2 1346     	 mov r3,r2
 6696 00d4 9B00     	 lsls r3,r3,#2
 6697 00d6 1344     	 add r3,r3,r2
 6698 00d8 9B00     	 lsls r3,r3,#2
 6699 00da 0B44     	 add r3,r3,r1
 6700 00dc 1B68     	 ldr r3,[r3]
 6701 00de 002B     	 cmp r3,#0
 6702 00e0 0AD1     	 bne .L449
 6703              	 .loc 1 4035 0 is_stmt 0 discriminator 1
 6704 00e2 BB69     	 ldr r3,[r7,#24]
 6705 00e4 DB6A     	 ldr r3,[r3,#44]
 6706 00e6 1A46     	 mov r2,r3
 6707 00e8 0123     	 movs r3,#1
 6708 00ea 9340     	 lsls r3,r3,r2
 6709 00ec DA43     	 mvns r2,r3
 6710 00ee 124B     	 ldr r3,.L451+8
 6711 00f0 1B68     	 ldr r3,[r3]
 6712 00f2 1340     	 ands r3,r3,r2
 6713 00f4 104A     	 ldr r2,.L451+8
 6714 00f6 1360     	 str r3,[r2]
 6715              	.L449:
4036:../Dave/Generated/FREERTOS/tasks.c **** 						}
4037:../Dave/Generated/FREERTOS/tasks.c **** 						else
4038:../Dave/Generated/FREERTOS/tasks.c **** 						{
4039:../Dave/Generated/FREERTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4040:../Dave/Generated/FREERTOS/tasks.c **** 						}
4041:../Dave/Generated/FREERTOS/tasks.c **** 
4042:../Dave/Generated/FREERTOS/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 6716              	 .loc 1 4042 0 is_stmt 1
 6717 00f8 BB69     	 ldr r3,[r7,#24]
 6718 00fa DB6A     	 ldr r3,[r3,#44]
 6719 00fc 1A46     	 mov r2,r3
 6720 00fe 0123     	 movs r3,#1
 6721 0100 03FA02F2 	 lsl r2,r3,r2
 6722 0104 0C4B     	 ldr r3,.L451+8
 6723 0106 1B68     	 ldr r3,[r3]
 6724 0108 1343     	 orrs r3,r3,r2
 6725 010a 0B4A     	 ldr r2,.L451+8
 6726 010c 1360     	 str r3,[r2]
 6727 010e BB69     	 ldr r3,[r7,#24]
 6728 0110 DA6A     	 ldr r2,[r3,#44]
 6729 0112 1346     	 mov r3,r2
 6730 0114 9B00     	 lsls r3,r3,#2
 6731 0116 1344     	 add r3,r3,r2
 6732 0118 9B00     	 lsls r3,r3,#2
 6733 011a 064A     	 ldr r2,.L451+4
 6734 011c 1A44     	 add r2,r2,r3
 6735 011e BB69     	 ldr r3,[r7,#24]
 6736 0120 0433     	 adds r3,r3,#4
 6737 0122 1046     	 mov r0,r2
 6738 0124 1946     	 mov r1,r3
 6739 0126 FFF7FEFF 	 bl vListInsertEnd
 6740              	.L438:
4043:../Dave/Generated/FREERTOS/tasks.c **** 					}
4044:../Dave/Generated/FREERTOS/tasks.c **** 					else
4045:../Dave/Generated/FREERTOS/tasks.c **** 					{
4046:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4047:../Dave/Generated/FREERTOS/tasks.c **** 					}
4048:../Dave/Generated/FREERTOS/tasks.c **** 				}
4049:../Dave/Generated/FREERTOS/tasks.c **** 				else
4050:../Dave/Generated/FREERTOS/tasks.c **** 				{
4051:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4052:../Dave/Generated/FREERTOS/tasks.c **** 				}
4053:../Dave/Generated/FREERTOS/tasks.c **** 			}
4054:../Dave/Generated/FREERTOS/tasks.c **** 			else
4055:../Dave/Generated/FREERTOS/tasks.c **** 			{
4056:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4057:../Dave/Generated/FREERTOS/tasks.c **** 			}
4058:../Dave/Generated/FREERTOS/tasks.c **** 		}
4059:../Dave/Generated/FREERTOS/tasks.c **** 		else
4060:../Dave/Generated/FREERTOS/tasks.c **** 		{
4061:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4062:../Dave/Generated/FREERTOS/tasks.c **** 		}
4063:../Dave/Generated/FREERTOS/tasks.c **** 	}
 6741              	 .loc 1 4063 0
 6742 012a 2037     	 adds r7,r7,#32
 6743              	.LCFI288:
 6744              	 .cfi_def_cfa_offset 8
 6745 012c BD46     	 mov sp,r7
 6746              	.LCFI289:
 6747              	 .cfi_def_cfa_register 13
 6748              	 
 6749 012e 80BD     	 pop {r7,pc}
 6750              	.L452:
 6751              	 .align 2
 6752              	.L451:
 6753 0130 00000000 	 .word pxCurrentTCB
 6754 0134 00000000 	 .word pxReadyTasksLists
 6755 0138 00000000 	 .word uxTopReadyPriority
 6756              	 .cfi_endproc
 6757              	.LFE190:
 6759              	 .section .text.prvWriteNameToBuffer,"ax",%progbits
 6760              	 .align 2
 6761              	 .thumb
 6762              	 .thumb_func
 6764              	prvWriteNameToBuffer:
 6765              	.LFB191:
4064:../Dave/Generated/FREERTOS/tasks.c **** 
4065:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4066:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4067:../Dave/Generated/FREERTOS/tasks.c **** 
4068:../Dave/Generated/FREERTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4069:../Dave/Generated/FREERTOS/tasks.c **** 
4070:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskEnterCritical( void )
4071:../Dave/Generated/FREERTOS/tasks.c **** 	{
4072:../Dave/Generated/FREERTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
4073:../Dave/Generated/FREERTOS/tasks.c **** 
4074:../Dave/Generated/FREERTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4075:../Dave/Generated/FREERTOS/tasks.c **** 		{
4076:../Dave/Generated/FREERTOS/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4077:../Dave/Generated/FREERTOS/tasks.c **** 
4078:../Dave/Generated/FREERTOS/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4079:../Dave/Generated/FREERTOS/tasks.c **** 			function so	assert() if it is being called from an interrupt
4080:../Dave/Generated/FREERTOS/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4081:../Dave/Generated/FREERTOS/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4082:../Dave/Generated/FREERTOS/tasks.c **** 			protect against recursive calls if the assert function also uses a
4083:../Dave/Generated/FREERTOS/tasks.c **** 			critical section. */
4084:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4085:../Dave/Generated/FREERTOS/tasks.c **** 			{
4086:../Dave/Generated/FREERTOS/tasks.c **** 				portASSERT_IF_IN_ISR();
4087:../Dave/Generated/FREERTOS/tasks.c **** 			}
4088:../Dave/Generated/FREERTOS/tasks.c **** 		}
4089:../Dave/Generated/FREERTOS/tasks.c **** 		else
4090:../Dave/Generated/FREERTOS/tasks.c **** 		{
4091:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4092:../Dave/Generated/FREERTOS/tasks.c **** 		}
4093:../Dave/Generated/FREERTOS/tasks.c **** 	}
4094:../Dave/Generated/FREERTOS/tasks.c **** 
4095:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4096:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4097:../Dave/Generated/FREERTOS/tasks.c **** 
4098:../Dave/Generated/FREERTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4099:../Dave/Generated/FREERTOS/tasks.c **** 
4100:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskExitCritical( void )
4101:../Dave/Generated/FREERTOS/tasks.c **** 	{
4102:../Dave/Generated/FREERTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4103:../Dave/Generated/FREERTOS/tasks.c **** 		{
4104:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4105:../Dave/Generated/FREERTOS/tasks.c **** 			{
4106:../Dave/Generated/FREERTOS/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4107:../Dave/Generated/FREERTOS/tasks.c **** 
4108:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4109:../Dave/Generated/FREERTOS/tasks.c **** 				{
4110:../Dave/Generated/FREERTOS/tasks.c **** 					portENABLE_INTERRUPTS();
4111:../Dave/Generated/FREERTOS/tasks.c **** 				}
4112:../Dave/Generated/FREERTOS/tasks.c **** 				else
4113:../Dave/Generated/FREERTOS/tasks.c **** 				{
4114:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4115:../Dave/Generated/FREERTOS/tasks.c **** 				}
4116:../Dave/Generated/FREERTOS/tasks.c **** 			}
4117:../Dave/Generated/FREERTOS/tasks.c **** 			else
4118:../Dave/Generated/FREERTOS/tasks.c **** 			{
4119:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4120:../Dave/Generated/FREERTOS/tasks.c **** 			}
4121:../Dave/Generated/FREERTOS/tasks.c **** 		}
4122:../Dave/Generated/FREERTOS/tasks.c **** 		else
4123:../Dave/Generated/FREERTOS/tasks.c **** 		{
4124:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4125:../Dave/Generated/FREERTOS/tasks.c **** 		}
4126:../Dave/Generated/FREERTOS/tasks.c **** 	}
4127:../Dave/Generated/FREERTOS/tasks.c **** 
4128:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4129:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4130:../Dave/Generated/FREERTOS/tasks.c **** 
4131:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4132:../Dave/Generated/FREERTOS/tasks.c **** 
4133:../Dave/Generated/FREERTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4134:../Dave/Generated/FREERTOS/tasks.c **** 	{
 6766              	 .loc 1 4134 0
 6767              	 .cfi_startproc
 6768              	 
 6769              	 
 6770 0000 80B5     	 push {r7,lr}
 6771              	.LCFI290:
 6772              	 .cfi_def_cfa_offset 8
 6773              	 .cfi_offset 7,-8
 6774              	 .cfi_offset 14,-4
 6775 0002 84B0     	 sub sp,sp,#16
 6776              	.LCFI291:
 6777              	 .cfi_def_cfa_offset 24
 6778 0004 00AF     	 add r7,sp,#0
 6779              	.LCFI292:
 6780              	 .cfi_def_cfa_register 7
 6781 0006 7860     	 str r0,[r7,#4]
 6782 0008 3960     	 str r1,[r7]
4135:../Dave/Generated/FREERTOS/tasks.c **** 	size_t x;
4136:../Dave/Generated/FREERTOS/tasks.c **** 
4137:../Dave/Generated/FREERTOS/tasks.c **** 		/* Start by copying the entire string. */
4138:../Dave/Generated/FREERTOS/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
 6783              	 .loc 1 4138 0
 6784 000a 7868     	 ldr r0,[r7,#4]
 6785 000c 3968     	 ldr r1,[r7]
 6786 000e FFF7FEFF 	 bl strcpy
4139:../Dave/Generated/FREERTOS/tasks.c **** 
4140:../Dave/Generated/FREERTOS/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4141:../Dave/Generated/FREERTOS/tasks.c **** 		printed out. */
4142:../Dave/Generated/FREERTOS/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 6787              	 .loc 1 4142 0
 6788 0012 7868     	 ldr r0,[r7,#4]
 6789 0014 FFF7FEFF 	 bl strlen
 6790 0018 F860     	 str r0,[r7,#12]
 6791 001a 07E0     	 b .L454
 6792              	.L455:
4143:../Dave/Generated/FREERTOS/tasks.c **** 		{
4144:../Dave/Generated/FREERTOS/tasks.c **** 			pcBuffer[ x ] = ' ';
 6793              	 .loc 1 4144 0 discriminator 3
 6794 001c 7A68     	 ldr r2,[r7,#4]
 6795 001e FB68     	 ldr r3,[r7,#12]
 6796 0020 1344     	 add r3,r3,r2
 6797 0022 2022     	 movs r2,#32
 6798 0024 1A70     	 strb r2,[r3]
4142:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6799              	 .loc 1 4142 0 discriminator 3
 6800 0026 FB68     	 ldr r3,[r7,#12]
 6801 0028 0133     	 adds r3,r3,#1
 6802 002a FB60     	 str r3,[r7,#12]
 6803              	.L454:
4142:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6804              	 .loc 1 4142 0 is_stmt 0 discriminator 1
 6805 002c FB68     	 ldr r3,[r7,#12]
 6806 002e 0E2B     	 cmp r3,#14
 6807 0030 F4D9     	 bls .L455
4145:../Dave/Generated/FREERTOS/tasks.c **** 		}
4146:../Dave/Generated/FREERTOS/tasks.c **** 
4147:../Dave/Generated/FREERTOS/tasks.c **** 		/* Terminate. */
4148:../Dave/Generated/FREERTOS/tasks.c **** 		pcBuffer[ x ] = 0x00;
 6808              	 .loc 1 4148 0 is_stmt 1
 6809 0032 7A68     	 ldr r2,[r7,#4]
 6810 0034 FB68     	 ldr r3,[r7,#12]
 6811 0036 1344     	 add r3,r3,r2
 6812 0038 0022     	 movs r2,#0
 6813 003a 1A70     	 strb r2,[r3]
4149:../Dave/Generated/FREERTOS/tasks.c **** 
4150:../Dave/Generated/FREERTOS/tasks.c **** 		/* Return the new end of string. */
4151:../Dave/Generated/FREERTOS/tasks.c **** 		return &( pcBuffer[ x ] );
 6814              	 .loc 1 4151 0
 6815 003c 7A68     	 ldr r2,[r7,#4]
 6816 003e FB68     	 ldr r3,[r7,#12]
 6817 0040 1344     	 add r3,r3,r2
4152:../Dave/Generated/FREERTOS/tasks.c **** 	}
 6818              	 .loc 1 4152 0
 6819 0042 1846     	 mov r0,r3
 6820 0044 1037     	 adds r7,r7,#16
 6821              	.LCFI293:
 6822              	 .cfi_def_cfa_offset 8
 6823 0046 BD46     	 mov sp,r7
 6824              	.LCFI294:
 6825              	 .cfi_def_cfa_register 13
 6826              	 
 6827 0048 80BD     	 pop {r7,pc}
 6828              	 .cfi_endproc
 6829              	.LFE191:
 6831 004a 00BF     	 .section .rodata
 6832 0005 000000   	 .align 2
 6833              	.LC1:
 6834 0008 09256309 	 .ascii "\011%c\011%u\011%u\011%u\015\012\000"
 6834      25750925 
 6834      75092575 
 6834      0D0A00
 6835 0017 00       	 .section .text.vTaskList,"ax",%progbits
 6836              	 .align 2
 6837              	 .global vTaskList
 6838              	 .thumb
 6839              	 .thumb_func
 6841              	vTaskList:
 6842              	.LFB192:
4153:../Dave/Generated/FREERTOS/tasks.c **** 
4154:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4155:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4156:../Dave/Generated/FREERTOS/tasks.c **** 
4157:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4158:../Dave/Generated/FREERTOS/tasks.c **** 
4159:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4160:../Dave/Generated/FREERTOS/tasks.c **** 	{
 6843              	 .loc 1 4160 0
 6844              	 .cfi_startproc
 6845              	 
 6846              	 
 6847 0000 B0B5     	 push {r4,r5,r7,lr}
 6848              	.LCFI295:
 6849              	 .cfi_def_cfa_offset 16
 6850              	 .cfi_offset 4,-16
 6851              	 .cfi_offset 5,-12
 6852              	 .cfi_offset 7,-8
 6853              	 .cfi_offset 14,-4
 6854 0002 88B0     	 sub sp,sp,#32
 6855              	.LCFI296:
 6856              	 .cfi_def_cfa_offset 48
 6857 0004 02AF     	 add r7,sp,#8
 6858              	.LCFI297:
 6859              	 .cfi_def_cfa 7,40
 6860 0006 7860     	 str r0,[r7,#4]
4161:../Dave/Generated/FREERTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4162:../Dave/Generated/FREERTOS/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4163:../Dave/Generated/FREERTOS/tasks.c **** 	char cStatus;
4164:../Dave/Generated/FREERTOS/tasks.c **** 
4165:../Dave/Generated/FREERTOS/tasks.c **** 		/*
4166:../Dave/Generated/FREERTOS/tasks.c **** 		 * PLEASE NOTE:
4167:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4168:../Dave/Generated/FREERTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4169:../Dave/Generated/FREERTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4170:../Dave/Generated/FREERTOS/tasks.c **** 		 * scheduler.
4171:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4172:../Dave/Generated/FREERTOS/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4173:../Dave/Generated/FREERTOS/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4174:../Dave/Generated/FREERTOS/tasks.c **** 		 * displays task names, states and stack usage.
4175:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4176:../Dave/Generated/FREERTOS/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4177:../Dave/Generated/FREERTOS/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4178:../Dave/Generated/FREERTOS/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4179:../Dave/Generated/FREERTOS/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4180:../Dave/Generated/FREERTOS/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4181:../Dave/Generated/FREERTOS/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4182:../Dave/Generated/FREERTOS/tasks.c **** 		 * snprintf() implementation!).
4183:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4184:../Dave/Generated/FREERTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4185:../Dave/Generated/FREERTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4186:../Dave/Generated/FREERTOS/tasks.c **** 		 * through a call to vTaskList().
4187:../Dave/Generated/FREERTOS/tasks.c **** 		 */
4188:../Dave/Generated/FREERTOS/tasks.c **** 
4189:../Dave/Generated/FREERTOS/tasks.c **** 
4190:../Dave/Generated/FREERTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4191:../Dave/Generated/FREERTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
 6861              	 .loc 1 4191 0
 6862 0008 7B68     	 ldr r3,[r7,#4]
 6863 000a 0022     	 movs r2,#0
 6864 000c 1A70     	 strb r2,[r3]
4192:../Dave/Generated/FREERTOS/tasks.c **** 
4193:../Dave/Generated/FREERTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4194:../Dave/Generated/FREERTOS/tasks.c **** 		function is executing. */
4195:../Dave/Generated/FREERTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
 6865              	 .loc 1 4195 0
 6866 000e 464B     	 ldr r3,.L469
 6867 0010 1B68     	 ldr r3,[r3]
 6868 0012 FB60     	 str r3,[r7,#12]
4196:../Dave/Generated/FREERTOS/tasks.c **** 
4197:../Dave/Generated/FREERTOS/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4198:../Dave/Generated/FREERTOS/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4199:../Dave/Generated/FREERTOS/tasks.c **** 		equate to NULL. */
4200:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 6869              	 .loc 1 4200 0
 6870 0014 444B     	 ldr r3,.L469
 6871 0016 1A68     	 ldr r2,[r3]
 6872 0018 1346     	 mov r3,r2
 6873 001a DB00     	 lsls r3,r3,#3
 6874 001c 1344     	 add r3,r3,r2
 6875 001e 9B00     	 lsls r3,r3,#2
 6876 0020 1846     	 mov r0,r3
 6877 0022 FFF7FEFF 	 bl pvPortMalloc
 6878 0026 3861     	 str r0,[r7,#16]
4201:../Dave/Generated/FREERTOS/tasks.c **** 
4202:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
 6879              	 .loc 1 4202 0
 6880 0028 3B69     	 ldr r3,[r7,#16]
 6881 002a 002B     	 cmp r3,#0
 6882 002c 78D0     	 beq .L457
4203:../Dave/Generated/FREERTOS/tasks.c **** 		{
4204:../Dave/Generated/FREERTOS/tasks.c **** 			/* Generate the (binary) data. */
4205:../Dave/Generated/FREERTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 6883              	 .loc 1 4205 0
 6884 002e FB68     	 ldr r3,[r7,#12]
 6885 0030 3869     	 ldr r0,[r7,#16]
 6886 0032 1946     	 mov r1,r3
 6887 0034 0022     	 movs r2,#0
 6888 0036 FFF7FEFF 	 bl uxTaskGetSystemState
 6889 003a 0346     	 mov r3,r0
 6890 003c FB60     	 str r3,[r7,#12]
4206:../Dave/Generated/FREERTOS/tasks.c **** 
4207:../Dave/Generated/FREERTOS/tasks.c **** 			/* Create a human readable table from the binary data. */
4208:../Dave/Generated/FREERTOS/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
 6891              	 .loc 1 4208 0
 6892 003e 0023     	 movs r3,#0
 6893 0040 BB60     	 str r3,[r7,#8]
 6894 0042 66E0     	 b .L459
 6895              	.L468:
4209:../Dave/Generated/FREERTOS/tasks.c **** 			{
4210:../Dave/Generated/FREERTOS/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
 6896              	 .loc 1 4210 0
 6897 0044 BA68     	 ldr r2,[r7,#8]
 6898 0046 1346     	 mov r3,r2
 6899 0048 DB00     	 lsls r3,r3,#3
 6900 004a 1344     	 add r3,r3,r2
 6901 004c 9B00     	 lsls r3,r3,#2
 6902 004e 1A46     	 mov r2,r3
 6903 0050 3B69     	 ldr r3,[r7,#16]
 6904 0052 1344     	 add r3,r3,r2
 6905 0054 1B7B     	 ldrb r3,[r3,#12]
 6906 0056 042B     	 cmp r3,#4
 6907 0058 1BD8     	 bhi .L460
 6908 005a 01A2     	 adr r2,.L462
 6909 005c 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 6910              	 .p2align 2
 6911              	.L462:
 6912 0060 75000000 	 .word .L461+1
 6913 0064 7B000000 	 .word .L463+1
 6914 0068 81000000 	 .word .L464+1
 6915 006c 87000000 	 .word .L465+1
 6916 0070 8D000000 	 .word .L466+1
 6917              	 .p2align 1
 6918              	.L461:
4211:../Dave/Generated/FREERTOS/tasks.c **** 				{
4212:../Dave/Generated/FREERTOS/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
 6919              	 .loc 1 4212 0
 6920 0074 5823     	 movs r3,#88
 6921 0076 FB75     	 strb r3,[r7,#23]
4213:../Dave/Generated/FREERTOS/tasks.c **** 										break;
 6922              	 .loc 1 4213 0
 6923 0078 0EE0     	 b .L467
 6924              	.L463:
4214:../Dave/Generated/FREERTOS/tasks.c **** 
4215:../Dave/Generated/FREERTOS/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
 6925              	 .loc 1 4215 0
 6926 007a 5223     	 movs r3,#82
 6927 007c FB75     	 strb r3,[r7,#23]
4216:../Dave/Generated/FREERTOS/tasks.c **** 										break;
 6928              	 .loc 1 4216 0
 6929 007e 0BE0     	 b .L467
 6930              	.L464:
4217:../Dave/Generated/FREERTOS/tasks.c **** 
4218:../Dave/Generated/FREERTOS/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 6931              	 .loc 1 4218 0
 6932 0080 4223     	 movs r3,#66
 6933 0082 FB75     	 strb r3,[r7,#23]
4219:../Dave/Generated/FREERTOS/tasks.c **** 										break;
 6934              	 .loc 1 4219 0
 6935 0084 08E0     	 b .L467
 6936              	.L465:
4220:../Dave/Generated/FREERTOS/tasks.c **** 
4221:../Dave/Generated/FREERTOS/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 6937              	 .loc 1 4221 0
 6938 0086 5323     	 movs r3,#83
 6939 0088 FB75     	 strb r3,[r7,#23]
4222:../Dave/Generated/FREERTOS/tasks.c **** 										break;
 6940              	 .loc 1 4222 0
 6941 008a 05E0     	 b .L467
 6942              	.L466:
4223:../Dave/Generated/FREERTOS/tasks.c **** 
4224:../Dave/Generated/FREERTOS/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
 6943              	 .loc 1 4224 0
 6944 008c 4423     	 movs r3,#68
 6945 008e FB75     	 strb r3,[r7,#23]
4225:../Dave/Generated/FREERTOS/tasks.c **** 										break;
 6946              	 .loc 1 4225 0
 6947 0090 02E0     	 b .L467
 6948              	.L460:
4226:../Dave/Generated/FREERTOS/tasks.c **** 
4227:../Dave/Generated/FREERTOS/tasks.c **** 					default:			/* Should not get here, but it is included
4228:../Dave/Generated/FREERTOS/tasks.c **** 										to prevent static checking errors. */
4229:../Dave/Generated/FREERTOS/tasks.c **** 										cStatus = 0x00;
 6949              	 .loc 1 4229 0
 6950 0092 0023     	 movs r3,#0
 6951 0094 FB75     	 strb r3,[r7,#23]
4230:../Dave/Generated/FREERTOS/tasks.c **** 										break;
 6952              	 .loc 1 4230 0
 6953 0096 00BF     	 nop
 6954              	.L467:
4231:../Dave/Generated/FREERTOS/tasks.c **** 				}
4232:../Dave/Generated/FREERTOS/tasks.c **** 
4233:../Dave/Generated/FREERTOS/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4234:../Dave/Generated/FREERTOS/tasks.c **** 				can be printed in tabular form more easily. */
4235:../Dave/Generated/FREERTOS/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 6955              	 .loc 1 4235 0 discriminator 2
 6956 0098 BA68     	 ldr r2,[r7,#8]
 6957 009a 1346     	 mov r3,r2
 6958 009c DB00     	 lsls r3,r3,#3
 6959 009e 1344     	 add r3,r3,r2
 6960 00a0 9B00     	 lsls r3,r3,#2
 6961 00a2 1A46     	 mov r2,r3
 6962 00a4 3B69     	 ldr r3,[r7,#16]
 6963 00a6 1344     	 add r3,r3,r2
 6964 00a8 5B68     	 ldr r3,[r3,#4]
 6965 00aa 7868     	 ldr r0,[r7,#4]
 6966 00ac 1946     	 mov r1,r3
 6967 00ae FFF7FEFF 	 bl prvWriteNameToBuffer
 6968 00b2 7860     	 str r0,[r7,#4]
4236:../Dave/Generated/FREERTOS/tasks.c **** 
4237:../Dave/Generated/FREERTOS/tasks.c **** 				/* Write the rest of the string. */
4238:../Dave/Generated/FREERTOS/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
 6969              	 .loc 1 4238 0 discriminator 2
 6970 00b4 FD7D     	 ldrb r5,[r7,#23]
 6971 00b6 BA68     	 ldr r2,[r7,#8]
 6972 00b8 1346     	 mov r3,r2
 6973 00ba DB00     	 lsls r3,r3,#3
 6974 00bc 1344     	 add r3,r3,r2
 6975 00be 9B00     	 lsls r3,r3,#2
 6976 00c0 1A46     	 mov r2,r3
 6977 00c2 3B69     	 ldr r3,[r7,#16]
 6978 00c4 1344     	 add r3,r3,r2
 6979 00c6 1C69     	 ldr r4,[r3,#16]
 6980 00c8 BA68     	 ldr r2,[r7,#8]
 6981 00ca 1346     	 mov r3,r2
 6982 00cc DB00     	 lsls r3,r3,#3
 6983 00ce 1344     	 add r3,r3,r2
 6984 00d0 9B00     	 lsls r3,r3,#2
 6985 00d2 1A46     	 mov r2,r3
 6986 00d4 3B69     	 ldr r3,[r7,#16]
 6987 00d6 1344     	 add r3,r3,r2
 6988 00d8 1B8C     	 ldrh r3,[r3,#32]
 6989 00da 1946     	 mov r1,r3
 6990 00dc BA68     	 ldr r2,[r7,#8]
 6991 00de 1346     	 mov r3,r2
 6992 00e0 DB00     	 lsls r3,r3,#3
 6993 00e2 1344     	 add r3,r3,r2
 6994 00e4 9B00     	 lsls r3,r3,#2
 6995 00e6 1A46     	 mov r2,r3
 6996 00e8 3B69     	 ldr r3,[r7,#16]
 6997 00ea 1344     	 add r3,r3,r2
 6998 00ec 9B68     	 ldr r3,[r3,#8]
 6999 00ee 0091     	 str r1,[sp]
 7000 00f0 0193     	 str r3,[sp,#4]
 7001 00f2 7868     	 ldr r0,[r7,#4]
 7002 00f4 0D49     	 ldr r1,.L469+4
 7003 00f6 2A46     	 mov r2,r5
 7004 00f8 2346     	 mov r3,r4
 7005 00fa FFF7FEFF 	 bl sprintf
4239:../Dave/Generated/FREERTOS/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
 7006              	 .loc 1 4239 0 discriminator 2
 7007 00fe 7868     	 ldr r0,[r7,#4]
 7008 0100 FFF7FEFF 	 bl strlen
 7009 0104 0246     	 mov r2,r0
 7010 0106 7B68     	 ldr r3,[r7,#4]
 7011 0108 1344     	 add r3,r3,r2
 7012 010a 7B60     	 str r3,[r7,#4]
4208:../Dave/Generated/FREERTOS/tasks.c **** 			{
 7013              	 .loc 1 4208 0 discriminator 2
 7014 010c BB68     	 ldr r3,[r7,#8]
 7015 010e 0133     	 adds r3,r3,#1
 7016 0110 BB60     	 str r3,[r7,#8]
 7017              	.L459:
4208:../Dave/Generated/FREERTOS/tasks.c **** 			{
 7018              	 .loc 1 4208 0 is_stmt 0 discriminator 1
 7019 0112 BA68     	 ldr r2,[r7,#8]
 7020 0114 FB68     	 ldr r3,[r7,#12]
 7021 0116 9A42     	 cmp r2,r3
 7022 0118 94D3     	 bcc .L468
4240:../Dave/Generated/FREERTOS/tasks.c **** 			}
4241:../Dave/Generated/FREERTOS/tasks.c **** 
4242:../Dave/Generated/FREERTOS/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4243:../Dave/Generated/FREERTOS/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4244:../Dave/Generated/FREERTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
 7023              	 .loc 1 4244 0 is_stmt 1
 7024 011a 3869     	 ldr r0,[r7,#16]
 7025 011c FFF7FEFF 	 bl vPortFree
 7026              	.L457:
4245:../Dave/Generated/FREERTOS/tasks.c **** 		}
4246:../Dave/Generated/FREERTOS/tasks.c **** 		else
4247:../Dave/Generated/FREERTOS/tasks.c **** 		{
4248:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4249:../Dave/Generated/FREERTOS/tasks.c **** 		}
4250:../Dave/Generated/FREERTOS/tasks.c **** 	}
 7027              	 .loc 1 4250 0
 7028 0120 1837     	 adds r7,r7,#24
 7029              	.LCFI298:
 7030              	 .cfi_def_cfa_offset 16
 7031 0122 BD46     	 mov sp,r7
 7032              	.LCFI299:
 7033              	 .cfi_def_cfa_register 13
 7034              	 
 7035 0124 B0BD     	 pop {r4,r5,r7,pc}
 7036              	.L470:
 7037 0126 00BF     	 .align 2
 7038              	.L469:
 7039 0128 00000000 	 .word uxCurrentNumberOfTasks
 7040 012c 08000000 	 .word .LC1
 7041              	 .cfi_endproc
 7042              	.LFE192:
 7044              	 .section .text.uxTaskResetEventItemValue,"ax",%progbits
 7045              	 .align 2
 7046              	 .global uxTaskResetEventItemValue
 7047              	 .thumb
 7048              	 .thumb_func
 7050              	uxTaskResetEventItemValue:
 7051              	.LFB193:
4251:../Dave/Generated/FREERTOS/tasks.c **** 
4252:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4253:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
4254:../Dave/Generated/FREERTOS/tasks.c **** 
4255:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4256:../Dave/Generated/FREERTOS/tasks.c **** 
4257:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4258:../Dave/Generated/FREERTOS/tasks.c **** 	{
4259:../Dave/Generated/FREERTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4260:../Dave/Generated/FREERTOS/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4261:../Dave/Generated/FREERTOS/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4262:../Dave/Generated/FREERTOS/tasks.c **** 
4263:../Dave/Generated/FREERTOS/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4264:../Dave/Generated/FREERTOS/tasks.c **** 		{
4265:../Dave/Generated/FREERTOS/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4266:../Dave/Generated/FREERTOS/tasks.c **** 		}
4267:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
4268:../Dave/Generated/FREERTOS/tasks.c **** 
4269:../Dave/Generated/FREERTOS/tasks.c **** 		/*
4270:../Dave/Generated/FREERTOS/tasks.c **** 		 * PLEASE NOTE:
4271:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4272:../Dave/Generated/FREERTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4273:../Dave/Generated/FREERTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4274:../Dave/Generated/FREERTOS/tasks.c **** 		 * scheduler.
4275:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4276:../Dave/Generated/FREERTOS/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4277:../Dave/Generated/FREERTOS/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4278:../Dave/Generated/FREERTOS/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4279:../Dave/Generated/FREERTOS/tasks.c **** 		 * in both absolute and percentage terms.
4280:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4281:../Dave/Generated/FREERTOS/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4282:../Dave/Generated/FREERTOS/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4283:../Dave/Generated/FREERTOS/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4284:../Dave/Generated/FREERTOS/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4285:../Dave/Generated/FREERTOS/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4286:../Dave/Generated/FREERTOS/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4287:../Dave/Generated/FREERTOS/tasks.c **** 		 * a full snprintf() implementation!).
4288:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4289:../Dave/Generated/FREERTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4290:../Dave/Generated/FREERTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4291:../Dave/Generated/FREERTOS/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4292:../Dave/Generated/FREERTOS/tasks.c **** 		 */
4293:../Dave/Generated/FREERTOS/tasks.c **** 
4294:../Dave/Generated/FREERTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4295:../Dave/Generated/FREERTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
4296:../Dave/Generated/FREERTOS/tasks.c **** 
4297:../Dave/Generated/FREERTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4298:../Dave/Generated/FREERTOS/tasks.c **** 		function is executing. */
4299:../Dave/Generated/FREERTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4300:../Dave/Generated/FREERTOS/tasks.c **** 
4301:../Dave/Generated/FREERTOS/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4302:../Dave/Generated/FREERTOS/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4303:../Dave/Generated/FREERTOS/tasks.c **** 		equate to NULL. */
4304:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4305:../Dave/Generated/FREERTOS/tasks.c **** 
4306:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
4307:../Dave/Generated/FREERTOS/tasks.c **** 		{
4308:../Dave/Generated/FREERTOS/tasks.c **** 			/* Generate the (binary) data. */
4309:../Dave/Generated/FREERTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4310:../Dave/Generated/FREERTOS/tasks.c **** 
4311:../Dave/Generated/FREERTOS/tasks.c **** 			/* For percentage calculations. */
4312:../Dave/Generated/FREERTOS/tasks.c **** 			ulTotalTime /= 100UL;
4313:../Dave/Generated/FREERTOS/tasks.c **** 
4314:../Dave/Generated/FREERTOS/tasks.c **** 			/* Avoid divide by zero errors. */
4315:../Dave/Generated/FREERTOS/tasks.c **** 			if( ulTotalTime > 0 )
4316:../Dave/Generated/FREERTOS/tasks.c **** 			{
4317:../Dave/Generated/FREERTOS/tasks.c **** 				/* Create a human readable table from the binary data. */
4318:../Dave/Generated/FREERTOS/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4319:../Dave/Generated/FREERTOS/tasks.c **** 				{
4320:../Dave/Generated/FREERTOS/tasks.c **** 					/* What percentage of the total run time has the task used?
4321:../Dave/Generated/FREERTOS/tasks.c **** 					This will always be rounded down to the nearest integer.
4322:../Dave/Generated/FREERTOS/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4323:../Dave/Generated/FREERTOS/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4324:../Dave/Generated/FREERTOS/tasks.c **** 
4325:../Dave/Generated/FREERTOS/tasks.c **** 					/* Write the task name to the string, padding with
4326:../Dave/Generated/FREERTOS/tasks.c **** 					spaces so it can be printed in tabular form more
4327:../Dave/Generated/FREERTOS/tasks.c **** 					easily. */
4328:../Dave/Generated/FREERTOS/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4329:../Dave/Generated/FREERTOS/tasks.c **** 
4330:../Dave/Generated/FREERTOS/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4331:../Dave/Generated/FREERTOS/tasks.c **** 					{
4332:../Dave/Generated/FREERTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4333:../Dave/Generated/FREERTOS/tasks.c **** 						{
4334:../Dave/Generated/FREERTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4335:../Dave/Generated/FREERTOS/tasks.c **** 						}
4336:../Dave/Generated/FREERTOS/tasks.c **** 						#else
4337:../Dave/Generated/FREERTOS/tasks.c **** 						{
4338:../Dave/Generated/FREERTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4339:../Dave/Generated/FREERTOS/tasks.c **** 							printf() library can be used. */
4340:../Dave/Generated/FREERTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4341:../Dave/Generated/FREERTOS/tasks.c **** 						}
4342:../Dave/Generated/FREERTOS/tasks.c **** 						#endif
4343:../Dave/Generated/FREERTOS/tasks.c **** 					}
4344:../Dave/Generated/FREERTOS/tasks.c **** 					else
4345:../Dave/Generated/FREERTOS/tasks.c **** 					{
4346:../Dave/Generated/FREERTOS/tasks.c **** 						/* If the percentage is zero here then the task has
4347:../Dave/Generated/FREERTOS/tasks.c **** 						consumed less than 1% of the total run time. */
4348:../Dave/Generated/FREERTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4349:../Dave/Generated/FREERTOS/tasks.c **** 						{
4350:../Dave/Generated/FREERTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4351:../Dave/Generated/FREERTOS/tasks.c **** 						}
4352:../Dave/Generated/FREERTOS/tasks.c **** 						#else
4353:../Dave/Generated/FREERTOS/tasks.c **** 						{
4354:../Dave/Generated/FREERTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4355:../Dave/Generated/FREERTOS/tasks.c **** 							printf() library can be used. */
4356:../Dave/Generated/FREERTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4357:../Dave/Generated/FREERTOS/tasks.c **** 						}
4358:../Dave/Generated/FREERTOS/tasks.c **** 						#endif
4359:../Dave/Generated/FREERTOS/tasks.c **** 					}
4360:../Dave/Generated/FREERTOS/tasks.c **** 
4361:../Dave/Generated/FREERTOS/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4362:../Dave/Generated/FREERTOS/tasks.c **** 				}
4363:../Dave/Generated/FREERTOS/tasks.c **** 			}
4364:../Dave/Generated/FREERTOS/tasks.c **** 			else
4365:../Dave/Generated/FREERTOS/tasks.c **** 			{
4366:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4367:../Dave/Generated/FREERTOS/tasks.c **** 			}
4368:../Dave/Generated/FREERTOS/tasks.c **** 
4369:../Dave/Generated/FREERTOS/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4370:../Dave/Generated/FREERTOS/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4371:../Dave/Generated/FREERTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
4372:../Dave/Generated/FREERTOS/tasks.c **** 		}
4373:../Dave/Generated/FREERTOS/tasks.c **** 		else
4374:../Dave/Generated/FREERTOS/tasks.c **** 		{
4375:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4376:../Dave/Generated/FREERTOS/tasks.c **** 		}
4377:../Dave/Generated/FREERTOS/tasks.c **** 	}
4378:../Dave/Generated/FREERTOS/tasks.c **** 
4379:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4380:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4381:../Dave/Generated/FREERTOS/tasks.c **** 
4382:../Dave/Generated/FREERTOS/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4383:../Dave/Generated/FREERTOS/tasks.c **** {
 7052              	 .loc 1 4383 0
 7053              	 .cfi_startproc
 7054              	 
 7055              	 
 7056              	 
 7057 0000 80B4     	 push {r7}
 7058              	.LCFI300:
 7059              	 .cfi_def_cfa_offset 4
 7060              	 .cfi_offset 7,-4
 7061 0002 83B0     	 sub sp,sp,#12
 7062              	.LCFI301:
 7063              	 .cfi_def_cfa_offset 16
 7064 0004 00AF     	 add r7,sp,#0
 7065              	.LCFI302:
 7066              	 .cfi_def_cfa_register 7
4384:../Dave/Generated/FREERTOS/tasks.c **** TickType_t uxReturn;
4385:../Dave/Generated/FREERTOS/tasks.c **** 
4386:../Dave/Generated/FREERTOS/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 7067              	 .loc 1 4386 0
 7068 0006 094B     	 ldr r3,.L473
 7069 0008 1B68     	 ldr r3,[r3]
 7070 000a 9B69     	 ldr r3,[r3,#24]
 7071 000c 7B60     	 str r3,[r7,#4]
4387:../Dave/Generated/FREERTOS/tasks.c **** 
4388:../Dave/Generated/FREERTOS/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4389:../Dave/Generated/FREERTOS/tasks.c **** 	queues and semaphores. */
4390:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 7072              	 .loc 1 4390 0
 7073 000e 074B     	 ldr r3,.L473
 7074 0010 1B68     	 ldr r3,[r3]
 7075 0012 064A     	 ldr r2,.L473
 7076 0014 1268     	 ldr r2,[r2]
 7077 0016 D26A     	 ldr r2,[r2,#44]
 7078 0018 C2F10502 	 rsb r2,r2,#5
 7079 001c 9A61     	 str r2,[r3,#24]
4391:../Dave/Generated/FREERTOS/tasks.c **** 
4392:../Dave/Generated/FREERTOS/tasks.c **** 	return uxReturn;
 7080              	 .loc 1 4392 0
 7081 001e 7B68     	 ldr r3,[r7,#4]
4393:../Dave/Generated/FREERTOS/tasks.c **** }
 7082              	 .loc 1 4393 0
 7083 0020 1846     	 mov r0,r3
 7084 0022 0C37     	 adds r7,r7,#12
 7085              	.LCFI303:
 7086              	 .cfi_def_cfa_offset 4
 7087 0024 BD46     	 mov sp,r7
 7088              	.LCFI304:
 7089              	 .cfi_def_cfa_register 13
 7090              	 
 7091 0026 5DF8047B 	 ldr r7,[sp],#4
 7092              	.LCFI305:
 7093              	 .cfi_restore 7
 7094              	 .cfi_def_cfa_offset 0
 7095 002a 7047     	 bx lr
 7096              	.L474:
 7097              	 .align 2
 7098              	.L473:
 7099 002c 00000000 	 .word pxCurrentTCB
 7100              	 .cfi_endproc
 7101              	.LFE193:
 7103              	 .section .text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 7104              	 .align 2
 7105              	 .global pvTaskIncrementMutexHeldCount
 7106              	 .thumb
 7107              	 .thumb_func
 7109              	pvTaskIncrementMutexHeldCount:
 7110              	.LFB194:
4394:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4395:../Dave/Generated/FREERTOS/tasks.c **** 
4396:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4397:../Dave/Generated/FREERTOS/tasks.c **** 
4398:../Dave/Generated/FREERTOS/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4399:../Dave/Generated/FREERTOS/tasks.c **** 	{
 7111              	 .loc 1 4399 0
 7112              	 .cfi_startproc
 7113              	 
 7114              	 
 7115              	 
 7116 0000 80B4     	 push {r7}
 7117              	.LCFI306:
 7118              	 .cfi_def_cfa_offset 4
 7119              	 .cfi_offset 7,-4
 7120 0002 00AF     	 add r7,sp,#0
 7121              	.LCFI307:
 7122              	 .cfi_def_cfa_register 7
4400:../Dave/Generated/FREERTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4401:../Dave/Generated/FREERTOS/tasks.c **** 		then pxCurrentTCB will be NULL. */
4402:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxCurrentTCB != NULL )
 7123              	 .loc 1 4402 0
 7124 0004 074B     	 ldr r3,.L478
 7125 0006 1B68     	 ldr r3,[r3]
 7126 0008 002B     	 cmp r3,#0
 7127 000a 04D0     	 beq .L476
4403:../Dave/Generated/FREERTOS/tasks.c **** 		{
4404:../Dave/Generated/FREERTOS/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 7128              	 .loc 1 4404 0
 7129 000c 054B     	 ldr r3,.L478
 7130 000e 1B68     	 ldr r3,[r3]
 7131 0010 1A6D     	 ldr r2,[r3,#80]
 7132 0012 0132     	 adds r2,r2,#1
 7133 0014 1A65     	 str r2,[r3,#80]
 7134              	.L476:
4405:../Dave/Generated/FREERTOS/tasks.c **** 		}
4406:../Dave/Generated/FREERTOS/tasks.c **** 
4407:../Dave/Generated/FREERTOS/tasks.c **** 		return pxCurrentTCB;
 7135              	 .loc 1 4407 0
 7136 0016 034B     	 ldr r3,.L478
 7137 0018 1B68     	 ldr r3,[r3]
4408:../Dave/Generated/FREERTOS/tasks.c **** 	}
 7138              	 .loc 1 4408 0
 7139 001a 1846     	 mov r0,r3
 7140 001c BD46     	 mov sp,r7
 7141              	.LCFI308:
 7142              	 .cfi_def_cfa_register 13
 7143              	 
 7144 001e 5DF8047B 	 ldr r7,[sp],#4
 7145              	.LCFI309:
 7146              	 .cfi_restore 7
 7147              	 .cfi_def_cfa_offset 0
 7148 0022 7047     	 bx lr
 7149              	.L479:
 7150              	 .align 2
 7151              	.L478:
 7152 0024 00000000 	 .word pxCurrentTCB
 7153              	 .cfi_endproc
 7154              	.LFE194:
 7156              	 .section .text.ulTaskNotifyTake,"ax",%progbits
 7157              	 .align 2
 7158              	 .global ulTaskNotifyTake
 7159              	 .thumb
 7160              	 .thumb_func
 7162              	ulTaskNotifyTake:
 7163              	.LFB195:
4409:../Dave/Generated/FREERTOS/tasks.c **** 
4410:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4411:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4412:../Dave/Generated/FREERTOS/tasks.c **** 
4413:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4414:../Dave/Generated/FREERTOS/tasks.c **** 
4415:../Dave/Generated/FREERTOS/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4416:../Dave/Generated/FREERTOS/tasks.c **** 	{
 7164              	 .loc 1 4416 0
 7165              	 .cfi_startproc
 7166              	 
 7167              	 
 7168 0000 80B5     	 push {r7,lr}
 7169              	.LCFI310:
 7170              	 .cfi_def_cfa_offset 8
 7171              	 .cfi_offset 7,-8
 7172              	 .cfi_offset 14,-4
 7173 0002 84B0     	 sub sp,sp,#16
 7174              	.LCFI311:
 7175              	 .cfi_def_cfa_offset 24
 7176 0004 00AF     	 add r7,sp,#0
 7177              	.LCFI312:
 7178              	 .cfi_def_cfa_register 7
 7179 0006 7860     	 str r0,[r7,#4]
 7180 0008 3960     	 str r1,[r7]
4417:../Dave/Generated/FREERTOS/tasks.c **** 	uint32_t ulReturn;
4418:../Dave/Generated/FREERTOS/tasks.c **** 
4419:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 7181              	 .loc 1 4419 0
 7182 000a FFF7FEFF 	 bl vPortEnterCritical
4420:../Dave/Generated/FREERTOS/tasks.c **** 		{
4421:../Dave/Generated/FREERTOS/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4422:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 7183              	 .loc 1 4422 0
 7184 000e 1E4B     	 ldr r3,.L486
 7185 0010 1B68     	 ldr r3,[r3]
 7186 0012 9B6E     	 ldr r3,[r3,#104]
 7187 0014 002B     	 cmp r3,#0
 7188 0016 13D1     	 bne .L481
4423:../Dave/Generated/FREERTOS/tasks.c **** 			{
4424:../Dave/Generated/FREERTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
4425:../Dave/Generated/FREERTOS/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 7189              	 .loc 1 4425 0
 7190 0018 1B4B     	 ldr r3,.L486
 7191 001a 1B68     	 ldr r3,[r3]
 7192 001c 0122     	 movs r2,#1
 7193 001e 83F86C20 	 strb r2,[r3,#108]
4426:../Dave/Generated/FREERTOS/tasks.c **** 
4427:../Dave/Generated/FREERTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 7194              	 .loc 1 4427 0
 7195 0022 3B68     	 ldr r3,[r7]
 7196 0024 002B     	 cmp r3,#0
 7197 0026 0BD0     	 beq .L481
4428:../Dave/Generated/FREERTOS/tasks.c **** 				{
4429:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 7198              	 .loc 1 4429 0
 7199 0028 3868     	 ldr r0,[r7]
 7200 002a 0121     	 movs r1,#1
 7201 002c FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
4430:../Dave/Generated/FREERTOS/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4431:../Dave/Generated/FREERTOS/tasks.c **** 
4432:../Dave/Generated/FREERTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
4433:../Dave/Generated/FREERTOS/tasks.c **** 					section (some will yield immediately, others wait until the
4434:../Dave/Generated/FREERTOS/tasks.c **** 					critical section exits) - but it is not something that
4435:../Dave/Generated/FREERTOS/tasks.c **** 					application code should ever do. */
4436:../Dave/Generated/FREERTOS/tasks.c **** 					portYIELD_WITHIN_API();
 7202              	 .loc 1 4436 0
 7203 0030 164B     	 ldr r3,.L486+4
 7204 0032 4FF08052 	 mov r2,#268435456
 7205 0036 1A60     	 str r2,[r3]
 7206              	
 7207 0038 BFF34F8F 	 dsb
 7208              	
 7209              	
 7210 003c BFF36F8F 	 isb
 7211              	
 7212              	 .thumb
 7213              	.L481:
4437:../Dave/Generated/FREERTOS/tasks.c **** 				}
4438:../Dave/Generated/FREERTOS/tasks.c **** 				else
4439:../Dave/Generated/FREERTOS/tasks.c **** 				{
4440:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4441:../Dave/Generated/FREERTOS/tasks.c **** 				}
4442:../Dave/Generated/FREERTOS/tasks.c **** 			}
4443:../Dave/Generated/FREERTOS/tasks.c **** 			else
4444:../Dave/Generated/FREERTOS/tasks.c **** 			{
4445:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4446:../Dave/Generated/FREERTOS/tasks.c **** 			}
4447:../Dave/Generated/FREERTOS/tasks.c **** 		}
4448:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 7214              	 .loc 1 4448 0
 7215 0040 FFF7FEFF 	 bl vPortExitCritical
4449:../Dave/Generated/FREERTOS/tasks.c **** 
4450:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 7216              	 .loc 1 4450 0
 7217 0044 FFF7FEFF 	 bl vPortEnterCritical
4451:../Dave/Generated/FREERTOS/tasks.c **** 		{
4452:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4453:../Dave/Generated/FREERTOS/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 7218              	 .loc 1 4453 0
 7219 0048 0F4B     	 ldr r3,.L486
 7220 004a 1B68     	 ldr r3,[r3]
 7221 004c 9B6E     	 ldr r3,[r3,#104]
 7222 004e FB60     	 str r3,[r7,#12]
4454:../Dave/Generated/FREERTOS/tasks.c **** 
4455:../Dave/Generated/FREERTOS/tasks.c **** 			if( ulReturn != 0UL )
 7223              	 .loc 1 4455 0
 7224 0050 FB68     	 ldr r3,[r7,#12]
 7225 0052 002B     	 cmp r3,#0
 7226 0054 0CD0     	 beq .L482
4456:../Dave/Generated/FREERTOS/tasks.c **** 			{
4457:../Dave/Generated/FREERTOS/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 7227              	 .loc 1 4457 0
 7228 0056 7B68     	 ldr r3,[r7,#4]
 7229 0058 002B     	 cmp r3,#0
 7230 005a 04D0     	 beq .L483
4458:../Dave/Generated/FREERTOS/tasks.c **** 				{
4459:../Dave/Generated/FREERTOS/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 7231              	 .loc 1 4459 0
 7232 005c 0A4B     	 ldr r3,.L486
 7233 005e 1B68     	 ldr r3,[r3]
 7234 0060 0022     	 movs r2,#0
 7235 0062 9A66     	 str r2,[r3,#104]
 7236 0064 04E0     	 b .L482
 7237              	.L483:
4460:../Dave/Generated/FREERTOS/tasks.c **** 				}
4461:../Dave/Generated/FREERTOS/tasks.c **** 				else
4462:../Dave/Generated/FREERTOS/tasks.c **** 				{
4463:../Dave/Generated/FREERTOS/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 7238              	 .loc 1 4463 0
 7239 0066 084B     	 ldr r3,.L486
 7240 0068 1B68     	 ldr r3,[r3]
 7241 006a FA68     	 ldr r2,[r7,#12]
 7242 006c 013A     	 subs r2,r2,#1
 7243 006e 9A66     	 str r2,[r3,#104]
 7244              	.L482:
4464:../Dave/Generated/FREERTOS/tasks.c **** 				}
4465:../Dave/Generated/FREERTOS/tasks.c **** 			}
4466:../Dave/Generated/FREERTOS/tasks.c **** 			else
4467:../Dave/Generated/FREERTOS/tasks.c **** 			{
4468:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4469:../Dave/Generated/FREERTOS/tasks.c **** 			}
4470:../Dave/Generated/FREERTOS/tasks.c **** 
4471:../Dave/Generated/FREERTOS/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7245              	 .loc 1 4471 0
 7246 0070 054B     	 ldr r3,.L486
 7247 0072 1B68     	 ldr r3,[r3]
 7248 0074 0022     	 movs r2,#0
 7249 0076 83F86C20 	 strb r2,[r3,#108]
4472:../Dave/Generated/FREERTOS/tasks.c **** 		}
4473:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 7250              	 .loc 1 4473 0
 7251 007a FFF7FEFF 	 bl vPortExitCritical
4474:../Dave/Generated/FREERTOS/tasks.c **** 
4475:../Dave/Generated/FREERTOS/tasks.c **** 		return ulReturn;
 7252              	 .loc 1 4475 0
 7253 007e FB68     	 ldr r3,[r7,#12]
4476:../Dave/Generated/FREERTOS/tasks.c **** 	}
 7254              	 .loc 1 4476 0
 7255 0080 1846     	 mov r0,r3
 7256 0082 1037     	 adds r7,r7,#16
 7257              	.LCFI313:
 7258              	 .cfi_def_cfa_offset 8
 7259 0084 BD46     	 mov sp,r7
 7260              	.LCFI314:
 7261              	 .cfi_def_cfa_register 13
 7262              	 
 7263 0086 80BD     	 pop {r7,pc}
 7264              	.L487:
 7265              	 .align 2
 7266              	.L486:
 7267 0088 00000000 	 .word pxCurrentTCB
 7268 008c 04ED00E0 	 .word -536810236
 7269              	 .cfi_endproc
 7270              	.LFE195:
 7272              	 .section .text.xTaskNotifyWait,"ax",%progbits
 7273              	 .align 2
 7274              	 .global xTaskNotifyWait
 7275              	 .thumb
 7276              	 .thumb_func
 7278              	xTaskNotifyWait:
 7279              	.LFB196:
4477:../Dave/Generated/FREERTOS/tasks.c **** 
4478:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4479:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4480:../Dave/Generated/FREERTOS/tasks.c **** 
4481:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4482:../Dave/Generated/FREERTOS/tasks.c **** 
4483:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4484:../Dave/Generated/FREERTOS/tasks.c **** 	{
 7280              	 .loc 1 4484 0
 7281              	 .cfi_startproc
 7282              	 
 7283              	 
 7284 0000 80B5     	 push {r7,lr}
 7285              	.LCFI315:
 7286              	 .cfi_def_cfa_offset 8
 7287              	 .cfi_offset 7,-8
 7288              	 .cfi_offset 14,-4
 7289 0002 86B0     	 sub sp,sp,#24
 7290              	.LCFI316:
 7291              	 .cfi_def_cfa_offset 32
 7292 0004 00AF     	 add r7,sp,#0
 7293              	.LCFI317:
 7294              	 .cfi_def_cfa_register 7
 7295 0006 F860     	 str r0,[r7,#12]
 7296 0008 B960     	 str r1,[r7,#8]
 7297 000a 7A60     	 str r2,[r7,#4]
 7298 000c 3B60     	 str r3,[r7]
4485:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
4486:../Dave/Generated/FREERTOS/tasks.c **** 
4487:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 7299              	 .loc 1 4487 0
 7300 000e FFF7FEFF 	 bl vPortEnterCritical
4488:../Dave/Generated/FREERTOS/tasks.c **** 		{
4489:../Dave/Generated/FREERTOS/tasks.c **** 			/* Only block if a notification is not already pending. */
4490:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 7301              	 .loc 1 4490 0
 7302 0012 264B     	 ldr r3,.L494
 7303 0014 1B68     	 ldr r3,[r3]
 7304 0016 93F86C30 	 ldrb r3,[r3,#108]
 7305 001a DBB2     	 uxtb r3,r3
 7306 001c 022B     	 cmp r3,#2
 7307 001e 1AD0     	 beq .L489
4491:../Dave/Generated/FREERTOS/tasks.c **** 			{
4492:../Dave/Generated/FREERTOS/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4493:../Dave/Generated/FREERTOS/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4494:../Dave/Generated/FREERTOS/tasks.c **** 				clear the value to zero. */
4495:../Dave/Generated/FREERTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 7308              	 .loc 1 4495 0
 7309 0020 224B     	 ldr r3,.L494
 7310 0022 1B68     	 ldr r3,[r3]
 7311 0024 996E     	 ldr r1,[r3,#104]
 7312 0026 FA68     	 ldr r2,[r7,#12]
 7313 0028 D243     	 mvns r2,r2
 7314 002a 0A40     	 ands r2,r2,r1
 7315 002c 9A66     	 str r2,[r3,#104]
4496:../Dave/Generated/FREERTOS/tasks.c **** 
4497:../Dave/Generated/FREERTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
4498:../Dave/Generated/FREERTOS/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 7316              	 .loc 1 4498 0
 7317 002e 1F4B     	 ldr r3,.L494
 7318 0030 1B68     	 ldr r3,[r3]
 7319 0032 0122     	 movs r2,#1
 7320 0034 83F86C20 	 strb r2,[r3,#108]
4499:../Dave/Generated/FREERTOS/tasks.c **** 
4500:../Dave/Generated/FREERTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 7321              	 .loc 1 4500 0
 7322 0038 3B68     	 ldr r3,[r7]
 7323 003a 002B     	 cmp r3,#0
 7324 003c 0BD0     	 beq .L489
4501:../Dave/Generated/FREERTOS/tasks.c **** 				{
4502:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 7325              	 .loc 1 4502 0
 7326 003e 3868     	 ldr r0,[r7]
 7327 0040 0121     	 movs r1,#1
 7328 0042 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
4503:../Dave/Generated/FREERTOS/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4504:../Dave/Generated/FREERTOS/tasks.c **** 
4505:../Dave/Generated/FREERTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
4506:../Dave/Generated/FREERTOS/tasks.c **** 					section (some will yield immediately, others wait until the
4507:../Dave/Generated/FREERTOS/tasks.c **** 					critical section exits) - but it is not something that
4508:../Dave/Generated/FREERTOS/tasks.c **** 					application code should ever do. */
4509:../Dave/Generated/FREERTOS/tasks.c **** 					portYIELD_WITHIN_API();
 7329              	 .loc 1 4509 0
 7330 0046 1A4B     	 ldr r3,.L494+4
 7331 0048 4FF08052 	 mov r2,#268435456
 7332 004c 1A60     	 str r2,[r3]
 7333              	
 7334 004e BFF34F8F 	 dsb
 7335              	
 7336              	
 7337 0052 BFF36F8F 	 isb
 7338              	
 7339              	 .thumb
 7340              	.L489:
4510:../Dave/Generated/FREERTOS/tasks.c **** 				}
4511:../Dave/Generated/FREERTOS/tasks.c **** 				else
4512:../Dave/Generated/FREERTOS/tasks.c **** 				{
4513:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4514:../Dave/Generated/FREERTOS/tasks.c **** 				}
4515:../Dave/Generated/FREERTOS/tasks.c **** 			}
4516:../Dave/Generated/FREERTOS/tasks.c **** 			else
4517:../Dave/Generated/FREERTOS/tasks.c **** 			{
4518:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4519:../Dave/Generated/FREERTOS/tasks.c **** 			}
4520:../Dave/Generated/FREERTOS/tasks.c **** 		}
4521:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 7341              	 .loc 1 4521 0
 7342 0056 FFF7FEFF 	 bl vPortExitCritical
4522:../Dave/Generated/FREERTOS/tasks.c **** 
4523:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 7343              	 .loc 1 4523 0
 7344 005a FFF7FEFF 	 bl vPortEnterCritical
4524:../Dave/Generated/FREERTOS/tasks.c **** 		{
4525:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4526:../Dave/Generated/FREERTOS/tasks.c **** 
4527:../Dave/Generated/FREERTOS/tasks.c **** 			if( pulNotificationValue != NULL )
 7345              	 .loc 1 4527 0
 7346 005e 7B68     	 ldr r3,[r7,#4]
 7347 0060 002B     	 cmp r3,#0
 7348 0062 04D0     	 beq .L490
4528:../Dave/Generated/FREERTOS/tasks.c **** 			{
4529:../Dave/Generated/FREERTOS/tasks.c **** 				/* Output the current notification value, which may or may not
4530:../Dave/Generated/FREERTOS/tasks.c **** 				have changed. */
4531:../Dave/Generated/FREERTOS/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 7349              	 .loc 1 4531 0
 7350 0064 114B     	 ldr r3,.L494
 7351 0066 1B68     	 ldr r3,[r3]
 7352 0068 9A6E     	 ldr r2,[r3,#104]
 7353 006a 7B68     	 ldr r3,[r7,#4]
 7354 006c 1A60     	 str r2,[r3]
 7355              	.L490:
4532:../Dave/Generated/FREERTOS/tasks.c **** 			}
4533:../Dave/Generated/FREERTOS/tasks.c **** 
4534:../Dave/Generated/FREERTOS/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4535:../Dave/Generated/FREERTOS/tasks.c **** 			blocked state (because a notification was already pending) or the
4536:../Dave/Generated/FREERTOS/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4537:../Dave/Generated/FREERTOS/tasks.c **** 			unblocked because of a timeout. */
4538:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 7356              	 .loc 1 4538 0
 7357 006e 0F4B     	 ldr r3,.L494
 7358 0070 1B68     	 ldr r3,[r3]
 7359 0072 93F86C30 	 ldrb r3,[r3,#108]
 7360 0076 DBB2     	 uxtb r3,r3
 7361 0078 022B     	 cmp r3,#2
 7362 007a 02D0     	 beq .L491
4539:../Dave/Generated/FREERTOS/tasks.c **** 			{
4540:../Dave/Generated/FREERTOS/tasks.c **** 				/* A notification was not received. */
4541:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdFALSE;
 7363              	 .loc 1 4541 0
 7364 007c 0023     	 movs r3,#0
 7365 007e 7B61     	 str r3,[r7,#20]
 7366 0080 08E0     	 b .L492
 7367              	.L491:
4542:../Dave/Generated/FREERTOS/tasks.c **** 			}
4543:../Dave/Generated/FREERTOS/tasks.c **** 			else
4544:../Dave/Generated/FREERTOS/tasks.c **** 			{
4545:../Dave/Generated/FREERTOS/tasks.c **** 				/* A notification was already pending or a notification was
4546:../Dave/Generated/FREERTOS/tasks.c **** 				received while the task was waiting. */
4547:../Dave/Generated/FREERTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 7368              	 .loc 1 4547 0
 7369 0082 0A4B     	 ldr r3,.L494
 7370 0084 1B68     	 ldr r3,[r3]
 7371 0086 996E     	 ldr r1,[r3,#104]
 7372 0088 BA68     	 ldr r2,[r7,#8]
 7373 008a D243     	 mvns r2,r2
 7374 008c 0A40     	 ands r2,r2,r1
 7375 008e 9A66     	 str r2,[r3,#104]
4548:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdTRUE;
 7376              	 .loc 1 4548 0
 7377 0090 0123     	 movs r3,#1
 7378 0092 7B61     	 str r3,[r7,#20]
 7379              	.L492:
4549:../Dave/Generated/FREERTOS/tasks.c **** 			}
4550:../Dave/Generated/FREERTOS/tasks.c **** 
4551:../Dave/Generated/FREERTOS/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7380              	 .loc 1 4551 0
 7381 0094 054B     	 ldr r3,.L494
 7382 0096 1B68     	 ldr r3,[r3]
 7383 0098 0022     	 movs r2,#0
 7384 009a 83F86C20 	 strb r2,[r3,#108]
4552:../Dave/Generated/FREERTOS/tasks.c **** 		}
4553:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 7385              	 .loc 1 4553 0
 7386 009e FFF7FEFF 	 bl vPortExitCritical
4554:../Dave/Generated/FREERTOS/tasks.c **** 
4555:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 7387              	 .loc 1 4555 0
 7388 00a2 7B69     	 ldr r3,[r7,#20]
4556:../Dave/Generated/FREERTOS/tasks.c **** 	}
 7389              	 .loc 1 4556 0
 7390 00a4 1846     	 mov r0,r3
 7391 00a6 1837     	 adds r7,r7,#24
 7392              	.LCFI318:
 7393              	 .cfi_def_cfa_offset 8
 7394 00a8 BD46     	 mov sp,r7
 7395              	.LCFI319:
 7396              	 .cfi_def_cfa_register 13
 7397              	 
 7398 00aa 80BD     	 pop {r7,pc}
 7399              	.L495:
 7400              	 .align 2
 7401              	.L494:
 7402 00ac 00000000 	 .word pxCurrentTCB
 7403 00b0 04ED00E0 	 .word -536810236
 7404              	 .cfi_endproc
 7405              	.LFE196:
 7407              	 .section .text.xTaskGenericNotify,"ax",%progbits
 7408              	 .align 2
 7409              	 .global xTaskGenericNotify
 7410              	 .thumb
 7411              	 .thumb_func
 7413              	xTaskGenericNotify:
 7414              	.LFB197:
4557:../Dave/Generated/FREERTOS/tasks.c **** 
4558:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4559:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4560:../Dave/Generated/FREERTOS/tasks.c **** 
4561:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4562:../Dave/Generated/FREERTOS/tasks.c **** 
4563:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4564:../Dave/Generated/FREERTOS/tasks.c **** 	{
 7415              	 .loc 1 4564 0
 7416              	 .cfi_startproc
 7417              	 
 7418              	 
 7419 0000 80B5     	 push {r7,lr}
 7420              	.LCFI320:
 7421              	 .cfi_def_cfa_offset 8
 7422              	 .cfi_offset 7,-8
 7423              	 .cfi_offset 14,-4
 7424 0002 8AB0     	 sub sp,sp,#40
 7425              	.LCFI321:
 7426              	 .cfi_def_cfa_offset 48
 7427 0004 00AF     	 add r7,sp,#0
 7428              	.LCFI322:
 7429              	 .cfi_def_cfa_register 7
 7430 0006 F860     	 str r0,[r7,#12]
 7431 0008 B960     	 str r1,[r7,#8]
 7432 000a 3B60     	 str r3,[r7]
 7433 000c 1346     	 mov r3,r2
 7434 000e FB71     	 strb r3,[r7,#7]
4565:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * pxTCB;
4566:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7435              	 .loc 1 4566 0
 7436 0010 0123     	 movs r3,#1
 7437 0012 7B62     	 str r3,[r7,#36]
4567:../Dave/Generated/FREERTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4568:../Dave/Generated/FREERTOS/tasks.c **** 
4569:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTaskToNotify );
 7438              	 .loc 1 4569 0
 7439 0014 FB68     	 ldr r3,[r7,#12]
 7440 0016 002B     	 cmp r3,#0
 7441 0018 09D1     	 bne .L497
 7442              	.LBB206:
 7443              	.LBB207:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 7444              	 .loc 2 195 0 discriminator 1
 7445              	
 7446 001a 4FF0FC03 	 mov r3,#252
 7447 001e 83F31188 	 msr basepri,r3
 7448 0022 BFF36F8F 	 isb 
 7449 0026 BFF34F8F 	 dsb 
 7450              	
 7451              	
 7452              	 .thumb
 7453 002a BB61     	 str r3,[r7,#24]
 7454              	.L498:
 7455              	.LBE207:
 7456              	.LBE206:
 7457              	 .loc 1 4569 0 discriminator 1
 7458 002c FEE7     	 b .L498
 7459              	.L497:
4570:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 7460              	 .loc 1 4570 0
 7461 002e FB68     	 ldr r3,[r7,#12]
 7462 0030 3B62     	 str r3,[r7,#32]
4571:../Dave/Generated/FREERTOS/tasks.c **** 
4572:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 7463              	 .loc 1 4572 0
 7464 0032 FFF7FEFF 	 bl vPortEnterCritical
4573:../Dave/Generated/FREERTOS/tasks.c **** 		{
4574:../Dave/Generated/FREERTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7465              	 .loc 1 4574 0
 7466 0036 3B68     	 ldr r3,[r7]
 7467 0038 002B     	 cmp r3,#0
 7468 003a 03D0     	 beq .L499
4575:../Dave/Generated/FREERTOS/tasks.c **** 			{
4576:../Dave/Generated/FREERTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7469              	 .loc 1 4576 0
 7470 003c 3B6A     	 ldr r3,[r7,#32]
 7471 003e 9A6E     	 ldr r2,[r3,#104]
 7472 0040 3B68     	 ldr r3,[r7]
 7473 0042 1A60     	 str r2,[r3]
 7474              	.L499:
4577:../Dave/Generated/FREERTOS/tasks.c **** 			}
4578:../Dave/Generated/FREERTOS/tasks.c **** 
4579:../Dave/Generated/FREERTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7475              	 .loc 1 4579 0
 7476 0044 3B6A     	 ldr r3,[r7,#32]
 7477 0046 93F86C30 	 ldrb r3,[r3,#108]
 7478 004a FB77     	 strb r3,[r7,#31]
4580:../Dave/Generated/FREERTOS/tasks.c **** 
4581:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7479              	 .loc 1 4581 0
 7480 004c 3B6A     	 ldr r3,[r7,#32]
 7481 004e 0222     	 movs r2,#2
 7482 0050 83F86C20 	 strb r2,[r3,#108]
4582:../Dave/Generated/FREERTOS/tasks.c **** 
4583:../Dave/Generated/FREERTOS/tasks.c **** 			switch( eAction )
 7483              	 .loc 1 4583 0
 7484 0054 FB79     	 ldrb r3,[r7,#7]
 7485 0056 042B     	 cmp r3,#4
 7486 0058 27D8     	 bhi .L500
 7487 005a 01A2     	 adr r2,.L502
 7488 005c 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 7489              	 .p2align 2
 7490              	.L502:
 7491 0060 AB000000 	 .word .L500+1
 7492 0064 75000000 	 .word .L503+1
 7493 0068 83000000 	 .word .L504+1
 7494 006c 8F000000 	 .word .L505+1
 7495 0070 97000000 	 .word .L506+1
 7496              	 .p2align 1
 7497              	.L503:
4584:../Dave/Generated/FREERTOS/tasks.c **** 			{
4585:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetBits	:
4586:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7498              	 .loc 1 4586 0
 7499 0074 3B6A     	 ldr r3,[r7,#32]
 7500 0076 9A6E     	 ldr r2,[r3,#104]
 7501 0078 BB68     	 ldr r3,[r7,#8]
 7502 007a 1A43     	 orrs r2,r2,r3
 7503 007c 3B6A     	 ldr r3,[r7,#32]
 7504 007e 9A66     	 str r2,[r3,#104]
4587:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7505              	 .loc 1 4587 0
 7506 0080 13E0     	 b .L500
 7507              	.L504:
4588:../Dave/Generated/FREERTOS/tasks.c **** 
4589:../Dave/Generated/FREERTOS/tasks.c **** 				case eIncrement	:
4590:../Dave/Generated/FREERTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7508              	 .loc 1 4590 0
 7509 0082 3B6A     	 ldr r3,[r7,#32]
 7510 0084 9B6E     	 ldr r3,[r3,#104]
 7511 0086 5A1C     	 adds r2,r3,#1
 7512 0088 3B6A     	 ldr r3,[r7,#32]
 7513 008a 9A66     	 str r2,[r3,#104]
4591:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7514              	 .loc 1 4591 0
 7515 008c 0DE0     	 b .L500
 7516              	.L505:
4592:../Dave/Generated/FREERTOS/tasks.c **** 
4593:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4594:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7517              	 .loc 1 4594 0
 7518 008e 3B6A     	 ldr r3,[r7,#32]
 7519 0090 BA68     	 ldr r2,[r7,#8]
 7520 0092 9A66     	 str r2,[r3,#104]
4595:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7521              	 .loc 1 4595 0
 7522 0094 09E0     	 b .L500
 7523              	.L506:
4596:../Dave/Generated/FREERTOS/tasks.c **** 
4597:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4598:../Dave/Generated/FREERTOS/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7524              	 .loc 1 4598 0
 7525 0096 FB7F     	 ldrb r3,[r7,#31]
 7526 0098 022B     	 cmp r3,#2
 7527 009a 03D0     	 beq .L507
4599:../Dave/Generated/FREERTOS/tasks.c **** 					{
4600:../Dave/Generated/FREERTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7528              	 .loc 1 4600 0
 7529 009c 3B6A     	 ldr r3,[r7,#32]
 7530 009e BA68     	 ldr r2,[r7,#8]
 7531 00a0 9A66     	 str r2,[r3,#104]
4601:../Dave/Generated/FREERTOS/tasks.c **** 					}
4602:../Dave/Generated/FREERTOS/tasks.c **** 					else
4603:../Dave/Generated/FREERTOS/tasks.c **** 					{
4604:../Dave/Generated/FREERTOS/tasks.c **** 						/* The value could not be written to the task. */
4605:../Dave/Generated/FREERTOS/tasks.c **** 						xReturn = pdFAIL;
4606:../Dave/Generated/FREERTOS/tasks.c **** 					}
4607:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7532              	 .loc 1 4607 0
 7533 00a2 01E0     	 b .L513
 7534              	.L507:
4605:../Dave/Generated/FREERTOS/tasks.c **** 					}
 7535              	 .loc 1 4605 0
 7536 00a4 0023     	 movs r3,#0
 7537 00a6 7B62     	 str r3,[r7,#36]
 7538              	.L513:
 7539              	 .loc 1 4607 0
 7540 00a8 00BF     	 nop
 7541              	.L500:
4608:../Dave/Generated/FREERTOS/tasks.c **** 
4609:../Dave/Generated/FREERTOS/tasks.c **** 				case eNoAction:
4610:../Dave/Generated/FREERTOS/tasks.c **** 					/* The task is being notified without its notify value being
4611:../Dave/Generated/FREERTOS/tasks.c **** 					updated. */
4612:../Dave/Generated/FREERTOS/tasks.c **** 					break;
4613:../Dave/Generated/FREERTOS/tasks.c **** 			}
4614:../Dave/Generated/FREERTOS/tasks.c **** 
4615:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_NOTIFY();
4616:../Dave/Generated/FREERTOS/tasks.c **** 
4617:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4618:../Dave/Generated/FREERTOS/tasks.c **** 			notification then unblock it now. */
4619:../Dave/Generated/FREERTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7542              	 .loc 1 4619 0
 7543 00aa FB7F     	 ldrb r3,[r7,#31]
 7544 00ac 012B     	 cmp r3,#1
 7545 00ae 3AD1     	 bne .L509
4620:../Dave/Generated/FREERTOS/tasks.c **** 			{
4621:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7546              	 .loc 1 4621 0
 7547 00b0 3B6A     	 ldr r3,[r7,#32]
 7548 00b2 0433     	 adds r3,r3,#4
 7549 00b4 1846     	 mov r0,r3
 7550 00b6 FFF7FEFF 	 bl uxListRemove
4622:../Dave/Generated/FREERTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 7551              	 .loc 1 4622 0
 7552 00ba 3B6A     	 ldr r3,[r7,#32]
 7553 00bc DB6A     	 ldr r3,[r3,#44]
 7554 00be 1A46     	 mov r2,r3
 7555 00c0 0123     	 movs r3,#1
 7556 00c2 03FA02F2 	 lsl r2,r3,r2
 7557 00c6 1B4B     	 ldr r3,.L514
 7558 00c8 1B68     	 ldr r3,[r3]
 7559 00ca 1343     	 orrs r3,r3,r2
 7560 00cc 194A     	 ldr r2,.L514
 7561 00ce 1360     	 str r3,[r2]
 7562 00d0 3B6A     	 ldr r3,[r7,#32]
 7563 00d2 DA6A     	 ldr r2,[r3,#44]
 7564 00d4 1346     	 mov r3,r2
 7565 00d6 9B00     	 lsls r3,r3,#2
 7566 00d8 1344     	 add r3,r3,r2
 7567 00da 9B00     	 lsls r3,r3,#2
 7568 00dc 164A     	 ldr r2,.L514+4
 7569 00de 1A44     	 add r2,r2,r3
 7570 00e0 3B6A     	 ldr r3,[r7,#32]
 7571 00e2 0433     	 adds r3,r3,#4
 7572 00e4 1046     	 mov r0,r2
 7573 00e6 1946     	 mov r1,r3
 7574 00e8 FFF7FEFF 	 bl vListInsertEnd
4623:../Dave/Generated/FREERTOS/tasks.c **** 
4624:../Dave/Generated/FREERTOS/tasks.c **** 				/* The task should not have been on an event list. */
4625:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7575              	 .loc 1 4625 0
 7576 00ec 3B6A     	 ldr r3,[r7,#32]
 7577 00ee 9B6A     	 ldr r3,[r3,#40]
 7578 00f0 002B     	 cmp r3,#0
 7579 00f2 09D0     	 beq .L510
 7580              	.LBB208:
 7581              	.LBB209:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 7582              	 .loc 2 195 0 discriminator 1
 7583              	
 7584 00f4 4FF0FC03 	 mov r3,#252
 7585 00f8 83F31188 	 msr basepri,r3
 7586 00fc BFF36F8F 	 isb 
 7587 0100 BFF34F8F 	 dsb 
 7588              	
 7589              	
 7590              	 .thumb
 7591 0104 7B61     	 str r3,[r7,#20]
 7592              	.L511:
 7593              	.LBE209:
 7594              	.LBE208:
 7595              	 .loc 1 4625 0 discriminator 2
 7596 0106 FEE7     	 b .L511
 7597              	.L510:
4626:../Dave/Generated/FREERTOS/tasks.c **** 
4627:../Dave/Generated/FREERTOS/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4628:../Dave/Generated/FREERTOS/tasks.c **** 				{
4629:../Dave/Generated/FREERTOS/tasks.c **** 					/* If a task is blocked waiting for a notification then
4630:../Dave/Generated/FREERTOS/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4631:../Dave/Generated/FREERTOS/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4632:../Dave/Generated/FREERTOS/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4633:../Dave/Generated/FREERTOS/tasks.c **** 					because it will automatically get reset to a new value when
4634:../Dave/Generated/FREERTOS/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4635:../Dave/Generated/FREERTOS/tasks.c **** 					tickless idling is used it might be more important to enter
4636:../Dave/Generated/FREERTOS/tasks.c **** 					sleep mode at the earliest possible time - so reset
4637:../Dave/Generated/FREERTOS/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4638:../Dave/Generated/FREERTOS/tasks.c **** 					earliest possible time. */
4639:../Dave/Generated/FREERTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
4640:../Dave/Generated/FREERTOS/tasks.c **** 				}
4641:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
4642:../Dave/Generated/FREERTOS/tasks.c **** 
4643:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7598              	 .loc 1 4643 0
 7599 0108 3B6A     	 ldr r3,[r7,#32]
 7600 010a DA6A     	 ldr r2,[r3,#44]
 7601 010c 0B4B     	 ldr r3,.L514+8
 7602 010e 1B68     	 ldr r3,[r3]
 7603 0110 DB6A     	 ldr r3,[r3,#44]
 7604 0112 9A42     	 cmp r2,r3
 7605 0114 07D9     	 bls .L509
4644:../Dave/Generated/FREERTOS/tasks.c **** 				{
4645:../Dave/Generated/FREERTOS/tasks.c **** 					/* The notified task has a priority above the currently
4646:../Dave/Generated/FREERTOS/tasks.c **** 					executing task so a yield is required. */
4647:../Dave/Generated/FREERTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 7606              	 .loc 1 4647 0
 7607 0116 0A4B     	 ldr r3,.L514+12
 7608 0118 4FF08052 	 mov r2,#268435456
 7609 011c 1A60     	 str r2,[r3]
 7610              	
 7611 011e BFF34F8F 	 dsb
 7612              	
 7613              	
 7614 0122 BFF36F8F 	 isb
 7615              	
 7616              	 .thumb
 7617              	.L509:
4648:../Dave/Generated/FREERTOS/tasks.c **** 				}
4649:../Dave/Generated/FREERTOS/tasks.c **** 				else
4650:../Dave/Generated/FREERTOS/tasks.c **** 				{
4651:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4652:../Dave/Generated/FREERTOS/tasks.c **** 				}
4653:../Dave/Generated/FREERTOS/tasks.c **** 			}
4654:../Dave/Generated/FREERTOS/tasks.c **** 			else
4655:../Dave/Generated/FREERTOS/tasks.c **** 			{
4656:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4657:../Dave/Generated/FREERTOS/tasks.c **** 			}
4658:../Dave/Generated/FREERTOS/tasks.c **** 		}
4659:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 7618              	 .loc 1 4659 0
 7619 0126 FFF7FEFF 	 bl vPortExitCritical
4660:../Dave/Generated/FREERTOS/tasks.c **** 
4661:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 7620              	 .loc 1 4661 0
 7621 012a 7B6A     	 ldr r3,[r7,#36]
4662:../Dave/Generated/FREERTOS/tasks.c **** 	}
 7622              	 .loc 1 4662 0
 7623 012c 1846     	 mov r0,r3
 7624 012e 2837     	 adds r7,r7,#40
 7625              	.LCFI323:
 7626              	 .cfi_def_cfa_offset 8
 7627 0130 BD46     	 mov sp,r7
 7628              	.LCFI324:
 7629              	 .cfi_def_cfa_register 13
 7630              	 
 7631 0132 80BD     	 pop {r7,pc}
 7632              	.L515:
 7633              	 .align 2
 7634              	.L514:
 7635 0134 00000000 	 .word uxTopReadyPriority
 7636 0138 00000000 	 .word pxReadyTasksLists
 7637 013c 00000000 	 .word pxCurrentTCB
 7638 0140 04ED00E0 	 .word -536810236
 7639              	 .cfi_endproc
 7640              	.LFE197:
 7642              	 .section .text.xTaskGenericNotifyFromISR,"ax",%progbits
 7643              	 .align 2
 7644              	 .global xTaskGenericNotifyFromISR
 7645              	 .thumb
 7646              	 .thumb_func
 7648              	xTaskGenericNotifyFromISR:
 7649              	.LFB198:
4663:../Dave/Generated/FREERTOS/tasks.c **** 
4664:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4665:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4666:../Dave/Generated/FREERTOS/tasks.c **** 
4667:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4668:../Dave/Generated/FREERTOS/tasks.c **** 
4669:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4670:../Dave/Generated/FREERTOS/tasks.c **** 	{
 7650              	 .loc 1 4670 0
 7651              	 .cfi_startproc
 7652              	 
 7653              	 
 7654 0000 80B5     	 push {r7,lr}
 7655              	.LCFI325:
 7656              	 .cfi_def_cfa_offset 8
 7657              	 .cfi_offset 7,-8
 7658              	 .cfi_offset 14,-4
 7659 0002 8EB0     	 sub sp,sp,#56
 7660              	.LCFI326:
 7661              	 .cfi_def_cfa_offset 64
 7662 0004 00AF     	 add r7,sp,#0
 7663              	.LCFI327:
 7664              	 .cfi_def_cfa_register 7
 7665 0006 F860     	 str r0,[r7,#12]
 7666 0008 B960     	 str r1,[r7,#8]
 7667 000a 3B60     	 str r3,[r7]
 7668 000c 1346     	 mov r3,r2
 7669 000e FB71     	 strb r3,[r7,#7]
4671:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * pxTCB;
4672:../Dave/Generated/FREERTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4673:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7670              	 .loc 1 4673 0
 7671 0010 0123     	 movs r3,#1
 7672 0012 7B63     	 str r3,[r7,#52]
4674:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4675:../Dave/Generated/FREERTOS/tasks.c **** 
4676:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTaskToNotify );
 7673              	 .loc 1 4676 0
 7674 0014 FB68     	 ldr r3,[r7,#12]
 7675 0016 002B     	 cmp r3,#0
 7676 0018 09D1     	 bne .L517
 7677              	.LBB210:
 7678              	.LBB211:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 7679              	 .loc 2 195 0 discriminator 1
 7680              	
 7681 001a 4FF0FC03 	 mov r3,#252
 7682 001e 83F31188 	 msr basepri,r3
 7683 0022 BFF36F8F 	 isb 
 7684 0026 BFF34F8F 	 dsb 
 7685              	
 7686              	
 7687              	 .thumb
 7688 002a 7B62     	 str r3,[r7,#36]
 7689              	.L518:
 7690              	.LBE211:
 7691              	.LBE210:
 7692              	 .loc 1 4676 0 discriminator 1
 7693 002c FEE7     	 b .L518
 7694              	.L517:
4677:../Dave/Generated/FREERTOS/tasks.c **** 
4678:../Dave/Generated/FREERTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4679:../Dave/Generated/FREERTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4680:../Dave/Generated/FREERTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4681:../Dave/Generated/FREERTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4682:../Dave/Generated/FREERTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4683:../Dave/Generated/FREERTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4684:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4685:../Dave/Generated/FREERTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4686:../Dave/Generated/FREERTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4687:../Dave/Generated/FREERTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4688:../Dave/Generated/FREERTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4689:../Dave/Generated/FREERTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4690:../Dave/Generated/FREERTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4691:../Dave/Generated/FREERTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4692:../Dave/Generated/FREERTOS/tasks.c **** 		provided on the following link:
4693:../Dave/Generated/FREERTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4694:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7695              	 .loc 1 4694 0
 7696 002e FFF7FEFF 	 bl vPortValidateInterruptPriority
4695:../Dave/Generated/FREERTOS/tasks.c **** 
4696:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 7697              	 .loc 1 4696 0
 7698 0032 FB68     	 ldr r3,[r7,#12]
 7699 0034 3B63     	 str r3,[r7,#48]
 7700              	.LBB212:
 7701              	.LBB213:
 211:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 7702              	 .loc 2 211 0
 7703              	
 7704 0036 EFF31182 	 mrs r2,basepri
 7705 003a 4FF0FC03 	 mov r3,#252
 7706 003e 83F31188 	 msr basepri,r3
 7707 0042 BFF36F8F 	 isb 
 7708 0046 BFF34F8F 	 dsb 
 7709              	
 7710              	
 7711              	 .thumb
 7712 004a 3A62     	 str r2,[r7,#32]
 7713 004c FB61     	 str r3,[r7,#28]
 223:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
 7714              	 .loc 2 223 0
 7715 004e 3B6A     	 ldr r3,[r7,#32]
 7716              	.LBE213:
 7717              	.LBE212:
4697:../Dave/Generated/FREERTOS/tasks.c **** 
4698:../Dave/Generated/FREERTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7718              	 .loc 1 4698 0
 7719 0050 FB62     	 str r3,[r7,#44]
4699:../Dave/Generated/FREERTOS/tasks.c **** 		{
4700:../Dave/Generated/FREERTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7720              	 .loc 1 4700 0
 7721 0052 3B68     	 ldr r3,[r7]
 7722 0054 002B     	 cmp r3,#0
 7723 0056 03D0     	 beq .L520
4701:../Dave/Generated/FREERTOS/tasks.c **** 			{
4702:../Dave/Generated/FREERTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7724              	 .loc 1 4702 0
 7725 0058 3B6B     	 ldr r3,[r7,#48]
 7726 005a 9A6E     	 ldr r2,[r3,#104]
 7727 005c 3B68     	 ldr r3,[r7]
 7728 005e 1A60     	 str r2,[r3]
 7729              	.L520:
4703:../Dave/Generated/FREERTOS/tasks.c **** 			}
4704:../Dave/Generated/FREERTOS/tasks.c **** 
4705:../Dave/Generated/FREERTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7730              	 .loc 1 4705 0
 7731 0060 3B6B     	 ldr r3,[r7,#48]
 7732 0062 93F86C30 	 ldrb r3,[r3,#108]
 7733 0066 87F82B30 	 strb r3,[r7,#43]
4706:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7734              	 .loc 1 4706 0
 7735 006a 3B6B     	 ldr r3,[r7,#48]
 7736 006c 0222     	 movs r2,#2
 7737 006e 83F86C20 	 strb r2,[r3,#108]
4707:../Dave/Generated/FREERTOS/tasks.c **** 
4708:../Dave/Generated/FREERTOS/tasks.c **** 			switch( eAction )
 7738              	 .loc 1 4708 0
 7739 0072 FB79     	 ldrb r3,[r7,#7]
 7740 0074 042B     	 cmp r3,#4
 7741 0076 29D8     	 bhi .L521
 7742 0078 01A2     	 adr r2,.L523
 7743 007a 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 7744 007e 00BF     	 .p2align 2
 7745              	.L523:
 7746 0080 CD000000 	 .word .L521+1
 7747 0084 95000000 	 .word .L524+1
 7748 0088 A3000000 	 .word .L525+1
 7749 008c AF000000 	 .word .L526+1
 7750 0090 B7000000 	 .word .L527+1
 7751              	 .p2align 1
 7752              	.L524:
4709:../Dave/Generated/FREERTOS/tasks.c **** 			{
4710:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetBits	:
4711:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7753              	 .loc 1 4711 0
 7754 0094 3B6B     	 ldr r3,[r7,#48]
 7755 0096 9A6E     	 ldr r2,[r3,#104]
 7756 0098 BB68     	 ldr r3,[r7,#8]
 7757 009a 1A43     	 orrs r2,r2,r3
 7758 009c 3B6B     	 ldr r3,[r7,#48]
 7759 009e 9A66     	 str r2,[r3,#104]
4712:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7760              	 .loc 1 4712 0
 7761 00a0 14E0     	 b .L521
 7762              	.L525:
4713:../Dave/Generated/FREERTOS/tasks.c **** 
4714:../Dave/Generated/FREERTOS/tasks.c **** 				case eIncrement	:
4715:../Dave/Generated/FREERTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7763              	 .loc 1 4715 0
 7764 00a2 3B6B     	 ldr r3,[r7,#48]
 7765 00a4 9B6E     	 ldr r3,[r3,#104]
 7766 00a6 5A1C     	 adds r2,r3,#1
 7767 00a8 3B6B     	 ldr r3,[r7,#48]
 7768 00aa 9A66     	 str r2,[r3,#104]
4716:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7769              	 .loc 1 4716 0
 7770 00ac 0EE0     	 b .L521
 7771              	.L526:
4717:../Dave/Generated/FREERTOS/tasks.c **** 
4718:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4719:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7772              	 .loc 1 4719 0
 7773 00ae 3B6B     	 ldr r3,[r7,#48]
 7774 00b0 BA68     	 ldr r2,[r7,#8]
 7775 00b2 9A66     	 str r2,[r3,#104]
4720:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7776              	 .loc 1 4720 0
 7777 00b4 0AE0     	 b .L521
 7778              	.L527:
4721:../Dave/Generated/FREERTOS/tasks.c **** 
4722:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4723:../Dave/Generated/FREERTOS/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7779              	 .loc 1 4723 0
 7780 00b6 97F82B30 	 ldrb r3,[r7,#43]
 7781 00ba 022B     	 cmp r3,#2
 7782 00bc 03D0     	 beq .L528
4724:../Dave/Generated/FREERTOS/tasks.c **** 					{
4725:../Dave/Generated/FREERTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7783              	 .loc 1 4725 0
 7784 00be 3B6B     	 ldr r3,[r7,#48]
 7785 00c0 BA68     	 ldr r2,[r7,#8]
 7786 00c2 9A66     	 str r2,[r3,#104]
4726:../Dave/Generated/FREERTOS/tasks.c **** 					}
4727:../Dave/Generated/FREERTOS/tasks.c **** 					else
4728:../Dave/Generated/FREERTOS/tasks.c **** 					{
4729:../Dave/Generated/FREERTOS/tasks.c **** 						/* The value could not be written to the task. */
4730:../Dave/Generated/FREERTOS/tasks.c **** 						xReturn = pdFAIL;
4731:../Dave/Generated/FREERTOS/tasks.c **** 					}
4732:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7787              	 .loc 1 4732 0
 7788 00c4 01E0     	 b .L538
 7789              	.L528:
4730:../Dave/Generated/FREERTOS/tasks.c **** 					}
 7790              	 .loc 1 4730 0
 7791 00c6 0023     	 movs r3,#0
 7792 00c8 7B63     	 str r3,[r7,#52]
 7793              	.L538:
 7794              	 .loc 1 4732 0
 7795 00ca 00BF     	 nop
 7796              	.L521:
4733:../Dave/Generated/FREERTOS/tasks.c **** 
4734:../Dave/Generated/FREERTOS/tasks.c **** 				case eNoAction :
4735:../Dave/Generated/FREERTOS/tasks.c **** 					/* The task is being notified without its notify value being
4736:../Dave/Generated/FREERTOS/tasks.c **** 					updated. */
4737:../Dave/Generated/FREERTOS/tasks.c **** 					break;
4738:../Dave/Generated/FREERTOS/tasks.c **** 			}
4739:../Dave/Generated/FREERTOS/tasks.c **** 
4740:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4741:../Dave/Generated/FREERTOS/tasks.c **** 
4742:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4743:../Dave/Generated/FREERTOS/tasks.c **** 			notification then unblock it now. */
4744:../Dave/Generated/FREERTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7797              	 .loc 1 4744 0
 7798 00cc 97F82B30 	 ldrb r3,[r7,#43]
 7799 00d0 012B     	 cmp r3,#1
 7800 00d2 47D1     	 bne .L530
4745:../Dave/Generated/FREERTOS/tasks.c **** 			{
4746:../Dave/Generated/FREERTOS/tasks.c **** 				/* The task should not have been on an event list. */
4747:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7801              	 .loc 1 4747 0
 7802 00d4 3B6B     	 ldr r3,[r7,#48]
 7803 00d6 9B6A     	 ldr r3,[r3,#40]
 7804 00d8 002B     	 cmp r3,#0
 7805 00da 09D0     	 beq .L531
 7806              	.LBB214:
 7807              	.LBB215:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 7808              	 .loc 2 195 0 discriminator 1
 7809              	
 7810 00dc 4FF0FC03 	 mov r3,#252
 7811 00e0 83F31188 	 msr basepri,r3
 7812 00e4 BFF36F8F 	 isb 
 7813 00e8 BFF34F8F 	 dsb 
 7814              	
 7815              	
 7816              	 .thumb
 7817 00ec BB61     	 str r3,[r7,#24]
 7818              	.L532:
 7819              	.LBE215:
 7820              	.LBE214:
 7821              	 .loc 1 4747 0 discriminator 2
 7822 00ee FEE7     	 b .L532
 7823              	.L531:
4748:../Dave/Generated/FREERTOS/tasks.c **** 
4749:../Dave/Generated/FREERTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7824              	 .loc 1 4749 0
 7825 00f0 214B     	 ldr r3,.L539
 7826 00f2 1B68     	 ldr r3,[r3]
 7827 00f4 002B     	 cmp r3,#0
 7828 00f6 1ED1     	 bne .L533
4750:../Dave/Generated/FREERTOS/tasks.c **** 				{
4751:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7829              	 .loc 1 4751 0
 7830 00f8 3B6B     	 ldr r3,[r7,#48]
 7831 00fa 0433     	 adds r3,r3,#4
 7832 00fc 1846     	 mov r0,r3
 7833 00fe FFF7FEFF 	 bl uxListRemove
4752:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7834              	 .loc 1 4752 0
 7835 0102 3B6B     	 ldr r3,[r7,#48]
 7836 0104 DB6A     	 ldr r3,[r3,#44]
 7837 0106 1A46     	 mov r2,r3
 7838 0108 0123     	 movs r3,#1
 7839 010a 03FA02F2 	 lsl r2,r3,r2
 7840 010e 1B4B     	 ldr r3,.L539+4
 7841 0110 1B68     	 ldr r3,[r3]
 7842 0112 1343     	 orrs r3,r3,r2
 7843 0114 194A     	 ldr r2,.L539+4
 7844 0116 1360     	 str r3,[r2]
 7845 0118 3B6B     	 ldr r3,[r7,#48]
 7846 011a DA6A     	 ldr r2,[r3,#44]
 7847 011c 1346     	 mov r3,r2
 7848 011e 9B00     	 lsls r3,r3,#2
 7849 0120 1344     	 add r3,r3,r2
 7850 0122 9B00     	 lsls r3,r3,#2
 7851 0124 164A     	 ldr r2,.L539+8
 7852 0126 1A44     	 add r2,r2,r3
 7853 0128 3B6B     	 ldr r3,[r7,#48]
 7854 012a 0433     	 adds r3,r3,#4
 7855 012c 1046     	 mov r0,r2
 7856 012e 1946     	 mov r1,r3
 7857 0130 FFF7FEFF 	 bl vListInsertEnd
 7858 0134 05E0     	 b .L534
 7859              	.L533:
4753:../Dave/Generated/FREERTOS/tasks.c **** 				}
4754:../Dave/Generated/FREERTOS/tasks.c **** 				else
4755:../Dave/Generated/FREERTOS/tasks.c **** 				{
4756:../Dave/Generated/FREERTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4757:../Dave/Generated/FREERTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
4758:../Dave/Generated/FREERTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7860              	 .loc 1 4758 0
 7861 0136 3B6B     	 ldr r3,[r7,#48]
 7862 0138 1833     	 adds r3,r3,#24
 7863 013a 1248     	 ldr r0,.L539+12
 7864 013c 1946     	 mov r1,r3
 7865 013e FFF7FEFF 	 bl vListInsertEnd
 7866              	.L534:
4759:../Dave/Generated/FREERTOS/tasks.c **** 				}
4760:../Dave/Generated/FREERTOS/tasks.c **** 
4761:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7867              	 .loc 1 4761 0
 7868 0142 3B6B     	 ldr r3,[r7,#48]
 7869 0144 DA6A     	 ldr r2,[r3,#44]
 7870 0146 104B     	 ldr r3,.L539+16
 7871 0148 1B68     	 ldr r3,[r3]
 7872 014a DB6A     	 ldr r3,[r3,#44]
 7873 014c 9A42     	 cmp r2,r3
 7874 014e 09D9     	 bls .L530
4762:../Dave/Generated/FREERTOS/tasks.c **** 				{
4763:../Dave/Generated/FREERTOS/tasks.c **** 					/* The notified task has a priority above the currently
4764:../Dave/Generated/FREERTOS/tasks.c **** 					executing task so a yield is required. */
4765:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7875              	 .loc 1 4765 0
 7876 0150 3B6C     	 ldr r3,[r7,#64]
 7877 0152 002B     	 cmp r3,#0
 7878 0154 03D0     	 beq .L535
4766:../Dave/Generated/FREERTOS/tasks.c **** 					{
4767:../Dave/Generated/FREERTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7879              	 .loc 1 4767 0
 7880 0156 3B6C     	 ldr r3,[r7,#64]
 7881 0158 0122     	 movs r2,#1
 7882 015a 1A60     	 str r2,[r3]
 7883 015c 02E0     	 b .L530
 7884              	.L535:
4768:../Dave/Generated/FREERTOS/tasks.c **** 					}
4769:../Dave/Generated/FREERTOS/tasks.c **** 					else
4770:../Dave/Generated/FREERTOS/tasks.c **** 					{
4771:../Dave/Generated/FREERTOS/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4772:../Dave/Generated/FREERTOS/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4773:../Dave/Generated/FREERTOS/tasks.c **** 						safe FreeRTOS function. */
4774:../Dave/Generated/FREERTOS/tasks.c **** 						xYieldPending = pdTRUE;
 7885              	 .loc 1 4774 0
 7886 015e 0B4B     	 ldr r3,.L539+20
 7887 0160 0122     	 movs r2,#1
 7888 0162 1A60     	 str r2,[r3]
 7889              	.L530:
 7890 0164 FB6A     	 ldr r3,[r7,#44]
 7891 0166 7B61     	 str r3,[r7,#20]
 7892              	.LBB216:
 7893              	.LBB217:
 7894              	 .loc 2 229 0
 7895 0168 7B69     	 ldr r3,[r7,#20]
 7896              	
 7897 016a 83F31188 	 msr basepri,r3
 7898              	
 7899              	 .thumb
 7900              	.LBE217:
 7901              	.LBE216:
4775:../Dave/Generated/FREERTOS/tasks.c **** 					}
4776:../Dave/Generated/FREERTOS/tasks.c **** 				}
4777:../Dave/Generated/FREERTOS/tasks.c **** 				else
4778:../Dave/Generated/FREERTOS/tasks.c **** 				{
4779:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4780:../Dave/Generated/FREERTOS/tasks.c **** 				}
4781:../Dave/Generated/FREERTOS/tasks.c **** 			}
4782:../Dave/Generated/FREERTOS/tasks.c **** 		}
4783:../Dave/Generated/FREERTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4784:../Dave/Generated/FREERTOS/tasks.c **** 
4785:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 7902              	 .loc 1 4785 0
 7903 016e 7B6B     	 ldr r3,[r7,#52]
4786:../Dave/Generated/FREERTOS/tasks.c **** 	}
 7904              	 .loc 1 4786 0
 7905 0170 1846     	 mov r0,r3
 7906 0172 3837     	 adds r7,r7,#56
 7907              	.LCFI328:
 7908              	 .cfi_def_cfa_offset 8
 7909 0174 BD46     	 mov sp,r7
 7910              	.LCFI329:
 7911              	 .cfi_def_cfa_register 13
 7912              	 
 7913 0176 80BD     	 pop {r7,pc}
 7914              	.L540:
 7915              	 .align 2
 7916              	.L539:
 7917 0178 00000000 	 .word uxSchedulerSuspended
 7918 017c 00000000 	 .word uxTopReadyPriority
 7919 0180 00000000 	 .word pxReadyTasksLists
 7920 0184 00000000 	 .word xPendingReadyList
 7921 0188 00000000 	 .word pxCurrentTCB
 7922 018c 00000000 	 .word xYieldPending
 7923              	 .cfi_endproc
 7924              	.LFE198:
 7926              	 .section .text.vTaskNotifyGiveFromISR,"ax",%progbits
 7927              	 .align 2
 7928              	 .global vTaskNotifyGiveFromISR
 7929              	 .thumb
 7930              	 .thumb_func
 7932              	vTaskNotifyGiveFromISR:
 7933              	.LFB199:
4787:../Dave/Generated/FREERTOS/tasks.c **** 
4788:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4789:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4790:../Dave/Generated/FREERTOS/tasks.c **** 
4791:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4792:../Dave/Generated/FREERTOS/tasks.c **** 
4793:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4794:../Dave/Generated/FREERTOS/tasks.c **** 	{
 7934              	 .loc 1 4794 0
 7935              	 .cfi_startproc
 7936              	 
 7937              	 
 7938 0000 80B5     	 push {r7,lr}
 7939              	.LCFI330:
 7940              	 .cfi_def_cfa_offset 8
 7941              	 .cfi_offset 7,-8
 7942              	 .cfi_offset 14,-4
 7943 0002 8AB0     	 sub sp,sp,#40
 7944              	.LCFI331:
 7945              	 .cfi_def_cfa_offset 48
 7946 0004 00AF     	 add r7,sp,#0
 7947              	.LCFI332:
 7948              	 .cfi_def_cfa_register 7
 7949 0006 7860     	 str r0,[r7,#4]
 7950 0008 3960     	 str r1,[r7]
4795:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * pxTCB;
4796:../Dave/Generated/FREERTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4797:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4798:../Dave/Generated/FREERTOS/tasks.c **** 
4799:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTaskToNotify );
 7951              	 .loc 1 4799 0
 7952 000a 7B68     	 ldr r3,[r7,#4]
 7953 000c 002B     	 cmp r3,#0
 7954 000e 09D1     	 bne .L542
 7955              	.LBB218:
 7956              	.LBB219:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 7957              	 .loc 2 195 0 discriminator 1
 7958              	
 7959 0010 4FF0FC03 	 mov r3,#252
 7960 0014 83F31188 	 msr basepri,r3
 7961 0018 BFF36F8F 	 isb 
 7962 001c BFF34F8F 	 dsb 
 7963              	
 7964              	
 7965              	 .thumb
 7966 0020 BB61     	 str r3,[r7,#24]
 7967              	.L543:
 7968              	.LBE219:
 7969              	.LBE218:
 7970              	 .loc 1 4799 0 discriminator 1
 7971 0022 FEE7     	 b .L543
 7972              	.L542:
4800:../Dave/Generated/FREERTOS/tasks.c **** 
4801:../Dave/Generated/FREERTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4802:../Dave/Generated/FREERTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4803:../Dave/Generated/FREERTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4804:../Dave/Generated/FREERTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4805:../Dave/Generated/FREERTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4806:../Dave/Generated/FREERTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4807:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4808:../Dave/Generated/FREERTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4809:../Dave/Generated/FREERTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4810:../Dave/Generated/FREERTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4811:../Dave/Generated/FREERTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4812:../Dave/Generated/FREERTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4813:../Dave/Generated/FREERTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4814:../Dave/Generated/FREERTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4815:../Dave/Generated/FREERTOS/tasks.c **** 		provided on the following link:
4816:../Dave/Generated/FREERTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4817:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7973              	 .loc 1 4817 0
 7974 0024 FFF7FEFF 	 bl vPortValidateInterruptPriority
4818:../Dave/Generated/FREERTOS/tasks.c **** 
4819:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 7975              	 .loc 1 4819 0
 7976 0028 7B68     	 ldr r3,[r7,#4]
 7977 002a 7B62     	 str r3,[r7,#36]
 7978              	.LBB220:
 7979              	.LBB221:
 211:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 7980              	 .loc 2 211 0
 7981              	
 7982 002c EFF31182 	 mrs r2,basepri
 7983 0030 4FF0FC03 	 mov r3,#252
 7984 0034 83F31188 	 msr basepri,r3
 7985 0038 BFF36F8F 	 isb 
 7986 003c BFF34F8F 	 dsb 
 7987              	
 7988              	
 7989              	 .thumb
 7990 0040 7A61     	 str r2,[r7,#20]
 7991 0042 3B61     	 str r3,[r7,#16]
 223:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
 7992              	 .loc 2 223 0
 7993 0044 7B69     	 ldr r3,[r7,#20]
 7994              	.LBE221:
 7995              	.LBE220:
4820:../Dave/Generated/FREERTOS/tasks.c **** 
4821:../Dave/Generated/FREERTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7996              	 .loc 1 4821 0
 7997 0046 3B62     	 str r3,[r7,#32]
4822:../Dave/Generated/FREERTOS/tasks.c **** 		{
4823:../Dave/Generated/FREERTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7998              	 .loc 1 4823 0
 7999 0048 7B6A     	 ldr r3,[r7,#36]
 8000 004a 93F86C30 	 ldrb r3,[r3,#108]
 8001 004e FB77     	 strb r3,[r7,#31]
4824:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8002              	 .loc 1 4824 0
 8003 0050 7B6A     	 ldr r3,[r7,#36]
 8004 0052 0222     	 movs r2,#2
 8005 0054 83F86C20 	 strb r2,[r3,#108]
4825:../Dave/Generated/FREERTOS/tasks.c **** 
4826:../Dave/Generated/FREERTOS/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4827:../Dave/Generated/FREERTOS/tasks.c **** 			semaphore. */
4828:../Dave/Generated/FREERTOS/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 8006              	 .loc 1 4828 0
 8007 0058 7B6A     	 ldr r3,[r7,#36]
 8008 005a 9B6E     	 ldr r3,[r3,#104]
 8009 005c 5A1C     	 adds r2,r3,#1
 8010 005e 7B6A     	 ldr r3,[r7,#36]
 8011 0060 9A66     	 str r2,[r3,#104]
4829:../Dave/Generated/FREERTOS/tasks.c **** 
4830:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4831:../Dave/Generated/FREERTOS/tasks.c **** 
4832:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4833:../Dave/Generated/FREERTOS/tasks.c **** 			notification then unblock it now. */
4834:../Dave/Generated/FREERTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012              	 .loc 1 4834 0
 8013 0062 FB7F     	 ldrb r3,[r7,#31]
 8014 0064 012B     	 cmp r3,#1
 8015 0066 47D1     	 bne .L545
4835:../Dave/Generated/FREERTOS/tasks.c **** 			{
4836:../Dave/Generated/FREERTOS/tasks.c **** 				/* The task should not have been on an event list. */
4837:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8016              	 .loc 1 4837 0
 8017 0068 7B6A     	 ldr r3,[r7,#36]
 8018 006a 9B6A     	 ldr r3,[r3,#40]
 8019 006c 002B     	 cmp r3,#0
 8020 006e 09D0     	 beq .L546
 8021              	.LBB222:
 8022              	.LBB223:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 8023              	 .loc 2 195 0 discriminator 1
 8024              	
 8025 0070 4FF0FC03 	 mov r3,#252
 8026 0074 83F31188 	 msr basepri,r3
 8027 0078 BFF36F8F 	 isb 
 8028 007c BFF34F8F 	 dsb 
 8029              	
 8030              	
 8031              	 .thumb
 8032 0080 FB60     	 str r3,[r7,#12]
 8033              	.L547:
 8034              	.LBE223:
 8035              	.LBE222:
 8036              	 .loc 1 4837 0 discriminator 2
 8037 0082 FEE7     	 b .L547
 8038              	.L546:
4838:../Dave/Generated/FREERTOS/tasks.c **** 
4839:../Dave/Generated/FREERTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8039              	 .loc 1 4839 0
 8040 0084 204B     	 ldr r3,.L552
 8041 0086 1B68     	 ldr r3,[r3]
 8042 0088 002B     	 cmp r3,#0
 8043 008a 1ED1     	 bne .L548
4840:../Dave/Generated/FREERTOS/tasks.c **** 				{
4841:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8044              	 .loc 1 4841 0
 8045 008c 7B6A     	 ldr r3,[r7,#36]
 8046 008e 0433     	 adds r3,r3,#4
 8047 0090 1846     	 mov r0,r3
 8048 0092 FFF7FEFF 	 bl uxListRemove
4842:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 8049              	 .loc 1 4842 0
 8050 0096 7B6A     	 ldr r3,[r7,#36]
 8051 0098 DB6A     	 ldr r3,[r3,#44]
 8052 009a 1A46     	 mov r2,r3
 8053 009c 0123     	 movs r3,#1
 8054 009e 03FA02F2 	 lsl r2,r3,r2
 8055 00a2 1A4B     	 ldr r3,.L552+4
 8056 00a4 1B68     	 ldr r3,[r3]
 8057 00a6 1343     	 orrs r3,r3,r2
 8058 00a8 184A     	 ldr r2,.L552+4
 8059 00aa 1360     	 str r3,[r2]
 8060 00ac 7B6A     	 ldr r3,[r7,#36]
 8061 00ae DA6A     	 ldr r2,[r3,#44]
 8062 00b0 1346     	 mov r3,r2
 8063 00b2 9B00     	 lsls r3,r3,#2
 8064 00b4 1344     	 add r3,r3,r2
 8065 00b6 9B00     	 lsls r3,r3,#2
 8066 00b8 154A     	 ldr r2,.L552+8
 8067 00ba 1A44     	 add r2,r2,r3
 8068 00bc 7B6A     	 ldr r3,[r7,#36]
 8069 00be 0433     	 adds r3,r3,#4
 8070 00c0 1046     	 mov r0,r2
 8071 00c2 1946     	 mov r1,r3
 8072 00c4 FFF7FEFF 	 bl vListInsertEnd
 8073 00c8 05E0     	 b .L549
 8074              	.L548:
4843:../Dave/Generated/FREERTOS/tasks.c **** 				}
4844:../Dave/Generated/FREERTOS/tasks.c **** 				else
4845:../Dave/Generated/FREERTOS/tasks.c **** 				{
4846:../Dave/Generated/FREERTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4847:../Dave/Generated/FREERTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
4848:../Dave/Generated/FREERTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8075              	 .loc 1 4848 0
 8076 00ca 7B6A     	 ldr r3,[r7,#36]
 8077 00cc 1833     	 adds r3,r3,#24
 8078 00ce 1148     	 ldr r0,.L552+12
 8079 00d0 1946     	 mov r1,r3
 8080 00d2 FFF7FEFF 	 bl vListInsertEnd
 8081              	.L549:
4849:../Dave/Generated/FREERTOS/tasks.c **** 				}
4850:../Dave/Generated/FREERTOS/tasks.c **** 
4851:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8082              	 .loc 1 4851 0
 8083 00d6 7B6A     	 ldr r3,[r7,#36]
 8084 00d8 DA6A     	 ldr r2,[r3,#44]
 8085 00da 0F4B     	 ldr r3,.L552+16
 8086 00dc 1B68     	 ldr r3,[r3]
 8087 00de DB6A     	 ldr r3,[r3,#44]
 8088 00e0 9A42     	 cmp r2,r3
 8089 00e2 09D9     	 bls .L545
4852:../Dave/Generated/FREERTOS/tasks.c **** 				{
4853:../Dave/Generated/FREERTOS/tasks.c **** 					/* The notified task has a priority above the currently
4854:../Dave/Generated/FREERTOS/tasks.c **** 					executing task so a yield is required. */
4855:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 8090              	 .loc 1 4855 0
 8091 00e4 3B68     	 ldr r3,[r7]
 8092 00e6 002B     	 cmp r3,#0
 8093 00e8 03D0     	 beq .L550
4856:../Dave/Generated/FREERTOS/tasks.c **** 					{
4857:../Dave/Generated/FREERTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 8094              	 .loc 1 4857 0
 8095 00ea 3B68     	 ldr r3,[r7]
 8096 00ec 0122     	 movs r2,#1
 8097 00ee 1A60     	 str r2,[r3]
 8098 00f0 02E0     	 b .L545
 8099              	.L550:
4858:../Dave/Generated/FREERTOS/tasks.c **** 					}
4859:../Dave/Generated/FREERTOS/tasks.c **** 					else
4860:../Dave/Generated/FREERTOS/tasks.c **** 					{
4861:../Dave/Generated/FREERTOS/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4862:../Dave/Generated/FREERTOS/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4863:../Dave/Generated/FREERTOS/tasks.c **** 						safe FreeRTOS function. */
4864:../Dave/Generated/FREERTOS/tasks.c **** 						xYieldPending = pdTRUE;
 8100              	 .loc 1 4864 0
 8101 00f2 0A4B     	 ldr r3,.L552+20
 8102 00f4 0122     	 movs r2,#1
 8103 00f6 1A60     	 str r2,[r3]
 8104              	.L545:
 8105 00f8 3B6A     	 ldr r3,[r7,#32]
 8106 00fa BB60     	 str r3,[r7,#8]
 8107              	.LBB224:
 8108              	.LBB225:
 8109              	 .loc 2 229 0
 8110 00fc BB68     	 ldr r3,[r7,#8]
 8111              	
 8112 00fe 83F31188 	 msr basepri,r3
 8113              	
 8114              	 .thumb
 8115              	.LBE225:
 8116              	.LBE224:
4865:../Dave/Generated/FREERTOS/tasks.c **** 					}
4866:../Dave/Generated/FREERTOS/tasks.c **** 				}
4867:../Dave/Generated/FREERTOS/tasks.c **** 				else
4868:../Dave/Generated/FREERTOS/tasks.c **** 				{
4869:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4870:../Dave/Generated/FREERTOS/tasks.c **** 				}
4871:../Dave/Generated/FREERTOS/tasks.c **** 			}
4872:../Dave/Generated/FREERTOS/tasks.c **** 		}
4873:../Dave/Generated/FREERTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4874:../Dave/Generated/FREERTOS/tasks.c **** 	}
 8117              	 .loc 1 4874 0
 8118 0102 2837     	 adds r7,r7,#40
 8119              	.LCFI333:
 8120              	 .cfi_def_cfa_offset 8
 8121 0104 BD46     	 mov sp,r7
 8122              	.LCFI334:
 8123              	 .cfi_def_cfa_register 13
 8124              	 
 8125 0106 80BD     	 pop {r7,pc}
 8126              	.L553:
 8127              	 .align 2
 8128              	.L552:
 8129 0108 00000000 	 .word uxSchedulerSuspended
 8130 010c 00000000 	 .word uxTopReadyPriority
 8131 0110 00000000 	 .word pxReadyTasksLists
 8132 0114 00000000 	 .word xPendingReadyList
 8133 0118 00000000 	 .word pxCurrentTCB
 8134 011c 00000000 	 .word xYieldPending
 8135              	 .cfi_endproc
 8136              	.LFE199:
 8138              	 .section .text.xTaskNotifyStateClear,"ax",%progbits
 8139              	 .align 2
 8140              	 .global xTaskNotifyStateClear
 8141              	 .thumb
 8142              	 .thumb_func
 8144              	xTaskNotifyStateClear:
 8145              	.LFB200:
4875:../Dave/Generated/FREERTOS/tasks.c **** 
4876:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4877:../Dave/Generated/FREERTOS/tasks.c **** 
4878:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4879:../Dave/Generated/FREERTOS/tasks.c **** 
4880:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4881:../Dave/Generated/FREERTOS/tasks.c **** 
4882:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4883:../Dave/Generated/FREERTOS/tasks.c **** 	{
 8146              	 .loc 1 4883 0
 8147              	 .cfi_startproc
 8148              	 
 8149              	 
 8150 0000 80B5     	 push {r7,lr}
 8151              	.LCFI335:
 8152              	 .cfi_def_cfa_offset 8
 8153              	 .cfi_offset 7,-8
 8154              	 .cfi_offset 14,-4
 8155 0002 84B0     	 sub sp,sp,#16
 8156              	.LCFI336:
 8157              	 .cfi_def_cfa_offset 24
 8158 0004 00AF     	 add r7,sp,#0
 8159              	.LCFI337:
 8160              	 .cfi_def_cfa_register 7
 8161 0006 7860     	 str r0,[r7,#4]
4884:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
4885:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
4886:../Dave/Generated/FREERTOS/tasks.c **** 
4887:../Dave/Generated/FREERTOS/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4888:../Dave/Generated/FREERTOS/tasks.c **** 		its notification state cleared. */
4889:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 8162              	 .loc 1 4889 0
 8163 0008 7B68     	 ldr r3,[r7,#4]
 8164 000a 002B     	 cmp r3,#0
 8165 000c 02D1     	 bne .L555
 8166              	 .loc 1 4889 0 is_stmt 0 discriminator 1
 8167 000e 0E4B     	 ldr r3,.L560
 8168 0010 1B68     	 ldr r3,[r3]
 8169 0012 00E0     	 b .L556
 8170              	.L555:
 8171              	 .loc 1 4889 0 discriminator 2
 8172 0014 7B68     	 ldr r3,[r7,#4]
 8173              	.L556:
 8174              	 .loc 1 4889 0 discriminator 4
 8175 0016 BB60     	 str r3,[r7,#8]
4890:../Dave/Generated/FREERTOS/tasks.c **** 
4891:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 8176              	 .loc 1 4891 0 is_stmt 1 discriminator 4
 8177 0018 FFF7FEFF 	 bl vPortEnterCritical
4892:../Dave/Generated/FREERTOS/tasks.c **** 		{
4893:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8178              	 .loc 1 4893 0 discriminator 4
 8179 001c BB68     	 ldr r3,[r7,#8]
 8180 001e 93F86C30 	 ldrb r3,[r3,#108]
 8181 0022 DBB2     	 uxtb r3,r3
 8182 0024 022B     	 cmp r3,#2
 8183 0026 06D1     	 bne .L557
4894:../Dave/Generated/FREERTOS/tasks.c **** 			{
4895:../Dave/Generated/FREERTOS/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8184              	 .loc 1 4895 0
 8185 0028 BB68     	 ldr r3,[r7,#8]
 8186 002a 0022     	 movs r2,#0
 8187 002c 83F86C20 	 strb r2,[r3,#108]
4896:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdPASS;
 8188              	 .loc 1 4896 0
 8189 0030 0123     	 movs r3,#1
 8190 0032 FB60     	 str r3,[r7,#12]
 8191 0034 01E0     	 b .L558
 8192              	.L557:
4897:../Dave/Generated/FREERTOS/tasks.c **** 			}
4898:../Dave/Generated/FREERTOS/tasks.c **** 			else
4899:../Dave/Generated/FREERTOS/tasks.c **** 			{
4900:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdFAIL;
 8193              	 .loc 1 4900 0
 8194 0036 0023     	 movs r3,#0
 8195 0038 FB60     	 str r3,[r7,#12]
 8196              	.L558:
4901:../Dave/Generated/FREERTOS/tasks.c **** 			}
4902:../Dave/Generated/FREERTOS/tasks.c **** 		}
4903:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 8197              	 .loc 1 4903 0
 8198 003a FFF7FEFF 	 bl vPortExitCritical
4904:../Dave/Generated/FREERTOS/tasks.c **** 
4905:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 8199              	 .loc 1 4905 0
 8200 003e FB68     	 ldr r3,[r7,#12]
4906:../Dave/Generated/FREERTOS/tasks.c **** 	}
 8201              	 .loc 1 4906 0
 8202 0040 1846     	 mov r0,r3
 8203 0042 1037     	 adds r7,r7,#16
 8204              	.LCFI338:
 8205              	 .cfi_def_cfa_offset 8
 8206 0044 BD46     	 mov sp,r7
 8207              	.LCFI339:
 8208              	 .cfi_def_cfa_register 13
 8209              	 
 8210 0046 80BD     	 pop {r7,pc}
 8211              	.L561:
 8212              	 .align 2
 8213              	.L560:
 8214 0048 00000000 	 .word pxCurrentTCB
 8215              	 .cfi_endproc
 8216              	.LFE200:
 8218              	 .section .text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 8219              	 .align 2
 8220              	 .thumb
 8221              	 .thumb_func
 8223              	prvAddCurrentTaskToDelayedList:
 8224              	.LFB201:
4907:../Dave/Generated/FREERTOS/tasks.c **** 
4908:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4909:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4910:../Dave/Generated/FREERTOS/tasks.c **** 
4911:../Dave/Generated/FREERTOS/tasks.c **** 
4912:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4913:../Dave/Generated/FREERTOS/tasks.c **** {
 8225              	 .loc 1 4913 0
 8226              	 .cfi_startproc
 8227              	 
 8228              	 
 8229 0000 80B5     	 push {r7,lr}
 8230              	.LCFI340:
 8231              	 .cfi_def_cfa_offset 8
 8232              	 .cfi_offset 7,-8
 8233              	 .cfi_offset 14,-4
 8234 0002 84B0     	 sub sp,sp,#16
 8235              	.LCFI341:
 8236              	 .cfi_def_cfa_offset 24
 8237 0004 00AF     	 add r7,sp,#0
 8238              	.LCFI342:
 8239              	 .cfi_def_cfa_register 7
 8240 0006 7860     	 str r0,[r7,#4]
 8241 0008 3960     	 str r1,[r7]
4914:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTimeToWake;
4915:../Dave/Generated/FREERTOS/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 8242              	 .loc 1 4915 0
 8243 000a 2B4B     	 ldr r3,.L567
 8244 000c 1B68     	 ldr r3,[r3]
 8245 000e FB60     	 str r3,[r7,#12]
4916:../Dave/Generated/FREERTOS/tasks.c **** 
4917:../Dave/Generated/FREERTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4918:../Dave/Generated/FREERTOS/tasks.c **** 	{
4919:../Dave/Generated/FREERTOS/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4920:../Dave/Generated/FREERTOS/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4921:../Dave/Generated/FREERTOS/tasks.c **** 		when the task leaves the Blocked state. */
4922:../Dave/Generated/FREERTOS/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8246              	 .loc 1 4922 0
 8247 0010 2A4B     	 ldr r3,.L567+4
 8248 0012 1B68     	 ldr r3,[r3]
 8249 0014 0022     	 movs r2,#0
 8250 0016 83F86D20 	 strb r2,[r3,#109]
4923:../Dave/Generated/FREERTOS/tasks.c **** 	}
4924:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
4925:../Dave/Generated/FREERTOS/tasks.c **** 
4926:../Dave/Generated/FREERTOS/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4927:../Dave/Generated/FREERTOS/tasks.c **** 	as the same list item is used for both lists. */
4928:../Dave/Generated/FREERTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8251              	 .loc 1 4928 0
 8252 001a 284B     	 ldr r3,.L567+4
 8253 001c 1B68     	 ldr r3,[r3]
 8254 001e 0433     	 adds r3,r3,#4
 8255 0020 1846     	 mov r0,r3
 8256 0022 FFF7FEFF 	 bl uxListRemove
 8257 0026 0346     	 mov r3,r0
 8258 0028 002B     	 cmp r3,#0
 8259 002a 0BD1     	 bne .L563
4929:../Dave/Generated/FREERTOS/tasks.c **** 	{
4930:../Dave/Generated/FREERTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4931:../Dave/Generated/FREERTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
4932:../Dave/Generated/FREERTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8260              	 .loc 1 4932 0
 8261 002c 234B     	 ldr r3,.L567+4
 8262 002e 1B68     	 ldr r3,[r3]
 8263 0030 DB6A     	 ldr r3,[r3,#44]
 8264 0032 1A46     	 mov r2,r3
 8265 0034 0123     	 movs r3,#1
 8266 0036 9340     	 lsls r3,r3,r2
 8267 0038 DA43     	 mvns r2,r3
 8268 003a 214B     	 ldr r3,.L567+8
 8269 003c 1B68     	 ldr r3,[r3]
 8270 003e 1340     	 ands r3,r3,r2
 8271 0040 1F4A     	 ldr r2,.L567+8
 8272 0042 1360     	 str r3,[r2]
 8273              	.L563:
4933:../Dave/Generated/FREERTOS/tasks.c **** 	}
4934:../Dave/Generated/FREERTOS/tasks.c **** 	else
4935:../Dave/Generated/FREERTOS/tasks.c **** 	{
4936:../Dave/Generated/FREERTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4937:../Dave/Generated/FREERTOS/tasks.c **** 	}
4938:../Dave/Generated/FREERTOS/tasks.c **** 
4939:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4940:../Dave/Generated/FREERTOS/tasks.c **** 	{
4941:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8274              	 .loc 1 4941 0
 8275 0044 7B68     	 ldr r3,[r7,#4]
 8276 0046 B3F1FF3F 	 cmp r3,#-1
 8277 004a 0AD1     	 bne .L564
 8278              	 .loc 1 4941 0 is_stmt 0 discriminator 1
 8279 004c 3B68     	 ldr r3,[r7]
 8280 004e 002B     	 cmp r3,#0
 8281 0050 07D0     	 beq .L564
4942:../Dave/Generated/FREERTOS/tasks.c **** 		{
4943:../Dave/Generated/FREERTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4944:../Dave/Generated/FREERTOS/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4945:../Dave/Generated/FREERTOS/tasks.c **** 			indefinitely. */
4946:../Dave/Generated/FREERTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8282              	 .loc 1 4946 0 is_stmt 1
 8283 0052 1A4B     	 ldr r3,.L567+4
 8284 0054 1B68     	 ldr r3,[r3]
 8285 0056 0433     	 adds r3,r3,#4
 8286 0058 1A48     	 ldr r0,.L567+12
 8287 005a 1946     	 mov r1,r3
 8288 005c FFF7FEFF 	 bl vListInsertEnd
 8289 0060 26E0     	 b .L562
 8290              	.L564:
4947:../Dave/Generated/FREERTOS/tasks.c **** 		}
4948:../Dave/Generated/FREERTOS/tasks.c **** 		else
4949:../Dave/Generated/FREERTOS/tasks.c **** 		{
4950:../Dave/Generated/FREERTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4951:../Dave/Generated/FREERTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4952:../Dave/Generated/FREERTOS/tasks.c **** 			kernel will manage it correctly. */
4953:../Dave/Generated/FREERTOS/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 8291              	 .loc 1 4953 0
 8292 0062 FA68     	 ldr r2,[r7,#12]
 8293 0064 7B68     	 ldr r3,[r7,#4]
 8294 0066 1344     	 add r3,r3,r2
 8295 0068 BB60     	 str r3,[r7,#8]
4954:../Dave/Generated/FREERTOS/tasks.c **** 
4955:../Dave/Generated/FREERTOS/tasks.c **** 			/* The list item will be inserted in wake time order. */
4956:../Dave/Generated/FREERTOS/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8296              	 .loc 1 4956 0
 8297 006a 144B     	 ldr r3,.L567+4
 8298 006c 1B68     	 ldr r3,[r3]
 8299 006e BA68     	 ldr r2,[r7,#8]
 8300 0070 5A60     	 str r2,[r3,#4]
4957:../Dave/Generated/FREERTOS/tasks.c **** 
4958:../Dave/Generated/FREERTOS/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 8301              	 .loc 1 4958 0
 8302 0072 BA68     	 ldr r2,[r7,#8]
 8303 0074 FB68     	 ldr r3,[r7,#12]
 8304 0076 9A42     	 cmp r2,r3
 8305 0078 09D2     	 bcs .L566
4959:../Dave/Generated/FREERTOS/tasks.c **** 			{
4960:../Dave/Generated/FREERTOS/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4961:../Dave/Generated/FREERTOS/tasks.c **** 				list. */
4962:../Dave/Generated/FREERTOS/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8306              	 .loc 1 4962 0
 8307 007a 134B     	 ldr r3,.L567+16
 8308 007c 1A68     	 ldr r2,[r3]
 8309 007e 0F4B     	 ldr r3,.L567+4
 8310 0080 1B68     	 ldr r3,[r3]
 8311 0082 0433     	 adds r3,r3,#4
 8312 0084 1046     	 mov r0,r2
 8313 0086 1946     	 mov r1,r3
 8314 0088 FFF7FEFF 	 bl vListInsert
 8315 008c 10E0     	 b .L562
 8316              	.L566:
4963:../Dave/Generated/FREERTOS/tasks.c **** 			}
4964:../Dave/Generated/FREERTOS/tasks.c **** 			else
4965:../Dave/Generated/FREERTOS/tasks.c **** 			{
4966:../Dave/Generated/FREERTOS/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4967:../Dave/Generated/FREERTOS/tasks.c **** 				is used. */
4968:../Dave/Generated/FREERTOS/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8317              	 .loc 1 4968 0
 8318 008e 0F4B     	 ldr r3,.L567+20
 8319 0090 1A68     	 ldr r2,[r3]
 8320 0092 0A4B     	 ldr r3,.L567+4
 8321 0094 1B68     	 ldr r3,[r3]
 8322 0096 0433     	 adds r3,r3,#4
 8323 0098 1046     	 mov r0,r2
 8324 009a 1946     	 mov r1,r3
 8325 009c FFF7FEFF 	 bl vListInsert
4969:../Dave/Generated/FREERTOS/tasks.c **** 
4970:../Dave/Generated/FREERTOS/tasks.c **** 				/* If the task entering the blocked state was placed at the
4971:../Dave/Generated/FREERTOS/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4972:../Dave/Generated/FREERTOS/tasks.c **** 				needs to be updated too. */
4973:../Dave/Generated/FREERTOS/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 8326              	 .loc 1 4973 0
 8327 00a0 0B4B     	 ldr r3,.L567+24
 8328 00a2 1B68     	 ldr r3,[r3]
 8329 00a4 BA68     	 ldr r2,[r7,#8]
 8330 00a6 9A42     	 cmp r2,r3
 8331 00a8 02D2     	 bcs .L562
4974:../Dave/Generated/FREERTOS/tasks.c **** 				{
4975:../Dave/Generated/FREERTOS/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 8332              	 .loc 1 4975 0
 8333 00aa 094A     	 ldr r2,.L567+24
 8334 00ac BB68     	 ldr r3,[r7,#8]
 8335 00ae 1360     	 str r3,[r2]
 8336              	.L562:
4976:../Dave/Generated/FREERTOS/tasks.c **** 				}
4977:../Dave/Generated/FREERTOS/tasks.c **** 				else
4978:../Dave/Generated/FREERTOS/tasks.c **** 				{
4979:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4980:../Dave/Generated/FREERTOS/tasks.c **** 				}
4981:../Dave/Generated/FREERTOS/tasks.c **** 			}
4982:../Dave/Generated/FREERTOS/tasks.c **** 		}
4983:../Dave/Generated/FREERTOS/tasks.c **** 	}
4984:../Dave/Generated/FREERTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4985:../Dave/Generated/FREERTOS/tasks.c **** 	{
4986:../Dave/Generated/FREERTOS/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4987:../Dave/Generated/FREERTOS/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4988:../Dave/Generated/FREERTOS/tasks.c **** 		will manage it correctly. */
4989:../Dave/Generated/FREERTOS/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4990:../Dave/Generated/FREERTOS/tasks.c **** 
4991:../Dave/Generated/FREERTOS/tasks.c **** 		/* The list item will be inserted in wake time order. */
4992:../Dave/Generated/FREERTOS/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4993:../Dave/Generated/FREERTOS/tasks.c **** 
4994:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4995:../Dave/Generated/FREERTOS/tasks.c **** 		{
4996:../Dave/Generated/FREERTOS/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4997:../Dave/Generated/FREERTOS/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4998:../Dave/Generated/FREERTOS/tasks.c **** 		}
4999:../Dave/Generated/FREERTOS/tasks.c **** 		else
5000:../Dave/Generated/FREERTOS/tasks.c **** 		{
5001:../Dave/Generated/FREERTOS/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5002:../Dave/Generated/FREERTOS/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5003:../Dave/Generated/FREERTOS/tasks.c **** 
5004:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5005:../Dave/Generated/FREERTOS/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5006:../Dave/Generated/FREERTOS/tasks.c **** 			too. */
5007:../Dave/Generated/FREERTOS/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5008:../Dave/Generated/FREERTOS/tasks.c **** 			{
5009:../Dave/Generated/FREERTOS/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5010:../Dave/Generated/FREERTOS/tasks.c **** 			}
5011:../Dave/Generated/FREERTOS/tasks.c **** 			else
5012:../Dave/Generated/FREERTOS/tasks.c **** 			{
5013:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5014:../Dave/Generated/FREERTOS/tasks.c **** 			}
5015:../Dave/Generated/FREERTOS/tasks.c **** 		}
5016:../Dave/Generated/FREERTOS/tasks.c **** 
5017:../Dave/Generated/FREERTOS/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5018:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) xCanBlockIndefinitely;
5019:../Dave/Generated/FREERTOS/tasks.c **** 	}
5020:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5021:../Dave/Generated/FREERTOS/tasks.c **** }
 8337              	 .loc 1 5021 0
 8338 00b0 1037     	 adds r7,r7,#16
 8339              	.LCFI343:
 8340              	 .cfi_def_cfa_offset 8
 8341 00b2 BD46     	 mov sp,r7
 8342              	.LCFI344:
 8343              	 .cfi_def_cfa_register 13
 8344              	 
 8345 00b4 80BD     	 pop {r7,pc}
 8346              	.L568:
 8347 00b6 00BF     	 .align 2
 8348              	.L567:
 8349 00b8 00000000 	 .word xTickCount
 8350 00bc 00000000 	 .word pxCurrentTCB
 8351 00c0 00000000 	 .word uxTopReadyPriority
 8352 00c4 00000000 	 .word xSuspendedTaskList
 8353 00c8 00000000 	 .word pxOverflowDelayedTaskList
 8354 00cc 00000000 	 .word pxDelayedTaskList
 8355 00d0 00000000 	 .word xNextTaskUnblockTime
 8356              	 .cfi_endproc
 8357              	.LFE201:
 8359              	 .text
 8360              	.Letext0:
 8361              	 .file 3 "c:\\kits\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 8362              	 .file 4 "c:\\kits\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 8363              	 .file 5 "c:\\kits\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 8364              	 .file 6 "../Dave/Generated/FREERTOS/projdefs.h"
 8365              	 .file 7 "../Dave/Generated/FREERTOS/list.h"
 8366              	 .file 8 "../Dave/Generated/FREERTOS/task.h"
 8367              	 .file 9 "C:/Workspaces/DAVE-4.4.2-64Bit/FreeRtos_Led/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
    {standard input}:24     .bss.pxCurrentTCB:00000000 pxCurrentTCB
    {standard input}:21     .bss.pxCurrentTCB:00000000 $d
    {standard input}:27     .bss.pxReadyTasksLists:00000000 $d
    {standard input}:30     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
    {standard input}:33     .bss.xDelayedTaskList1:00000000 $d
    {standard input}:36     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
    {standard input}:39     .bss.xDelayedTaskList2:00000000 $d
    {standard input}:42     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
    {standard input}:45     .bss.pxDelayedTaskList:00000000 $d
    {standard input}:48     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
    {standard input}:51     .bss.pxOverflowDelayedTaskList:00000000 $d
    {standard input}:54     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
    {standard input}:57     .bss.xPendingReadyList:00000000 $d
    {standard input}:60     .bss.xPendingReadyList:00000000 xPendingReadyList
    {standard input}:63     .bss.xTasksWaitingTermination:00000000 $d
    {standard input}:66     .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
    {standard input}:69     .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
    {standard input}:72     .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
    {standard input}:75     .bss.xSuspendedTaskList:00000000 $d
    {standard input}:78     .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
    {standard input}:81     .bss.uxCurrentNumberOfTasks:00000000 $d
    {standard input}:84     .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
    {standard input}:87     .bss.xTickCount:00000000 $d
    {standard input}:90     .bss.xTickCount:00000000 xTickCount
    {standard input}:93     .bss.uxTopReadyPriority:00000000 $d
    {standard input}:96     .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
    {standard input}:99     .bss.xSchedulerRunning:00000000 $d
    {standard input}:102    .bss.xSchedulerRunning:00000000 xSchedulerRunning
    {standard input}:105    .bss.uxPendedTicks:00000000 $d
    {standard input}:108    .bss.uxPendedTicks:00000000 uxPendedTicks
    {standard input}:111    .bss.xYieldPending:00000000 $d
    {standard input}:114    .bss.xYieldPending:00000000 xYieldPending
    {standard input}:117    .bss.xNumOfOverflows:00000000 $d
    {standard input}:120    .bss.xNumOfOverflows:00000000 xNumOfOverflows
    {standard input}:123    .bss.uxTaskNumber:00000000 $d
    {standard input}:126    .bss.uxTaskNumber:00000000 uxTaskNumber
    {standard input}:129    .bss.xNextTaskUnblockTime:00000000 $d
    {standard input}:132    .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
    {standard input}:135    .bss.xIdleTaskHandle:00000000 $d
    {standard input}:138    .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
    {standard input}:141    .bss.uxSchedulerSuspended:00000000 $d
    {standard input}:144    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
    {standard input}:147    .text.xTaskCreate:00000000 $t
    {standard input}:152    .text.xTaskCreate:00000000 xTaskCreate
    {standard input}:260    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
    {standard input}:478    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
    {standard input}:256    .text.prvInitialiseNewTask:00000000 $t
    {standard input}:474    .text.prvAddNewTaskToReadyList:00000000 $t
    {standard input}:5323   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
    {standard input}:614    .text.prvAddNewTaskToReadyList:000000c4 $d
    {standard input}:625    .text.vTaskDelete:00000000 $t
    {standard input}:630    .text.vTaskDelete:00000000 vTaskDelete
    {standard input}:5916   .text.prvDeleteTCB:00000000 prvDeleteTCB
    {standard input}:5959   .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
    {standard input}:806    .text.vTaskDelete:000000f4 $d
    {standard input}:820    .text.vTaskDelayUntil:00000000 $t
    {standard input}:825    .text.vTaskDelayUntil:00000000 vTaskDelayUntil
    {standard input}:2487   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
    {standard input}:8223   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
    {standard input}:2530   .text.xTaskResumeAll:00000000 xTaskResumeAll
    {standard input}:1013   .text.vTaskDelayUntil:000000e8 $d
    {standard input}:1020   .text.vTaskDelay:00000000 $t
    {standard input}:1025   .text.vTaskDelay:00000000 vTaskDelay
    {standard input}:1111   .text.vTaskDelay:0000005c $d
    {standard input}:1117   .text.eTaskGetState:00000000 $t
    {standard input}:1122   .text.eTaskGetState:00000000 eTaskGetState
    {standard input}:1256   .text.eTaskGetState:0000009c $d
    {standard input}:1265   .text.uxTaskPriorityGet:00000000 $t
    {standard input}:1270   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
    {standard input}:1325   .text.uxTaskPriorityGet:00000030 $d
    {standard input}:1330   .text.uxTaskPriorityGetFromISR:00000000 $t
    {standard input}:1335   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
    {standard input}:1420   .text.uxTaskPriorityGetFromISR:00000054 $d
    {standard input}:1425   .text.vTaskPrioritySet:00000000 $t
    {standard input}:1430   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
    {standard input}:1667   .text.vTaskPrioritySet:0000014c $d
    {standard input}:1675   .text.vTaskSuspend:00000000 $t
    {standard input}:1680   .text.vTaskSuspend:00000000 vTaskSuspend
    {standard input}:3952   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
    {standard input}:1864   .text.vTaskSuspend:00000100 $d
    {standard input}:1876   .text.prvTaskIsTaskSuspended:00000000 $t
    {standard input}:1880   .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
    {standard input}:1986   .text.prvTaskIsTaskSuspended:0000006c $d
    {standard input}:1992   .text.vTaskResume:00000000 $t
    {standard input}:1997   .text.vTaskResume:00000000 vTaskResume
    {standard input}:2122   .text.vTaskResume:000000ac $d
    {standard input}:2130   .text.xTaskResumeFromISR:00000000 $t
    {standard input}:2135   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
    {standard input}:2291   .text.xTaskResumeFromISR:000000d0 $d
    {standard input}:2300   .rodata:00000000 $d
    {standard input}:2304   .text.vTaskStartScheduler:00000000 $t
    {standard input}:2309   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
    {standard input}:2413   .text.vTaskStartScheduler:0000007c $d
    {standard input}:5114   .text.prvIdleTask:00000000 prvIdleTask
    {standard input}:2423   .text.vTaskEndScheduler:00000000 $t
    {standard input}:2428   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
    {standard input}:2477   .text.vTaskEndScheduler:00000028 $d
    {standard input}:2482   .text.vTaskSuspendAll:00000000 $t
    {standard input}:2520   .text.vTaskSuspendAll:00000018 $d
    {standard input}:2525   .text.xTaskResumeAll:00000000 $t
    {standard input}:3691   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
    {standard input}:2732   .text.xTaskResumeAll:00000118 $d
    {standard input}:2745   .text.xTaskGetTickCount:00000000 $t
    {standard input}:2750   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
    {standard input}:2790   .text.xTaskGetTickCount:0000001c $d
    {standard input}:2795   .text.xTaskGetTickCountFromISR:00000000 $t
    {standard input}:2800   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
    {standard input}:2841   .text.xTaskGetTickCountFromISR:00000020 $d
    {standard input}:2846   .text.uxTaskGetNumberOfTasks:00000000 $t
    {standard input}:2851   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
    {standard input}:2882   .text.uxTaskGetNumberOfTasks:00000014 $d
    {standard input}:2887   .text.pcTaskGetName:00000000 $t
    {standard input}:2892   .text.pcTaskGetName:00000000 pcTaskGetName
    {standard input}:2966   .text.pcTaskGetName:00000044 $d
    {standard input}:2971   .text.prvSearchForNameWithinSingleList:00000000 $t
    {standard input}:2975   .text.prvSearchForNameWithinSingleList:00000000 prvSearchForNameWithinSingleList
    {standard input}:3136   .text.xTaskGetHandle:00000000 $t
    {standard input}:3141   .text.xTaskGetHandle:00000000 xTaskGetHandle
    {standard input}:3278   .text.xTaskGetHandle:000000b4 $d
    {standard input}:3287   .text.uxTaskGetSystemState:00000000 $t
    {standard input}:3292   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
    {standard input}:5653   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
    {standard input}:3456   .text.uxTaskGetSystemState:00000108 $d
    {standard input}:3466   .text.xTaskGetIdleTaskHandle:00000000 $t
    {standard input}:3471   .text.xTaskGetIdleTaskHandle:00000000 xTaskGetIdleTaskHandle
    {standard input}:3531   .text.xTaskGetIdleTaskHandle:00000034 $d
    {standard input}:3536   .text.xTaskAbortDelay:00000000 $t
    {standard input}:3541   .text.xTaskAbortDelay:00000000 xTaskAbortDelay
    {standard input}:3678   .text.xTaskAbortDelay:000000c0 $d
    {standard input}:3686   .text.xTaskIncrementTick:00000000 $t
    {standard input}:3932   .text.xTaskIncrementTick:00000150 $d
    {standard input}:3947   .text.vTaskSwitchContext:00000000 $t
    {standard input}:4086   .text.vTaskSwitchContext:000000a0 $d
    {standard input}:4095   .text.vTaskPlaceOnEventList:00000000 $t
    {standard input}:4100   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
    {standard input}:4164   .text.vTaskPlaceOnEventList:00000040 $d
    {standard input}:4169   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
    {standard input}:4174   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
    {standard input}:4268   .text.vTaskPlaceOnUnorderedEventList:0000006c $d
    {standard input}:4274   .text.vTaskPlaceOnEventListRestricted:00000000 $t
    {standard input}:4279   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
    {standard input}:4352   .text.vTaskPlaceOnEventListRestricted:00000050 $d
    {standard input}:4357   .text.xTaskRemoveFromEventList:00000000 $t
    {standard input}:4362   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
    {standard input}:4491   .text.xTaskRemoveFromEventList:000000b0 $d
    {standard input}:4501   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
    {standard input}:4506   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
    {standard input}:4636   .text.vTaskRemoveFromUnorderedEventList:000000ac $d
    {standard input}:4645   .text.vTaskSetTimeOutState:00000000 $t
    {standard input}:4650   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
    {standard input}:4716   .text.vTaskSetTimeOutState:00000040 $d
    {standard input}:4722   .text.vTaskInternalSetTimeOutState:00000000 $t
    {standard input}:4727   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
    {standard input}:4771   .text.vTaskInternalSetTimeOutState:00000024 $d
    {standard input}:4777   .text.xTaskCheckForTimeOut:00000000 $t
    {standard input}:4782   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
    {standard input}:4949   .text.xTaskCheckForTimeOut:000000d4 $d
    {standard input}:4956   .text.vTaskMissedYield:00000000 $t
    {standard input}:4961   .text.vTaskMissedYield:00000000 vTaskMissedYield
    {standard input}:4992   .text.vTaskMissedYield:00000014 $d
    {standard input}:4997   .text.uxTaskGetTaskNumber:00000000 $t
    {standard input}:5002   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
    {standard input}:5057   .text.vTaskSetTaskNumber:00000000 $t
    {standard input}:5062   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
    {standard input}:5110   .text.prvIdleTask:00000000 $t
    {standard input}:5415   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
    {standard input}:5157   .text.prvIdleTask:00000028 $d
    {standard input}:5163   .text.vTaskSetThreadLocalStoragePointer:00000000 $t
    {standard input}:5168   .text.vTaskSetThreadLocalStoragePointer:00000000 vTaskSetThreadLocalStoragePointer
    {standard input}:5231   .text.vTaskSetThreadLocalStoragePointer:0000003c $d
    {standard input}:5236   .text.pvTaskGetThreadLocalStoragePointer:00000000 $t
    {standard input}:5241   .text.pvTaskGetThreadLocalStoragePointer:00000000 pvTaskGetThreadLocalStoragePointer
    {standard input}:5314   .text.pvTaskGetThreadLocalStoragePointer:00000048 $d
    {standard input}:5319   .text.prvInitialiseTaskLists:00000000 $t
    {standard input}:5399   .text.prvInitialiseTaskLists:0000005c $d
    {standard input}:5411   .text.prvCheckTasksWaitingTermination:00000000 $t
    {standard input}:5484   .text.prvCheckTasksWaitingTermination:0000004c $d
    {standard input}:5491   .text.vTaskGetInfo:00000000 $t
    {standard input}:5496   .text.vTaskGetInfo:00000000 vTaskGetInfo
    {standard input}:5783   .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
    {standard input}:5644   .text.vTaskGetInfo:000000c4 $d
    {standard input}:5649   .text.prvListTasksWithinSingleList:00000000 $t
    {standard input}:5779   .text.prvTaskCheckFreeStackSpace:00000000 $t
    {standard input}:5846   .text.uxTaskGetStackHighWaterMark:00000000 $t
    {standard input}:5851   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
    {standard input}:5907   .text.uxTaskGetStackHighWaterMark:00000034 $d
    {standard input}:5912   .text.prvDeleteTCB:00000000 $t
    {standard input}:5955   .text.prvResetNextTaskUnblockTime:00000000 $t
    {standard input}:6026   .text.prvResetNextTaskUnblockTime:00000040 $d
    {standard input}:6032   .text.xTaskGetCurrentTaskHandle:00000000 $t
    {standard input}:6037   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
    {standard input}:6077   .text.xTaskGetCurrentTaskHandle:0000001c $d
    {standard input}:6082   .text.xTaskGetSchedulerState:00000000 $t
    {standard input}:6087   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
    {standard input}:6147   .text.xTaskGetSchedulerState:00000034 $d
    {standard input}:6153   .text.xTaskPriorityInherit:00000000 $t
    {standard input}:6158   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
    {standard input}:6334   .text.xTaskPriorityInherit:00000104 $d
    {standard input}:6341   .text.xTaskPriorityDisinherit:00000000 $t
    {standard input}:6346   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
    {standard input}:6526   .text.xTaskPriorityDisinherit:00000100 $d
    {standard input}:6533   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
    {standard input}:6538   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
    {standard input}:6753   .text.vTaskPriorityDisinheritAfterTimeout:00000130 $d
    {standard input}:6760   .text.prvWriteNameToBuffer:00000000 $t
    {standard input}:6764   .text.prvWriteNameToBuffer:00000000 prvWriteNameToBuffer
    {standard input}:6836   .text.vTaskList:00000000 $t
    {standard input}:6841   .text.vTaskList:00000000 vTaskList
    {standard input}:6912   .text.vTaskList:00000060 $d
    {standard input}:6917   .text.vTaskList:00000074 $t
    {standard input}:7039   .text.vTaskList:00000128 $d
    {standard input}:7045   .text.uxTaskResetEventItemValue:00000000 $t
    {standard input}:7050   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
    {standard input}:7099   .text.uxTaskResetEventItemValue:0000002c $d
    {standard input}:7104   .text.pvTaskIncrementMutexHeldCount:00000000 $t
    {standard input}:7109   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
    {standard input}:7152   .text.pvTaskIncrementMutexHeldCount:00000024 $d
    {standard input}:7157   .text.ulTaskNotifyTake:00000000 $t
    {standard input}:7162   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
    {standard input}:7267   .text.ulTaskNotifyTake:00000088 $d
    {standard input}:7273   .text.xTaskNotifyWait:00000000 $t
    {standard input}:7278   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
    {standard input}:7402   .text.xTaskNotifyWait:000000ac $d
    {standard input}:7408   .text.xTaskGenericNotify:00000000 $t
    {standard input}:7413   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
    {standard input}:7491   .text.xTaskGenericNotify:00000060 $d
    {standard input}:7496   .text.xTaskGenericNotify:00000074 $t
    {standard input}:7635   .text.xTaskGenericNotify:00000134 $d
    {standard input}:7643   .text.xTaskGenericNotifyFromISR:00000000 $t
    {standard input}:7648   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
    {standard input}:7746   .text.xTaskGenericNotifyFromISR:00000080 $d
    {standard input}:7751   .text.xTaskGenericNotifyFromISR:00000094 $t
    {standard input}:7917   .text.xTaskGenericNotifyFromISR:00000178 $d
    {standard input}:7927   .text.vTaskNotifyGiveFromISR:00000000 $t
    {standard input}:7932   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
    {standard input}:8129   .text.vTaskNotifyGiveFromISR:00000108 $d
    {standard input}:8139   .text.xTaskNotifyStateClear:00000000 $t
    {standard input}:8144   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
    {standard input}:8214   .text.xTaskNotifyStateClear:00000048 $d
    {standard input}:8219   .text.prvAddCurrentTaskToDelayedList:00000000 $t
    {standard input}:8349   .text.prvAddCurrentTaskToDelayedList:000000b8 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
strlen
vListInsert
vListInitialise
strcpy
sprintf
