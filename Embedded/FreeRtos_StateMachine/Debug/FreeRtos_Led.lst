
FreeRtos_Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000eda8  08000000  0c000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000028  0800eda8  0c00eda8  00016da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  10000000  10000000  00020000  2**0
                  ALLOC
  3 .data         000000bc  20000000  0c00edd0  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000024c  200000bc  0c00ee8c  000180bc  2**2
                  ALLOC
  5 .no_init      00000014  2000ffc0  2000ffc0  0001ffc0  2**2
                  ALLOC
  6 .stab         000000cc  00000000  00000000  000180bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      000001ed  00000000  00000000  00018188  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000eb8  00000000  00000000  00018378  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001349e  00000000  00000000  00019230  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002e0c  00000000  00000000  0002c6ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006ff1  00000000  00000000  0002f4da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000a448  00000000  00000000  000364cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000095e0  00000000  00000000  00040914  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00007d0f  00000000  00000000  00049ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cf0  00000000  00000000  00051c03  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 000011f2  00000000  00000000  000528f3  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	01 17 00 08 b1 02 00 08 00 00 00 00 41 19 00 08     ............A...
 800003c:	b1 19 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00edd0 	.word	0x0c00edd0
 800024c:	20000000 	.word	0x20000000
 8000250:	000000bc 	.word	0x000000bc
 8000254:	0c00ee8c 	.word	0x0c00ee8c
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c00edd0 	.word	0x0c00edd0
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c00edd0 	.word	0x0c00edd0
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200000bc 	.word	0x200000bc
 800027c:	0000024c 	.word	0x0000024c
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	0800c95d 	.word	0x0800c95d
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08003c5d 	.word	0x08003c5d

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f003 fbdf 	bl	8003a88 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f003 fc47 	bl	8003b5c <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f003 fc26 	bl	8003b48 <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <_ZN13state_machine12state_action11StateActionIN14led_controller13LedControllerEXadL_ZNS3_4idleEiEEEC1Ev>:
		public:
			virtual void Caller(state_machine::StateMachine* sm, int data) = 0;
		};

		template<class SM, void (SM::*Func)(int)>
		class StateAction {
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a04      	ldr	r2, [pc, #16]	; (80003c4 <_ZN13state_machine12state_action11StateActionIN14led_controller13LedControllerEXadL_ZNS3_4idleEiEEEC1Ev+0x1c>)
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4618      	mov	r0, r3
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	0800da68 	.word	0x0800da68

080003c8 <_ZN13state_machine12state_action11StateActionIN14led_controller13LedControllerEXadL_ZNS3_5startEiEEEC1Ev>:
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a04      	ldr	r2, [pc, #16]	; (80003e4 <_ZN13state_machine12state_action11StateActionIN14led_controller13LedControllerEXadL_ZNS3_5startEiEEEC1Ev+0x1c>)
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4618      	mov	r0, r3
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	0800da58 	.word	0x0800da58

080003e8 <_ZN13state_machine12state_action11StateActionIN14led_controller13LedControllerEXadL_ZNS3_11changeLightEiEEEC1Ev>:
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a04      	ldr	r2, [pc, #16]	; (8000404 <_ZN13state_machine12state_action11StateActionIN14led_controller13LedControllerEXadL_ZNS3_11changeLightEiEEEC1Ev+0x1c>)
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4618      	mov	r0, r3
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr
 8000404:	0800da48 	.word	0x0800da48

08000408 <_ZN13state_machine12state_action11StateActionIN14led_controller13LedControllerEXadL_ZNS3_4stopEiEEEC1Ev>:
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a04      	ldr	r2, [pc, #16]	; (8000424 <_ZN13state_machine12state_action11StateActionIN14led_controller13LedControllerEXadL_ZNS3_4stopEiEEEC1Ev+0x1c>)
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4618      	mov	r0, r3
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	0800da38 	.word	0x0800da38

08000428 <_ZN14led_controller13LedControllerC1Ev>:
	state::STOP,
	state::STOP,
	state_machine::state::IMPOSIBLE
};

led_controller::LedController::LedController(): m_dutyCycle(0) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4618      	mov	r0, r3
 8000434:	f000 f914 	bl	8000660 <_ZN13state_machine12StateMachineC1Ev>
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4a19      	ldr	r2, [pc, #100]	; (80004a0 <_ZN14led_controller13LedControllerC1Ev+0x78>)
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	331c      	adds	r3, #28
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ffad 	bl	80003a8 <_ZN13state_machine12state_action11StateActionIN14led_controller13LedControllerEXadL_ZNS3_4idleEiEEEC1Ev>
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	3320      	adds	r3, #32
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ffb8 	bl	80003c8 <_ZN13state_machine12state_action11StateActionIN14led_controller13LedControllerEXadL_ZNS3_5startEiEEEC1Ev>
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	3324      	adds	r3, #36	; 0x24
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ffc3 	bl	80003e8 <_ZN13state_machine12state_action11StateActionIN14led_controller13LedControllerEXadL_ZNS3_11changeLightEiEEEC1Ev>
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	3328      	adds	r3, #40	; 0x28
 8000466:	4618      	mov	r0, r3
 8000468:	f7ff ffce 	bl	8000408 <_ZN13state_machine12state_action11StateActionIN14led_controller13LedControllerEXadL_ZNS3_4stopEiEEEC1Ev>
	MappedStatesToAction[0] = (state_machine::state_action::IStateAction*) (&_idle);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	f103 021c 	add.w	r2, r3, #28
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	60da      	str	r2, [r3, #12]
	MappedStatesToAction[1] = (state_machine::state_action::IStateAction*) (&_start);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	f103 0220 	add.w	r2, r3, #32
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	611a      	str	r2, [r3, #16]
	MappedStatesToAction[2] = (state_machine::state_action::IStateAction*) (&_changeLight);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	615a      	str	r2, [r3, #20]
	MappedStatesToAction[3] = (state_machine::state_action::IStateAction*) (&_stop);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	619a      	str	r2, [r3, #24]
}
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4618      	mov	r0, r3
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	0800da28 	.word	0x0800da28

080004a4 <_ZN14led_controller13LedController7LightUpEi>:
/* ************** we provide three functions for our consumer **************/
void led_controller::LedController::LightUp(int howMuch) {
 80004a4:	b590      	push	{r4, r7, lr}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]
	EventHandler(ON_CHANGE_LIGHT_TRANSITIONS[GetCurrentState()], howMuch);
 80004ae:	687c      	ldr	r4, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 f90a 	bl	80006cc <_ZN13state_machine12StateMachine15GetCurrentStateEv>
 80004b8:	4602      	mov	r2, r0
 80004ba:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <_ZN14led_controller13LedController7LightUpEi+0x2c>)
 80004bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004c0:	4620      	mov	r0, r4
 80004c2:	4619      	mov	r1, r3
 80004c4:	683a      	ldr	r2, [r7, #0]
 80004c6:	f000 f8df 	bl	8000688 <_ZN13state_machine12StateMachine12EventHandlerEii>
}
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd90      	pop	{r4, r7, pc}
 80004d0:	0800da0c 	.word	0x0800da0c

080004d4 <_ZN14led_controller13LedController9LightDownEi>:

void led_controller::LedController::LightDown(int howMuch) {
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
	howMuch = -howMuch;	//we will subtract from current speed
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	425b      	negs	r3, r3
 80004e2:	603b      	str	r3, [r7, #0]
	EventHandler(ON_CHANGE_LIGHT_TRANSITIONS[GetCurrentState()], howMuch);
 80004e4:	687c      	ldr	r4, [r7, #4]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 f8ef 	bl	80006cc <_ZN13state_machine12StateMachine15GetCurrentStateEv>
 80004ee:	4602      	mov	r2, r0
 80004f0:	4b05      	ldr	r3, [pc, #20]	; (8000508 <_ZN14led_controller13LedController9LightDownEi+0x34>)
 80004f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004f6:	4620      	mov	r0, r4
 80004f8:	4619      	mov	r1, r3
 80004fa:	683a      	ldr	r2, [r7, #0]
 80004fc:	f000 f8c4 	bl	8000688 <_ZN13state_machine12StateMachine12EventHandlerEii>
}
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	bd90      	pop	{r4, r7, pc}
 8000506:	bf00      	nop
 8000508:	0800da0c 	.word	0x0800da0c

0800050c <_ZN14led_controller13LedController20GetFunctionToInvockeERKi>:
	//Once I'm stopped - I will go in idle state
	SetCurrentState(led_controller::state::IDLE);
}

/******************** which function must be called *************************/
state_machine::state_action::IStateAction* led_controller::LedController::GetFunctionToInvocke(const int& state) {
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
	return MappedStatesToAction[state];
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	3302      	adds	r3, #2
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	4413      	add	r3, r2
 8000522:	685b      	ldr	r3, [r3, #4]
}
 8000524:	4618      	mov	r0, r3
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <_ZN14led_controller13LedController4idleEi>:

/* ********* through those functions we will handle our transitions *********/
void led_controller::LedController::idle(int alhpa = 0) {
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]

}
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <_ZN14led_controller13LedController5startEi>:

void led_controller::LedController::start(int alpha) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
	m_dutyCycle = alpha;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	609a      	str	r2, [r3, #8]
	PWM_SetDutyCycle(&LED, m_dutyCycle);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	4803      	ldr	r0, [pc, #12]	; (8000568 <_ZN14led_controller13LedController5startEi+0x24>)
 800055a:	4619      	mov	r1, r3
 800055c:	f001 f82a 	bl	80015b4 <PWM_SetDutyCycle>
}
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000000 	.word	0x20000000

0800056c <_ZN14led_controller13LedController11changeLightEi>:

void led_controller::LedController::changeLight(int alpha) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
	//this is the range
	if(m_dutyCycle + alpha < 0 || m_dutyCycle + alpha > 10000U)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	689a      	ldr	r2, [r3, #8]
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	4413      	add	r3, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db08      	blt.n	8000594 <_ZN14led_controller13LedController11changeLightEi+0x28>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	689a      	ldr	r2, [r3, #8]
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	4413      	add	r3, r2
 800058a:	461a      	mov	r2, r3
 800058c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000590:	429a      	cmp	r2, r3
 8000592:	d900      	bls.n	8000596 <_ZN14led_controller13LedController11changeLightEi+0x2a>
		return;
 8000594:	e00b      	b.n	80005ae <_ZN14led_controller13LedController11changeLightEi+0x42>

	m_dutyCycle += alpha;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	689a      	ldr	r2, [r3, #8]
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	441a      	add	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	609a      	str	r2, [r3, #8]
	PWM_SetDutyCycle(&LED, m_dutyCycle);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	4803      	ldr	r0, [pc, #12]	; (80005b4 <_ZN14led_controller13LedController11changeLightEi+0x48>)
 80005a8:	4619      	mov	r1, r3
 80005aa:	f001 f803 	bl	80015b4 <PWM_SetDutyCycle>
}
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000000 	.word	0x20000000

080005b8 <_ZN14led_controller13LedController4stopEi>:

void led_controller::LedController::stop(int alpha = 0) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
	m_dutyCycle = 0;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
	PWM_SetDutyCycle(&LED, m_dutyCycle);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <_ZN14led_controller13LedController4stopEi+0x24>)
 80005ce:	4619      	mov	r1, r3
 80005d0:	f000 fff0 	bl	80015b4 <PWM_SetDutyCycle>
}
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000000 	.word	0x20000000

080005e0 <_ZN13state_machine12state_action11StateActionIN14led_controller13LedControllerEXadL_ZNS3_4stopEiEEE6CallerEPNS_12StateMachineEi>:
		public:
			virtual void Caller(state_machine::StateMachine* sm, int data) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
				SM *derived = static_cast<SM*> (sm);
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	617b      	str	r3, [r7, #20]
				(derived->*Func)(data);
 80005f0:	6978      	ldr	r0, [r7, #20]
 80005f2:	6879      	ldr	r1, [r7, #4]
 80005f4:	f7ff ffe0 	bl	80005b8 <_ZN14led_controller13LedController4stopEi>
			}
 80005f8:	3718      	adds	r7, #24
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop

08000600 <_ZN13state_machine12state_action11StateActionIN14led_controller13LedControllerEXadL_ZNS3_11changeLightEiEEE6CallerEPNS_12StateMachineEi>:
		};

		template<class SM, void (SM::*Func)(int)>
		class StateAction {
		public:
			virtual void Caller(state_machine::StateMachine* sm, int data) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
				SM *derived = static_cast<SM*> (sm);
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	617b      	str	r3, [r7, #20]
				(derived->*Func)(data);
 8000610:	6978      	ldr	r0, [r7, #20]
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	f7ff ffaa 	bl	800056c <_ZN14led_controller13LedController11changeLightEi>
			}
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop

08000620 <_ZN13state_machine12state_action11StateActionIN14led_controller13LedControllerEXadL_ZNS3_5startEiEEE6CallerEPNS_12StateMachineEi>:
		};

		template<class SM, void (SM::*Func)(int)>
		class StateAction {
		public:
			virtual void Caller(state_machine::StateMachine* sm, int data) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
				SM *derived = static_cast<SM*> (sm);
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	617b      	str	r3, [r7, #20]
				(derived->*Func)(data);
 8000630:	6978      	ldr	r0, [r7, #20]
 8000632:	6879      	ldr	r1, [r7, #4]
 8000634:	f7ff ff86 	bl	8000544 <_ZN14led_controller13LedController5startEi>
			}
 8000638:	3718      	adds	r7, #24
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop

08000640 <_ZN13state_machine12state_action11StateActionIN14led_controller13LedControllerEXadL_ZNS3_4idleEiEEE6CallerEPNS_12StateMachineEi>:
		};

		template<class SM, void (SM::*Func)(int)>
		class StateAction {
		public:
			virtual void Caller(state_machine::StateMachine* sm, int data) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
				SM *derived = static_cast<SM*> (sm);
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	617b      	str	r3, [r7, #20]
				(derived->*Func)(data);
 8000650:	6978      	ldr	r0, [r7, #20]
 8000652:	6879      	ldr	r1, [r7, #4]
 8000654:	f7ff ff6c 	bl	8000530 <_ZN14led_controller13LedController4idleEi>
			}
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop

08000660 <_ZN13state_machine12StateMachineC1Ev>:
 *      Author: imarian
 */

#include"StateMachine.h"

state_machine::StateMachine::StateMachine() : m_currentState(0) {
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a06      	ldr	r2, [pc, #24]	; (8000684 <_ZN13state_machine12StateMachineC1Ev+0x24>)
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2200      	movs	r2, #0
 8000672:	605a      	str	r2, [r3, #4]

}
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	0800da78 	.word	0x0800da78

08000688 <_ZN13state_machine12StateMachine12EventHandlerEii>:

void state_machine::StateMachine::EventHandler(int state, int data) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
	if (state != state::IMPOSIBLE) {
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800069a:	4293      	cmp	r3, r2
 800069c:	d012      	beq.n	80006c4 <_ZN13state_machine12StateMachine12EventHandlerEii+0x3c>

		state_action::IStateAction* mappedStates = GetFunctionToInvocke(state);
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f107 0208 	add.w	r2, r7, #8
 80006a8:	68f8      	ldr	r0, [r7, #12]
 80006aa:	4611      	mov	r1, r2
 80006ac:	4798      	blx	r3
 80006ae:	6178      	str	r0, [r7, #20]
		(mappedStates->Caller)(this, data);
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	6978      	ldr	r0, [r7, #20]
 80006b8:	68f9      	ldr	r1, [r7, #12]
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	4798      	blx	r3
		m_currentState = state; // or more elegant to call set function to be more generic
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	605a      	str	r2, [r3, #4]
	}
}
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop

080006cc <_ZN13state_machine12StateMachine15GetCurrentStateEv>:

int state_machine::StateMachine::GetCurrentState() {
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	return m_currentState;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	685b      	ldr	r3, [r3, #4]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	460b      	mov	r3, r1
 80006ee:	607a      	str	r2, [r7, #4]
 80006f0:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80006f2:	7afb      	ldrb	r3, [r7, #11]
 80006f4:	089b      	lsrs	r3, r3, #2
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	4618      	mov	r0, r3
 80006fa:	7afb      	ldrb	r3, [r7, #11]
 80006fc:	089b      	lsrs	r3, r3, #2
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	461a      	mov	r2, r3
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	3204      	adds	r2, #4
 8000706:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800070a:	7afb      	ldrb	r3, [r7, #11]
 800070c:	f003 0303 	and.w	r3, r3, #3
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	4619      	mov	r1, r3
 8000714:	23f8      	movs	r3, #248	; 0xf8
 8000716:	408b      	lsls	r3, r1
 8000718:	43db      	mvns	r3, r3
 800071a:	ea02 0103 	and.w	r1, r2, r3
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	1d02      	adds	r2, r0, #4
 8000722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800072a:	7afb      	ldrb	r3, [r7, #11]
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	4619      	mov	r1, r3
 8000730:	2303      	movs	r3, #3
 8000732:	408b      	lsls	r3, r1
 8000734:	43db      	mvns	r3, r3
 8000736:	401a      	ands	r2, r3
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	4a3a      	ldr	r2, [pc, #232]	; (8000828 <XMC_GPIO_Init+0x144>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d003      	beq.n	800074c <XMC_GPIO_Init+0x68>
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4a39      	ldr	r2, [pc, #228]	; (800082c <XMC_GPIO_Init+0x148>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d10a      	bne.n	8000762 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000750:	7afb      	ldrb	r3, [r7, #11]
 8000752:	2101      	movs	r1, #1
 8000754:	fa01 f303 	lsl.w	r3, r1, r3
 8000758:	43db      	mvns	r3, r3
 800075a:	401a      	ands	r2, r3
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	661a      	str	r2, [r3, #96]	; 0x60
 8000760:	e042      	b.n	80007e8 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	b25b      	sxtb	r3, r3
 800076a:	2b00      	cmp	r3, #0
 800076c:	da3c      	bge.n	80007e8 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	685a      	ldr	r2, [r3, #4]
 8000772:	7afb      	ldrb	r3, [r7, #11]
 8000774:	409a      	lsls	r2, r3
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800077a:	7afb      	ldrb	r3, [r7, #11]
 800077c:	08db      	lsrs	r3, r3, #3
 800077e:	b2db      	uxtb	r3, r3
 8000780:	4618      	mov	r0, r3
 8000782:	7afb      	ldrb	r3, [r7, #11]
 8000784:	08db      	lsrs	r3, r3, #3
 8000786:	b2db      	uxtb	r3, r3
 8000788:	461a      	mov	r2, r3
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	3210      	adds	r2, #16
 800078e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000792:	7afb      	ldrb	r3, [r7, #11]
 8000794:	f003 0307 	and.w	r3, r3, #7
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	4619      	mov	r1, r3
 800079c:	2307      	movs	r3, #7
 800079e:	408b      	lsls	r3, r1
 80007a0:	43db      	mvns	r3, r3
 80007a2:	ea02 0103 	and.w	r1, r2, r3
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	f100 0210 	add.w	r2, r0, #16
 80007ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80007b0:	7afb      	ldrb	r3, [r7, #11]
 80007b2:	08db      	lsrs	r3, r3, #3
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	7afb      	ldrb	r3, [r7, #11]
 80007ba:	08db      	lsrs	r3, r3, #3
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	461a      	mov	r2, r3
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	3210      	adds	r2, #16
 80007c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	7a1b      	ldrb	r3, [r3, #8]
 80007cc:	4619      	mov	r1, r3
 80007ce:	7afb      	ldrb	r3, [r7, #11]
 80007d0:	f003 0307 	and.w	r3, r3, #7
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	fa01 f303 	lsl.w	r3, r1, r3
 80007da:	ea42 0103 	orr.w	r1, r2, r3
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	f100 0210 	add.w	r2, r0, #16
 80007e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80007e8:	7afb      	ldrb	r3, [r7, #11]
 80007ea:	089b      	lsrs	r3, r3, #2
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	7afb      	ldrb	r3, [r7, #11]
 80007f2:	089b      	lsrs	r3, r3, #2
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	461a      	mov	r2, r3
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3204      	adds	r2, #4
 80007fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4619      	mov	r1, r3
 8000806:	7afb      	ldrb	r3, [r7, #11]
 8000808:	f003 0303 	and.w	r3, r3, #3
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	fa01 f303 	lsl.w	r3, r1, r3
 8000812:	ea42 0103 	orr.w	r1, r2, r3
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	1d02      	adds	r2, r0, #4
 800081a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	48028e00 	.word	0x48028e00
 800082c:	48028f00 	.word	0x48028f00

08000830 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <XMC_SCU_GetMirrorStatus+0x14>)
 8000836:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800083a:	4618      	mov	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	50004000 	.word	0x50004000

08000848 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000850:	f7ff fd40 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <XMC_SCU_lDelay+0x3c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <XMC_SCU_lDelay+0x40>)
 800085a:	fba2 2303 	umull	r2, r3, r2, r3
 800085e:	0c9a      	lsrs	r2, r3, #18
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	fb02 f303 	mul.w	r3, r2, r3
 8000866:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	e003      	b.n	8000876 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800086e:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	3301      	adds	r3, #1
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	429a      	cmp	r2, r3
 800087c:	d3f7      	bcc.n	800086e <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	2000ffc0 	.word	0x2000ffc0
 8000888:	431bde83 	.word	0x431bde83

0800088c <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800088c:	b5b0      	push	{r4, r5, r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af02      	add	r7, sp, #8
 8000892:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000894:	2000      	movs	r0, #0
 8000896:	f000 f88b 	bl	80009b0 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800089a:	f000 fa1d 	bl	8000cd8 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	79db      	ldrb	r3, [r3, #7]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d00a      	beq.n	80008bc <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80008a6:	f000 fa55 	bl	8000d54 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80008aa:	bf00      	nop
 80008ac:	f000 fa40 	bl	8000d30 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f083 0301 	eor.w	r3, r3, #1
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1f7      	bne.n	80008ac <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	7a5b      	ldrb	r3, [r3, #9]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 f8ef 	bl	8000aa4 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80008c6:	bf00      	nop
 80008c8:	f7ff ffb2 	bl	8000830 <XMC_SCU_GetMirrorStatus>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d1fa      	bne.n	80008c8 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	7a1b      	ldrb	r3, [r3, #8]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f9d8 	bl	8000c8c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	7c1b      	ldrb	r3, [r3, #16]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f8fd 	bl	8000ae0 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	7c5b      	ldrb	r3, [r3, #17]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f920 	bl	8000b30 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	7c9b      	ldrb	r3, [r3, #18]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 f907 	bl	8000b08 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	7cdb      	ldrb	r3, [r3, #19]
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f92a 	bl	8000b58 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	799b      	ldrb	r3, [r3, #6]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d00a      	beq.n	8000922 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 800090c:	f000 fa56 	bl	8000dbc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000910:	bf00      	nop
 8000912:	f000 fa7b 	bl	8000e0c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8000916:	4603      	mov	r3, r0
 8000918:	f083 0301 	eor.w	r3, r3, #1
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d1f7      	bne.n	8000912 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	78db      	ldrb	r3, [r3, #3]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d102      	bne.n	8000930 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 800092a:	f000 fa93 	bl	8000e54 <XMC_SCU_CLOCK_DisableSystemPll>
 800092e:	e014      	b.n	800095a <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000930:	f000 fa80 	bl	8000e34 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	8899      	ldrh	r1, [r3, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000940:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000946:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	4608      	mov	r0, r1
 8000950:	4611      	mov	r1, r2
 8000952:	462a      	mov	r2, r5
 8000954:	4623      	mov	r3, r4
 8000956:	f000 fa8d 	bl	8000e74 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	68db      	ldr	r3, [r3, #12]
 800095e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000962:	d103      	bne.n	800096c <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8000964:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000968:	f000 f822 	bl	80009b0 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800096c:	f7ff fcb2 	bl	80002d4 <SystemCoreClockUpdate>
}
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bdb0      	pop	{r4, r5, r7, pc}
 8000976:	bf00      	nop

08000978 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	0f1b      	lsrs	r3, r3, #28
 8000984:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800098c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	4613      	mov	r3, r2
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	4413      	add	r3, r2
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	461a      	mov	r2, r3
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 800099c:	4413      	add	r3, r2
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	601a      	str	r2, [r3, #0]
}
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	50004414 	.word	0x50004414

080009b0 <XMC_SCU_CLOCK_SetSystemClockSource>:
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80009b8:	4906      	ldr	r1, [pc, #24]	; (80009d4 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	50004600 	.word	0x50004600

080009d8 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80009e0:	4906      	ldr	r1, [pc, #24]	; (80009fc <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	50004600 	.word	0x50004600

08000a00 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000a08:	4906      	ldr	r1, [pc, #24]	; (8000a24 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	50004600 	.word	0x50004600

08000a28 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8000a32:	88fb      	ldrh	r3, [r7, #6]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d108      	bne.n	8000a4a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000a38:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a42:	f023 0301 	bic.w	r3, r3, #1
 8000a46:	60d3      	str	r3, [r2, #12]
 8000a48:	e007      	b.n	8000a5a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000a4a:	4a06      	ldr	r2, [pc, #24]	; (8000a64 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	60d3      	str	r3, [r2, #12]
  }
}
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	50004710 	.word	0x50004710

08000a68 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000a72:	bf00      	nop
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8000a76:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a7a:	f003 0308 	and.w	r3, r3, #8
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d1f8      	bne.n	8000a74 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000a82:	4907      	ldr	r1, [pc, #28]	; (8000aa0 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	50004000 	.word	0x50004000
 8000aa0:	50004300 	.word	0x50004300

08000aa4 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000aae:	bf00      	nop
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 8000ab2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000ab6:	f003 0308 	and.w	r3, r3, #8
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f8      	bne.n	8000ab0 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000abe:	4907      	ldr	r1, [pc, #28]	; (8000adc <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000aca:	4313      	orrs	r3, r2
 8000acc:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	50004000 	.word	0x50004000
 8000adc:	50004300 	.word	0x50004300

08000ae0 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000ae8:	4906      	ldr	r1, [pc, #24]	; (8000b04 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000af6:	4313      	orrs	r3, r2
 8000af8:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	50004600 	.word	0x50004600

08000b08 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000b10:	4906      	ldr	r1, [pc, #24]	; (8000b2c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000b14:	6a1b      	ldr	r3, [r3, #32]
 8000b16:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	50004600 	.word	0x50004600

08000b30 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000b38:	4906      	ldr	r1, [pc, #24]	; (8000b54 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000b3c:	691b      	ldr	r3, [r3, #16]
 8000b3e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000b46:	4313      	orrs	r3, r2
 8000b48:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	50004600 	.word	0x50004600

08000b58 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000b60:	4906      	ldr	r1, [pc, #24]	; (8000b7c <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	50004600 	.word	0x50004600

08000b80 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000b88:	4906      	ldr	r1, [pc, #24]	; (8000ba4 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000b96:	4313      	orrs	r3, r2
 8000b98:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	50004600 	.word	0x50004600

08000ba8 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000bb0:	4906      	ldr	r1, [pc, #24]	; (8000bcc <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	50004600 	.word	0x50004600

08000bd0 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000bd8:	4906      	ldr	r1, [pc, #24]	; (8000bf4 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000be6:	4313      	orrs	r3, r2
 8000be8:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	50004600 	.word	0x50004600

08000bf8 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	6053      	str	r3, [r2, #4]
}
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	50004600 	.word	0x50004600

08000c18 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000c22:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000c24:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000c2e:	4a16      	ldr	r2, [pc, #88]	; (8000c88 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000c30:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	f043 0310 	orr.w	r3, r3, #16
 8000c38:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000c3a:	4913      	ldr	r1, [pc, #76]	; (8000c88 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3b01      	subs	r3, #1
 8000c46:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000c4c:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c56:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000c58:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	f023 0310 	bic.w	r3, r3, #16
 8000c62:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000c64:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c6e:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000c70:	bf00      	nop
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000c74:	691b      	ldr	r3, [r3, #16]
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d0f9      	beq.n	8000c72 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	50004710 	.word	0x50004710

08000c8c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000c96:	4a0f      	ldr	r2, [pc, #60]	; (8000cd4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ca0:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d10e      	bne.n	8000cc6 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000cb2:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000cb4:	2064      	movs	r0, #100	; 0x64
 8000cb6:	f7ff fdc7 	bl	8000848 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000cba:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cc4:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000cc6:	2064      	movs	r0, #100	; 0x64
 8000cc8:	f7ff fdbe 	bl	8000848 <XMC_SCU_lDelay>
}
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	50004710 	.word	0x50004710

08000cd8 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d109      	bne.n	8000cfc <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000cee:	bf00      	nop
 8000cf0:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d0f9      	beq.n	8000cf0 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d00a      	beq.n	8000d1e <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d0e:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000d10:	bf00      	nop
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1f9      	bne.n	8000d12 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	50004200 	.word	0x50004200
 8000d2c:	50004400 	.word	0x50004400

08000d30 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 0308 	and.w	r3, r3, #8
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	bf0c      	ite	eq
 8000d40:	2301      	moveq	r3, #1
 8000d42:	2300      	movne	r3, #0
 8000d44:	b2db      	uxtb	r3, r3
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	50004300 	.word	0x50004300

08000d54 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8000d58:	bf00      	nop
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000d5c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1f8      	bne.n	8000d5a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000d68:	4a13      	ldr	r2, [pc, #76]	; (8000db8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000d6a:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d72:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000d74:	bf00      	nop
 8000d76:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000d78:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1f8      	bne.n	8000d76 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000d84:	4a0c      	ldr	r2, [pc, #48]	; (8000db8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	f043 0308 	orr.w	r3, r3, #8
 8000d8e:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8000d90:	bf00      	nop
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000d94:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000d98:	f003 0304 	and.w	r3, r3, #4
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1f8      	bne.n	8000d92 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000da2:	2208      	movs	r2, #8
 8000da4:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 8000da6:	bf00      	nop
 8000da8:	f7ff fd42 	bl	8000830 <XMC_SCU_GetMirrorStatus>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1fa      	bne.n	8000da8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	50004000 	.word	0x50004000
 8000db8:	50004300 	.word	0x50004300

08000dbc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000dbc:	b5b0      	push	{r4, r5, r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000dc0:	4a0f      	ldr	r2, [pc, #60]	; (8000e00 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dca:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000dcc:	4d0d      	ldr	r5, [pc, #52]	; (8000e04 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000dce:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000dd6:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000dda:	f002 feb5 	bl	8003b48 <OSCHP_GetFrequency>
 8000dde:	4602      	mov	r2, r0
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000de2:	fba3 2302 	umull	r2, r3, r3, r2
 8000de6:	0d1b      	lsrs	r3, r3, #20
 8000de8:	3b01      	subs	r3, #1
 8000dea:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000dec:	4323      	orrs	r3, r4
 8000dee:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000df0:	4a03      	ldr	r2, [pc, #12]	; (8000e00 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000df2:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000dfa:	6053      	str	r3, [r2, #4]
}
 8000dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	50004710 	.word	0x50004710
 8000e04:	50004700 	.word	0x50004700
 8000e08:	6b5fca6b 	.word	0x6b5fca6b

08000e0c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000e18:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000e1c:	bf0c      	ite	eq
 8000e1e:	2301      	moveq	r3, #1
 8000e20:	2300      	movne	r3, #0
 8000e22:	b2db      	uxtb	r3, r3
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	50004710 	.word	0x50004710

08000e34 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000e38:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000e3a:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e42:	f023 0302 	bic.w	r3, r3, #2
 8000e46:	6053      	str	r3, [r2, #4]
}
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	50004710 	.word	0x50004710

08000e54 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000e58:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000e5a:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e62:	f043 0302 	orr.w	r3, r3, #2
 8000e66:	6053      	str	r3, [r2, #4]
}
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	50004710 	.word	0x50004710

08000e74 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60ba      	str	r2, [r7, #8]
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	4603      	mov	r3, r0
 8000e80:	81fb      	strh	r3, [r7, #14]
 8000e82:	460b      	mov	r3, r1
 8000e84:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000e86:	89fb      	ldrh	r3, [r7, #14]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fdcd 	bl	8000a28 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000e8e:	7b7b      	ldrb	r3, [r7, #13]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	f040 8084 	bne.w	8000f9e <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000e96:	89fb      	ldrh	r3, [r7, #14]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d109      	bne.n	8000eb0 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000e9c:	f002 fe54 	bl	8003b48 <OSCHP_GetFrequency>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	4b4b      	ldr	r3, [pc, #300]	; (8000fd0 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000ea4:	fba3 2302 	umull	r2, r3, r3, r2
 8000ea8:	0c9b      	lsrs	r3, r3, #18
 8000eaa:	059b      	lsls	r3, r3, #22
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	e002      	b.n	8000eb6 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000eb0:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000eb4:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	fb02 f203 	mul.w	r2, r2, r3
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec4:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	4a42      	ldr	r2, [pc, #264]	; (8000fd4 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000eca:	fba2 2303 	umull	r2, r3, r2, r3
 8000ece:	091b      	lsrs	r3, r3, #4
 8000ed0:	0d9b      	lsrs	r3, r3, #22
 8000ed2:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000ed4:	4a40      	ldr	r2, [pc, #256]	; (8000fd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ed6:	4b40      	ldr	r3, [pc, #256]	; (8000fd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000ee0:	4a3d      	ldr	r2, [pc, #244]	; (8000fd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ee2:	4b3d      	ldr	r3, [pc, #244]	; (8000fd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f043 0310 	orr.w	r3, r3, #16
 8000eea:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000eec:	493a      	ldr	r1, [pc, #232]	; (8000fd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000eee:	4b3a      	ldr	r3, [pc, #232]	; (8000fd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000ef4:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	3a01      	subs	r2, #1
 8000efa:	0212      	lsls	r2, r2, #8
 8000efc:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000f04:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000f10:	4a31      	ldr	r2, [pc, #196]	; (8000fd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000f12:	4b31      	ldr	r3, [pc, #196]	; (8000fd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f1a:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000f1c:	4a2e      	ldr	r2, [pc, #184]	; (8000fd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	; (8000fd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f023 0310 	bic.w	r3, r3, #16
 8000f26:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000f28:	4a2b      	ldr	r2, [pc, #172]	; (8000fd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000f2a:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f32:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000f34:	bf00      	nop
 8000f36:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d0f9      	beq.n	8000f36 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000f42:	4a25      	ldr	r2, [pc, #148]	; (8000fd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000f44:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f023 0301 	bic.w	r3, r3, #1
 8000f4c:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000f4e:	bf00      	nop
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1f9      	bne.n	8000f50 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	4a20      	ldr	r2, [pc, #128]	; (8000fe0 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000f60:	fba2 2303 	umull	r2, r3, r2, r3
 8000f64:	095b      	lsrs	r3, r3, #5
 8000f66:	0d9b      	lsrs	r3, r3, #22
 8000f68:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000f6a:	6a3a      	ldr	r2, [r7, #32]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d202      	bcs.n	8000f78 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000f72:	6938      	ldr	r0, [r7, #16]
 8000f74:	f000 f838 	bl	8000fe8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	085b      	lsrs	r3, r3, #1
 8000f7c:	4a19      	ldr	r2, [pc, #100]	; (8000fe4 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	0d9b      	lsrs	r3, r3, #22
 8000f86:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000f88:	6a3a      	ldr	r2, [r7, #32]
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d202      	bcs.n	8000f96 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000f90:	6938      	ldr	r0, [r7, #16]
 8000f92:	f000 f829 	bl	8000fe8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000f96:	6a38      	ldr	r0, [r7, #32]
 8000f98:	f000 f826 	bl	8000fe8 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000f9c:	e015      	b.n	8000fca <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000f9e:	490e      	ldr	r1, [pc, #56]	; (8000fd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000fa8:	6a3b      	ldr	r3, [r7, #32]
 8000faa:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000fac:	4313      	orrs	r3, r2
 8000fae:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000fb0:	4a09      	ldr	r2, [pc, #36]	; (8000fd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000fbc:	bf00      	nop
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d0f9      	beq.n	8000fbe <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	431bde83 	.word	0x431bde83
 8000fd4:	aaaaaaab 	.word	0xaaaaaaab
 8000fd8:	50004710 	.word	0x50004710
 8000fdc:	f08080ff 	.word	0xf08080ff
 8000fe0:	88888889 	.word	0x88888889
 8000fe4:	b60b60b7 	.word	0xb60b60b7

08000fe8 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000ff0:	4907      	ldr	r1, [pc, #28]	; (8001010 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8001000:	4313      	orrs	r3, r2
 8001002:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8001004:	2032      	movs	r0, #50	; 0x32
 8001006:	f7ff fc1f 	bl	8000848 <XMC_SCU_lDelay>
}
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	50004710 	.word	0x50004710

08001014 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	60da      	str	r2, [r3, #12]
}
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a10      	ldr	r2, [pc, #64]	; (8001080 <XMC_CCU4_lDeassertReset+0x4c>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d103      	bne.n	800104c <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8001044:	2004      	movs	r0, #4
 8001046:	f7ff fc97 	bl	8000978 <XMC_SCU_RESET_DeassertPeripheralReset>
 800104a:	e016      	b.n	800107a <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a0d      	ldr	r2, [pc, #52]	; (8001084 <XMC_CCU4_lDeassertReset+0x50>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d103      	bne.n	800105c <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8001054:	2008      	movs	r0, #8
 8001056:	f7ff fc8f 	bl	8000978 <XMC_SCU_RESET_DeassertPeripheralReset>
 800105a:	e00e      	b.n	800107a <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <XMC_CCU4_lDeassertReset+0x54>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d103      	bne.n	800106c <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8001064:	2010      	movs	r0, #16
 8001066:	f7ff fc87 	bl	8000978 <XMC_SCU_RESET_DeassertPeripheralReset>
 800106a:	e006      	b.n	800107a <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a07      	ldr	r2, [pc, #28]	; (800108c <XMC_CCU4_lDeassertReset+0x58>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d102      	bne.n	800107a <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8001074:	4806      	ldr	r0, [pc, #24]	; (8001090 <XMC_CCU4_lDeassertReset+0x5c>)
 8001076:	f7ff fc7f 	bl	8000978 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	4000c000 	.word	0x4000c000
 8001084:	40010000 	.word	0x40010000
 8001088:	40014000 	.word	0x40014000
 800108c:	48004000 	.word	0x48004000
 8001090:	10000001 	.word	0x10000001

08001094 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 800109c:	2010      	movs	r0, #16
 800109e:	f7ff fdab 	bl	8000bf8 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ffc6 	bl	8001034 <XMC_CCU4_lDeassertReset>
#endif
}
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop

080010b0 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ffe9 	bl	8001094 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ffa6 	bl	8001014 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010d4:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 80010d6:	78fb      	ldrb	r3, [r7, #3]
 80010d8:	039b      	lsls	r3, r3, #14
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	4313      	orrs	r3, r2
 80010de:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	601a      	str	r2, [r3, #0]
}
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	795b      	ldrb	r3, [r3, #5]
 8001102:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	051a      	lsls	r2, r3, #20
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	791b      	ldrb	r3, [r3, #4]
 8001112:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001116:	b2db      	uxtb	r3, r3
 8001118:	461a      	mov	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	795b      	ldrb	r3, [r3, #5]
 8001122:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001126:	b2db      	uxtb	r3, r3
 8001128:	461a      	mov	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	795b      	ldrb	r3, [r3, #5]
 8001132:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	461a      	mov	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	791b      	ldrb	r3, [r3, #4]
 8001142:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001146:	b2db      	uxtb	r3, r3
 8001148:	461a      	mov	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8001158:	b480      	push	{r7}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	70fb      	strb	r3, [r7, #3]
 8001164:	4613      	mov	r3, r2
 8001166:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800116e:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8001170:	78fb      	ldrb	r3, [r7, #3]
 8001172:	2b09      	cmp	r3, #9
 8001174:	d82c      	bhi.n	80011d0 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8001176:	a201      	add	r2, pc, #4	; (adr r2, 800117c <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8001178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117c:	080011a5 	.word	0x080011a5
 8001180:	080011a5 	.word	0x080011a5
 8001184:	080011af 	.word	0x080011af
 8001188:	080011af 	.word	0x080011af
 800118c:	080011d1 	.word	0x080011d1
 8001190:	080011d1 	.word	0x080011d1
 8001194:	080011d1 	.word	0x080011d1
 8001198:	080011d1 	.word	0x080011d1
 800119c:	080011b9 	.word	0x080011b9
 80011a0:	080011c5 	.word	0x080011c5
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 80011a4:	2303      	movs	r3, #3
 80011a6:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
      break;
 80011ac:	e016      	b.n	80011dc <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 80011ae:	230c      	movs	r3, #12
 80011b0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 80011b2:	2302      	movs	r3, #2
 80011b4:	617b      	str	r3, [r7, #20]
      break;
 80011b6:	e011      	b.n	80011dc <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 80011b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011bc:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 80011be:	2308      	movs	r3, #8
 80011c0:	617b      	str	r3, [r7, #20]
      break;
 80011c2:	e00b      	b.n	80011dc <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 80011c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011c8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 80011ca:	230a      	movs	r3, #10
 80011cc:	617b      	str	r3, [r7, #20]
      break;
 80011ce:	e005      	b.n	80011dc <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 80011d0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011d4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 80011d6:	230c      	movs	r3, #12
 80011d8:	617b      	str	r3, [r7, #20]
      break;
 80011da:	bf00      	nop
  }
  
  srs &= ~mask; 
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	43db      	mvns	r3, r3
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	4013      	ands	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 80011e6:	78ba      	ldrb	r2, [r7, #2]
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80011fc:	371c      	adds	r7, #28
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop

08001208 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	70fb      	strb	r3, [r7, #3]
 8001214:	4613      	mov	r3, r2
 8001216:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4619      	mov	r1, r3
 8001222:	2303      	movs	r3, #3
 8001224:	408b      	lsls	r3, r1
 8001226:	43db      	mvns	r3, r3
 8001228:	401a      	ands	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001232:	78bb      	ldrb	r3, [r7, #2]
 8001234:	78f9      	ldrb	r1, [r7, #3]
 8001236:	0049      	lsls	r1, r1, #1
 8001238:	408b      	lsls	r3, r1
 800123a:	431a      	orrs	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop

0800124c <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8001254:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <_sbrk+0x5c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <_sbrk+0x5c>)
 800125e:	4a13      	ldr	r2, [pc, #76]	; (80012ac <_sbrk+0x60>)
 8001260:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <_sbrk+0x5c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3303      	adds	r3, #3
 800126c:	f023 0303 	bic.w	r3, r3, #3
 8001270:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <_sbrk+0x5c>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <_sbrk+0x64>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d207      	bcs.n	8001290 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <_sbrk+0x5c>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4413      	add	r3, r2
 8001288:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <_sbrk+0x5c>)
 800128a:	6013      	str	r3, [r2, #0]
    return (base);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	e006      	b.n	800129e <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8001290:	f00b fb00 	bl	800c894 <__errno>
 8001294:	4602      	mov	r2, r0
 8001296:	230c      	movs	r3, #12
 8001298:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200000bc 	.word	0x200000bc
 80012ac:	20000308 	.word	0x20000308
 80012b0:	2000ffc0 	.word	0x2000ffc0

080012b4 <_init>:

/* Init */
void _init(void)
{}
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	78fb      	ldrb	r3, [r7, #3]
 80012d2:	2101      	movs	r1, #1
 80012d4:	fa01 f303 	lsl.w	r3, r1, r3
 80012d8:	431a      	orrs	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	60da      	str	r2, [r3, #12]
}
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2201      	movs	r2, #1
 80012f4:	60da      	str	r2, [r3, #12]
}
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 800130c:	887a      	ldrh	r2, [r7, #2]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8001328:	887a      	ldrh	r2, [r7, #2]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	611a      	str	r2, [r3, #16]
}
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop

08001354 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001366:	78fb      	ldrb	r3, [r7, #3]
 8001368:	2101      	movs	r1, #1
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <PWM_lCCU4_Init>:

#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status = PWM_STATUS_FAILURE;
 8001388:	2301      	movs	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_lCCU4_Init:Invalid handle_ptr" , (handle_ptr != NULL))

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001392:	2b02      	cmp	r3, #2
 8001394:	d14d      	bne.n	8001432 <PWM_lCCU4_Init+0xb2>
  {
    /* Initialize consumed Apps */
    status = (PWM_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handle);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f932 	bl	8001604 <GLOBAL_CCU4_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	73fb      	strb	r3, [r7, #15]

    /*Initialize CCU4 slice */
    if (PWM_STATUS_SUCCESS == status)/*check GLOBAL_CCU4_Init status*/
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d13f      	bne.n	800142a <PWM_lCCU4_Init+0xaa>
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fe99 	bl	80010ec <XMC_CCU4_SLICE_CompareInit>

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689a      	ldr	r2, [r3, #8]
    		                             (uint16_t)handle_ptr->period_value);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69db      	ldr	r3, [r3, #28]
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f7ff ff9a 	bl	8001300 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689a      	ldr	r2, [r3, #8]
    		                              (uint16_t)handle_ptr->compare_value);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	699b      	ldr	r3, [r3, #24]

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff ff9f 	bl	800131c <XMC_CCU4_SLICE_SetTimerCompareMatch>
    		                              (uint16_t)handle_ptr->compare_value);

      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e6:	4610      	mov	r0, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	f7ff ffa5 	bl	8001338 <XMC_CCU4_EnableShadowTransfer>

      /* Initialize interrupts */
      PWM_lCCU4_ConfigInterrupts(handle_ptr);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 f824 	bl	800143c <PWM_lCCU4_ConfigInterrupts>

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6919      	ldr	r1, [r3, #16]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	4608      	mov	r0, r1
 8001404:	4611      	mov	r1, r2
 8001406:	461a      	mov	r2, r3
 8001408:	f7ff f96c 	bl	80006e4 <XMC_GPIO_Init>
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800141a:	2b00      	cmp	r3, #0
 800141c:	d002      	beq.n	8001424 <PWM_lCCU4_Init+0xa4>
      {
        PWM_Start(handle_ptr);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 f8b8 	bl	8001594 <PWM_Start>
      }
      status = PWM_STATUS_SUCCESS;
 8001424:	2300      	movs	r3, #0
 8001426:	73fb      	strb	r3, [r7, #15]
 8001428:	e003      	b.n	8001432 <PWM_lCCU4_Init+0xb2>
    }
    else
    {
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2202      	movs	r2, #2
 800142e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }

  }
  return (status);
 8001432:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_lCCU4_Init() api */
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <PWM_lCCU4_ConfigInterrupts>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU4_ConfigInterrupts(PWM_t *const handle_ptr)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->period_match_enable)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00f      	beq.n	800146e <PWM_lCCU4_ConfigInterrupts+0x32>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:period match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	4618      	mov	r0, r3
 8001454:	2100      	movs	r1, #0
 8001456:	f7ff ff7d 	bl	8001354 <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to period match event*/
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001464:	4610      	mov	r0, r2
 8001466:	2100      	movs	r1, #0
 8001468:	461a      	mov	r2, r3
 800146a:	f7ff fe75 	bl	8001158 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_period_match_node);
  }

  if ((bool) true == handle_ptr->compare_match_enable)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00f      	beq.n	8001498 <PWM_lCCU4_ConfigInterrupts+0x5c>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:compare match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	4618      	mov	r0, r3
 800147e:	2102      	movs	r1, #2
 8001480:	f7ff ff68 	bl	8001354 <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to compare match event */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800148e:	4610      	mov	r0, r2
 8001490:	2102      	movs	r1, #2
 8001492:	461a      	mov	r2, r3
 8001494:	f7ff fe60 	bl	8001158 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_compare_match_node);
  }
}
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop

080014a0 <PWM_lCCU4_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Starts the CCU4 slice. */
void PWM_lCCU4_Start(PWM_t *const handle_ptr)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d004      	beq.n	80014bc <PWM_lCCU4_Start+0x1c>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d111      	bne.n	80014e0 <PWM_lCCU4_Start+0x40>
  {
    /* Clears the IDLE mode for the slice */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_kernel_ptr,handle_ptr->slice_number);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f7ff fef9 	bl	80012c0 <XMC_CCU4_EnableClock>
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff08 	bl	80012e8 <XMC_CCU4_SLICE_StartTimer>

    handle_ptr->state = PWM_STATUS_RUNNING;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2203      	movs	r2, #3
 80014dc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    XMC_DEBUG("PWM_lCCU4_Start:start PWM")
  }
} /* end of PWM_lCCU4_Start() api */
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop

080014e8 <PWM_lCCU4_SetDutyCycle>:
} /* end of PWM_lCCU4_Stop() api */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Sets the duty cycle for CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t compare;
  PWM_STATUS_t status;

  XMC_ASSERT("PWM_lCCU4_SetDutyCycle:Invalid duty_cycle " , ((duty_cycle >= 0) && (duty_cycle <= PWM_MAX_DUTY_CYCLE)))

  status = PWM_STATUS_FAILURE;
 80014f2:	2301      	movs	r3, #1
 80014f4:	75fb      	strb	r3, [r7, #23]
  if (PWM_STATUS_UNINITIALIZED != handle_ptr->state)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d02c      	beq.n	800155a <PWM_lCCU4_SetDutyCycle+0x72>
  {
    /* Duty cycle needs between 0 and 10000 */
    if (duty_cycle <= PWM_MAX_DUTY_CYCLE)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	f242 7210 	movw	r2, #10000	; 0x2710
 8001506:	4293      	cmp	r3, r2
 8001508:	d827      	bhi.n	800155a <PWM_lCCU4_SetDutyCycle+0x72>
    {
      /* period = (PR + 1) */
      period = (uint32_t)handle_ptr->period_value + 1U;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	3301      	adds	r3, #1
 8001510:	613b      	str	r3, [r7, #16]

      /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
      compare = ((period * (PWM_MAX_DUTY_CYCLE - duty_cycle)) / ((uint32_t) 100 * PWM_DUTY_CYCLE_SCALE));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8001518:	3310      	adds	r3, #16
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	fb02 f303 	mul.w	r3, r2, r3
 8001520:	4a10      	ldr	r2, [pc, #64]	; (8001564 <PWM_lCCU4_SetDutyCycle+0x7c>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	0b5b      	lsrs	r3, r3, #13
 8001528:	60fb      	str	r3, [r7, #12]

      handle_ptr->compare_value = compare;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	619a      	str	r2, [r3, #24]
      handle_ptr->duty_cycle = duty_cycle;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	621a      	str	r2, [r3, #32]

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)compare);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	b29b      	uxth	r3, r3
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f7ff feeb 	bl	800131c <XMC_CCU4_SLICE_SetTimerCompareMatch>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fef1 	bl	8001338 <XMC_CCU4_EnableShadowTransfer>
      status = PWM_STATUS_SUCCESS;
 8001556:	2300      	movs	r3, #0
 8001558:	75fb      	strb	r3, [r7, #23]
    }
  }

  XMC_DEBUG("PWM_lCCU4_SetDutyCycle:dutycycle set")
  return (status);
 800155a:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_lCCU4_SetDutyCycle() api */
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	d1b71759 	.word	0xd1b71759

08001568 <PWM_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function initializes the app */
PWM_STATUS_t PWM_Init(PWM_t *const handle_ptr)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 8001570:	2301      	movs	r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_Init:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800157a:	2b00      	cmp	r3, #0
 800157c:	d104      	bne.n	8001588 <PWM_Init+0x20>
  {
    status = PWM_lCCU4_Init(handle_ptr);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff fefe 	bl	8001380 <PWM_lCCU4_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	73fb      	strb	r3, [r7, #15]
  {
    status = PWM_lCCU8_Init(handle_ptr);
  }
#endif

  return (status);
 8001588:	7bfb      	ldrb	r3, [r7, #15]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop

08001594 <PWM_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function starts the PWM generation. This needs to be called even if external start is configured.*/
void PWM_Start(PWM_t *const handle_ptr)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_Start:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d102      	bne.n	80015ac <PWM_Start+0x18>
  {
    PWM_lCCU4_Start(handle_ptr);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ff7a 	bl	80014a0 <PWM_lCCU4_Start>
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    PWM_lCCU8_Start(handle_ptr);
  }
#endif
}
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop

080015b4 <PWM_SetDutyCycle>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*This function is used to set the duty cycle (uint32_t) of the PWM waveform  */
PWM_STATUS_t PWM_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 80015be:	2301      	movs	r3, #1
 80015c0:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_SetDutyCycle:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d105      	bne.n	80015d8 <PWM_SetDutyCycle+0x24>
  {
    status = PWM_lCCU4_SetDutyCycle(handle_ptr, duty_cycle);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	6839      	ldr	r1, [r7, #0]
 80015d0:	f7ff ff8a 	bl	80014e8 <PWM_lCCU4_SetDutyCycle>
 80015d4:	4603      	mov	r3, r0
 80015d6:	73fb      	strb	r3, [r7, #15]
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    status = PWM_lCCU8_SetDutyCycle(handle_ptr, duty_cycle);
  }
#endif
  return (status);
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop

080015e4 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	60da      	str	r2, [r3, #12]
}
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop

08001604 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7b5b      	ldrb	r3, [r3, #13]
 8001610:	f083 0301 	eor.w	r3, r3, #1
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00f      	beq.n	800163a <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	7b1b      	ldrb	r3, [r3, #12]
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fd43 	bl	80010b0 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ffd8 	bl	80015e4 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	3b04      	subs	r3, #4
 8001654:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800165c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	3b04      	subs	r3, #4
 8001662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	f023 0201 	bic.w	r2, r3, #1
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	3b04      	subs	r3, #4
 8001672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001674:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <pxPortInitialiseStack+0x64>)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	3b14      	subs	r3, #20
 800167e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	3b04      	subs	r3, #4
 800168a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f06f 0202 	mvn.w	r2, #2
 8001692:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3b20      	subs	r3, #32
 8001698:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800169a:	68fb      	ldr	r3, [r7, #12]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	080016ad 	.word	0x080016ad

080016ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <prvTaskExitError+0x4c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016be:	d009      	beq.n	80016d4 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80016c0:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80016c4:	f383 8811 	msr	BASEPRI, r3
 80016c8:	f3bf 8f6f 	isb	sy
 80016cc:	f3bf 8f4f 	dsb	sy
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	e7fe      	b.n	80016d2 <prvTaskExitError+0x26>
 80016d4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80016d8:	f383 8811 	msr	BASEPRI, r3
 80016dc:	f3bf 8f6f 	isb	sy
 80016e0:	f3bf 8f4f 	dsb	sy
 80016e4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80016e6:	bf00      	nop
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0fc      	beq.n	80016e8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	20000044 	.word	0x20000044
 80016fc:	00000000 	.word	0x00000000

08001700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <pxCurrentTCBConst2>)
 8001702:	6819      	ldr	r1, [r3, #0]
 8001704:	6808      	ldr	r0, [r1, #0]
 8001706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800170a:	f380 8809 	msr	PSP, r0
 800170e:	f3bf 8f6f 	isb	sy
 8001712:	f04f 0000 	mov.w	r0, #0
 8001716:	f380 8811 	msr	BASEPRI, r0
 800171a:	4770      	bx	lr
 800171c:	f3af 8000 	nop.w

08001720 <pxCurrentTCBConst2>:
 8001720:	200000c8 	.word	0x200000c8
 8001724:	f3af 8000 	nop.w
 8001728:	f3af 8000 	nop.w
 800172c:	f3af 8000 	nop.w

08001730 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001730:	4808      	ldr	r0, [pc, #32]	; (8001754 <prvPortStartFirstTask+0x24>)
 8001732:	6800      	ldr	r0, [r0, #0]
 8001734:	6800      	ldr	r0, [r0, #0]
 8001736:	f380 8808 	msr	MSP, r0
 800173a:	f04f 0000 	mov.w	r0, #0
 800173e:	f380 8814 	msr	CONTROL, r0
 8001742:	b662      	cpsie	i
 8001744:	b661      	cpsie	f
 8001746:	f3bf 8f4f 	dsb	sy
 800174a:	f3bf 8f6f 	isb	sy
 800174e:	df00      	svc	0
 8001750:	bf00      	nop
 8001752:	0000      	.short	0x0000
 8001754:	e000ed08 	.word	0xe000ed08

08001758 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800175e:	4b44      	ldr	r3, [pc, #272]	; (8001870 <xPortStartScheduler+0x118>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a44      	ldr	r2, [pc, #272]	; (8001874 <xPortStartScheduler+0x11c>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d109      	bne.n	800177c <xPortStartScheduler+0x24>
 8001768:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800176c:	f383 8811 	msr	BASEPRI, r3
 8001770:	f3bf 8f6f 	isb	sy
 8001774:	f3bf 8f4f 	dsb	sy
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	e7fe      	b.n	800177a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800177c:	4b3c      	ldr	r3, [pc, #240]	; (8001870 <xPortStartScheduler+0x118>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a3d      	ldr	r2, [pc, #244]	; (8001878 <xPortStartScheduler+0x120>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d109      	bne.n	800179a <xPortStartScheduler+0x42>
 8001786:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800178a:	f383 8811 	msr	BASEPRI, r3
 800178e:	f3bf 8f6f 	isb	sy
 8001792:	f3bf 8f4f 	dsb	sy
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	e7fe      	b.n	8001798 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800179a:	4b38      	ldr	r3, [pc, #224]	; (800187c <xPortStartScheduler+0x124>)
 800179c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	22ff      	movs	r2, #255	; 0xff
 80017aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	f023 0303 	bic.w	r3, r3, #3
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4b30      	ldr	r3, [pc, #192]	; (8001880 <xPortStartScheduler+0x128>)
 80017c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80017c2:	4b30      	ldr	r3, [pc, #192]	; (8001884 <xPortStartScheduler+0x12c>)
 80017c4:	2207      	movs	r2, #7
 80017c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80017c8:	e009      	b.n	80017de <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80017ca:	4b2e      	ldr	r3, [pc, #184]	; (8001884 <xPortStartScheduler+0x12c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	4a2c      	ldr	r2, [pc, #176]	; (8001884 <xPortStartScheduler+0x12c>)
 80017d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	70fb      	strb	r3, [r7, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	b25b      	sxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	dbef      	blt.n	80017ca <xPortStartScheduler+0x72>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80017ea:	4b26      	ldr	r3, [pc, #152]	; (8001884 <xPortStartScheduler+0x12c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f1c3 0307 	rsb	r3, r3, #7
 80017f2:	2b06      	cmp	r3, #6
 80017f4:	d009      	beq.n	800180a <xPortStartScheduler+0xb2>
 80017f6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80017fa:	f383 8811 	msr	BASEPRI, r3
 80017fe:	f3bf 8f6f 	isb	sy
 8001802:	f3bf 8f4f 	dsb	sy
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	e7fe      	b.n	8001808 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800180a:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <xPortStartScheduler+0x12c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	021b      	lsls	r3, r3, #8
 8001810:	4a1c      	ldr	r2, [pc, #112]	; (8001884 <xPortStartScheduler+0x12c>)
 8001812:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001814:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <xPortStartScheduler+0x12c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800181c:	4a19      	ldr	r2, [pc, #100]	; (8001884 <xPortStartScheduler+0x12c>)
 800181e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001828:	4a17      	ldr	r2, [pc, #92]	; (8001888 <xPortStartScheduler+0x130>)
 800182a:	4b17      	ldr	r3, [pc, #92]	; (8001888 <xPortStartScheduler+0x130>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f443 037c 	orr.w	r3, r3, #16515072	; 0xfc0000
 8001832:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001834:	4a14      	ldr	r2, [pc, #80]	; (8001888 <xPortStartScheduler+0x130>)
 8001836:	4b14      	ldr	r3, [pc, #80]	; (8001888 <xPortStartScheduler+0x130>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f043 437c 	orr.w	r3, r3, #4227858432	; 0xfc000000
 800183e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001840:	f000 f8d6 	bl	80019f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <xPortStartScheduler+0x134>)
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800184a:	f000 f8f3 	bl	8001a34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800184e:	4a10      	ldr	r2, [pc, #64]	; (8001890 <xPortStartScheduler+0x138>)
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <xPortStartScheduler+0x138>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001858:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800185a:	f7ff ff69 	bl	8001730 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800185e:	f001 fa7f 	bl	8002d60 <vTaskSwitchContext>
	prvTaskExitError();
 8001862:	f7ff ff23 	bl	80016ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	e000ed00 	.word	0xe000ed00
 8001874:	410fc271 	.word	0x410fc271
 8001878:	410fc270 	.word	0x410fc270
 800187c:	e000e400 	.word	0xe000e400
 8001880:	200000c0 	.word	0x200000c0
 8001884:	200000c4 	.word	0x200000c4
 8001888:	e000ed20 	.word	0xe000ed20
 800188c:	20000044 	.word	0x20000044
 8001890:	e000ef34 	.word	0xe000ef34

08001894 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800189e:	f383 8811 	msr	BASEPRI, r3
 80018a2:	f3bf 8f6f 	isb	sy
 80018a6:	f3bf 8f4f 	dsb	sy
 80018aa:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <vPortEnterCritical+0x54>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3301      	adds	r3, #1
 80018b2:	4a0d      	ldr	r2, [pc, #52]	; (80018e8 <vPortEnterCritical+0x54>)
 80018b4:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <vPortEnterCritical+0x54>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d10e      	bne.n	80018dc <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <vPortEnterCritical+0x58>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d009      	beq.n	80018dc <vPortEnterCritical+0x48>
 80018c8:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80018cc:	f383 8811 	msr	BASEPRI, r3
 80018d0:	f3bf 8f6f 	isb	sy
 80018d4:	f3bf 8f4f 	dsb	sy
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	e7fe      	b.n	80018da <vPortEnterCritical+0x46>
	}
}
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000044 	.word	0x20000044
 80018ec:	e000ed04 	.word	0xe000ed04

080018f0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <vPortExitCritical+0x48>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d109      	bne.n	8001912 <vPortExitCritical+0x22>
 80018fe:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8001902:	f383 8811 	msr	BASEPRI, r3
 8001906:	f3bf 8f6f 	isb	sy
 800190a:	f3bf 8f4f 	dsb	sy
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	e7fe      	b.n	8001910 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <vPortExitCritical+0x48>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	3b01      	subs	r3, #1
 8001918:	4a07      	ldr	r2, [pc, #28]	; (8001938 <vPortExitCritical+0x48>)
 800191a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <vPortExitCritical+0x48>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d104      	bne.n	800192e <vPortExitCritical+0x3e>
 8001924:	2300      	movs	r3, #0
 8001926:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	20000044 	.word	0x20000044
 800193c:	00000000 	.word	0x00000000

08001940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001940:	f3ef 8009 	mrs	r0, PSP
 8001944:	f3bf 8f6f 	isb	sy
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <pxCurrentTCBConst>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	f01e 0f10 	tst.w	lr, #16
 8001950:	bf08      	it	eq
 8001952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800195a:	6010      	str	r0, [r2, #0]
 800195c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001960:	f04f 00fc 	mov.w	r0, #252	; 0xfc
 8001964:	f380 8811 	msr	BASEPRI, r0
 8001968:	f3bf 8f4f 	dsb	sy
 800196c:	f3bf 8f6f 	isb	sy
 8001970:	f001 f9f6 	bl	8002d60 <vTaskSwitchContext>
 8001974:	f04f 0000 	mov.w	r0, #0
 8001978:	f380 8811 	msr	BASEPRI, r0
 800197c:	bc09      	pop	{r0, r3}
 800197e:	6819      	ldr	r1, [r3, #0]
 8001980:	6808      	ldr	r0, [r1, #0]
 8001982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001986:	f01e 0f10 	tst.w	lr, #16
 800198a:	bf08      	it	eq
 800198c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001990:	f380 8809 	msr	PSP, r0
 8001994:	f3bf 8f6f 	isb	sy
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	f3af 8000 	nop.w

080019a0 <pxCurrentTCBConst>:
 80019a0:	200000c8 	.word	0x200000c8
 80019a4:	f3af 8000 	nop.w
 80019a8:	f3af 8000 	nop.w
 80019ac:	f3af 8000 	nop.w

080019b0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80019b6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80019ba:	f383 8811 	msr	BASEPRI, r3
 80019be:	f3bf 8f6f 	isb	sy
 80019c2:	f3bf 8f4f 	dsb	sy
 80019c6:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80019c8:	f001 f90c 	bl	8002be4 <xTaskIncrementTick>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <SysTick_Handler+0x3c>)
 80019d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	2300      	movs	r3, #0
 80019dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	e000ed04 	.word	0xe000ed04

080019f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <vPortSetupTimerInterrupt+0x30>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <vPortSetupTimerInterrupt+0x34>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001a00:	4a09      	ldr	r2, [pc, #36]	; (8001a28 <vPortSetupTimerInterrupt+0x38>)
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <vPortSetupTimerInterrupt+0x3c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	490a      	ldr	r1, [pc, #40]	; (8001a30 <vPortSetupTimerInterrupt+0x40>)
 8001a08:	fba1 1303 	umull	r1, r3, r1, r3
 8001a0c:	099b      	lsrs	r3, r3, #6
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001a12:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <vPortSetupTimerInterrupt+0x30>)
 8001a14:	2207      	movs	r2, #7
 8001a16:	601a      	str	r2, [r3, #0]
}
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000e010 	.word	0xe000e010
 8001a24:	e000e018 	.word	0xe000e018
 8001a28:	e000e014 	.word	0xe000e014
 8001a2c:	2000ffc0 	.word	0x2000ffc0
 8001a30:	10624dd3 	.word	0x10624dd3

08001a34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001a34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001a44 <vPortEnableVFP+0x10>
 8001a38:	6801      	ldr	r1, [r0, #0]
 8001a3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001a3e:	6001      	str	r1, [r0, #0]
 8001a40:	4770      	bx	lr
 8001a42:	0000      	.short	0x0000
 8001a44:	e000ed88 	.word	0xe000ed88

08001a48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001a4e:	f3ef 8305 	mrs	r3, IPSR
 8001a52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b0f      	cmp	r3, #15
 8001a58:	d913      	bls.n	8001a82 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001a5a:	4a15      	ldr	r2, [pc, #84]	; (8001ab0 <vPortValidateInterruptPriority+0x68>)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4413      	add	r3, r2
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001a64:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <vPortValidateInterruptPriority+0x6c>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	7afa      	ldrb	r2, [r7, #11]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d209      	bcs.n	8001a82 <vPortValidateInterruptPriority+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001a6e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8001a72:	f383 8811 	msr	BASEPRI, r3
 8001a76:	f3bf 8f6f 	isb	sy
 8001a7a:	f3bf 8f4f 	dsb	sy
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	e7fe      	b.n	8001a80 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <vPortValidateInterruptPriority+0x70>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <vPortValidateInterruptPriority+0x74>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d909      	bls.n	8001aa6 <vPortValidateInterruptPriority+0x5e>
 8001a92:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8001a96:	f383 8811 	msr	BASEPRI, r3
 8001a9a:	f3bf 8f6f 	isb	sy
 8001a9e:	f3bf 8f4f 	dsb	sy
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	e7fe      	b.n	8001aa4 <vPortValidateInterruptPriority+0x5c>
	}
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000e3f0 	.word	0xe000e3f0
 8001ab4:	200000c0 	.word	0x200000c0
 8001ab8:	e000ed0c 	.word	0xe000ed0c
 8001abc:	200000c4 	.word	0x200000c4

08001ac0 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8001ac8:	f000 ffd0 	bl	8002a6c <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f00a ff6b 	bl	800c9a8 <malloc>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001ad6:	f000 ffd7 	bl	8002a88 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8001ada:	68fb      	ldr	r3, [r7, #12]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	if( pv )
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d006      	beq.n	8001b00 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8001af2:	f000 ffbb 	bl	8002a6c <vTaskSuspendAll>
		{
			free( pv );
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f00a ff5e 	bl	800c9b8 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8001afc:	f000 ffc4 	bl	8002a88 <xTaskResumeAll>
	}
}
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop

08001b08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f103 0208 	add.w	r2, r3, #8
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f103 0208 	add.w	r2, r3, #8
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f103 0208 	add.w	r2, r3, #8
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop

08001b48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	601a      	str	r2, [r3, #0]
}
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop

08001ba8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbe:	d103      	bne.n	8001bc8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	e00c      	b.n	8001be2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3308      	adds	r3, #8
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	e002      	b.n	8001bd6 <vListInsert+0x2e>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d9f6      	bls.n	8001bd0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	601a      	str	r2, [r3, #0]
}
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6892      	ldr	r2, [r2, #8]
 8001c2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6852      	ldr	r2, [r2, #4]
 8001c38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d103      	bne.n	8001c4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	1e5a      	subs	r2, r3, #1
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d109      	bne.n	8001c94 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c80:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8001c84:	f383 8811 	msr	BASEPRI, r3
 8001c88:	f3bf 8f6f 	isb	sy
 8001c8c:	f3bf 8f4f 	dsb	sy
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	e7fe      	b.n	8001c92 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001c94:	f7ff fdfe 	bl	8001894 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca0:	68f9      	ldr	r1, [r7, #12]
 8001ca2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ca4:	fb01 f303 	mul.w	r3, r1, r3
 8001ca8:	441a      	add	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	68f9      	ldr	r1, [r7, #12]
 8001cc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001cca:	fb01 f303 	mul.w	r3, r1, r3
 8001cce:	441a      	add	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	22ff      	movs	r2, #255	; 0xff
 8001cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	22ff      	movs	r2, #255	; 0xff
 8001ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d114      	bne.n	8001d14 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d01a      	beq.n	8001d28 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	3310      	adds	r3, #16
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f001 f8d8 	bl	8002eac <xTaskRemoveFromEventList>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d012      	beq.n	8001d28 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001d02:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <xQueueGenericReset+0xcc>)
 8001d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	f3bf 8f4f 	dsb	sy
 8001d0e:	f3bf 8f6f 	isb	sy
 8001d12:	e009      	b.n	8001d28 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	3310      	adds	r3, #16
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fef5 	bl	8001b08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3324      	adds	r3, #36	; 0x24
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fef0 	bl	8001b08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001d28:	f7ff fde2 	bl	80018f0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001d2c:	2301      	movs	r3, #1
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	e000ed04 	.word	0xe000ed04

08001d3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b08b      	sub	sp, #44	; 0x2c
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	4613      	mov	r3, r2
 8001d48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d109      	bne.n	8001d64 <xQueueGenericCreate+0x28>
 8001d50:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8001d54:	f383 8811 	msr	BASEPRI, r3
 8001d58:	f3bf 8f6f 	isb	sy
 8001d5c:	f3bf 8f4f 	dsb	sy
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	e7fe      	b.n	8001d62 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d102      	bne.n	8001d70 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	e004      	b.n	8001d7a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	fb02 f303 	mul.w	r3, r2, r3
 8001d78:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3354      	adds	r3, #84	; 0x54
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fe9e 	bl	8001ac0 <pvPortMalloc>
 8001d84:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00b      	beq.n	8001da4 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	3354      	adds	r3, #84	; 0x54
 8001d90:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d92:	79fc      	ldrb	r4, [r7, #7]
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	68b9      	ldr	r1, [r7, #8]
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	4623      	mov	r3, r4
 8001da0:	f000 f806 	bl	8001db0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001da4:	69bb      	ldr	r3, [r7, #24]
	}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3724      	adds	r7, #36	; 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd90      	pop	{r4, r7, pc}
 8001dae:	bf00      	nop

08001db0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d103      	bne.n	8001dcc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	e002      	b.n	8001dd2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001dde:	69b8      	ldr	r0, [r7, #24]
 8001de0:	2101      	movs	r1, #1
 8001de2:	f7ff ff43 	bl	8001c6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	78fa      	ldrb	r2, [r7, #3]
 8001dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	2200      	movs	r2, #0
 8001df2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop

08001dfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08e      	sub	sp, #56	; 0x38
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d109      	bne.n	8001e2c <xQueueGenericSend+0x30>
 8001e18:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8001e1c:	f383 8811 	msr	BASEPRI, r3
 8001e20:	f3bf 8f6f 	isb	sy
 8001e24:	f3bf 8f4f 	dsb	sy
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e2a:	e7fe      	b.n	8001e2a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d103      	bne.n	8001e3a <xQueueGenericSend+0x3e>
 8001e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <xQueueGenericSend+0x42>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <xQueueGenericSend+0x44>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d109      	bne.n	8001e58 <xQueueGenericSend+0x5c>
 8001e44:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8001e48:	f383 8811 	msr	BASEPRI, r3
 8001e4c:	f3bf 8f6f 	isb	sy
 8001e50:	f3bf 8f4f 	dsb	sy
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
 8001e56:	e7fe      	b.n	8001e56 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d103      	bne.n	8001e66 <xQueueGenericSend+0x6a>
 8001e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d101      	bne.n	8001e6a <xQueueGenericSend+0x6e>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <xQueueGenericSend+0x70>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d109      	bne.n	8001e84 <xQueueGenericSend+0x88>
 8001e70:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8001e74:	f383 8811 	msr	BASEPRI, r3
 8001e78:	f3bf 8f6f 	isb	sy
 8001e7c:	f3bf 8f4f 	dsb	sy
 8001e80:	623b      	str	r3, [r7, #32]
 8001e82:	e7fe      	b.n	8001e82 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e84:	f001 f9be 	bl	8003204 <xTaskGetSchedulerState>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d102      	bne.n	8001e94 <xQueueGenericSend+0x98>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <xQueueGenericSend+0x9c>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <xQueueGenericSend+0x9e>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d109      	bne.n	8001eb2 <xQueueGenericSend+0xb6>
 8001e9e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8001ea2:	f383 8811 	msr	BASEPRI, r3
 8001ea6:	f3bf 8f6f 	isb	sy
 8001eaa:	f3bf 8f4f 	dsb	sy
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	e7fe      	b.n	8001eb0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001eb2:	f7ff fcef 	bl	8001894 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d302      	bcc.n	8001ec8 <xQueueGenericSend+0xcc>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d13d      	bne.n	8001f44 <xQueueGenericSend+0x148>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001eca:	68b9      	ldr	r1, [r7, #8]
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	f000 fa2d 	bl	800232c <prvCopyDataToQueue>
 8001ed2:	62f8      	str	r0, [r7, #44]	; 0x2c

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8001ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00f      	beq.n	8001efc <xQueueGenericSend+0x100>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8001edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ede:	6839      	ldr	r1, [r7, #0]
 8001ee0:	f000 fba2 	bl	8002628 <prvNotifyQueueSetContainer>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d028      	beq.n	8001f3c <xQueueGenericSend+0x140>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8001eea:	4b4c      	ldr	r3, [pc, #304]	; (800201c <xQueueGenericSend+0x220>)
 8001eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	f3bf 8f4f 	dsb	sy
 8001ef6:	f3bf 8f6f 	isb	sy
 8001efa:	e01f      	b.n	8001f3c <xQueueGenericSend+0x140>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d010      	beq.n	8001f26 <xQueueGenericSend+0x12a>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f06:	3324      	adds	r3, #36	; 0x24
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 ffcf 	bl	8002eac <xTaskRemoveFromEventList>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d013      	beq.n	8001f3c <xQueueGenericSend+0x140>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8001f14:	4b41      	ldr	r3, [pc, #260]	; (800201c <xQueueGenericSend+0x220>)
 8001f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	f3bf 8f4f 	dsb	sy
 8001f20:	f3bf 8f6f 	isb	sy
 8001f24:	e00a      	b.n	8001f3c <xQueueGenericSend+0x140>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8001f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <xQueueGenericSend+0x140>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8001f2c:	4b3b      	ldr	r3, [pc, #236]	; (800201c <xQueueGenericSend+0x220>)
 8001f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	f3bf 8f4f 	dsb	sy
 8001f38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001f3c:	f7ff fcd8 	bl	80018f0 <vPortExitCritical>
				return pdPASS;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e067      	b.n	8002014 <xQueueGenericSend+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d103      	bne.n	8001f52 <xQueueGenericSend+0x156>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001f4a:	f7ff fcd1 	bl	80018f0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e060      	b.n	8002014 <xQueueGenericSend+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d106      	bne.n	8001f66 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f001 f809 	bl	8002f74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f62:	2301      	movs	r3, #1
 8001f64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001f66:	f7ff fcc3 	bl	80018f0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001f6a:	f000 fd7f 	bl	8002a6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001f6e:	f7ff fc91 	bl	8001894 <vPortEnterCritical>
 8001f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	b25b      	sxtb	r3, r3
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d103      	bne.n	8001f8a <xQueueGenericSend+0x18e>
 8001f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	b25b      	sxtb	r3, r3
 8001f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f98:	d103      	bne.n	8001fa2 <xQueueGenericSend+0x1a6>
 8001f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001fa2:	f7ff fca5 	bl	80018f0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001fa6:	f107 0214 	add.w	r2, r7, #20
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	4610      	mov	r0, r2
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f000 fff6 	bl	8002fa0 <xTaskCheckForTimeOut>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d124      	bne.n	8002004 <xQueueGenericSend+0x208>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001fba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fbc:	f000 fabe 	bl	800253c <prvIsQueueFull>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d018      	beq.n	8001ff8 <xQueueGenericSend+0x1fc>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc8:	f103 0210 	add.w	r2, r3, #16
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4610      	mov	r0, r2
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f000 ff1f 	bl	8002e14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001fd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fd8:	f000 fa3a 	bl	8002450 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001fdc:	f000 fd54 	bl	8002a88 <xTaskResumeAll>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d115      	bne.n	8002012 <xQueueGenericSend+0x216>
				{
					portYIELD_WITHIN_API();
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <xQueueGenericSend+0x220>)
 8001fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	f3bf 8f4f 	dsb	sy
 8001ff2:	f3bf 8f6f 	isb	sy
 8001ff6:	e00c      	b.n	8002012 <xQueueGenericSend+0x216>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001ff8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ffa:	f000 fa29 	bl	8002450 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001ffe:	f000 fd43 	bl	8002a88 <xTaskResumeAll>
 8002002:	e756      	b.n	8001eb2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002006:	f000 fa23 	bl	8002450 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800200a:	f000 fd3d 	bl	8002a88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800200e:	2300      	movs	r3, #0
 8002010:	e000      	b.n	8002014 <xQueueGenericSend+0x218>
		}
	}
 8002012:	e74e      	b.n	8001eb2 <xQueueGenericSend+0xb6>
}
 8002014:	4618      	mov	r0, r3
 8002016:	3738      	adds	r7, #56	; 0x38
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	e000ed04 	.word	0xe000ed04

08002020 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08e      	sub	sp, #56	; 0x38
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002034:	2b00      	cmp	r3, #0
 8002036:	d109      	bne.n	800204c <xQueueGenericSendFromISR+0x2c>
 8002038:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800203c:	f383 8811 	msr	BASEPRI, r3
 8002040:	f3bf 8f6f 	isb	sy
 8002044:	f3bf 8f4f 	dsb	sy
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
 800204a:	e7fe      	b.n	800204a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d103      	bne.n	800205a <xQueueGenericSendFromISR+0x3a>
 8002052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <xQueueGenericSendFromISR+0x3e>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <xQueueGenericSendFromISR+0x40>
 800205e:	2300      	movs	r3, #0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d109      	bne.n	8002078 <xQueueGenericSendFromISR+0x58>
 8002064:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002068:	f383 8811 	msr	BASEPRI, r3
 800206c:	f3bf 8f6f 	isb	sy
 8002070:	f3bf 8f4f 	dsb	sy
 8002074:	623b      	str	r3, [r7, #32]
 8002076:	e7fe      	b.n	8002076 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d103      	bne.n	8002086 <xQueueGenericSendFromISR+0x66>
 800207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <xQueueGenericSendFromISR+0x6a>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <xQueueGenericSendFromISR+0x6c>
 800208a:	2300      	movs	r3, #0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d109      	bne.n	80020a4 <xQueueGenericSendFromISR+0x84>
 8002090:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002094:	f383 8811 	msr	BASEPRI, r3
 8002098:	f3bf 8f6f 	isb	sy
 800209c:	f3bf 8f4f 	dsb	sy
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	e7fe      	b.n	80020a2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80020a4:	f7ff fcd0 	bl	8001a48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80020a8:	f3ef 8211 	mrs	r2, BASEPRI
 80020ac:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80020b0:	f383 8811 	msr	BASEPRI, r3
 80020b4:	f3bf 8f6f 	isb	sy
 80020b8:	f3bf 8f4f 	dsb	sy
 80020bc:	61ba      	str	r2, [r7, #24]
 80020be:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80020c0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80020c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d302      	bcc.n	80020d6 <xQueueGenericSendFromISR+0xb6>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d13e      	bne.n	8002154 <xQueueGenericSendFromISR+0x134>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80020d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	f000 f921 	bl	800232c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80020ea:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80020ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f2:	d124      	bne.n	800213e <xQueueGenericSendFromISR+0x11e>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 80020f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00d      	beq.n	8002118 <xQueueGenericSendFromISR+0xf8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 80020fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020fe:	6839      	ldr	r1, [r7, #0]
 8002100:	f000 fa92 	bl	8002628 <prvNotifyQueueSetContainer>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d021      	beq.n	800214e <xQueueGenericSendFromISR+0x12e>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d01e      	beq.n	800214e <xQueueGenericSendFromISR+0x12e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	e01a      	b.n	800214e <xQueueGenericSendFromISR+0x12e>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	2b00      	cmp	r3, #0
 800211e:	d016      	beq.n	800214e <xQueueGenericSendFromISR+0x12e>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002122:	3324      	adds	r3, #36	; 0x24
 8002124:	4618      	mov	r0, r3
 8002126:	f000 fec1 	bl	8002eac <xTaskRemoveFromEventList>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00e      	beq.n	800214e <xQueueGenericSendFromISR+0x12e>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00b      	beq.n	800214e <xQueueGenericSendFromISR+0x12e>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	e007      	b.n	800214e <xQueueGenericSendFromISR+0x12e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800213e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002142:	3301      	adds	r3, #1
 8002144:	b2db      	uxtb	r3, r3
 8002146:	b2da      	uxtb	r2, r3
 8002148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800214e:	2301      	movs	r3, #1
 8002150:	637b      	str	r3, [r7, #52]	; 0x34
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 8002152:	e001      	b.n	8002158 <xQueueGenericSendFromISR+0x138>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002154:	2300      	movs	r3, #0
 8002156:	637b      	str	r3, [r7, #52]	; 0x34
 8002158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002164:	4618      	mov	r0, r3
 8002166:	3738      	adds	r7, #56	; 0x38
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08c      	sub	sp, #48	; 0x30
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002178:	2300      	movs	r3, #0
 800217a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002182:	2b00      	cmp	r3, #0
 8002184:	d109      	bne.n	800219a <xQueueReceive+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002186:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800218a:	f383 8811 	msr	BASEPRI, r3
 800218e:	f3bf 8f6f 	isb	sy
 8002192:	f3bf 8f4f 	dsb	sy
 8002196:	623b      	str	r3, [r7, #32]
 8002198:	e7fe      	b.n	8002198 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d103      	bne.n	80021a8 <xQueueReceive+0x3c>
 80021a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <xQueueReceive+0x40>
 80021a8:	2301      	movs	r3, #1
 80021aa:	e000      	b.n	80021ae <xQueueReceive+0x42>
 80021ac:	2300      	movs	r3, #0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d109      	bne.n	80021c6 <xQueueReceive+0x5a>
 80021b2:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80021b6:	f383 8811 	msr	BASEPRI, r3
 80021ba:	f3bf 8f6f 	isb	sy
 80021be:	f3bf 8f4f 	dsb	sy
 80021c2:	61fb      	str	r3, [r7, #28]
 80021c4:	e7fe      	b.n	80021c4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021c6:	f001 f81d 	bl	8003204 <xTaskGetSchedulerState>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d102      	bne.n	80021d6 <xQueueReceive+0x6a>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <xQueueReceive+0x6e>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <xQueueReceive+0x70>
 80021da:	2300      	movs	r3, #0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d109      	bne.n	80021f4 <xQueueReceive+0x88>
 80021e0:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80021e4:	f383 8811 	msr	BASEPRI, r3
 80021e8:	f3bf 8f6f 	isb	sy
 80021ec:	f3bf 8f4f 	dsb	sy
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	e7fe      	b.n	80021f2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80021f4:	f7ff fb4e 	bl	8001894 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	2b00      	cmp	r3, #0
 8002202:	d01f      	beq.n	8002244 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002206:	68b9      	ldr	r1, [r7, #8]
 8002208:	f000 f8fc 	bl	8002404 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	1e5a      	subs	r2, r3, #1
 8002210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002212:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00f      	beq.n	800223c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800221c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221e:	3310      	adds	r3, #16
 8002220:	4618      	mov	r0, r3
 8002222:	f000 fe43 	bl	8002eac <xTaskRemoveFromEventList>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d007      	beq.n	800223c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800222c:	4b3e      	ldr	r3, [pc, #248]	; (8002328 <xQueueReceive+0x1bc>)
 800222e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	f3bf 8f4f 	dsb	sy
 8002238:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800223c:	f7ff fb58 	bl	80018f0 <vPortExitCritical>
				return pdPASS;
 8002240:	2301      	movs	r3, #1
 8002242:	e06d      	b.n	8002320 <xQueueReceive+0x1b4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d103      	bne.n	8002252 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800224a:	f7ff fb51 	bl	80018f0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800224e:	2300      	movs	r3, #0
 8002250:	e066      	b.n	8002320 <xQueueReceive+0x1b4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002254:	2b00      	cmp	r3, #0
 8002256:	d106      	bne.n	8002266 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002258:	f107 0310 	add.w	r3, r7, #16
 800225c:	4618      	mov	r0, r3
 800225e:	f000 fe89 	bl	8002f74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002262:	2301      	movs	r3, #1
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002266:	f7ff fb43 	bl	80018f0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800226a:	f000 fbff 	bl	8002a6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800226e:	f7ff fb11 	bl	8001894 <vPortEnterCritical>
 8002272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002274:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002278:	b2db      	uxtb	r3, r3
 800227a:	b25b      	sxtb	r3, r3
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d103      	bne.n	800228a <xQueueReceive+0x11e>
 8002282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800228a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002290:	b2db      	uxtb	r3, r3
 8002292:	b25b      	sxtb	r3, r3
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002298:	d103      	bne.n	80022a2 <xQueueReceive+0x136>
 800229a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022a2:	f7ff fb25 	bl	80018f0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022a6:	f107 0210 	add.w	r2, r7, #16
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	4610      	mov	r0, r2
 80022ae:	4619      	mov	r1, r3
 80022b0:	f000 fe76 	bl	8002fa0 <xTaskCheckForTimeOut>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d124      	bne.n	8002304 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022bc:	f000 f928 	bl	8002510 <prvIsQueueEmpty>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d018      	beq.n	80022f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80022c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4610      	mov	r0, r2
 80022d0:	4619      	mov	r1, r3
 80022d2:	f000 fd9f 	bl	8002e14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80022d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022d8:	f000 f8ba 	bl	8002450 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80022dc:	f000 fbd4 	bl	8002a88 <xTaskResumeAll>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d11b      	bne.n	800231e <xQueueReceive+0x1b2>
				{
					portYIELD_WITHIN_API();
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <xQueueReceive+0x1bc>)
 80022e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	f3bf 8f4f 	dsb	sy
 80022f2:	f3bf 8f6f 	isb	sy
 80022f6:	e012      	b.n	800231e <xQueueReceive+0x1b2>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80022f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022fa:	f000 f8a9 	bl	8002450 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80022fe:	f000 fbc3 	bl	8002a88 <xTaskResumeAll>
 8002302:	e777      	b.n	80021f4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002306:	f000 f8a3 	bl	8002450 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800230a:	f000 fbbd 	bl	8002a88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800230e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002310:	f000 f8fe 	bl	8002510 <prvIsQueueEmpty>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <xQueueReceive+0x1b2>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800231a:	2300      	movs	r3, #0
 800231c:	e000      	b.n	8002320 <xQueueReceive+0x1b4>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800231e:	e769      	b.n	80021f4 <xQueueReceive+0x88>
}
 8002320:	4618      	mov	r0, r3
 8002322:	3730      	adds	r7, #48	; 0x30
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	e000ed04 	.word	0xe000ed04

0800232c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002340:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10d      	bne.n	8002366 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d14f      	bne.n	80023f2 <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	4618      	mov	r0, r3
 8002358:	f000 ff72 	bl	8003240 <xTaskPriorityDisinherit>
 800235c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	e045      	b.n	80023f2 <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d11a      	bne.n	80023a2 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	4610      	mov	r0, r2
 8002376:	68b9      	ldr	r1, [r7, #8]
 8002378:	461a      	mov	r2, r3
 800237a:	f00a fb44 	bl	800ca06 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	441a      	add	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	d32c      	bcc.n	80023f2 <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	e027      	b.n	80023f2 <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	4610      	mov	r0, r2
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	461a      	mov	r2, r3
 80023b0:	f00a fb29 	bl	800ca06 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	425b      	negs	r3, r3
 80023be:	441a      	add	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d207      	bcs.n	80023e0 <prvCopyDataToQueue+0xb4>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	425b      	negs	r3, r3
 80023da:	441a      	add	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d105      	bne.n	80023f2 <prvCopyDataToQueue+0xc6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80023fa:	697b      	ldr	r3, [r7, #20]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	2b00      	cmp	r3, #0
 8002414:	d019      	beq.n	800244a <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	441a      	add	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	429a      	cmp	r2, r3
 800242e:	d303      	bcc.n	8002438 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	6838      	ldr	r0, [r7, #0]
 8002442:	4611      	mov	r1, r2
 8002444:	461a      	mov	r2, r3
 8002446:	f00a fade 	bl	800ca06 <memcpy>
	}
}
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002458:	f7ff fa1c 	bl	8001894 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002462:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002464:	e021      	b.n	80024aa <prvUnlockQueue+0x5a>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	2100      	movs	r1, #0
 8002472:	f000 f8d9 	bl	8002628 <prvNotifyQueueSetContainer>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d012      	beq.n	80024a2 <prvUnlockQueue+0x52>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 800247c:	f000 fe00 	bl	8003080 <vTaskMissedYield>
 8002480:	e00f      	b.n	80024a2 <prvUnlockQueue+0x52>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <prvUnlockQueue+0x50>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3324      	adds	r3, #36	; 0x24
 800248e:	4618      	mov	r0, r3
 8002490:	f000 fd0c 	bl	8002eac <xTaskRemoveFromEventList>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <prvUnlockQueue+0x52>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 800249a:	f000 fdf1 	bl	8003080 <vTaskMissedYield>
 800249e:	e000      	b.n	80024a2 <prvUnlockQueue+0x52>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
 80024a0:	e007      	b.n	80024b2 <prvUnlockQueue+0x62>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	73fb      	strb	r3, [r7, #15]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80024aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	dcd9      	bgt.n	8002466 <prvUnlockQueue+0x16>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	22ff      	movs	r2, #255	; 0xff
 80024b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80024ba:	f7ff fa19 	bl	80018f0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80024be:	f7ff f9e9 	bl	8001894 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80024ca:	e013      	b.n	80024f4 <prvUnlockQueue+0xa4>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00e      	beq.n	80024f2 <prvUnlockQueue+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3310      	adds	r3, #16
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 fce7 	bl	8002eac <xTaskRemoveFromEventList>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 80024e4:	f000 fdcc 	bl	8003080 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80024e8:	7bbb      	ldrb	r3, [r7, #14]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	73bb      	strb	r3, [r7, #14]
 80024f0:	e000      	b.n	80024f4 <prvUnlockQueue+0xa4>
			}
			else
			{
				break;
 80024f2:	e003      	b.n	80024fc <prvUnlockQueue+0xac>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80024f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	dce7      	bgt.n	80024cc <prvUnlockQueue+0x7c>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	22ff      	movs	r2, #255	; 0xff
 8002500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002504:	f7ff f9f4 	bl	80018f0 <vPortExitCritical>
}
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop

08002510 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002518:	f7ff f9bc 	bl	8001894 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002524:	2301      	movs	r3, #1
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	e001      	b.n	800252e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800252e:	f7ff f9df 	bl	80018f0 <vPortExitCritical>

	return xReturn;
 8002532:	68fb      	ldr	r3, [r7, #12]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002544:	f7ff f9a6 	bl	8001894 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002550:	429a      	cmp	r2, r3
 8002552:	d102      	bne.n	800255a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002554:	2301      	movs	r3, #1
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	e001      	b.n	800255e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800255e:	f7ff f9c7 	bl	80018f0 <vPortExitCritical>

	return xReturn;
 8002562:	68fb      	ldr	r3, [r7, #12]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	e014      	b.n	80025a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800257c:	4a0e      	ldr	r2, [pc, #56]	; (80025b8 <vQueueAddToRegistry+0x4c>)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10b      	bne.n	80025a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002588:	490b      	ldr	r1, [pc, #44]	; (80025b8 <vQueueAddToRegistry+0x4c>)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002592:	4a09      	ldr	r2, [pc, #36]	; (80025b8 <vQueueAddToRegistry+0x4c>)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4413      	add	r3, r2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800259e:	e005      	b.n	80025ac <vQueueAddToRegistry+0x40>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3301      	adds	r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b07      	cmp	r3, #7
 80025aa:	d9e7      	bls.n	800257c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	200002c4 	.word	0x200002c4

080025bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80025cc:	f7ff f962 	bl	8001894 <vPortEnterCritical>
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	b25b      	sxtb	r3, r3
 80025da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025de:	d103      	bne.n	80025e8 <vQueueWaitForMessageRestricted+0x2c>
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	b25b      	sxtb	r3, r3
 80025f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f6:	d103      	bne.n	8002600 <vQueueWaitForMessageRestricted+0x44>
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002600:	f7ff f976 	bl	80018f0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002608:	2b00      	cmp	r3, #0
 800260a:	d106      	bne.n	800261a <vQueueWaitForMessageRestricted+0x5e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	3324      	adds	r3, #36	; 0x24
 8002610:	4618      	mov	r0, r3
 8002612:	68b9      	ldr	r1, [r7, #8]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	f000 fc1f 	bl	8002e58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800261a:	6978      	ldr	r0, [r7, #20]
 800261c:	f7ff ff18 	bl	8002450 <prvUnlockQueue>
	}
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop

08002628 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002636:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8002638:	2300      	movs	r3, #0
 800263a:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d109      	bne.n	8002656 <prvNotifyQueueSetContainer+0x2e>
 8002642:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002646:	f383 8811 	msr	BASEPRI, r3
 800264a:	f3bf 8f6f 	isb	sy
 800264e:	f3bf 8f4f 	dsb	sy
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	e7fe      	b.n	8002654 <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265e:	429a      	cmp	r2, r3
 8002660:	d309      	bcc.n	8002676 <prvNotifyQueueSetContainer+0x4e>
 8002662:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002666:	f383 8811 	msr	BASEPRI, r3
 800266a:	f3bf 8f6f 	isb	sy
 800266e:	f3bf 8f4f 	dsb	sy
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	e7fe      	b.n	8002674 <prvNotifyQueueSetContainer+0x4c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267e:	429a      	cmp	r2, r3
 8002680:	d226      	bcs.n	80026d0 <prvNotifyQueueSetContainer+0xa8>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002688:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	69b8      	ldr	r0, [r7, #24]
 800268e:	4619      	mov	r1, r3
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	f7ff fe4b 	bl	800232c <prvCopyDataToQueue>
 8002696:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 8002698:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a0:	d10e      	bne.n	80026c0 <prvNotifyQueueSetContainer+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d012      	beq.n	80026d0 <prvNotifyQueueSetContainer+0xa8>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	3324      	adds	r3, #36	; 0x24
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 fbfc 	bl	8002eac <xTaskRemoveFromEventList>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <prvNotifyQueueSetContainer+0xa8>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 80026ba:	2301      	movs	r3, #1
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	e007      	b.n	80026d0 <prvNotifyQueueSetContainer+0xa8>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	3301      	adds	r3, #1
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026ce:	e7ff      	b.n	80026d0 <prvNotifyQueueSetContainer+0xa8>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80026d0:	69fb      	ldr	r3, [r7, #28]
	}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3720      	adds	r7, #32
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop

080026dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08c      	sub	sp, #48	; 0x30
 80026e0:	af04      	add	r7, sp, #16
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026ec:	88fb      	ldrh	r3, [r7, #6]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff f9e5 	bl	8001ac0 <pvPortMalloc>
 80026f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00e      	beq.n	800271c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80026fe:	2070      	movs	r0, #112	; 0x70
 8002700:	f7ff f9de 	bl	8001ac0 <pvPortMalloc>
 8002704:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	631a      	str	r2, [r3, #48]	; 0x30
 8002712:	e005      	b.n	8002720 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002714:	6978      	ldr	r0, [r7, #20]
 8002716:	f7ff f9e5 	bl	8001ae4 <vPortFree>
 800271a:	e001      	b.n	8002720 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800271c:	2300      	movs	r3, #0
 800271e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d013      	beq.n	800274e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002726:	88fa      	ldrh	r2, [r7, #6]
 8002728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	9302      	str	r3, [sp, #8]
 8002734:	2300      	movs	r3, #0
 8002736:	9303      	str	r3, [sp, #12]
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	68b9      	ldr	r1, [r7, #8]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	f000 f80f 	bl	8002760 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002742:	69f8      	ldr	r0, [r7, #28]
 8002744:	f000 f8a6 	bl	8002894 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002748:	2301      	movs	r3, #1
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	e002      	b.n	8002754 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800274e:	f04f 33ff 	mov.w	r3, #4294967295
 8002752:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002754:	69bb      	ldr	r3, [r7, #24]
	}
 8002756:	4618      	mov	r0, r3
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop

08002760 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800276e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4610      	mov	r0, r2
 8002778:	21a5      	movs	r1, #165	; 0xa5
 800277a:	461a      	mov	r2, r3
 800277c:	f00a f969 	bl	800ca52 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800278a:	3b01      	subs	r3, #1
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	f023 0307 	bic.w	r3, r3, #7
 8002798:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d009      	beq.n	80027b8 <prvInitialiseNewTask+0x58>
 80027a4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80027a8:	f383 8811 	msr	BASEPRI, r3
 80027ac:	f3bf 8f6f 	isb	sy
 80027b0:	f3bf 8f4f 	dsb	sy
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	e7fe      	b.n	80027b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027b8:	2300      	movs	r3, #0
 80027ba:	61fb      	str	r3, [r7, #28]
 80027bc:	e013      	b.n	80027e6 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	4413      	add	r3, r2
 80027c4:	7819      	ldrb	r1, [r3, #0]
 80027c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	4413      	add	r3, r2
 80027cc:	3330      	adds	r3, #48	; 0x30
 80027ce:	460a      	mov	r2, r1
 80027d0:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	4413      	add	r3, r2
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d100      	bne.n	80027e0 <prvInitialiseNewTask+0x80>
		{
			break;
 80027de:	e005      	b.n	80027ec <prvInitialiseNewTask+0x8c>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	3301      	adds	r3, #1
 80027e4:	61fb      	str	r3, [r7, #28]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	2b0f      	cmp	r3, #15
 80027ea:	d9e8      	bls.n	80027be <prvInitialiseNewTask+0x5e>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80027ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d901      	bls.n	80027fe <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80027fa:	2304      	movs	r3, #4
 80027fc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80027fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002802:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002808:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800280a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280c:	2200      	movs	r2, #0
 800280e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002812:	3304      	adds	r3, #4
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff f997 	bl	8001b48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800281a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281c:	3318      	adds	r3, #24
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff f992 	bl	8001b48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002828:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282c:	f1c3 0205 	rsb	r2, r3, #5
 8002830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002832:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002838:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
 800283e:	e009      	b.n	8002854 <prvInitialiseNewTask+0xf4>
		{
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 8002840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3314      	adds	r3, #20
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	2200      	movs	r2, #0
 800284c:	605a      	str	r2, [r3, #4]
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3301      	adds	r3, #1
 8002852:	61fb      	str	r3, [r7, #28]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	2b04      	cmp	r3, #4
 8002858:	d9f2      	bls.n	8002840 <prvInitialiseNewTask+0xe0>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800285a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285c:	2200      	movs	r2, #0
 800285e:	669a      	str	r2, [r3, #104]	; 0x68
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002862:	2200      	movs	r2, #0
 8002864:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8002868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286a:	2200      	movs	r2, #0
 800286c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002870:	69b8      	ldr	r0, [r7, #24]
 8002872:	68f9      	ldr	r1, [r7, #12]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	f7fe fee5 	bl	8001644 <pxPortInitialiseStack>
 800287a:	4602      	mov	r2, r0
 800287c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800288a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800288c:	3720      	adds	r7, #32
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop

08002894 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800289c:	f7fe fffa 	bl	8001894 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80028a0:	4b2d      	ldr	r3, [pc, #180]	; (8002958 <prvAddNewTaskToReadyList+0xc4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	3301      	adds	r3, #1
 80028a6:	4a2c      	ldr	r2, [pc, #176]	; (8002958 <prvAddNewTaskToReadyList+0xc4>)
 80028a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80028aa:	4b2c      	ldr	r3, [pc, #176]	; (800295c <prvAddNewTaskToReadyList+0xc8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80028b2:	4a2a      	ldr	r2, [pc, #168]	; (800295c <prvAddNewTaskToReadyList+0xc8>)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80028b8:	4b27      	ldr	r3, [pc, #156]	; (8002958 <prvAddNewTaskToReadyList+0xc4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d110      	bne.n	80028e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80028c0:	f000 fc02 	bl	80030c8 <prvInitialiseTaskLists>
 80028c4:	e00d      	b.n	80028e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80028c6:	4b26      	ldr	r3, [pc, #152]	; (8002960 <prvAddNewTaskToReadyList+0xcc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028ce:	4b23      	ldr	r3, [pc, #140]	; (800295c <prvAddNewTaskToReadyList+0xc8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	429a      	cmp	r2, r3
 80028da:	d802      	bhi.n	80028e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80028dc:	4a1f      	ldr	r2, [pc, #124]	; (800295c <prvAddNewTaskToReadyList+0xc8>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80028e2:	4b20      	ldr	r3, [pc, #128]	; (8002964 <prvAddNewTaskToReadyList+0xd0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	3301      	adds	r3, #1
 80028e8:	4a1e      	ldr	r2, [pc, #120]	; (8002964 <prvAddNewTaskToReadyList+0xd0>)
 80028ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80028ec:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <prvAddNewTaskToReadyList+0xd0>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	461a      	mov	r2, r3
 80028fa:	2301      	movs	r3, #1
 80028fc:	fa03 f202 	lsl.w	r2, r3, r2
 8002900:	4b19      	ldr	r3, [pc, #100]	; (8002968 <prvAddNewTaskToReadyList+0xd4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4313      	orrs	r3, r2
 8002906:	4a18      	ldr	r2, [pc, #96]	; (8002968 <prvAddNewTaskToReadyList+0xd4>)
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4a15      	ldr	r2, [pc, #84]	; (800296c <prvAddNewTaskToReadyList+0xd8>)
 8002918:	441a      	add	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3304      	adds	r3, #4
 800291e:	4610      	mov	r0, r2
 8002920:	4619      	mov	r1, r3
 8002922:	f7ff f91d 	bl	8001b60 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002926:	f7fe ffe3 	bl	80018f0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800292a:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <prvAddNewTaskToReadyList+0xcc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00e      	beq.n	8002950 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002932:	4b0a      	ldr	r3, [pc, #40]	; (800295c <prvAddNewTaskToReadyList+0xc8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	429a      	cmp	r2, r3
 800293e:	d207      	bcs.n	8002950 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <prvAddNewTaskToReadyList+0xdc>)
 8002942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	200001a0 	.word	0x200001a0
 800295c:	200000c8 	.word	0x200000c8
 8002960:	200001ac 	.word	0x200001ac
 8002964:	200001bc 	.word	0x200001bc
 8002968:	200001a8 	.word	0x200001a8
 800296c:	200000cc 	.word	0x200000cc
 8002970:	e000ed04 	.word	0xe000ed04

08002974 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d016      	beq.n	80029b4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002986:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <vTaskDelay+0x5c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d009      	beq.n	80029a2 <vTaskDelay+0x2e>
 800298e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002992:	f383 8811 	msr	BASEPRI, r3
 8002996:	f3bf 8f6f 	isb	sy
 800299a:	f3bf 8f4f 	dsb	sy
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	e7fe      	b.n	80029a0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80029a2:	f000 f863 	bl	8002a6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	2100      	movs	r1, #0
 80029aa:	f000 fccf 	bl	800334c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80029ae:	f000 f86b 	bl	8002a88 <xTaskResumeAll>
 80029b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d107      	bne.n	80029ca <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80029ba:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <vTaskDelay+0x60>)
 80029bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	f3bf 8f4f 	dsb	sy
 80029c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	200001c8 	.word	0x200001c8
 80029d4:	e000ed04 	.word	0xe000ed04

080029d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80029de:	2300      	movs	r3, #0
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <vTaskStartScheduler+0x7c>)
 80029e4:	9301      	str	r3, [sp, #4]
 80029e6:	481c      	ldr	r0, [pc, #112]	; (8002a58 <vTaskStartScheduler+0x80>)
 80029e8:	491c      	ldr	r1, [pc, #112]	; (8002a5c <vTaskStartScheduler+0x84>)
 80029ea:	2282      	movs	r2, #130	; 0x82
 80029ec:	2300      	movs	r3, #0
 80029ee:	f7ff fe75 	bl	80026dc <xTaskCreate>
 80029f2:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d102      	bne.n	8002a00 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80029fa:	f000 fd11 	bl	8003420 <xTimerCreateTimerTask>
 80029fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d115      	bne.n	8002a32 <vTaskStartScheduler+0x5a>
 8002a06:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002a0a:	f383 8811 	msr	BASEPRI, r3
 8002a0e:	f3bf 8f6f 	isb	sy
 8002a12:	f3bf 8f4f 	dsb	sy
 8002a16:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002a18:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <vTaskStartScheduler+0x88>)
 8002a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002a20:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <vTaskStartScheduler+0x8c>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <vTaskStartScheduler+0x90>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002a2c:	f7fe fe94 	bl	8001758 <xPortStartScheduler>
 8002a30:	e00d      	b.n	8002a4e <vTaskStartScheduler+0x76>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a38:	d109      	bne.n	8002a4e <vTaskStartScheduler+0x76>
 8002a3a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002a3e:	f383 8811 	msr	BASEPRI, r3
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	607b      	str	r3, [r7, #4]
 8002a4c:	e7fe      	b.n	8002a4c <vTaskStartScheduler+0x74>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	200001c4 	.word	0x200001c4
 8002a58:	08003099 	.word	0x08003099
 8002a5c:	0800da94 	.word	0x0800da94
 8002a60:	200001c0 	.word	0x200001c0
 8002a64:	200001ac 	.word	0x200001ac
 8002a68:	200001a4 	.word	0x200001a4

08002a6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002a70:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <vTaskSuspendAll+0x18>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	3301      	adds	r3, #1
 8002a76:	4a03      	ldr	r2, [pc, #12]	; (8002a84 <vTaskSuspendAll+0x18>)
 8002a78:	6013      	str	r3, [r2, #0]
}
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	200001c8 	.word	0x200001c8

08002a88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002a96:	4b42      	ldr	r3, [pc, #264]	; (8002ba0 <xTaskResumeAll+0x118>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <xTaskResumeAll+0x2a>
 8002a9e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002aa2:	f383 8811 	msr	BASEPRI, r3
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	e7fe      	b.n	8002ab0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ab2:	f7fe feef 	bl	8001894 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002ab6:	4b3a      	ldr	r3, [pc, #232]	; (8002ba0 <xTaskResumeAll+0x118>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	4a38      	ldr	r2, [pc, #224]	; (8002ba0 <xTaskResumeAll+0x118>)
 8002abe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ac0:	4b37      	ldr	r3, [pc, #220]	; (8002ba0 <xTaskResumeAll+0x118>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d163      	bne.n	8002b90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ac8:	4b36      	ldr	r3, [pc, #216]	; (8002ba4 <xTaskResumeAll+0x11c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d05f      	beq.n	8002b90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ad0:	e030      	b.n	8002b34 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002ad2:	4b35      	ldr	r3, [pc, #212]	; (8002ba8 <xTaskResumeAll+0x120>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	3318      	adds	r3, #24
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff f89a 	bl	8001c18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff f895 	bl	8001c18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	461a      	mov	r2, r3
 8002af4:	2301      	movs	r3, #1
 8002af6:	fa03 f202 	lsl.w	r2, r3, r2
 8002afa:	4b2c      	ldr	r3, [pc, #176]	; (8002bac <xTaskResumeAll+0x124>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	4a2a      	ldr	r2, [pc, #168]	; (8002bac <xTaskResumeAll+0x124>)
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4a27      	ldr	r2, [pc, #156]	; (8002bb0 <xTaskResumeAll+0x128>)
 8002b12:	441a      	add	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	3304      	adds	r3, #4
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	f7ff f820 	bl	8001b60 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b24:	4b23      	ldr	r3, [pc, #140]	; (8002bb4 <xTaskResumeAll+0x12c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d302      	bcc.n	8002b34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002b2e:	4b22      	ldr	r3, [pc, #136]	; (8002bb8 <xTaskResumeAll+0x130>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b34:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <xTaskResumeAll+0x120>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1ca      	bne.n	8002ad2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002b42:	f000 fb3b 	bl	80031bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002b46:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <xTaskResumeAll+0x134>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d010      	beq.n	8002b74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002b52:	f000 f847 	bl	8002be4 <xTaskIncrementTick>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002b5c:	4b16      	ldr	r3, [pc, #88]	; (8002bb8 <xTaskResumeAll+0x130>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3b01      	subs	r3, #1
 8002b66:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f1      	bne.n	8002b52 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8002b6e:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <xTaskResumeAll+0x134>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002b74:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <xTaskResumeAll+0x130>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d009      	beq.n	8002b90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002b80:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <xTaskResumeAll+0x138>)
 8002b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002b90:	f7fe feae 	bl	80018f0 <vPortExitCritical>

	return xAlreadyYielded;
 8002b94:	68bb      	ldr	r3, [r7, #8]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200001c8 	.word	0x200001c8
 8002ba4:	200001a0 	.word	0x200001a0
 8002ba8:	20000160 	.word	0x20000160
 8002bac:	200001a8 	.word	0x200001a8
 8002bb0:	200000cc 	.word	0x200000cc
 8002bb4:	200000c8 	.word	0x200000c8
 8002bb8:	200001b4 	.word	0x200001b4
 8002bbc:	200001b0 	.word	0x200001b0
 8002bc0:	e000ed04 	.word	0xe000ed04

08002bc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002bca:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <xTaskGetTickCount+0x1c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002bd0:	687b      	ldr	r3, [r7, #4]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	200001a4 	.word	0x200001a4

08002be4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bee:	4b51      	ldr	r3, [pc, #324]	; (8002d34 <xTaskIncrementTick+0x150>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f040 808e 	bne.w	8002d14 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002bf8:	4b4f      	ldr	r3, [pc, #316]	; (8002d38 <xTaskIncrementTick+0x154>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002c00:	4a4d      	ldr	r2, [pc, #308]	; (8002d38 <xTaskIncrementTick+0x154>)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d11f      	bne.n	8002c4c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002c0c:	4b4b      	ldr	r3, [pc, #300]	; (8002d3c <xTaskIncrementTick+0x158>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d009      	beq.n	8002c2a <xTaskIncrementTick+0x46>
 8002c16:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002c1a:	f383 8811 	msr	BASEPRI, r3
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	e7fe      	b.n	8002c28 <xTaskIncrementTick+0x44>
 8002c2a:	4b44      	ldr	r3, [pc, #272]	; (8002d3c <xTaskIncrementTick+0x158>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	4b43      	ldr	r3, [pc, #268]	; (8002d40 <xTaskIncrementTick+0x15c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a41      	ldr	r2, [pc, #260]	; (8002d3c <xTaskIncrementTick+0x158>)
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	4a41      	ldr	r2, [pc, #260]	; (8002d40 <xTaskIncrementTick+0x15c>)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	4b41      	ldr	r3, [pc, #260]	; (8002d44 <xTaskIncrementTick+0x160>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	3301      	adds	r3, #1
 8002c44:	4a3f      	ldr	r2, [pc, #252]	; (8002d44 <xTaskIncrementTick+0x160>)
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	f000 fab8 	bl	80031bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002c4c:	4b3e      	ldr	r3, [pc, #248]	; (8002d48 <xTaskIncrementTick+0x164>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d34f      	bcc.n	8002cf6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c56:	4b39      	ldr	r3, [pc, #228]	; (8002d3c <xTaskIncrementTick+0x158>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <xTaskIncrementTick+0x80>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <xTaskIncrementTick+0x82>
 8002c64:	2300      	movs	r3, #0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d004      	beq.n	8002c74 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c6a:	4b37      	ldr	r3, [pc, #220]	; (8002d48 <xTaskIncrementTick+0x164>)
 8002c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c70:	601a      	str	r2, [r3, #0]
					break;
 8002c72:	e040      	b.n	8002cf6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c74:	4b31      	ldr	r3, [pc, #196]	; (8002d3c <xTaskIncrementTick+0x158>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d203      	bcs.n	8002c94 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002c8c:	4a2e      	ldr	r2, [pc, #184]	; (8002d48 <xTaskIncrementTick+0x164>)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6013      	str	r3, [r2, #0]
						break;
 8002c92:	e030      	b.n	8002cf6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	3304      	adds	r3, #4
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fe ffbd 	bl	8001c18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d004      	beq.n	8002cb0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	3318      	adds	r3, #24
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fe ffb4 	bl	8001c18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	fa03 f202 	lsl.w	r2, r3, r2
 8002cbc:	4b23      	ldr	r3, [pc, #140]	; (8002d4c <xTaskIncrementTick+0x168>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	4a22      	ldr	r2, [pc, #136]	; (8002d4c <xTaskIncrementTick+0x168>)
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4a1f      	ldr	r2, [pc, #124]	; (8002d50 <xTaskIncrementTick+0x16c>)
 8002cd4:	441a      	add	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f7fe ff3f 	bl	8001b60 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce6:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <xTaskIncrementTick+0x170>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d301      	bcc.n	8002cf4 <xTaskIncrementTick+0x110>
						{
							xSwitchRequired = pdTRUE;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 8002cf4:	e7af      	b.n	8002c56 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002cf6:	4b17      	ldr	r3, [pc, #92]	; (8002d54 <xTaskIncrementTick+0x170>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfc:	4914      	ldr	r1, [pc, #80]	; (8002d50 <xTaskIncrementTick+0x16c>)
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d901      	bls.n	8002d12 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	e004      	b.n	8002d1e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002d14:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <xTaskIncrementTick+0x174>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	4a0f      	ldr	r2, [pc, #60]	; (8002d58 <xTaskIncrementTick+0x174>)
 8002d1c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <xTaskIncrementTick+0x178>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8002d26:	2301      	movs	r3, #1
 8002d28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002d2a:	697b      	ldr	r3, [r7, #20]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	200001c8 	.word	0x200001c8
 8002d38:	200001a4 	.word	0x200001a4
 8002d3c:	20000158 	.word	0x20000158
 8002d40:	2000015c 	.word	0x2000015c
 8002d44:	200001b8 	.word	0x200001b8
 8002d48:	200001c0 	.word	0x200001c0
 8002d4c:	200001a8 	.word	0x200001a8
 8002d50:	200000cc 	.word	0x200000cc
 8002d54:	200000c8 	.word	0x200000c8
 8002d58:	200001b0 	.word	0x200001b0
 8002d5c:	200001b4 	.word	0x200001b4

08002d60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d66:	4b26      	ldr	r3, [pc, #152]	; (8002e00 <vTaskSwitchContext+0xa0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002d6e:	4b25      	ldr	r3, [pc, #148]	; (8002e04 <vTaskSwitchContext+0xa4>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	e03e      	b.n	8002df4 <vTaskSwitchContext+0x94>
	}
	else
	{
		xYieldPending = pdFALSE;
 8002d76:	4b23      	ldr	r3, [pc, #140]	; (8002e04 <vTaskSwitchContext+0xa4>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002d7c:	4b22      	ldr	r3, [pc, #136]	; (8002e08 <vTaskSwitchContext+0xa8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60fb      	str	r3, [r7, #12]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	fab3 f383 	clz	r3, r3
 8002d88:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002d8a:	7afb      	ldrb	r3, [r7, #11]
 8002d8c:	f1c3 031f 	rsb	r3, r3, #31
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	491e      	ldr	r1, [pc, #120]	; (8002e0c <vTaskSwitchContext+0xac>)
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <vTaskSwitchContext+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002da6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	607b      	str	r3, [r7, #4]
 8002db8:	e7fe      	b.n	8002db8 <vTaskSwitchContext+0x58>
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4a11      	ldr	r2, [pc, #68]	; (8002e0c <vTaskSwitchContext+0xac>)
 8002dc6:	4413      	add	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	605a      	str	r2, [r3, #4]
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	3308      	adds	r3, #8
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d104      	bne.n	8002dea <vTaskSwitchContext+0x8a>
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4a07      	ldr	r2, [pc, #28]	; (8002e10 <vTaskSwitchContext+0xb0>)
 8002df2:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002df4:	371c      	adds	r7, #28
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	200001c8 	.word	0x200001c8
 8002e04:	200001b4 	.word	0x200001b4
 8002e08:	200001a8 	.word	0x200001a8
 8002e0c:	200000cc 	.word	0x200000cc
 8002e10:	200000c8 	.word	0x200000c8

08002e14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d109      	bne.n	8002e38 <vTaskPlaceOnEventList+0x24>
 8002e24:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002e28:	f383 8811 	msr	BASEPRI, r3
 8002e2c:	f3bf 8f6f 	isb	sy
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	e7fe      	b.n	8002e36 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e38:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <vTaskPlaceOnEventList+0x40>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	3318      	adds	r3, #24
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	4619      	mov	r1, r3
 8002e42:	f7fe feb1 	bl	8001ba8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e46:	6838      	ldr	r0, [r7, #0]
 8002e48:	2101      	movs	r1, #1
 8002e4a:	f000 fa7f 	bl	800334c <prvAddCurrentTaskToDelayedList>
}
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	200000c8 	.word	0x200000c8

08002e58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <vTaskPlaceOnEventListRestricted+0x26>
 8002e6a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002e6e:	f383 8811 	msr	BASEPRI, r3
 8002e72:	f3bf 8f6f 	isb	sy
 8002e76:	f3bf 8f4f 	dsb	sy
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	e7fe      	b.n	8002e7c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <vTaskPlaceOnEventListRestricted+0x50>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	3318      	adds	r3, #24
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	4619      	mov	r1, r3
 8002e88:	f7fe fe6a 	bl	8001b60 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002e92:	f04f 33ff 	mov.w	r3, #4294967295
 8002e96:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002e98:	68b8      	ldr	r0, [r7, #8]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	f000 fa56 	bl	800334c <prvAddCurrentTaskToDelayedList>
	}
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	200000c8 	.word	0x200000c8

08002eac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d109      	bne.n	8002ed6 <xTaskRemoveFromEventList+0x2a>
 8002ec2:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002ec6:	f383 8811 	msr	BASEPRI, r3
 8002eca:	f3bf 8f6f 	isb	sy
 8002ece:	f3bf 8f4f 	dsb	sy
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	e7fe      	b.n	8002ed4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	3318      	adds	r3, #24
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fe fe9c 	bl	8001c18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ee0:	4b1e      	ldr	r3, [pc, #120]	; (8002f5c <xTaskRemoveFromEventList+0xb0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d11e      	bne.n	8002f26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	3304      	adds	r3, #4
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe fe93 	bl	8001c18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	2301      	movs	r3, #1
 8002efa:	fa03 f202 	lsl.w	r2, r3, r2
 8002efe:	4b18      	ldr	r3, [pc, #96]	; (8002f60 <xTaskRemoveFromEventList+0xb4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	4a16      	ldr	r2, [pc, #88]	; (8002f60 <xTaskRemoveFromEventList+0xb4>)
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4a13      	ldr	r2, [pc, #76]	; (8002f64 <xTaskRemoveFromEventList+0xb8>)
 8002f16:	441a      	add	r2, r3
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	4619      	mov	r1, r3
 8002f20:	f7fe fe1e 	bl	8001b60 <vListInsertEnd>
 8002f24:	e005      	b.n	8002f32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	3318      	adds	r3, #24
 8002f2a:	480f      	ldr	r0, [pc, #60]	; (8002f68 <xTaskRemoveFromEventList+0xbc>)
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f7fe fe17 	bl	8001b60 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f36:	4b0d      	ldr	r3, [pc, #52]	; (8002f6c <xTaskRemoveFromEventList+0xc0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d905      	bls.n	8002f4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002f40:	2301      	movs	r3, #1
 8002f42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002f44:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <xTaskRemoveFromEventList+0xc4>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	e001      	b.n	8002f50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002f50:	697b      	ldr	r3, [r7, #20]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	200001c8 	.word	0x200001c8
 8002f60:	200001a8 	.word	0x200001a8
 8002f64:	200000cc 	.word	0x200000cc
 8002f68:	20000160 	.word	0x20000160
 8002f6c:	200000c8 	.word	0x200000c8
 8002f70:	200001b4 	.word	0x200001b4

08002f74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <vTaskInternalSetTimeOutState+0x24>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002f84:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <vTaskInternalSetTimeOutState+0x28>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	605a      	str	r2, [r3, #4]
}
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	200001b8 	.word	0x200001b8
 8002f9c:	200001a4 	.word	0x200001a4

08002fa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <xTaskCheckForTimeOut+0x24>
 8002fb0:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002fb4:	f383 8811 	msr	BASEPRI, r3
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	e7fe      	b.n	8002fc2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d109      	bne.n	8002fde <xTaskCheckForTimeOut+0x3e>
 8002fca:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	e7fe      	b.n	8002fdc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002fde:	f7fe fc59 	bl	8001894 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002fe2:	4b24      	ldr	r3, [pc, #144]	; (8003074 <xTaskCheckForTimeOut+0xd4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
 8002ff2:	4b21      	ldr	r3, [pc, #132]	; (8003078 <xTaskCheckForTimeOut+0xd8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d007      	beq.n	800300e <xTaskCheckForTimeOut+0x6e>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8002ffe:	4b1e      	ldr	r3, [pc, #120]	; (8003078 <xTaskCheckForTimeOut+0xd8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
				xReturn = pdTRUE;
 8003008:	2301      	movs	r3, #1
 800300a:	61fb      	str	r3, [r7, #28]
 800300c:	e02b      	b.n	8003066 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003016:	d102      	bne.n	800301e <xTaskCheckForTimeOut+0x7e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003018:	2300      	movs	r3, #0
 800301a:	61fb      	str	r3, [r7, #28]
 800301c:	e023      	b.n	8003066 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	4b16      	ldr	r3, [pc, #88]	; (800307c <xTaskCheckForTimeOut+0xdc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d007      	beq.n	800303a <xTaskCheckForTimeOut+0x9a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	429a      	cmp	r2, r3
 8003032:	d802      	bhi.n	800303a <xTaskCheckForTimeOut+0x9a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003034:	2301      	movs	r3, #1
 8003036:	61fb      	str	r3, [r7, #28]
 8003038:	e015      	b.n	8003066 <xTaskCheckForTimeOut+0xc6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	429a      	cmp	r2, r3
 8003042:	d90b      	bls.n	800305c <xTaskCheckForTimeOut+0xbc>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	1ad2      	subs	r2, r2, r3
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff ff8f 	bl	8002f74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	e004      	b.n	8003066 <xTaskCheckForTimeOut+0xc6>
		}
		else
		{
			*pxTicksToWait = 0;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003062:	2301      	movs	r3, #1
 8003064:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003066:	f7fe fc43 	bl	80018f0 <vPortExitCritical>

	return xReturn;
 800306a:	69fb      	ldr	r3, [r7, #28]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3720      	adds	r7, #32
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	200001a4 	.word	0x200001a4
 8003078:	200000c8 	.word	0x200000c8
 800307c:	200001b8 	.word	0x200001b8

08003080 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003084:	4b03      	ldr	r3, [pc, #12]	; (8003094 <vTaskMissedYield+0x14>)
 8003086:	2201      	movs	r2, #1
 8003088:	601a      	str	r2, [r3, #0]
}
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	200001b4 	.word	0x200001b4

08003098 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80030a0:	f000 f850 	bl	8003144 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80030a4:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <prvIdleTask+0x28>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d907      	bls.n	80030bc <prvIdleTask+0x24>
			{
				taskYIELD();
 80030ac:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <prvIdleTask+0x2c>)
 80030ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	f3bf 8f4f 	dsb	sy
 80030b8:	f3bf 8f6f 	isb	sy
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 80030bc:	e7f0      	b.n	80030a0 <prvIdleTask+0x8>
 80030be:	bf00      	nop
 80030c0:	200000cc 	.word	0x200000cc
 80030c4:	e000ed04 	.word	0xe000ed04

080030c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	e00c      	b.n	80030ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4a11      	ldr	r2, [pc, #68]	; (8003124 <prvInitialiseTaskLists+0x5c>)
 80030e0:	4413      	add	r3, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe fd10 	bl	8001b08 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3301      	adds	r3, #1
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d9ef      	bls.n	80030d4 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80030f4:	480c      	ldr	r0, [pc, #48]	; (8003128 <prvInitialiseTaskLists+0x60>)
 80030f6:	f7fe fd07 	bl	8001b08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80030fa:	480c      	ldr	r0, [pc, #48]	; (800312c <prvInitialiseTaskLists+0x64>)
 80030fc:	f7fe fd04 	bl	8001b08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003100:	480b      	ldr	r0, [pc, #44]	; (8003130 <prvInitialiseTaskLists+0x68>)
 8003102:	f7fe fd01 	bl	8001b08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003106:	480b      	ldr	r0, [pc, #44]	; (8003134 <prvInitialiseTaskLists+0x6c>)
 8003108:	f7fe fcfe 	bl	8001b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800310c:	480a      	ldr	r0, [pc, #40]	; (8003138 <prvInitialiseTaskLists+0x70>)
 800310e:	f7fe fcfb 	bl	8001b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003112:	4b0a      	ldr	r3, [pc, #40]	; (800313c <prvInitialiseTaskLists+0x74>)
 8003114:	4a04      	ldr	r2, [pc, #16]	; (8003128 <prvInitialiseTaskLists+0x60>)
 8003116:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003118:	4b09      	ldr	r3, [pc, #36]	; (8003140 <prvInitialiseTaskLists+0x78>)
 800311a:	4a04      	ldr	r2, [pc, #16]	; (800312c <prvInitialiseTaskLists+0x64>)
 800311c:	601a      	str	r2, [r3, #0]
}
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	200000cc 	.word	0x200000cc
 8003128:	20000130 	.word	0x20000130
 800312c:	20000144 	.word	0x20000144
 8003130:	20000160 	.word	0x20000160
 8003134:	20000174 	.word	0x20000174
 8003138:	2000018c 	.word	0x2000018c
 800313c:	20000158 	.word	0x20000158
 8003140:	2000015c 	.word	0x2000015c

08003144 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800314a:	e019      	b.n	8003180 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800314c:	f7fe fba2 	bl	8001894 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003150:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <prvCheckTasksWaitingTermination+0x4c>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3304      	adds	r3, #4
 800315c:	4618      	mov	r0, r3
 800315e:	f7fe fd5b 	bl	8001c18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003162:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <prvCheckTasksWaitingTermination+0x50>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	3b01      	subs	r3, #1
 8003168:	4a0a      	ldr	r2, [pc, #40]	; (8003194 <prvCheckTasksWaitingTermination+0x50>)
 800316a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800316c:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <prvCheckTasksWaitingTermination+0x54>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3b01      	subs	r3, #1
 8003172:	4a09      	ldr	r2, [pc, #36]	; (8003198 <prvCheckTasksWaitingTermination+0x54>)
 8003174:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003176:	f7fe fbbb 	bl	80018f0 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f80e 	bl	800319c <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <prvCheckTasksWaitingTermination+0x54>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1e1      	bne.n	800314c <prvCheckTasksWaitingTermination+0x8>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000174 	.word	0x20000174
 8003194:	200001a0 	.word	0x200001a0
 8003198:	20000188 	.word	0x20000188

0800319c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fe fc9b 	bl	8001ae4 <vPortFree>
			vPortFree( pxTCB );
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7fe fc98 	bl	8001ae4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop

080031bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031c2:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <prvResetNextTaskUnblockTime+0x40>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <prvResetNextTaskUnblockTime+0x14>
 80031cc:	2301      	movs	r3, #1
 80031ce:	e000      	b.n	80031d2 <prvResetNextTaskUnblockTime+0x16>
 80031d0:	2300      	movs	r3, #0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d004      	beq.n	80031e0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80031d6:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <prvResetNextTaskUnblockTime+0x44>)
 80031d8:	f04f 32ff 	mov.w	r2, #4294967295
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	e008      	b.n	80031f2 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031e0:	4b06      	ldr	r3, [pc, #24]	; (80031fc <prvResetNextTaskUnblockTime+0x40>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4a04      	ldr	r2, [pc, #16]	; (8003200 <prvResetNextTaskUnblockTime+0x44>)
 80031f0:	6013      	str	r3, [r2, #0]
	}
}
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	20000158 	.word	0x20000158
 8003200:	200001c0 	.word	0x200001c0

08003204 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800320a:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <xTaskGetSchedulerState+0x34>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d102      	bne.n	8003218 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003212:	2301      	movs	r3, #1
 8003214:	607b      	str	r3, [r7, #4]
 8003216:	e008      	b.n	800322a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003218:	4b08      	ldr	r3, [pc, #32]	; (800323c <xTaskGetSchedulerState+0x38>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003220:	2302      	movs	r3, #2
 8003222:	607b      	str	r3, [r7, #4]
 8003224:	e001      	b.n	800322a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003226:	2300      	movs	r3, #0
 8003228:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800322a:	687b      	ldr	r3, [r7, #4]
	}
 800322c:	4618      	mov	r0, r3
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	200001ac 	.word	0x200001ac
 800323c:	200001c8 	.word	0x200001c8

08003240 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d06e      	beq.n	8003334 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003256:	4b3a      	ldr	r3, [pc, #232]	; (8003340 <xTaskPriorityDisinherit+0x100>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	429a      	cmp	r2, r3
 800325e:	d009      	beq.n	8003274 <xTaskPriorityDisinherit+0x34>
 8003260:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	e7fe      	b.n	8003272 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003278:	2b00      	cmp	r3, #0
 800327a:	d109      	bne.n	8003290 <xTaskPriorityDisinherit+0x50>
 800327c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003280:	f383 8811 	msr	BASEPRI, r3
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	f3bf 8f4f 	dsb	sy
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	e7fe      	b.n	800328e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003294:	1e5a      	subs	r2, r3, #1
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d046      	beq.n	8003334 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d142      	bne.n	8003334 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	3304      	adds	r3, #4
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fe fcb0 	bl	8001c18 <uxListRemove>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d115      	bne.n	80032ea <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c2:	4920      	ldr	r1, [pc, #128]	; (8003344 <xTaskPriorityDisinherit+0x104>)
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10a      	bne.n	80032ea <xTaskPriorityDisinherit+0xaa>
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	461a      	mov	r2, r3
 80032da:	2301      	movs	r3, #1
 80032dc:	4093      	lsls	r3, r2
 80032de:	43da      	mvns	r2, r3
 80032e0:	4b19      	ldr	r3, [pc, #100]	; (8003348 <xTaskPriorityDisinherit+0x108>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4013      	ands	r3, r2
 80032e6:	4a18      	ldr	r2, [pc, #96]	; (8003348 <xTaskPriorityDisinherit+0x108>)
 80032e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	f1c3 0205 	rsb	r2, r3, #5
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003302:	461a      	mov	r2, r3
 8003304:	2301      	movs	r3, #1
 8003306:	fa03 f202 	lsl.w	r2, r3, r2
 800330a:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <xTaskPriorityDisinherit+0x108>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4313      	orrs	r3, r2
 8003310:	4a0d      	ldr	r2, [pc, #52]	; (8003348 <xTaskPriorityDisinherit+0x108>)
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4a08      	ldr	r2, [pc, #32]	; (8003344 <xTaskPriorityDisinherit+0x104>)
 8003322:	441a      	add	r2, r3
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	3304      	adds	r3, #4
 8003328:	4610      	mov	r0, r2
 800332a:	4619      	mov	r1, r3
 800332c:	f7fe fc18 	bl	8001b60 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003330:	2301      	movs	r3, #1
 8003332:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003334:	697b      	ldr	r3, [r7, #20]
	}
 8003336:	4618      	mov	r0, r3
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	200000c8 	.word	0x200000c8
 8003344:	200000cc 	.word	0x200000cc
 8003348:	200001a8 	.word	0x200001a8

0800334c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003356:	4b2b      	ldr	r3, [pc, #172]	; (8003404 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800335c:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <prvAddCurrentTaskToDelayedList+0xbc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003366:	4b28      	ldr	r3, [pc, #160]	; (8003408 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3304      	adds	r3, #4
 800336c:	4618      	mov	r0, r3
 800336e:	f7fe fc53 	bl	8001c18 <uxListRemove>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10b      	bne.n	8003390 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003378:	4b23      	ldr	r3, [pc, #140]	; (8003408 <prvAddCurrentTaskToDelayedList+0xbc>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	461a      	mov	r2, r3
 8003380:	2301      	movs	r3, #1
 8003382:	4093      	lsls	r3, r2
 8003384:	43da      	mvns	r2, r3
 8003386:	4b21      	ldr	r3, [pc, #132]	; (800340c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4013      	ands	r3, r2
 800338c:	4a1f      	ldr	r2, [pc, #124]	; (800340c <prvAddCurrentTaskToDelayedList+0xc0>)
 800338e:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003396:	d10a      	bne.n	80033ae <prvAddCurrentTaskToDelayedList+0x62>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d007      	beq.n	80033ae <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800339e:	4b1a      	ldr	r3, [pc, #104]	; (8003408 <prvAddCurrentTaskToDelayedList+0xbc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3304      	adds	r3, #4
 80033a4:	481a      	ldr	r0, [pc, #104]	; (8003410 <prvAddCurrentTaskToDelayedList+0xc4>)
 80033a6:	4619      	mov	r1, r3
 80033a8:	f7fe fbda 	bl	8001b60 <vListInsertEnd>
 80033ac:	e026      	b.n	80033fc <prvAddCurrentTaskToDelayedList+0xb0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4413      	add	r3, r2
 80033b4:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033b6:	4b14      	ldr	r3, [pc, #80]	; (8003408 <prvAddCurrentTaskToDelayedList+0xbc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d209      	bcs.n	80033da <prvAddCurrentTaskToDelayedList+0x8e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033c6:	4b13      	ldr	r3, [pc, #76]	; (8003414 <prvAddCurrentTaskToDelayedList+0xc8>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <prvAddCurrentTaskToDelayedList+0xbc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3304      	adds	r3, #4
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	f7fe fbe8 	bl	8001ba8 <vListInsert>
 80033d8:	e010      	b.n	80033fc <prvAddCurrentTaskToDelayedList+0xb0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033da:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <prvAddCurrentTaskToDelayedList+0xcc>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <prvAddCurrentTaskToDelayedList+0xbc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	3304      	adds	r3, #4
 80033e4:	4610      	mov	r0, r2
 80033e6:	4619      	mov	r1, r3
 80033e8:	f7fe fbde 	bl	8001ba8 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <prvAddCurrentTaskToDelayedList+0xd0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d202      	bcs.n	80033fc <prvAddCurrentTaskToDelayedList+0xb0>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80033f6:	4a09      	ldr	r2, [pc, #36]	; (800341c <prvAddCurrentTaskToDelayedList+0xd0>)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	6013      	str	r3, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	200001a4 	.word	0x200001a4
 8003408:	200000c8 	.word	0x200000c8
 800340c:	200001a8 	.word	0x200001a8
 8003410:	2000018c 	.word	0x2000018c
 8003414:	2000015c 	.word	0x2000015c
 8003418:	20000158 	.word	0x20000158
 800341c:	200001c0 	.word	0x200001c0

08003420 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8003426:	2300      	movs	r3, #0
 8003428:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800342a:	f000 fab3 	bl	8003994 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800342e:	4b11      	ldr	r3, [pc, #68]	; (8003474 <xTimerCreateTimerTask+0x54>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00b      	beq.n	800344e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8003436:	2302      	movs	r3, #2
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <xTimerCreateTimerTask+0x58>)
 800343c:	9301      	str	r3, [sp, #4]
 800343e:	480f      	ldr	r0, [pc, #60]	; (800347c <xTimerCreateTimerTask+0x5c>)
 8003440:	490f      	ldr	r1, [pc, #60]	; (8003480 <xTimerCreateTimerTask+0x60>)
 8003442:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003446:	2300      	movs	r3, #0
 8003448:	f7ff f948 	bl	80026dc <xTaskCreate>
 800344c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d109      	bne.n	8003468 <xTimerCreateTimerTask+0x48>
 8003454:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003458:	f383 8811 	msr	BASEPRI, r3
 800345c:	f3bf 8f6f 	isb	sy
 8003460:	f3bf 8f4f 	dsb	sy
 8003464:	603b      	str	r3, [r7, #0]
 8003466:	e7fe      	b.n	8003466 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8003468:	687b      	ldr	r3, [r7, #4]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	200001fc 	.word	0x200001fc
 8003478:	20000200 	.word	0x20000200
 800347c:	080035a9 	.word	0x080035a9
 8003480:	0800daac 	.word	0x0800daac

08003484 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08a      	sub	sp, #40	; 0x28
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003492:	2300      	movs	r3, #0
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d109      	bne.n	80034b0 <xTimerGenericCommand+0x2c>
 800349c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	623b      	str	r3, [r7, #32]
 80034ae:	e7fe      	b.n	80034ae <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80034b0:	4b1c      	ldr	r3, [pc, #112]	; (8003524 <xTimerGenericCommand+0xa0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d030      	beq.n	800351a <xTimerGenericCommand+0x96>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2b05      	cmp	r3, #5
 80034c8:	dc1c      	bgt.n	8003504 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80034ca:	f7ff fe9b 	bl	8003204 <xTaskGetSchedulerState>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d10b      	bne.n	80034ec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80034d4:	4b13      	ldr	r3, [pc, #76]	; (8003524 <xTimerGenericCommand+0xa0>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	f107 0310 	add.w	r3, r7, #16
 80034dc:	4610      	mov	r0, r2
 80034de:	4619      	mov	r1, r3
 80034e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e2:	2300      	movs	r3, #0
 80034e4:	f7fe fc8a 	bl	8001dfc <xQueueGenericSend>
 80034e8:	6278      	str	r0, [r7, #36]	; 0x24
 80034ea:	e016      	b.n	800351a <xTimerGenericCommand+0x96>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80034ec:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <xTimerGenericCommand+0xa0>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	f107 0310 	add.w	r3, r7, #16
 80034f4:	4610      	mov	r0, r2
 80034f6:	4619      	mov	r1, r3
 80034f8:	2200      	movs	r2, #0
 80034fa:	2300      	movs	r3, #0
 80034fc:	f7fe fc7e 	bl	8001dfc <xQueueGenericSend>
 8003500:	6278      	str	r0, [r7, #36]	; 0x24
 8003502:	e00a      	b.n	800351a <xTimerGenericCommand+0x96>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003504:	4b07      	ldr	r3, [pc, #28]	; (8003524 <xTimerGenericCommand+0xa0>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	f107 0310 	add.w	r3, r7, #16
 800350c:	4610      	mov	r0, r2
 800350e:	4619      	mov	r1, r3
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	2300      	movs	r3, #0
 8003514:	f7fe fd84 	bl	8002020 <xQueueGenericSendFromISR>
 8003518:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800351c:	4618      	mov	r0, r3
 800351e:	3728      	adds	r7, #40	; 0x28
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	200001fc 	.word	0x200001fc

08003528 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af02      	add	r7, sp, #8
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003532:	4b1c      	ldr	r3, [pc, #112]	; (80035a4 <prvProcessExpiredTimer+0x7c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	3304      	adds	r3, #4
 8003540:	4618      	mov	r0, r3
 8003542:	f7fe fb69 	bl	8001c18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d122      	bne.n	8003594 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	699a      	ldr	r2, [r3, #24]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4413      	add	r3, r2
 8003556:	6978      	ldr	r0, [r7, #20]
 8003558:	4619      	mov	r1, r3
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f000 f8c7 	bl	80036f0 <prvInsertTimerInActiveList>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d015      	beq.n	8003594 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003568:	2300      	movs	r3, #0
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	6978      	ldr	r0, [r7, #20]
 800356e:	2100      	movs	r1, #0
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	2300      	movs	r3, #0
 8003574:	f7ff ff86 	bl	8003484 <xTimerGenericCommand>
 8003578:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d109      	bne.n	8003594 <prvProcessExpiredTimer+0x6c>
 8003580:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	e7fe      	b.n	8003592 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	6978      	ldr	r0, [r7, #20]
 800359a:	4798      	blx	r3
}
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	200001f4 	.word	0x200001f4

080035a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035b0:	f107 0308 	add.w	r3, r7, #8
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 f857 	bl	8003668 <prvGetNextExpireTime>
 80035ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	4619      	mov	r1, r3
 80035c2:	f000 f803 	bl	80035cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80035c6:	f000 f8d5 	bl	8003774 <prvProcessReceivedCommands>
	}
 80035ca:	e7f1      	b.n	80035b0 <prvTimerTask+0x8>

080035cc <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80035d6:	f7ff fa49 	bl	8002a6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80035da:	f107 0308 	add.w	r3, r7, #8
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 f866 	bl	80036b0 <prvSampleTimeNow>
 80035e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d131      	bne.n	8003650 <prvProcessTimerOrBlockTask+0x84>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10a      	bne.n	8003608 <prvProcessTimerOrBlockTask+0x3c>
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d806      	bhi.n	8003608 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80035fa:	f7ff fa45 	bl	8002a88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	68f9      	ldr	r1, [r7, #12]
 8003602:	f7ff ff91 	bl	8003528 <prvProcessExpiredTimer>
 8003606:	e025      	b.n	8003654 <prvProcessTimerOrBlockTask+0x88>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d008      	beq.n	8003620 <prvProcessTimerOrBlockTask+0x54>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800360e:	4b13      	ldr	r3, [pc, #76]	; (800365c <prvProcessTimerOrBlockTask+0x90>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003620:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <prvProcessTimerOrBlockTask+0x94>)
 8003622:	6819      	ldr	r1, [r3, #0]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	4608      	mov	r0, r1
 800362c:	4619      	mov	r1, r3
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	f7fe ffc4 	bl	80025bc <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8003634:	f7ff fa28 	bl	8002a88 <xTaskResumeAll>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10a      	bne.n	8003654 <prvProcessTimerOrBlockTask+0x88>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <prvProcessTimerOrBlockTask+0x98>)
 8003640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	e001      	b.n	8003654 <prvProcessTimerOrBlockTask+0x88>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8003650:	f7ff fa1a 	bl	8002a88 <xTaskResumeAll>
		}
	}
}
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	200001f8 	.word	0x200001f8
 8003660:	200001fc 	.word	0x200001fc
 8003664:	e000ed04 	.word	0xe000ed04

08003668 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003670:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <prvGetNextExpireTime+0x44>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	bf0c      	ite	eq
 800367a:	2301      	moveq	r3, #1
 800367c:	2300      	movne	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d105      	bne.n	800369a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800368e:	4b07      	ldr	r3, [pc, #28]	; (80036ac <prvGetNextExpireTime+0x44>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	e001      	b.n	800369e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800369e:	68fb      	ldr	r3, [r7, #12]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	200001f4 	.word	0x200001f4

080036b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80036b8:	f7ff fa84 	bl	8002bc4 <xTaskGetTickCount>
 80036bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80036be:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <prvSampleTimeNow+0x3c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d205      	bcs.n	80036d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80036c8:	f000 f904 	bl	80038d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	e002      	b.n	80036da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80036da:	4a04      	ldr	r2, [pc, #16]	; (80036ec <prvSampleTimeNow+0x3c>)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80036e0:	68fb      	ldr	r3, [r7, #12]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000204 	.word	0x20000204

080036f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	429a      	cmp	r2, r3
 8003714:	d812      	bhi.n	800373c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	1ad2      	subs	r2, r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	429a      	cmp	r2, r3
 8003722:	d302      	bcc.n	800372a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003724:	2301      	movs	r3, #1
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	e01b      	b.n	8003762 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800372a:	4b10      	ldr	r3, [pc, #64]	; (800376c <prvInsertTimerInActiveList+0x7c>)
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	3304      	adds	r3, #4
 8003732:	4610      	mov	r0, r2
 8003734:	4619      	mov	r1, r3
 8003736:	f7fe fa37 	bl	8001ba8 <vListInsert>
 800373a:	e012      	b.n	8003762 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	429a      	cmp	r2, r3
 8003742:	d206      	bcs.n	8003752 <prvInsertTimerInActiveList+0x62>
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d302      	bcc.n	8003752 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800374c:	2301      	movs	r3, #1
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	e007      	b.n	8003762 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003752:	4b07      	ldr	r3, [pc, #28]	; (8003770 <prvInsertTimerInActiveList+0x80>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3304      	adds	r3, #4
 800375a:	4610      	mov	r0, r2
 800375c:	4619      	mov	r1, r3
 800375e:	f7fe fa23 	bl	8001ba8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003762:	697b      	ldr	r3, [r7, #20]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	200001f8 	.word	0x200001f8
 8003770:	200001f4 	.word	0x200001f4

08003774 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08e      	sub	sp, #56	; 0x38
 8003778:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800377a:	e099      	b.n	80038b0 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	da18      	bge.n	80037b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003782:	1d3b      	adds	r3, r7, #4
 8003784:	3304      	adds	r3, #4
 8003786:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378a:	2b00      	cmp	r3, #0
 800378c:	d109      	bne.n	80037a2 <prvProcessReceivedCommands+0x2e>
 800378e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	61fb      	str	r3, [r7, #28]
 80037a0:	e7fe      	b.n	80037a0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80037a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037a8:	6851      	ldr	r1, [r2, #4]
 80037aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ac:	6892      	ldr	r2, [r2, #8]
 80037ae:	4608      	mov	r0, r1
 80037b0:	4611      	mov	r1, r2
 80037b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	db7a      	blt.n	80038b0 <prvProcessReceivedCommands+0x13c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80037be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d004      	beq.n	80037d0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	3304      	adds	r3, #4
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fe fa24 	bl	8001c18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80037d0:	463b      	mov	r3, r7
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff ff6c 	bl	80036b0 <prvSampleTimeNow>
 80037d8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b09      	cmp	r3, #9
 80037de:	d866      	bhi.n	80038ae <prvProcessReceivedCommands+0x13a>
 80037e0:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <prvProcessReceivedCommands+0x74>)
 80037e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e6:	bf00      	nop
 80037e8:	08003811 	.word	0x08003811
 80037ec:	08003811 	.word	0x08003811
 80037f0:	08003811 	.word	0x08003811
 80037f4:	080038b1 	.word	0x080038b1
 80037f8:	0800386f 	.word	0x0800386f
 80037fc:	080038a7 	.word	0x080038a7
 8003800:	08003811 	.word	0x08003811
 8003804:	08003811 	.word	0x08003811
 8003808:	080038b1 	.word	0x080038b1
 800380c:	0800386f 	.word	0x0800386f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	441a      	add	r2, r3
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800381c:	4611      	mov	r1, r2
 800381e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003820:	f7ff ff66 	bl	80036f0 <prvInsertTimerInActiveList>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d020      	beq.n	800386c <prvProcessReceivedCommands+0xf8>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003830:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d118      	bne.n	800386c <prvProcessReceivedCommands+0xf8>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	441a      	add	r2, r3
 8003842:	2300      	movs	r3, #0
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003848:	2100      	movs	r1, #0
 800384a:	2300      	movs	r3, #0
 800384c:	f7ff fe1a 	bl	8003484 <xTimerGenericCommand>
 8003850:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d109      	bne.n	800386c <prvProcessReceivedCommands+0xf8>
 8003858:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	61bb      	str	r3, [r7, #24]
 800386a:	e7fe      	b.n	800386a <prvProcessReceivedCommands+0xf6>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 800386c:	e020      	b.n	80038b0 <prvProcessReceivedCommands+0x13c>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003872:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d109      	bne.n	8003890 <prvProcessReceivedCommands+0x11c>
 800387c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003880:	f383 8811 	msr	BASEPRI, r3
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	f3bf 8f4f 	dsb	sy
 800388c:	617b      	str	r3, [r7, #20]
 800388e:	e7fe      	b.n	800388e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	699a      	ldr	r2, [r3, #24]
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	4413      	add	r3, r2
 8003898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800389a:	4619      	mov	r1, r3
 800389c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	f7ff ff26 	bl	80036f0 <prvInsertTimerInActiveList>
					break;
 80038a4:	e004      	b.n	80038b0 <prvProcessReceivedCommands+0x13c>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 80038a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038a8:	f7fe f91c 	bl	8001ae4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80038ac:	e000      	b.n	80038b0 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
 80038ae:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038b0:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <prvProcessReceivedCommands+0x15c>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	1d3b      	adds	r3, r7, #4
 80038b6:	4610      	mov	r0, r2
 80038b8:	4619      	mov	r1, r3
 80038ba:	2200      	movs	r2, #0
 80038bc:	f7fe fc56 	bl	800216c <xQueueReceive>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f47f af5a 	bne.w	800377c <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 80038c8:	3730      	adds	r7, #48	; 0x30
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	200001fc 	.word	0x200001fc

080038d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80038da:	e044      	b.n	8003966 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038dc:	4b2b      	ldr	r3, [pc, #172]	; (800398c <prvSwitchTimerLists+0xb8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038e6:	4b29      	ldr	r3, [pc, #164]	; (800398c <prvSwitchTimerLists+0xb8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	3304      	adds	r3, #4
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fe f98f 	bl	8001c18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	6938      	ldr	r0, [r7, #16]
 8003900:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d12d      	bne.n	8003966 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	4413      	add	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	429a      	cmp	r2, r3
 800391a:	d90e      	bls.n	800393a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003928:	4b18      	ldr	r3, [pc, #96]	; (800398c <prvSwitchTimerLists+0xb8>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	3304      	adds	r3, #4
 8003930:	4610      	mov	r0, r2
 8003932:	4619      	mov	r1, r3
 8003934:	f7fe f938 	bl	8001ba8 <vListInsert>
 8003938:	e015      	b.n	8003966 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800393a:	2300      	movs	r3, #0
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	6938      	ldr	r0, [r7, #16]
 8003940:	2100      	movs	r1, #0
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	2300      	movs	r3, #0
 8003946:	f7ff fd9d 	bl	8003484 <xTimerGenericCommand>
 800394a:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <prvSwitchTimerLists+0x92>
 8003952:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003956:	f383 8811 	msr	BASEPRI, r3
 800395a:	f3bf 8f6f 	isb	sy
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	e7fe      	b.n	8003964 <prvSwitchTimerLists+0x90>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003966:	4b09      	ldr	r3, [pc, #36]	; (800398c <prvSwitchTimerLists+0xb8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1b5      	bne.n	80038dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003970:	4b06      	ldr	r3, [pc, #24]	; (800398c <prvSwitchTimerLists+0xb8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8003976:	4b06      	ldr	r3, [pc, #24]	; (8003990 <prvSwitchTimerLists+0xbc>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a04      	ldr	r2, [pc, #16]	; (800398c <prvSwitchTimerLists+0xb8>)
 800397c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800397e:	4a04      	ldr	r2, [pc, #16]	; (8003990 <prvSwitchTimerLists+0xbc>)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6013      	str	r3, [r2, #0]
}
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	200001f4 	.word	0x200001f4
 8003990:	200001f8 	.word	0x200001f8

08003994 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003998:	f7fd ff7c 	bl	8001894 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800399c:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <prvCheckForValidListAndQueue+0x54>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d11d      	bne.n	80039e0 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80039a4:	4811      	ldr	r0, [pc, #68]	; (80039ec <prvCheckForValidListAndQueue+0x58>)
 80039a6:	f7fe f8af 	bl	8001b08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80039aa:	4811      	ldr	r0, [pc, #68]	; (80039f0 <prvCheckForValidListAndQueue+0x5c>)
 80039ac:	f7fe f8ac 	bl	8001b08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80039b0:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <prvCheckForValidListAndQueue+0x60>)
 80039b2:	4a0e      	ldr	r2, [pc, #56]	; (80039ec <prvCheckForValidListAndQueue+0x58>)
 80039b4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80039b6:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <prvCheckForValidListAndQueue+0x64>)
 80039b8:	4a0d      	ldr	r2, [pc, #52]	; (80039f0 <prvCheckForValidListAndQueue+0x5c>)
 80039ba:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80039bc:	2005      	movs	r0, #5
 80039be:	2110      	movs	r1, #16
 80039c0:	2200      	movs	r2, #0
 80039c2:	f7fe f9bb 	bl	8001d3c <xQueueGenericCreate>
 80039c6:	4602      	mov	r2, r0
 80039c8:	4b07      	ldr	r3, [pc, #28]	; (80039e8 <prvCheckForValidListAndQueue+0x54>)
 80039ca:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <prvCheckForValidListAndQueue+0x54>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80039d4:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <prvCheckForValidListAndQueue+0x54>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	4908      	ldr	r1, [pc, #32]	; (80039fc <prvCheckForValidListAndQueue+0x68>)
 80039dc:	f7fe fdc6 	bl	800256c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039e0:	f7fd ff86 	bl	80018f0 <vPortExitCritical>
}
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	200001fc 	.word	0x200001fc
 80039ec:	200001cc 	.word	0x200001cc
 80039f0:	200001e0 	.word	0x200001e0
 80039f4:	200001f4 	.word	0x200001f4
 80039f8:	200001f8 	.word	0x200001f8
 80039fc:	0800dab4 	.word	0x0800dab4

08003a00 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6819      	ldr	r1, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	7c1a      	ldrb	r2, [r3, #16]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3304      	adds	r3, #4
 8003a14:	4608      	mov	r0, r1
 8003a16:	4611      	mov	r1, r2
 8003a18:	461a      	mov	r2, r3
 8003a1a:	f7fc fe63 	bl	80006e4 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6819      	ldr	r1, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	7c1a      	ldrb	r2, [r3, #16]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	7c5b      	ldrb	r3, [r3, #17]
 8003a2a:	4608      	mov	r0, r1
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	461a      	mov	r2, r3
 8003a30:	f7fd fbea 	bl	8001208 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop

08003a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <__NVIC_SetPriorityGrouping+0x44>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8003a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a70:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8003a72:	4a04      	ldr	r2, [pc, #16]	; (8003a84 <__NVIC_SetPriorityGrouping+0x44>)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	60d3      	str	r3, [r2, #12]
}
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	e000ed00 	.word	0xe000ed00

08003a88 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8003a8e:	2001      	movs	r0, #1
 8003a90:	f7ff ffd6 	bl	8003a40 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a94:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8003a96:	4b21      	ldr	r3, [pc, #132]	; (8003b1c <SystemCoreSetup+0x94>)
 8003a98:	4a21      	ldr	r2, [pc, #132]	; (8003b20 <SystemCoreSetup+0x98>)
 8003a9a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a9c:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003aa0:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8003aa2:	4a1e      	ldr	r2, [pc, #120]	; (8003b1c <SystemCoreSetup+0x94>)
 8003aa4:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <SystemCoreSetup+0x94>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003aae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8003ab2:	4b1c      	ldr	r3, [pc, #112]	; (8003b24 <SystemCoreSetup+0x9c>)
 8003ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ab8:	3314      	adds	r3, #20
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f023 030f 	bic.w	r3, r3, #15
 8003ac4:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f043 0303 	orr.w	r3, r3, #3
 8003acc:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8003ace:	4b15      	ldr	r3, [pc, #84]	; (8003b24 <SystemCoreSetup+0x9c>)
 8003ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ad4:	3314      	adds	r3, #20
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8003ada:	4a10      	ldr	r2, [pc, #64]	; (8003b1c <SystemCoreSetup+0x94>)
 8003adc:	4b0f      	ldr	r3, [pc, #60]	; (8003b1c <SystemCoreSetup+0x94>)
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	f023 0310 	bic.w	r3, r3, #16
 8003ae4:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8003ae6:	4a0d      	ldr	r2, [pc, #52]	; (8003b1c <SystemCoreSetup+0x94>)
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <SystemCoreSetup+0x94>)
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	f023 0308 	bic.w	r3, r3, #8
 8003af0:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003af2:	4a0a      	ldr	r2, [pc, #40]	; (8003b1c <SystemCoreSetup+0x94>)
 8003af4:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <SystemCoreSetup+0x94>)
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003afc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8003afe:	4a07      	ldr	r2, [pc, #28]	; (8003b1c <SystemCoreSetup+0x94>)
 8003b00:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <SystemCoreSetup+0x94>)
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b08:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8003b0a:	4a04      	ldr	r2, [pc, #16]	; (8003b1c <SystemCoreSetup+0x94>)
 8003b0c:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <SystemCoreSetup+0x94>)
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b14:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	e000ed00 	.word	0xe000ed00
 8003b20:	08000000 	.word	0x08000000
 8003b24:	58001000 	.word	0x58001000

08003b28 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8003b30:	2300      	movs	r3, #0
 8003b32:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	701a      	strb	r2, [r3, #0]

  return (status);
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8003b4c:	4b02      	ldr	r3, [pc, #8]	; (8003b58 <OSCHP_GetFrequency+0x10>)
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	00b71b00 	.word	0x00b71b00

08003b5c <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8003b5c:	b5b0      	push	{r4, r5, r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8003b62:	4b12      	ldr	r3, [pc, #72]	; (8003bac <SystemCoreClockSetup+0x50>)
 8003b64:	1d3c      	adds	r4, r7, #4
 8003b66:	461d      	mov	r5, r3
 8003b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b6c:	682b      	ldr	r3, [r5, #0]
 8003b6e:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8003b70:	1d3b      	adds	r3, r7, #4
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fc fe8a 	bl	800088c <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8003b78:	2000      	movs	r0, #0
 8003b7a:	f7fc ff75 	bl	8000a68 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8003b7e:	2000      	movs	r0, #0
 8003b80:	f7fc ff2a 	bl	80009d8 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8003b84:	2004      	movs	r0, #4
 8003b86:	f7fc fffb 	bl	8000b80 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8003b8a:	2001      	movs	r0, #1
 8003b8c:	2120      	movs	r1, #32
 8003b8e:	f7fd f843 	bl	8000c18 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8003b92:	2000      	movs	r0, #0
 8003b94:	f7fc ff34 	bl	8000a00 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8003b98:	2001      	movs	r0, #1
 8003b9a:	f7fd f819 	bl	8000bd0 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	f7fd f802 	bl	8000ba8 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8003baa:	bf00      	nop
 8003bac:	0800dae4 	.word	0x0800dae4

08003bb0 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8003bba:	4811      	ldr	r0, [pc, #68]	; (8003c00 <DAVE_Init+0x50>)
 8003bbc:	f7ff ffb4 	bl	8003b28 <CLOCK_XMC4_Init>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d104      	bne.n	8003bd4 <DAVE_Init+0x24>
  {
	 /**  Initialization of PWM APP instance LED */
	 init_status = (DAVE_STATUS_t)PWM_Init(&LED); 
 8003bca:	480e      	ldr	r0, [pc, #56]	; (8003c04 <DAVE_Init+0x54>)
 8003bcc:	f7fd fccc 	bl	8001568 <PWM_Init>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d104      	bne.n	8003be4 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance LightUpButton */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LightUpButton); 
 8003bda:	480b      	ldr	r0, [pc, #44]	; (8003c08 <DAVE_Init+0x58>)
 8003bdc:	f7ff ff10 	bl	8003a00 <DIGITAL_IO_Init>
 8003be0:	4603      	mov	r3, r0
 8003be2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d104      	bne.n	8003bf4 <DAVE_Init+0x44>
  {
	 /**  Initialization of DIGITAL_IO APP instance LightDownButton */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LightDownButton); 
 8003bea:	4808      	ldr	r0, [pc, #32]	; (8003c0c <DAVE_Init+0x5c>)
 8003bec:	f7ff ff08 	bl	8003a00 <DIGITAL_IO_Init>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8003bf4:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000208 	.word	0x20000208
 8003c04:	20000000 	.word	0x20000000
 8003c08:	0800dabc 	.word	0x0800dabc
 8003c0c:	0800dad0 	.word	0x0800dad0

08003c10 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	fa22 f303 	lsr.w	r3, r2, r3
 8003c26:	f003 0301 	and.w	r3, r3, #1
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop

08003c38 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	7c1b      	ldrb	r3, [r3, #16]
 8003c48:	4610      	mov	r0, r2
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	f7ff ffe0 	bl	8003c10 <XMC_GPIO_GetInput>
 8003c50:	4603      	mov	r3, r0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop

08003c5c <main>:
 * This routine is the application entry point. It is invoked by the device startup code. It is responsible for
 * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
 * code.
 */
int main(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08a      	sub	sp, #40	; 0x28
 8003c60:	af02      	add	r7, sp, #8
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8003c62:	f7ff ffa5 	bl	8003bb0 <DAVE_Init>
 8003c66:	4603      	mov	r3, r0
 8003c68:	77fb      	strb	r3, [r7, #31]
  if(status != DAVE_STATUS_SUCCESS)
 8003c6a:	7ffb      	ldrb	r3, [r7, #31]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d016      	beq.n	8003c9e <main+0x42>
  {
	  ErrorHandler("DAVE APPs initialization failed\n");
 8003c70:	1d3b      	adds	r3, r7, #4
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 f8e4 	bl	8003e40 <_ZNSaIcEC1Ev>
 8003c78:	463a      	mov	r2, r7
 8003c7a:	1d3b      	adds	r3, r7, #4
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	4934      	ldr	r1, [pc, #208]	; (8003d50 <main+0xf4>)
 8003c80:	461a      	mov	r2, r3
 8003c82:	f000 f965 	bl	8003f50 <_ZNSsC1EPKcRKSaIcE>
 8003c86:	463b      	mov	r3, r7
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 f86f 	bl	8003d6c <_ZL12ErrorHandlerSs>
 8003c8e:	463b      	mov	r3, r7
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 f92d 	bl	8003ef0 <_ZNSsD1Ev>
 8003c96:	1d3b      	adds	r3, r7, #4
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 f8d2 	bl	8003e42 <_ZNSaIcED1Ev>
  }

  BaseType_t xReturned = xTaskCreate( vTaskLightUp, ( const char * const ) "Light Up", configMINIMAL_STACK_SIZE, NULL, LIGHT_UP_TASK_PRIORITY, NULL );
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	9301      	str	r3, [sp, #4]
 8003ca6:	482b      	ldr	r0, [pc, #172]	; (8003d54 <main+0xf8>)
 8003ca8:	492b      	ldr	r1, [pc, #172]	; (8003d58 <main+0xfc>)
 8003caa:	2282      	movs	r2, #130	; 0x82
 8003cac:	2300      	movs	r3, #0
 8003cae:	f7fe fd15 	bl	80026dc <xTaskCreate>
 8003cb2:	61b8      	str	r0, [r7, #24]
  if(xReturned != pdPASS)
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d01c      	beq.n	8003cf4 <main+0x98>
  {
	  ErrorHandler("Error creating Light Up task\n");
 8003cba:	f107 030c 	add.w	r3, r7, #12
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 f8be 	bl	8003e40 <_ZNSaIcEC1Ev>
 8003cc4:	f107 0208 	add.w	r2, r7, #8
 8003cc8:	f107 030c 	add.w	r3, r7, #12
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4923      	ldr	r1, [pc, #140]	; (8003d5c <main+0x100>)
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	f000 f93d 	bl	8003f50 <_ZNSsC1EPKcRKSaIcE>
 8003cd6:	f107 0308 	add.w	r3, r7, #8
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f846 	bl	8003d6c <_ZL12ErrorHandlerSs>
 8003ce0:	f107 0308 	add.w	r3, r7, #8
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 f903 	bl	8003ef0 <_ZNSsD1Ev>
 8003cea:	f107 030c 	add.w	r3, r7, #12
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f8a7 	bl	8003e42 <_ZNSaIcED1Ev>
  }

  xReturned =  xTaskCreate( vTaskLightDown, ( const char * const ) "Light Down", configMINIMAL_STACK_SIZE, NULL, LIGHT_DOWN_TASK_PRIORITY, NULL );
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	9301      	str	r3, [sp, #4]
 8003cfc:	4818      	ldr	r0, [pc, #96]	; (8003d60 <main+0x104>)
 8003cfe:	4919      	ldr	r1, [pc, #100]	; (8003d64 <main+0x108>)
 8003d00:	2282      	movs	r2, #130	; 0x82
 8003d02:	2300      	movs	r3, #0
 8003d04:	f7fe fcea 	bl	80026dc <xTaskCreate>
 8003d08:	61b8      	str	r0, [r7, #24]
  if(xReturned != pdPASS)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d01c      	beq.n	8003d4a <main+0xee>
  {
	  ErrorHandler("Error creating Light Down task\n");
 8003d10:	f107 0314 	add.w	r3, r7, #20
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 f893 	bl	8003e40 <_ZNSaIcEC1Ev>
 8003d1a:	f107 0210 	add.w	r2, r7, #16
 8003d1e:	f107 0314 	add.w	r3, r7, #20
 8003d22:	4610      	mov	r0, r2
 8003d24:	4910      	ldr	r1, [pc, #64]	; (8003d68 <main+0x10c>)
 8003d26:	461a      	mov	r2, r3
 8003d28:	f000 f912 	bl	8003f50 <_ZNSsC1EPKcRKSaIcE>
 8003d2c:	f107 0310 	add.w	r3, r7, #16
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 f81b 	bl	8003d6c <_ZL12ErrorHandlerSs>
 8003d36:	f107 0310 	add.w	r3, r7, #16
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f8d8 	bl	8003ef0 <_ZNSsD1Ev>
 8003d40:	f107 0314 	add.w	r3, r7, #20
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 f87c 	bl	8003e42 <_ZNSaIcED1Ev>
  }

  vTaskStartScheduler();
 8003d4a:	f7fe fe45 	bl	80029d8 <vTaskStartScheduler>

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
  }
 8003d4e:	e7fe      	b.n	8003d4e <main+0xf2>
 8003d50:	0800daf8 	.word	0x0800daf8
 8003d54:	08003d79 	.word	0x08003d79
 8003d58:	0800db1c 	.word	0x0800db1c
 8003d5c:	0800db28 	.word	0x0800db28
 8003d60:	08003db5 	.word	0x08003db5
 8003d64:	0800db48 	.word	0x0800db48
 8003d68:	0800db54 	.word	0x0800db54

08003d6c <_ZL12ErrorHandlerSs>:
}

static void ErrorHandler(std::string error)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  while(1U)
  {
  }
}

static void ErrorHandler(std::string error)
 8003d74:	e7fe      	b.n	8003d74 <_ZL12ErrorHandlerSs+0x8>
 8003d76:	bf00      	nop

08003d78 <_ZL12vTaskLightUpPv>:
	{

	}
}
static void vTaskLightUp( void *pvParameters )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
	//configASSERT( ((uint32_t) pvParameters) == 1);

	for(;;)
	{
		if(DIGITAL_IO_GetInput(&LightUpButton) == 0)
 8003d80:	480a      	ldr	r0, [pc, #40]	; (8003dac <_ZL12vTaskLightUpPv+0x34>)
 8003d82:	f7ff ff59 	bl	8003c38 <DIGITAL_IO_GetInput>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	bf0c      	ite	eq
 8003d8c:	2301      	moveq	r3, #1
 8003d8e:	2300      	movne	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d008      	beq.n	8003da8 <_ZL12vTaskLightUpPv+0x30>
		{
			vTaskDelay(pdMS_TO_TICKS(500));
 8003d96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d9a:	f7fe fdeb 	bl	8002974 <vTaskDelay>
			Led_Controller.LightUp(500U);
 8003d9e:	4804      	ldr	r0, [pc, #16]	; (8003db0 <_ZL12vTaskLightUpPv+0x38>)
 8003da0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003da4:	f7fc fb7e 	bl	80004a4 <_ZN14led_controller13LedController7LightUpEi>
	for(;;)
	{

	}
}
static void vTaskLightUp( void *pvParameters )
 8003da8:	e7ea      	b.n	8003d80 <_ZL12vTaskLightUpPv+0x8>
 8003daa:	bf00      	nop
 8003dac:	0800dabc 	.word	0x0800dabc
 8003db0:	2000020c 	.word	0x2000020c

08003db4 <_ZL14vTaskLightDownPv>:
		}
	}
}

static void vTaskLightDown( void *pvParameters )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
	//configASSERT( ((uint32_t) pvParameters) == 1);

	for(;;)
	{
		if(DIGITAL_IO_GetInput(&LightDownButton) == 0)
 8003dbc:	480a      	ldr	r0, [pc, #40]	; (8003de8 <_ZL14vTaskLightDownPv+0x34>)
 8003dbe:	f7ff ff3b 	bl	8003c38 <DIGITAL_IO_GetInput>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d008      	beq.n	8003de4 <_ZL14vTaskLightDownPv+0x30>
		{
			vTaskDelay(pdMS_TO_TICKS(500));
 8003dd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003dd6:	f7fe fdcd 	bl	8002974 <vTaskDelay>
			Led_Controller.LightDown(500U);
 8003dda:	4804      	ldr	r0, [pc, #16]	; (8003dec <_ZL14vTaskLightDownPv+0x38>)
 8003ddc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003de0:	f7fc fb78 	bl	80004d4 <_ZN14led_controller13LedController9LightDownEi>
			Led_Controller.LightUp(500U);
		}
	}
}

static void vTaskLightDown( void *pvParameters )
 8003de4:	e7ea      	b.n	8003dbc <_ZL14vTaskLightDownPv+0x8>
 8003de6:	bf00      	nop
 8003de8:	0800dad0 	.word	0x0800dad0
 8003dec:	2000020c 	.word	0x2000020c

08003df0 <_Z41__static_initialization_and_destruction_0ii>:
		{
			vTaskDelay(pdMS_TO_TICKS(500));
			Led_Controller.LightDown(500U);
		}
	}
}
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d107      	bne.n	8003e10 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d102      	bne.n	8003e10 <_Z41__static_initialization_and_destruction_0ii+0x20>
static void vTaskLightUp( void *pvParameters );
static void vTaskLightDown( void *pvParameters );

static void ErrorHandler(std::string);

static led_controller::LedController Led_Controller;
 8003e0a:	4803      	ldr	r0, [pc, #12]	; (8003e18 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003e0c:	f7fc fb0c 	bl	8000428 <_ZN14led_controller13LedControllerC1Ev>
		{
			vTaskDelay(pdMS_TO_TICKS(500));
			Led_Controller.LightDown(500U);
		}
	}
}
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	2000020c 	.word	0x2000020c

08003e1c <_GLOBAL__sub_I_main>:
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	2001      	movs	r0, #1
 8003e22:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e26:	f7ff ffe3 	bl	8003df0 <_Z41__static_initialization_and_destruction_0ii>
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <__cxa_pure_virtual>:
 8003e2c:	b508      	push	{r3, lr}
 8003e2e:	4903      	ldr	r1, [pc, #12]	; (8003e3c <__cxa_pure_virtual+0x10>)
 8003e30:	221b      	movs	r2, #27
 8003e32:	2002      	movs	r0, #2
 8003e34:	f008 ffa2 	bl	800cd7c <write>
 8003e38:	f000 f8ac 	bl	8003f94 <_ZSt9terminatev>
 8003e3c:	0800db74 	.word	0x0800db74

08003e40 <_ZNSaIcEC1Ev>:
 8003e40:	4770      	bx	lr

08003e42 <_ZNSaIcED1Ev>:
 8003e42:	4770      	bx	lr

08003e44 <_ZNSs7_M_copyEPcPKcj>:
 8003e44:	2a01      	cmp	r2, #1
 8003e46:	b510      	push	{r4, lr}
 8003e48:	d102      	bne.n	8003e50 <_ZNSs7_M_copyEPcPKcj+0xc>
 8003e4a:	780a      	ldrb	r2, [r1, #0]
 8003e4c:	7002      	strb	r2, [r0, #0]
 8003e4e:	bd10      	pop	{r4, pc}
 8003e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e54:	f008 bdd7 	b.w	800ca06 <memcpy>

08003e58 <_ZNSs13_S_copy_charsEPcPKcS1_>:
 8003e58:	b508      	push	{r3, lr}
 8003e5a:	1a52      	subs	r2, r2, r1
 8003e5c:	f7ff fff2 	bl	8003e44 <_ZNSs7_M_copyEPcPKcj>
 8003e60:	bd08      	pop	{r3, pc}
	...

08003e64 <_ZNSs4_Rep26_M_set_length_and_sharableEj>:
 8003e64:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x14>)
 8003e66:	4298      	cmp	r0, r3
 8003e68:	bf1f      	itttt	ne
 8003e6a:	6001      	strne	r1, [r0, #0]
 8003e6c:	1809      	addne	r1, r1, r0
 8003e6e:	2300      	movne	r3, #0
 8003e70:	6083      	strne	r3, [r0, #8]
 8003e72:	bf18      	it	ne
 8003e74:	730b      	strbne	r3, [r1, #12]
 8003e76:	4770      	bx	lr
 8003e78:	20000238 	.word	0x20000238

08003e7c <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 8003e7c:	4b13      	ldr	r3, [pc, #76]	; (8003ecc <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x50>)
 8003e7e:	4298      	cmp	r0, r3
 8003e80:	b510      	push	{r4, lr}
 8003e82:	4604      	mov	r4, r0
 8003e84:	d902      	bls.n	8003e8c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x10>
 8003e86:	4812      	ldr	r0, [pc, #72]	; (8003ed0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x54>)
 8003e88:	f000 f900 	bl	800408c <_ZSt20__throw_length_errorPKc>
 8003e8c:	4288      	cmp	r0, r1
 8003e8e:	d903      	bls.n	8003e98 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x1c>
 8003e90:	004b      	lsls	r3, r1, #1
 8003e92:	4298      	cmp	r0, r3
 8003e94:	bf38      	it	cc
 8003e96:	461c      	movcc	r4, r3
 8003e98:	f104 031d 	add.w	r3, r4, #29
 8003e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea0:	f104 000d 	add.w	r0, r4, #13
 8003ea4:	d90c      	bls.n	8003ec0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8003ea6:	428c      	cmp	r4, r1
 8003ea8:	d90a      	bls.n	8003ec0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8003eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eae:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8003eb2:	1ae4      	subs	r4, r4, r3
 8003eb4:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x50>)
 8003eb6:	429c      	cmp	r4, r3
 8003eb8:	bf28      	it	cs
 8003eba:	461c      	movcs	r4, r3
 8003ebc:	f104 000d 	add.w	r0, r4, #13
 8003ec0:	f000 f86d 	bl	8003f9e <_Znwj>
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	6044      	str	r4, [r0, #4]
 8003ec8:	6082      	str	r2, [r0, #8]
 8003eca:	bd10      	pop	{r4, pc}
 8003ecc:	3ffffffc 	.word	0x3ffffffc
 8003ed0:	0800dc53 	.word	0x0800dc53

08003ed4 <_ZNSs4_Rep10_M_disposeERKSaIcE>:
 8003ed4:	4a05      	ldr	r2, [pc, #20]	; (8003eec <_ZNSs4_Rep10_M_disposeERKSaIcE+0x18>)
 8003ed6:	4290      	cmp	r0, r2
 8003ed8:	d006      	beq.n	8003ee8 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x14>
 8003eda:	6882      	ldr	r2, [r0, #8]
 8003edc:	1e51      	subs	r1, r2, #1
 8003ede:	2a00      	cmp	r2, #0
 8003ee0:	6081      	str	r1, [r0, #8]
 8003ee2:	dc01      	bgt.n	8003ee8 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x14>
 8003ee4:	f000 b86c 	b.w	8003fc0 <_ZdlPv>
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	20000238 	.word	0x20000238

08003ef0 <_ZNSsD1Ev>:
 8003ef0:	b513      	push	{r0, r1, r4, lr}
 8003ef2:	4604      	mov	r4, r0
 8003ef4:	6800      	ldr	r0, [r0, #0]
 8003ef6:	a901      	add	r1, sp, #4
 8003ef8:	380c      	subs	r0, #12
 8003efa:	f7ff ffeb 	bl	8003ed4 <_ZNSs4_Rep10_M_disposeERKSaIcE>
 8003efe:	4620      	mov	r0, r4
 8003f00:	b002      	add	sp, #8
 8003f02:	bd10      	pop	{r4, pc}

08003f04 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>:
 8003f04:	4288      	cmp	r0, r1
 8003f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f0a:	4605      	mov	r5, r0
 8003f0c:	460c      	mov	r4, r1
 8003f0e:	d101      	bne.n	8003f14 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x10>
 8003f10:	4e0d      	ldr	r6, [pc, #52]	; (8003f48 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x44>)
 8003f12:	e015      	b.n	8003f40 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x3c>
 8003f14:	b918      	cbnz	r0, 8003f1e <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x1a>
 8003f16:	b114      	cbz	r4, 8003f1e <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x1a>
 8003f18:	480c      	ldr	r0, [pc, #48]	; (8003f4c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x48>)
 8003f1a:	f000 f8b4 	bl	8004086 <_ZSt19__throw_logic_errorPKc>
 8003f1e:	1b67      	subs	r7, r4, r5
 8003f20:	2100      	movs	r1, #0
 8003f22:	4638      	mov	r0, r7
 8003f24:	f7ff ffaa 	bl	8003e7c <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 8003f28:	f100 060c 	add.w	r6, r0, #12
 8003f2c:	4680      	mov	r8, r0
 8003f2e:	4629      	mov	r1, r5
 8003f30:	4630      	mov	r0, r6
 8003f32:	4622      	mov	r2, r4
 8003f34:	f7ff ff90 	bl	8003e58 <_ZNSs13_S_copy_charsEPcPKcS1_>
 8003f38:	4640      	mov	r0, r8
 8003f3a:	4639      	mov	r1, r7
 8003f3c:	f7ff ff92 	bl	8003e64 <_ZNSs4_Rep26_M_set_length_and_sharableEj>
 8003f40:	4630      	mov	r0, r6
 8003f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f46:	bf00      	nop
 8003f48:	20000244 	.word	0x20000244
 8003f4c:	0800dd06 	.word	0x0800dd06

08003f50 <_ZNSsC1EPKcRKSaIcE>:
 8003f50:	b570      	push	{r4, r5, r6, lr}
 8003f52:	4605      	mov	r5, r0
 8003f54:	4616      	mov	r6, r2
 8003f56:	460c      	mov	r4, r1
 8003f58:	b121      	cbz	r1, 8003f64 <_ZNSsC1EPKcRKSaIcE+0x14>
 8003f5a:	4608      	mov	r0, r1
 8003f5c:	f008 feeb 	bl	800cd36 <strlen>
 8003f60:	1821      	adds	r1, r4, r0
 8003f62:	e001      	b.n	8003f68 <_ZNSsC1EPKcRKSaIcE+0x18>
 8003f64:	f04f 31ff 	mov.w	r1, #4294967295
 8003f68:	4620      	mov	r0, r4
 8003f6a:	4632      	mov	r2, r6
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	f7ff ffc8 	bl	8003f04 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 8003f74:	6028      	str	r0, [r5, #0]
 8003f76:	4628      	mov	r0, r5
 8003f78:	bd70      	pop	{r4, r5, r6, pc}

08003f7a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8003f7a:	b508      	push	{r3, lr}
 8003f7c:	4780      	blx	r0
 8003f7e:	f008 fc81 	bl	800c884 <abort>
	...

08003f84 <_ZSt13get_terminatev>:
 8003f84:	4b02      	ldr	r3, [pc, #8]	; (8003f90 <_ZSt13get_terminatev+0xc>)
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	f3bf 8f5f 	dmb	sy
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	20000048 	.word	0x20000048

08003f94 <_ZSt9terminatev>:
 8003f94:	b508      	push	{r3, lr}
 8003f96:	f7ff fff5 	bl	8003f84 <_ZSt13get_terminatev>
 8003f9a:	f7ff ffee 	bl	8003f7a <_ZN10__cxxabiv111__terminateEPFvvE>

08003f9e <_Znwj>:
 8003f9e:	b510      	push	{r4, lr}
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	bf14      	ite	ne
 8003fa4:	4604      	movne	r4, r0
 8003fa6:	2401      	moveq	r4, #1
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f008 fcfd 	bl	800c9a8 <malloc>
 8003fae:	b930      	cbnz	r0, 8003fbe <_Znwj+0x20>
 8003fb0:	f000 f808 	bl	8003fc4 <_ZSt15get_new_handlerv>
 8003fb4:	b908      	cbnz	r0, 8003fba <_Znwj+0x1c>
 8003fb6:	f008 fc65 	bl	800c884 <abort>
 8003fba:	4780      	blx	r0
 8003fbc:	e7f4      	b.n	8003fa8 <_Znwj+0xa>
 8003fbe:	bd10      	pop	{r4, pc}

08003fc0 <_ZdlPv>:
 8003fc0:	f008 bcfa 	b.w	800c9b8 <free>

08003fc4 <_ZSt15get_new_handlerv>:
 8003fc4:	4b02      	ldr	r3, [pc, #8]	; (8003fd0 <_ZSt15get_new_handlerv+0xc>)
 8003fc6:	6818      	ldr	r0, [r3, #0]
 8003fc8:	f3bf 8f5f 	dmb	sy
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	20000248 	.word	0x20000248

08003fd4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 8003fd4:	4b1f      	ldr	r3, [pc, #124]	; (8004054 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x80>)
 8003fd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fd8:	781a      	ldrb	r2, [r3, #0]
 8003fda:	4d1f      	ldr	r5, [pc, #124]	; (8004058 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x84>)
 8003fdc:	b112      	cbz	r2, 8003fe4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10>
 8003fde:	682b      	ldr	r3, [r5, #0]
 8003fe0:	481e      	ldr	r0, [pc, #120]	; (800405c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x88>)
 8003fe2:	e031      	b.n	8004048 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x74>
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	701a      	strb	r2, [r3, #0]
 8003fe8:	f000 f840 	bl	800406c <__cxa_current_exception_type>
 8003fec:	b350      	cbz	r0, 8004044 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x70>
 8003fee:	6844      	ldr	r4, [r0, #4]
 8003ff0:	4f19      	ldr	r7, [pc, #100]	; (8004058 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x84>)
 8003ff2:	7823      	ldrb	r3, [r4, #0]
 8003ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ff6:	ab02      	add	r3, sp, #8
 8003ff8:	bf08      	it	eq
 8003ffa:	3401      	addeq	r4, #1
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8004002:	f843 2d04 	str.w	r2, [r3, #-4]!
 8004006:	4620      	mov	r0, r4
 8004008:	460a      	mov	r2, r1
 800400a:	f008 fb01 	bl	800c610 <__cxa_demangle>
 800400e:	682b      	ldr	r3, [r5, #0]
 8004010:	4606      	mov	r6, r0
 8004012:	68d9      	ldr	r1, [r3, #12]
 8004014:	4812      	ldr	r0, [pc, #72]	; (8004060 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>)
 8004016:	f008 fc97 	bl	800c948 <fputs>
 800401a:	9b01      	ldr	r3, [sp, #4]
 800401c:	b913      	cbnz	r3, 8004024 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x50>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	4630      	mov	r0, r6
 8004022:	e001      	b.n	8004028 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x54>
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	4620      	mov	r0, r4
 8004028:	68d9      	ldr	r1, [r3, #12]
 800402a:	f008 fc8d 	bl	800c948 <fputs>
 800402e:	682b      	ldr	r3, [r5, #0]
 8004030:	480c      	ldr	r0, [pc, #48]	; (8004064 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x90>)
 8004032:	68d9      	ldr	r1, [r3, #12]
 8004034:	f008 fc88 	bl	800c948 <fputs>
 8004038:	9b01      	ldr	r3, [sp, #4]
 800403a:	b943      	cbnz	r3, 800404e <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x7a>
 800403c:	4630      	mov	r0, r6
 800403e:	f008 fcbb 	bl	800c9b8 <free>
 8004042:	e004      	b.n	800404e <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x7a>
 8004044:	682b      	ldr	r3, [r5, #0]
 8004046:	4808      	ldr	r0, [pc, #32]	; (8004068 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x94>)
 8004048:	68d9      	ldr	r1, [r3, #12]
 800404a:	f008 fc7d 	bl	800c948 <fputs>
 800404e:	f008 fc19 	bl	800c884 <abort>
 8004052:	bf00      	nop
 8004054:	2000024c 	.word	0x2000024c
 8004058:	200000ac 	.word	0x200000ac
 800405c:	0800dd60 	.word	0x0800dd60
 8004060:	0800dd7e 	.word	0x0800dd7e
 8004064:	0800ddaf 	.word	0x0800ddaf
 8004068:	0800ddb2 	.word	0x0800ddb2

0800406c <__cxa_current_exception_type>:
 800406c:	b508      	push	{r3, lr}
 800406e:	f008 fb41 	bl	800c6f4 <__cxa_get_globals>
 8004072:	6800      	ldr	r0, [r0, #0]
 8004074:	b130      	cbz	r0, 8004084 <__cxa_current_exception_type+0x18>
 8004076:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800407a:	2b01      	cmp	r3, #1
 800407c:	bf04      	itt	eq
 800407e:	6800      	ldreq	r0, [r0, #0]
 8004080:	3878      	subeq	r0, #120	; 0x78
 8004082:	6800      	ldr	r0, [r0, #0]
 8004084:	bd08      	pop	{r3, pc}

08004086 <_ZSt19__throw_logic_errorPKc>:
 8004086:	b508      	push	{r3, lr}
 8004088:	f008 fbfc 	bl	800c884 <abort>

0800408c <_ZSt20__throw_length_errorPKc>:
 800408c:	b508      	push	{r3, lr}
 800408e:	f008 fbf9 	bl	800c884 <abort>
	...

08004094 <d_make_comp>:
 8004094:	b470      	push	{r4, r5, r6}
 8004096:	1e4c      	subs	r4, r1, #1
 8004098:	2c4a      	cmp	r4, #74	; 0x4a
 800409a:	d82c      	bhi.n	80040f6 <d_make_comp+0x62>
 800409c:	e8df f004 	tbb	[pc, r4]
 80040a0:	3c3c3c3c 	.word	0x3c3c3c3c
 80040a4:	2b2b2b2b 	.word	0x2b2b2b2b
 80040a8:	263c2626 	.word	0x263c2626
 80040ac:	26262626 	.word	0x26262626
 80040b0:	26262626 	.word	0x26262626
 80040b4:	2b262626 	.word	0x2b262626
 80040b8:	27272727 	.word	0x27272727
 80040bc:	27272727 	.word	0x27272727
 80040c0:	2626263c 	.word	0x2626263c
 80040c4:	262b2626 	.word	0x262b2626
 80040c8:	2b3c3d27 	.word	0x2b3c3d27
 80040cc:	3d27273c 	.word	0x3d27273c
 80040d0:	26262b2b 	.word	0x26262b2b
 80040d4:	3c3c3c3c 	.word	0x3c3c3c3c
 80040d8:	3c3c263c 	.word	0x3c3c263c
 80040dc:	2b2b3c26 	.word	0x2b2b3c26
 80040e0:	2b262626 	.word	0x2b262626
 80040e4:	26262b2b 	.word	0x26262b2b
 80040e8:	3c26      	.short	0x3c26
 80040ea:	3c          	.byte	0x3c
 80040eb:	00          	.byte	0x00
 80040ec:	b1ca      	cbz	r2, 8004122 <d_make_comp+0x8e>
 80040ee:	6944      	ldr	r4, [r0, #20]
 80040f0:	6985      	ldr	r5, [r0, #24]
 80040f2:	42ac      	cmp	r4, r5
 80040f4:	db02      	blt.n	80040fc <d_make_comp+0x68>
 80040f6:	2000      	movs	r0, #0
 80040f8:	bc70      	pop	{r4, r5, r6}
 80040fa:	4770      	bx	lr
 80040fc:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8004100:	6906      	ldr	r6, [r0, #16]
 8004102:	3401      	adds	r4, #1
 8004104:	00ad      	lsls	r5, r5, #2
 8004106:	6144      	str	r4, [r0, #20]
 8004108:	1974      	adds	r4, r6, r5
 800410a:	d00c      	beq.n	8004126 <d_make_comp+0x92>
 800410c:	5571      	strb	r1, [r6, r5]
 800410e:	6062      	str	r2, [r4, #4]
 8004110:	60a3      	str	r3, [r4, #8]
 8004112:	4620      	mov	r0, r4
 8004114:	bc70      	pop	{r4, r5, r6}
 8004116:	4770      	bx	lr
 8004118:	b11a      	cbz	r2, 8004122 <d_make_comp+0x8e>
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1e7      	bne.n	80040ee <d_make_comp+0x5a>
 800411e:	4618      	mov	r0, r3
 8004120:	e7ea      	b.n	80040f8 <d_make_comp+0x64>
 8004122:	4610      	mov	r0, r2
 8004124:	e7e8      	b.n	80040f8 <d_make_comp+0x64>
 8004126:	4620      	mov	r0, r4
 8004128:	e7e6      	b.n	80040f8 <d_make_comp+0x64>
 800412a:	bf00      	nop

0800412c <d_make_name>:
 800412c:	b430      	push	{r4, r5}
 800412e:	6943      	ldr	r3, [r0, #20]
 8004130:	6984      	ldr	r4, [r0, #24]
 8004132:	42a3      	cmp	r3, r4
 8004134:	da09      	bge.n	800414a <d_make_name+0x1e>
 8004136:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800413a:	6905      	ldr	r5, [r0, #16]
 800413c:	3301      	adds	r3, #1
 800413e:	00a4      	lsls	r4, r4, #2
 8004140:	6143      	str	r3, [r0, #20]
 8004142:	192b      	adds	r3, r5, r4
 8004144:	d001      	beq.n	800414a <d_make_name+0x1e>
 8004146:	b101      	cbz	r1, 800414a <d_make_name+0x1e>
 8004148:	b912      	cbnz	r2, 8004150 <d_make_name+0x24>
 800414a:	2000      	movs	r0, #0
 800414c:	bc30      	pop	{r4, r5}
 800414e:	4770      	bx	lr
 8004150:	2000      	movs	r0, #0
 8004152:	5528      	strb	r0, [r5, r4]
 8004154:	6059      	str	r1, [r3, #4]
 8004156:	609a      	str	r2, [r3, #8]
 8004158:	4618      	mov	r0, r3
 800415a:	bc30      	pop	{r4, r5}
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop

08004160 <d_cv_qualifiers>:
 8004160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004162:	68c3      	ldr	r3, [r0, #12]
 8004164:	4615      	mov	r5, r2
 8004166:	4604      	mov	r4, r0
 8004168:	460e      	mov	r6, r1
 800416a:	781a      	ldrb	r2, [r3, #0]
 800416c:	460f      	mov	r7, r1
 800416e:	e016      	b.n	800419e <d_cv_qualifiers+0x3e>
 8004170:	2a56      	cmp	r2, #86	; 0x56
 8004172:	d024      	beq.n	80041be <d_cv_qualifiers+0x5e>
 8004174:	2a4b      	cmp	r2, #75	; 0x4b
 8004176:	d12f      	bne.n	80041d8 <d_cv_qualifiers+0x78>
 8004178:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800417a:	60e1      	str	r1, [r4, #12]
 800417c:	2d00      	cmp	r5, #0
 800417e:	f103 0306 	add.w	r3, r3, #6
 8004182:	6323      	str	r3, [r4, #48]	; 0x30
 8004184:	bf14      	ite	ne
 8004186:	211e      	movne	r1, #30
 8004188:	211b      	moveq	r1, #27
 800418a:	2200      	movs	r2, #0
 800418c:	4613      	mov	r3, r2
 800418e:	4620      	mov	r0, r4
 8004190:	f7ff ff80 	bl	8004094 <d_make_comp>
 8004194:	6038      	str	r0, [r7, #0]
 8004196:	b1f0      	cbz	r0, 80041d6 <d_cv_qualifiers+0x76>
 8004198:	68e3      	ldr	r3, [r4, #12]
 800419a:	781a      	ldrb	r2, [r3, #0]
 800419c:	1d07      	adds	r7, r0, #4
 800419e:	2a72      	cmp	r2, #114	; 0x72
 80041a0:	f103 0101 	add.w	r1, r3, #1
 80041a4:	d1e4      	bne.n	8004170 <d_cv_qualifiers+0x10>
 80041a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80041a8:	2d00      	cmp	r5, #0
 80041aa:	f103 0301 	add.w	r3, r3, #1
 80041ae:	f102 0209 	add.w	r2, r2, #9
 80041b2:	60e3      	str	r3, [r4, #12]
 80041b4:	6322      	str	r2, [r4, #48]	; 0x30
 80041b6:	bf14      	ite	ne
 80041b8:	211c      	movne	r1, #28
 80041ba:	2119      	moveq	r1, #25
 80041bc:	e7e5      	b.n	800418a <d_cv_qualifiers+0x2a>
 80041be:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80041c0:	2d00      	cmp	r5, #0
 80041c2:	f103 0301 	add.w	r3, r3, #1
 80041c6:	f102 0209 	add.w	r2, r2, #9
 80041ca:	60e3      	str	r3, [r4, #12]
 80041cc:	6322      	str	r2, [r4, #48]	; 0x30
 80041ce:	bf14      	ite	ne
 80041d0:	211d      	movne	r1, #29
 80041d2:	211a      	moveq	r1, #26
 80041d4:	e7d9      	b.n	800418a <d_cv_qualifiers+0x2a>
 80041d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041d8:	b9ad      	cbnz	r5, 8004206 <d_cv_qualifiers+0xa6>
 80041da:	2a46      	cmp	r2, #70	; 0x46
 80041dc:	d113      	bne.n	8004206 <d_cv_qualifiers+0xa6>
 80041de:	42b7      	cmp	r7, r6
 80041e0:	d011      	beq.n	8004206 <d_cv_qualifiers+0xa6>
 80041e2:	201d      	movs	r0, #29
 80041e4:	211e      	movs	r1, #30
 80041e6:	221c      	movs	r2, #28
 80041e8:	e007      	b.n	80041fa <d_cv_qualifiers+0x9a>
 80041ea:	2b1b      	cmp	r3, #27
 80041ec:	d00d      	beq.n	800420a <d_cv_qualifiers+0xaa>
 80041ee:	2b19      	cmp	r3, #25
 80041f0:	d100      	bne.n	80041f4 <d_cv_qualifiers+0x94>
 80041f2:	7032      	strb	r2, [r6, #0]
 80041f4:	3604      	adds	r6, #4
 80041f6:	42b7      	cmp	r7, r6
 80041f8:	d005      	beq.n	8004206 <d_cv_qualifiers+0xa6>
 80041fa:	6836      	ldr	r6, [r6, #0]
 80041fc:	7833      	ldrb	r3, [r6, #0]
 80041fe:	2b1a      	cmp	r3, #26
 8004200:	d1f3      	bne.n	80041ea <d_cv_qualifiers+0x8a>
 8004202:	7030      	strb	r0, [r6, #0]
 8004204:	e7f6      	b.n	80041f4 <d_cv_qualifiers+0x94>
 8004206:	4638      	mov	r0, r7
 8004208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800420a:	7031      	strb	r1, [r6, #0]
 800420c:	e7f2      	b.n	80041f4 <d_cv_qualifiers+0x94>
 800420e:	bf00      	nop

08004210 <d_ref_qualifier>:
 8004210:	68c3      	ldr	r3, [r0, #12]
 8004212:	460a      	mov	r2, r1
 8004214:	7819      	ldrb	r1, [r3, #0]
 8004216:	2952      	cmp	r1, #82	; 0x52
 8004218:	d00b      	beq.n	8004232 <d_ref_qualifier+0x22>
 800421a:	294f      	cmp	r1, #79	; 0x4f
 800421c:	d001      	beq.n	8004222 <d_ref_qualifier+0x12>
 800421e:	4610      	mov	r0, r2
 8004220:	4770      	bx	lr
 8004222:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004224:	3301      	adds	r3, #1
 8004226:	3103      	adds	r1, #3
 8004228:	6301      	str	r1, [r0, #48]	; 0x30
 800422a:	60c3      	str	r3, [r0, #12]
 800422c:	2120      	movs	r1, #32
 800422e:	2300      	movs	r3, #0
 8004230:	e730      	b.n	8004094 <d_make_comp>
 8004232:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004234:	3301      	adds	r3, #1
 8004236:	3102      	adds	r1, #2
 8004238:	6301      	str	r1, [r0, #48]	; 0x30
 800423a:	60c3      	str	r3, [r0, #12]
 800423c:	211f      	movs	r1, #31
 800423e:	2300      	movs	r3, #0
 8004240:	e728      	b.n	8004094 <d_make_comp>
 8004242:	bf00      	nop

08004244 <d_substitution>:
 8004244:	68c2      	ldr	r2, [r0, #12]
 8004246:	7813      	ldrb	r3, [r2, #0]
 8004248:	2b53      	cmp	r3, #83	; 0x53
 800424a:	d001      	beq.n	8004250 <d_substitution+0xc>
 800424c:	2000      	movs	r0, #0
 800424e:	4770      	bx	lr
 8004250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004254:	1c53      	adds	r3, r2, #1
 8004256:	60c3      	str	r3, [r0, #12]
 8004258:	7853      	ldrb	r3, [r2, #1]
 800425a:	b1eb      	cbz	r3, 8004298 <d_substitution+0x54>
 800425c:	1c93      	adds	r3, r2, #2
 800425e:	60c3      	str	r3, [r0, #12]
 8004260:	7854      	ldrb	r4, [r2, #1]
 8004262:	2c5f      	cmp	r4, #95	; 0x5f
 8004264:	d126      	bne.n	80042b4 <d_substitution+0x70>
 8004266:	2300      	movs	r3, #0
 8004268:	6a02      	ldr	r2, [r0, #32]
 800426a:	4293      	cmp	r3, r2
 800426c:	d211      	bcs.n	8004292 <d_substitution+0x4e>
 800426e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004270:	69c1      	ldr	r1, [r0, #28]
 8004272:	3201      	adds	r2, #1
 8004274:	6282      	str	r2, [r0, #40]	; 0x28
 8004276:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800427a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800427e:	2101      	movs	r1, #1
 8004280:	4b42      	ldr	r3, [pc, #264]	; (800438c <d_substitution+0x148>)
 8004282:	f103 05c4 	add.w	r5, r3, #196	; 0xc4
 8004286:	781a      	ldrb	r2, [r3, #0]
 8004288:	42a2      	cmp	r2, r4
 800428a:	d03c      	beq.n	8004306 <d_substitution+0xc2>
 800428c:	331c      	adds	r3, #28
 800428e:	42ab      	cmp	r3, r5
 8004290:	d1f9      	bne.n	8004286 <d_substitution+0x42>
 8004292:	2000      	movs	r0, #0
 8004294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004298:	461c      	mov	r4, r3
 800429a:	6883      	ldr	r3, [r0, #8]
 800429c:	071b      	lsls	r3, r3, #28
 800429e:	d4ee      	bmi.n	800427e <d_substitution+0x3a>
 80042a0:	2900      	cmp	r1, #0
 80042a2:	d0ed      	beq.n	8004280 <d_substitution+0x3c>
 80042a4:	68c3      	ldr	r3, [r0, #12]
 80042a6:	7819      	ldrb	r1, [r3, #0]
 80042a8:	3943      	subs	r1, #67	; 0x43
 80042aa:	2901      	cmp	r1, #1
 80042ac:	bf8c      	ite	hi
 80042ae:	2100      	movhi	r1, #0
 80042b0:	2101      	movls	r1, #1
 80042b2:	e7e5      	b.n	8004280 <d_substitution+0x3c>
 80042b4:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80042b8:	b2eb      	uxtb	r3, r5
 80042ba:	2b09      	cmp	r3, #9
 80042bc:	d860      	bhi.n	8004380 <d_substitution+0x13c>
 80042be:	2100      	movs	r1, #0
 80042c0:	e00d      	b.n	80042de <d_substitution+0x9a>
 80042c2:	3b30      	subs	r3, #48	; 0x30
 80042c4:	4299      	cmp	r1, r3
 80042c6:	d8e4      	bhi.n	8004292 <d_substitution+0x4e>
 80042c8:	68c2      	ldr	r2, [r0, #12]
 80042ca:	7814      	ldrb	r4, [r2, #0]
 80042cc:	1c51      	adds	r1, r2, #1
 80042ce:	b11c      	cbz	r4, 80042d8 <d_substitution+0x94>
 80042d0:	60c1      	str	r1, [r0, #12]
 80042d2:	7814      	ldrb	r4, [r2, #0]
 80042d4:	2c5f      	cmp	r4, #95	; 0x5f
 80042d6:	d014      	beq.n	8004302 <d_substitution+0xbe>
 80042d8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80042dc:	4619      	mov	r1, r3
 80042de:	b2ed      	uxtb	r5, r5
 80042e0:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 80042e4:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80042e8:	2d09      	cmp	r5, #9
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80042f0:	d9e7      	bls.n	80042c2 <d_substitution+0x7e>
 80042f2:	2a19      	cmp	r2, #25
 80042f4:	d8cd      	bhi.n	8004292 <d_substitution+0x4e>
 80042f6:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 80042fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80042fe:	3b37      	subs	r3, #55	; 0x37
 8004300:	e7e0      	b.n	80042c4 <d_substitution+0x80>
 8004302:	3301      	adds	r3, #1
 8004304:	e7b0      	b.n	8004268 <d_substitution+0x24>
 8004306:	695a      	ldr	r2, [r3, #20]
 8004308:	2a00      	cmp	r2, #0
 800430a:	d034      	beq.n	8004376 <d_substitution+0x132>
 800430c:	6944      	ldr	r4, [r0, #20]
 800430e:	6985      	ldr	r5, [r0, #24]
 8004310:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8004314:	42ac      	cmp	r4, r5
 8004316:	da2c      	bge.n	8004372 <d_substitution+0x12e>
 8004318:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 800431c:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8004320:	00b6      	lsls	r6, r6, #2
 8004322:	3401      	adds	r4, #1
 8004324:	eb1e 0706 	adds.w	r7, lr, r6
 8004328:	6144      	str	r4, [r0, #20]
 800432a:	d027      	beq.n	800437c <d_substitution+0x138>
 800432c:	f04f 0818 	mov.w	r8, #24
 8004330:	f80e 8006 	strb.w	r8, [lr, r6]
 8004334:	463e      	mov	r6, r7
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	f8c7 c008 	str.w	ip, [r7, #8]
 800433c:	62c6      	str	r6, [r0, #44]	; 0x2c
 800433e:	b1a9      	cbz	r1, 800436c <d_substitution+0x128>
 8004340:	68de      	ldr	r6, [r3, #12]
 8004342:	6919      	ldr	r1, [r3, #16]
 8004344:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004346:	42a5      	cmp	r5, r4
 8004348:	440a      	add	r2, r1
 800434a:	6302      	str	r2, [r0, #48]	; 0x30
 800434c:	dda1      	ble.n	8004292 <d_substitution+0x4e>
 800434e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8004352:	6905      	ldr	r5, [r0, #16]
 8004354:	1c63      	adds	r3, r4, #1
 8004356:	0092      	lsls	r2, r2, #2
 8004358:	6143      	str	r3, [r0, #20]
 800435a:	18ab      	adds	r3, r5, r2
 800435c:	d099      	beq.n	8004292 <d_substitution+0x4e>
 800435e:	2018      	movs	r0, #24
 8004360:	54a8      	strb	r0, [r5, r2]
 8004362:	605e      	str	r6, [r3, #4]
 8004364:	6099      	str	r1, [r3, #8]
 8004366:	4618      	mov	r0, r3
 8004368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800436c:	685e      	ldr	r6, [r3, #4]
 800436e:	6899      	ldr	r1, [r3, #8]
 8004370:	e7e8      	b.n	8004344 <d_substitution+0x100>
 8004372:	2600      	movs	r6, #0
 8004374:	e7e2      	b.n	800433c <d_substitution+0xf8>
 8004376:	6985      	ldr	r5, [r0, #24]
 8004378:	6944      	ldr	r4, [r0, #20]
 800437a:	e7e0      	b.n	800433e <d_substitution+0xfa>
 800437c:	463e      	mov	r6, r7
 800437e:	e7dd      	b.n	800433c <d_substitution+0xf8>
 8004380:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004384:	2b19      	cmp	r3, #25
 8004386:	d99a      	bls.n	80042be <d_substitution+0x7a>
 8004388:	e787      	b.n	800429a <d_substitution+0x56>
 800438a:	bf00      	nop
 800438c:	0800dde0 	.word	0x0800dde0

08004390 <d_count_templates_scopes>:
 8004390:	b570      	push	{r4, r5, r6, lr}
 8004392:	4605      	mov	r5, r0
 8004394:	460e      	mov	r6, r1
 8004396:	4614      	mov	r4, r2
 8004398:	2a00      	cmp	r2, #0
 800439a:	d048      	beq.n	800442e <d_count_templates_scopes+0x9e>
 800439c:	7823      	ldrb	r3, [r4, #0]
 800439e:	3b01      	subs	r3, #1
 80043a0:	2b4a      	cmp	r3, #74	; 0x4a
 80043a2:	d82a      	bhi.n	80043fa <d_count_templates_scopes+0x6a>
 80043a4:	e8df f003 	tbb	[pc, r3]
 80043a8:	3e353535 	.word	0x3e353535
 80043ac:	26262929 	.word	0x26262929
 80043b0:	35353535 	.word	0x35353535
 80043b4:	35353535 	.word	0x35353535
 80043b8:	35353535 	.word	0x35353535
 80043bc:	29353535 	.word	0x29353535
 80043c0:	35353535 	.word	0x35353535
 80043c4:	35353535 	.word	0x35353535
 80043c8:	2e2e3535 	.word	0x2e2e3535
 80043cc:	35293535 	.word	0x35293535
 80043d0:	35353535 	.word	0x35353535
 80043d4:	35353535 	.word	0x35353535
 80043d8:	35352629 	.word	0x35352629
 80043dc:	35353535 	.word	0x35353535
 80043e0:	35353535 	.word	0x35353535
 80043e4:	29293535 	.word	0x29293535
 80043e8:	2a2a2a35 	.word	0x2a2a2a35
 80043ec:	3535292a 	.word	0x3535292a
 80043f0:	3535      	.short	0x3535
 80043f2:	35          	.byte	0x35
 80043f3:	00          	.byte	0x00
 80043f4:	68a4      	ldr	r4, [r4, #8]
 80043f6:	2c00      	cmp	r4, #0
 80043f8:	d1d0      	bne.n	800439c <d_count_templates_scopes+0xc>
 80043fa:	bd70      	pop	{r4, r5, r6, pc}
 80043fc:	6864      	ldr	r4, [r4, #4]
 80043fe:	2c00      	cmp	r4, #0
 8004400:	d1cc      	bne.n	800439c <d_count_templates_scopes+0xc>
 8004402:	e7fa      	b.n	80043fa <d_count_templates_scopes+0x6a>
 8004404:	6862      	ldr	r2, [r4, #4]
 8004406:	7813      	ldrb	r3, [r2, #0]
 8004408:	2b05      	cmp	r3, #5
 800440a:	d103      	bne.n	8004414 <d_count_templates_scopes+0x84>
 800440c:	6833      	ldr	r3, [r6, #0]
 800440e:	3301      	adds	r3, #1
 8004410:	6033      	str	r3, [r6, #0]
 8004412:	6862      	ldr	r2, [r4, #4]
 8004414:	4628      	mov	r0, r5
 8004416:	4631      	mov	r1, r6
 8004418:	f7ff ffba 	bl	8004390 <d_count_templates_scopes>
 800441c:	68a4      	ldr	r4, [r4, #8]
 800441e:	2c00      	cmp	r4, #0
 8004420:	d1bc      	bne.n	800439c <d_count_templates_scopes+0xc>
 8004422:	e7ea      	b.n	80043fa <d_count_templates_scopes+0x6a>
 8004424:	682b      	ldr	r3, [r5, #0]
 8004426:	3301      	adds	r3, #1
 8004428:	602b      	str	r3, [r5, #0]
 800442a:	6862      	ldr	r2, [r4, #4]
 800442c:	e7f2      	b.n	8004414 <d_count_templates_scopes+0x84>
 800442e:	bd70      	pop	{r4, r5, r6, pc}

08004430 <d_append_char>:
 8004430:	b570      	push	{r4, r5, r6, lr}
 8004432:	460d      	mov	r5, r1
 8004434:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004438:	29ff      	cmp	r1, #255	; 0xff
 800443a:	4604      	mov	r4, r0
 800443c:	d006      	beq.n	800444c <d_append_char+0x1c>
 800443e:	1c4b      	adds	r3, r1, #1
 8004440:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004444:	5465      	strb	r5, [r4, r1]
 8004446:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	2600      	movs	r6, #0
 800444e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004452:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8004456:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800445a:	4798      	blx	r3
 800445c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004460:	4631      	mov	r1, r6
 8004462:	3301      	adds	r3, #1
 8004464:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004468:	2301      	movs	r3, #1
 800446a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800446e:	5465      	strb	r5, [r4, r1]
 8004470:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004474:	bd70      	pop	{r4, r5, r6, pc}
 8004476:	bf00      	nop

08004478 <d_number.isra.0>:
 8004478:	b470      	push	{r4, r5, r6}
 800447a:	6803      	ldr	r3, [r0, #0]
 800447c:	7819      	ldrb	r1, [r3, #0]
 800447e:	296e      	cmp	r1, #110	; 0x6e
 8004480:	d01b      	beq.n	80044ba <d_number.isra.0+0x42>
 8004482:	2500      	movs	r5, #0
 8004484:	462e      	mov	r6, r5
 8004486:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800448a:	2b09      	cmp	r3, #9
 800448c:	bf88      	it	hi
 800448e:	2300      	movhi	r3, #0
 8004490:	d80e      	bhi.n	80044b0 <d_number.isra.0+0x38>
 8004492:	6802      	ldr	r2, [r0, #0]
 8004494:	2300      	movs	r3, #0
 8004496:	3201      	adds	r2, #1
 8004498:	6002      	str	r2, [r0, #0]
 800449a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800449e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80044a2:	7811      	ldrb	r1, [r2, #0]
 80044a4:	f1a1 0430 	sub.w	r4, r1, #48	; 0x30
 80044a8:	2c09      	cmp	r4, #9
 80044aa:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 80044ae:	d9f2      	bls.n	8004496 <d_number.isra.0+0x1e>
 80044b0:	ea83 0006 	eor.w	r0, r3, r6
 80044b4:	4428      	add	r0, r5
 80044b6:	bc70      	pop	{r4, r5, r6}
 80044b8:	4770      	bx	lr
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	6002      	str	r2, [r0, #0]
 80044be:	7859      	ldrb	r1, [r3, #1]
 80044c0:	2501      	movs	r5, #1
 80044c2:	f04f 36ff 	mov.w	r6, #4294967295
 80044c6:	e7de      	b.n	8004486 <d_number.isra.0+0xe>

080044c8 <d_number_component>:
 80044c8:	6943      	ldr	r3, [r0, #20]
 80044ca:	6982      	ldr	r2, [r0, #24]
 80044cc:	4293      	cmp	r3, r2
 80044ce:	da14      	bge.n	80044fa <d_number_component+0x32>
 80044d0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80044d4:	6901      	ldr	r1, [r0, #16]
 80044d6:	0092      	lsls	r2, r2, #2
 80044d8:	b510      	push	{r4, lr}
 80044da:	3301      	adds	r3, #1
 80044dc:	188c      	adds	r4, r1, r2
 80044de:	6143      	str	r3, [r0, #20]
 80044e0:	d008      	beq.n	80044f4 <d_number_component+0x2c>
 80044e2:	2340      	movs	r3, #64	; 0x40
 80044e4:	548b      	strb	r3, [r1, r2]
 80044e6:	300c      	adds	r0, #12
 80044e8:	f7ff ffc6 	bl	8004478 <d_number.isra.0>
 80044ec:	4623      	mov	r3, r4
 80044ee:	6060      	str	r0, [r4, #4]
 80044f0:	4618      	mov	r0, r3
 80044f2:	bd10      	pop	{r4, pc}
 80044f4:	4623      	mov	r3, r4
 80044f6:	4618      	mov	r0, r3
 80044f8:	bd10      	pop	{r4, pc}
 80044fa:	2300      	movs	r3, #0
 80044fc:	4618      	mov	r0, r3
 80044fe:	4770      	bx	lr

08004500 <d_compact_number>:
 8004500:	b510      	push	{r4, lr}
 8004502:	68c3      	ldr	r3, [r0, #12]
 8004504:	781a      	ldrb	r2, [r3, #0]
 8004506:	2a5f      	cmp	r2, #95	; 0x5f
 8004508:	4604      	mov	r4, r0
 800450a:	d00b      	beq.n	8004524 <d_compact_number+0x24>
 800450c:	2a6e      	cmp	r2, #110	; 0x6e
 800450e:	d006      	beq.n	800451e <d_compact_number+0x1e>
 8004510:	300c      	adds	r0, #12
 8004512:	f7ff ffb1 	bl	8004478 <d_number.isra.0>
 8004516:	68e3      	ldr	r3, [r4, #12]
 8004518:	781a      	ldrb	r2, [r3, #0]
 800451a:	2a5f      	cmp	r2, #95	; 0x5f
 800451c:	d006      	beq.n	800452c <d_compact_number+0x2c>
 800451e:	f04f 30ff 	mov.w	r0, #4294967295
 8004522:	bd10      	pop	{r4, pc}
 8004524:	2000      	movs	r0, #0
 8004526:	3301      	adds	r3, #1
 8004528:	60e3      	str	r3, [r4, #12]
 800452a:	bd10      	pop	{r4, pc}
 800452c:	3001      	adds	r0, #1
 800452e:	e7fa      	b.n	8004526 <d_compact_number+0x26>

08004530 <d_template_param>:
 8004530:	b538      	push	{r3, r4, r5, lr}
 8004532:	68c3      	ldr	r3, [r0, #12]
 8004534:	781a      	ldrb	r2, [r3, #0]
 8004536:	2a54      	cmp	r2, #84	; 0x54
 8004538:	4604      	mov	r4, r0
 800453a:	d001      	beq.n	8004540 <d_template_param+0x10>
 800453c:	2000      	movs	r0, #0
 800453e:	bd38      	pop	{r3, r4, r5, pc}
 8004540:	3301      	adds	r3, #1
 8004542:	60c3      	str	r3, [r0, #12]
 8004544:	f7ff ffdc 	bl	8004500 <d_compact_number>
 8004548:	1e05      	subs	r5, r0, #0
 800454a:	dbf7      	blt.n	800453c <d_template_param+0xc>
 800454c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800454e:	6963      	ldr	r3, [r4, #20]
 8004550:	69a1      	ldr	r1, [r4, #24]
 8004552:	3201      	adds	r2, #1
 8004554:	428b      	cmp	r3, r1
 8004556:	62a2      	str	r2, [r4, #40]	; 0x28
 8004558:	daf0      	bge.n	800453c <d_template_param+0xc>
 800455a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800455e:	6921      	ldr	r1, [r4, #16]
 8004560:	3301      	adds	r3, #1
 8004562:	0092      	lsls	r2, r2, #2
 8004564:	6163      	str	r3, [r4, #20]
 8004566:	188b      	adds	r3, r1, r2
 8004568:	d0e8      	beq.n	800453c <d_template_param+0xc>
 800456a:	2405      	movs	r4, #5
 800456c:	548c      	strb	r4, [r1, r2]
 800456e:	605d      	str	r5, [r3, #4]
 8004570:	4618      	mov	r0, r3
 8004572:	bd38      	pop	{r3, r4, r5, pc}

08004574 <d_discriminator>:
 8004574:	b508      	push	{r3, lr}
 8004576:	68c3      	ldr	r3, [r0, #12]
 8004578:	781a      	ldrb	r2, [r3, #0]
 800457a:	2a5f      	cmp	r2, #95	; 0x5f
 800457c:	d001      	beq.n	8004582 <d_discriminator+0xe>
 800457e:	2001      	movs	r0, #1
 8004580:	bd08      	pop	{r3, pc}
 8004582:	3301      	adds	r3, #1
 8004584:	f840 3f0c 	str.w	r3, [r0, #12]!
 8004588:	f7ff ff76 	bl	8004478 <d_number.isra.0>
 800458c:	43c0      	mvns	r0, r0
 800458e:	0fc0      	lsrs	r0, r0, #31
 8004590:	bd08      	pop	{r3, pc}
 8004592:	bf00      	nop

08004594 <d_source_name>:
 8004594:	b570      	push	{r4, r5, r6, lr}
 8004596:	4604      	mov	r4, r0
 8004598:	300c      	adds	r0, #12
 800459a:	f7ff ff6d 	bl	8004478 <d_number.isra.0>
 800459e:	1e06      	subs	r6, r0, #0
 80045a0:	dd32      	ble.n	8004608 <d_source_name+0x74>
 80045a2:	68e5      	ldr	r5, [r4, #12]
 80045a4:	6863      	ldr	r3, [r4, #4]
 80045a6:	1b5b      	subs	r3, r3, r5
 80045a8:	429e      	cmp	r6, r3
 80045aa:	dc2f      	bgt.n	800460c <d_source_name+0x78>
 80045ac:	68a2      	ldr	r2, [r4, #8]
 80045ae:	19ab      	adds	r3, r5, r6
 80045b0:	0752      	lsls	r2, r2, #29
 80045b2:	60e3      	str	r3, [r4, #12]
 80045b4:	d415      	bmi.n	80045e2 <d_source_name+0x4e>
 80045b6:	2e09      	cmp	r6, #9
 80045b8:	dd0c      	ble.n	80045d4 <d_source_name+0x40>
 80045ba:	4628      	mov	r0, r5
 80045bc:	4914      	ldr	r1, [pc, #80]	; (8004610 <d_source_name+0x7c>)
 80045be:	2208      	movs	r2, #8
 80045c0:	f008 fa11 	bl	800c9e6 <memcmp>
 80045c4:	b930      	cbnz	r0, 80045d4 <d_source_name+0x40>
 80045c6:	7a2b      	ldrb	r3, [r5, #8]
 80045c8:	2b2e      	cmp	r3, #46	; 0x2e
 80045ca:	d010      	beq.n	80045ee <d_source_name+0x5a>
 80045cc:	2b5f      	cmp	r3, #95	; 0x5f
 80045ce:	d00e      	beq.n	80045ee <d_source_name+0x5a>
 80045d0:	2b24      	cmp	r3, #36	; 0x24
 80045d2:	d00c      	beq.n	80045ee <d_source_name+0x5a>
 80045d4:	4629      	mov	r1, r5
 80045d6:	4632      	mov	r2, r6
 80045d8:	4620      	mov	r0, r4
 80045da:	f7ff fda7 	bl	800412c <d_make_name>
 80045de:	62e0      	str	r0, [r4, #44]	; 0x2c
 80045e0:	bd70      	pop	{r4, r5, r6, pc}
 80045e2:	5daa      	ldrb	r2, [r5, r6]
 80045e4:	2a24      	cmp	r2, #36	; 0x24
 80045e6:	bf04      	itt	eq
 80045e8:	3301      	addeq	r3, #1
 80045ea:	60e3      	streq	r3, [r4, #12]
 80045ec:	e7e3      	b.n	80045b6 <d_source_name+0x22>
 80045ee:	7a6b      	ldrb	r3, [r5, #9]
 80045f0:	2b4e      	cmp	r3, #78	; 0x4e
 80045f2:	d1ef      	bne.n	80045d4 <d_source_name+0x40>
 80045f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80045f6:	4907      	ldr	r1, [pc, #28]	; (8004614 <d_source_name+0x80>)
 80045f8:	3316      	adds	r3, #22
 80045fa:	1b9e      	subs	r6, r3, r6
 80045fc:	6326      	str	r6, [r4, #48]	; 0x30
 80045fe:	4620      	mov	r0, r4
 8004600:	2215      	movs	r2, #21
 8004602:	f7ff fd93 	bl	800412c <d_make_name>
 8004606:	e7ea      	b.n	80045de <d_source_name+0x4a>
 8004608:	2000      	movs	r0, #0
 800460a:	bd70      	pop	{r4, r5, r6, pc}
 800460c:	2000      	movs	r0, #0
 800460e:	e7e6      	b.n	80045de <d_source_name+0x4a>
 8004610:	0800e518 	.word	0x0800e518
 8004614:	0800e524 	.word	0x0800e524

08004618 <d_call_offset>:
 8004618:	b538      	push	{r3, r4, r5, lr}
 800461a:	4604      	mov	r4, r0
 800461c:	b929      	cbnz	r1, 800462a <d_call_offset+0x12>
 800461e:	68c3      	ldr	r3, [r0, #12]
 8004620:	781a      	ldrb	r2, [r3, #0]
 8004622:	b132      	cbz	r2, 8004632 <d_call_offset+0x1a>
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	60c2      	str	r2, [r0, #12]
 8004628:	7819      	ldrb	r1, [r3, #0]
 800462a:	2968      	cmp	r1, #104	; 0x68
 800462c:	d012      	beq.n	8004654 <d_call_offset+0x3c>
 800462e:	2976      	cmp	r1, #118	; 0x76
 8004630:	d001      	beq.n	8004636 <d_call_offset+0x1e>
 8004632:	2000      	movs	r0, #0
 8004634:	bd38      	pop	{r3, r4, r5, pc}
 8004636:	f104 050c 	add.w	r5, r4, #12
 800463a:	4628      	mov	r0, r5
 800463c:	f7ff ff1c 	bl	8004478 <d_number.isra.0>
 8004640:	68e3      	ldr	r3, [r4, #12]
 8004642:	781a      	ldrb	r2, [r3, #0]
 8004644:	2a5f      	cmp	r2, #95	; 0x5f
 8004646:	d1f4      	bne.n	8004632 <d_call_offset+0x1a>
 8004648:	3301      	adds	r3, #1
 800464a:	60e3      	str	r3, [r4, #12]
 800464c:	4628      	mov	r0, r5
 800464e:	f7ff ff13 	bl	8004478 <d_number.isra.0>
 8004652:	e003      	b.n	800465c <d_call_offset+0x44>
 8004654:	f104 000c 	add.w	r0, r4, #12
 8004658:	f7ff ff0e 	bl	8004478 <d_number.isra.0>
 800465c:	68e3      	ldr	r3, [r4, #12]
 800465e:	781a      	ldrb	r2, [r3, #0]
 8004660:	2a5f      	cmp	r2, #95	; 0x5f
 8004662:	d1e6      	bne.n	8004632 <d_call_offset+0x1a>
 8004664:	3301      	adds	r3, #1
 8004666:	60e3      	str	r3, [r4, #12]
 8004668:	2001      	movs	r0, #1
 800466a:	bd38      	pop	{r3, r4, r5, pc}

0800466c <d_lookup_template_argument.isra.6>:
 800466c:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8004670:	4602      	mov	r2, r0
 8004672:	b1c3      	cbz	r3, 80046a6 <d_lookup_template_argument.isra.6+0x3a>
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	680b      	ldr	r3, [r1, #0]
 8004678:	6890      	ldr	r0, [r2, #8]
 800467a:	b170      	cbz	r0, 800469a <d_lookup_template_argument.isra.6+0x2e>
 800467c:	7802      	ldrb	r2, [r0, #0]
 800467e:	2a2f      	cmp	r2, #47	; 0x2f
 8004680:	d10d      	bne.n	800469e <d_lookup_template_argument.isra.6+0x32>
 8004682:	2b00      	cmp	r3, #0
 8004684:	dc04      	bgt.n	8004690 <d_lookup_template_argument.isra.6+0x24>
 8004686:	e009      	b.n	800469c <d_lookup_template_argument.isra.6+0x30>
 8004688:	7802      	ldrb	r2, [r0, #0]
 800468a:	2a2f      	cmp	r2, #47	; 0x2f
 800468c:	d107      	bne.n	800469e <d_lookup_template_argument.isra.6+0x32>
 800468e:	b143      	cbz	r3, 80046a2 <d_lookup_template_argument.isra.6+0x36>
 8004690:	6880      	ldr	r0, [r0, #8]
 8004692:	3b01      	subs	r3, #1
 8004694:	2800      	cmp	r0, #0
 8004696:	d1f7      	bne.n	8004688 <d_lookup_template_argument.isra.6+0x1c>
 8004698:	4770      	bx	lr
 800469a:	4770      	bx	lr
 800469c:	d001      	beq.n	80046a2 <d_lookup_template_argument.isra.6+0x36>
 800469e:	2000      	movs	r0, #0
 80046a0:	4770      	bx	lr
 80046a2:	6840      	ldr	r0, [r0, #4]
 80046a4:	4770      	bx	lr
 80046a6:	2101      	movs	r1, #1
 80046a8:	4618      	mov	r0, r3
 80046aa:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
 80046ae:	4770      	bx	lr

080046b0 <d_find_pack>:
 80046b0:	b538      	push	{r3, r4, r5, lr}
 80046b2:	4605      	mov	r5, r0
 80046b4:	460c      	mov	r4, r1
 80046b6:	b391      	cbz	r1, 800471e <d_find_pack+0x6e>
 80046b8:	7823      	ldrb	r3, [r4, #0]
 80046ba:	2b4a      	cmp	r3, #74	; 0x4a
 80046bc:	d827      	bhi.n	800470e <d_find_pack+0x5e>
 80046be:	e8df f003 	tbb	[pc, r3]
 80046c2:	262e      	.short	0x262e
 80046c4:	30262626 	.word	0x30262626
 80046c8:	262b2b2e 	.word	0x262b2b2e
 80046cc:	26262626 	.word	0x26262626
 80046d0:	26262626 	.word	0x26262626
 80046d4:	26262626 	.word	0x26262626
 80046d8:	262e2626 	.word	0x262e2626
 80046dc:	26262626 	.word	0x26262626
 80046e0:	26262626 	.word	0x26262626
 80046e4:	26262626 	.word	0x26262626
 80046e8:	26262e26 	.word	0x26262e26
 80046ec:	26262626 	.word	0x26262626
 80046f0:	2e262626 	.word	0x2e262626
 80046f4:	2626262b 	.word	0x2626262b
 80046f8:	26262626 	.word	0x26262626
 80046fc:	26262626 	.word	0x26262626
 8004700:	26262e26 	.word	0x26262e26
 8004704:	262e2626 	.word	0x262e2626
 8004708:	2e26262e 	.word	0x2e26262e
 800470c:	2e          	.byte	0x2e
 800470d:	00          	.byte	0x00
 800470e:	4628      	mov	r0, r5
 8004710:	6861      	ldr	r1, [r4, #4]
 8004712:	f7ff ffcd 	bl	80046b0 <d_find_pack>
 8004716:	b918      	cbnz	r0, 8004720 <d_find_pack+0x70>
 8004718:	68a4      	ldr	r4, [r4, #8]
 800471a:	2c00      	cmp	r4, #0
 800471c:	d1cc      	bne.n	80046b8 <d_find_pack+0x8>
 800471e:	2000      	movs	r0, #0
 8004720:	bd38      	pop	{r3, r4, r5, pc}
 8004722:	4628      	mov	r0, r5
 8004724:	1d21      	adds	r1, r4, #4
 8004726:	f7ff ffa1 	bl	800466c <d_lookup_template_argument.isra.6>
 800472a:	2800      	cmp	r0, #0
 800472c:	d0f7      	beq.n	800471e <d_find_pack+0x6e>
 800472e:	7803      	ldrb	r3, [r0, #0]
 8004730:	2b2f      	cmp	r3, #47	; 0x2f
 8004732:	d1f4      	bne.n	800471e <d_find_pack+0x6e>
 8004734:	bd38      	pop	{r3, r4, r5, pc}
 8004736:	bf00      	nop

08004738 <d_growable_string_callback_adapter>:
 8004738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800473a:	6853      	ldr	r3, [r2, #4]
 800473c:	6894      	ldr	r4, [r2, #8]
 800473e:	3301      	adds	r3, #1
 8004740:	440b      	add	r3, r1
 8004742:	42a3      	cmp	r3, r4
 8004744:	b083      	sub	sp, #12
 8004746:	4615      	mov	r5, r2
 8004748:	460e      	mov	r6, r1
 800474a:	4607      	mov	r7, r0
 800474c:	d813      	bhi.n	8004776 <d_growable_string_callback_adapter+0x3e>
 800474e:	68ec      	ldr	r4, [r5, #12]
 8004750:	b10c      	cbz	r4, 8004756 <d_growable_string_callback_adapter+0x1e>
 8004752:	b003      	add	sp, #12
 8004754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004756:	e895 0009 	ldmia.w	r5, {r0, r3}
 800475a:	4632      	mov	r2, r6
 800475c:	4639      	mov	r1, r7
 800475e:	4418      	add	r0, r3
 8004760:	f008 f951 	bl	800ca06 <memcpy>
 8004764:	682b      	ldr	r3, [r5, #0]
 8004766:	686a      	ldr	r2, [r5, #4]
 8004768:	4433      	add	r3, r6
 800476a:	549c      	strb	r4, [r3, r2]
 800476c:	686b      	ldr	r3, [r5, #4]
 800476e:	441e      	add	r6, r3
 8004770:	606e      	str	r6, [r5, #4]
 8004772:	b003      	add	sp, #12
 8004774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004776:	68d2      	ldr	r2, [r2, #12]
 8004778:	2a00      	cmp	r2, #0
 800477a:	d1ea      	bne.n	8004752 <d_growable_string_callback_adapter+0x1a>
 800477c:	b91c      	cbnz	r4, 8004786 <d_growable_string_callback_adapter+0x4e>
 800477e:	2b02      	cmp	r3, #2
 8004780:	f04f 0402 	mov.w	r4, #2
 8004784:	d902      	bls.n	800478c <d_growable_string_callback_adapter+0x54>
 8004786:	0064      	lsls	r4, r4, #1
 8004788:	42a3      	cmp	r3, r4
 800478a:	d8fc      	bhi.n	8004786 <d_growable_string_callback_adapter+0x4e>
 800478c:	6828      	ldr	r0, [r5, #0]
 800478e:	4621      	mov	r1, r4
 8004790:	f008 fa02 	bl	800cb98 <realloc>
 8004794:	b110      	cbz	r0, 800479c <d_growable_string_callback_adapter+0x64>
 8004796:	6028      	str	r0, [r5, #0]
 8004798:	60ac      	str	r4, [r5, #8]
 800479a:	e7d8      	b.n	800474e <d_growable_string_callback_adapter+0x16>
 800479c:	9001      	str	r0, [sp, #4]
 800479e:	6828      	ldr	r0, [r5, #0]
 80047a0:	f008 f90a 	bl	800c9b8 <free>
 80047a4:	9b01      	ldr	r3, [sp, #4]
 80047a6:	602b      	str	r3, [r5, #0]
 80047a8:	2201      	movs	r2, #1
 80047aa:	606b      	str	r3, [r5, #4]
 80047ac:	60ab      	str	r3, [r5, #8]
 80047ae:	60ea      	str	r2, [r5, #12]
 80047b0:	e7cf      	b.n	8004752 <d_growable_string_callback_adapter+0x1a>
 80047b2:	bf00      	nop

080047b4 <d_append_string>:
 80047b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047b8:	4604      	mov	r4, r0
 80047ba:	4608      	mov	r0, r1
 80047bc:	460d      	mov	r5, r1
 80047be:	f008 faba 	bl	800cd36 <strlen>
 80047c2:	b348      	cbz	r0, 8004818 <d_append_string+0x64>
 80047c4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80047c8:	182f      	adds	r7, r5, r0
 80047ca:	f04f 0800 	mov.w	r8, #0
 80047ce:	e009      	b.n	80047e4 <d_append_string+0x30>
 80047d0:	460b      	mov	r3, r1
 80047d2:	42bd      	cmp	r5, r7
 80047d4:	f101 0101 	add.w	r1, r1, #1
 80047d8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80047dc:	54e6      	strb	r6, [r4, r3]
 80047de:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80047e2:	d019      	beq.n	8004818 <d_append_string+0x64>
 80047e4:	29ff      	cmp	r1, #255	; 0xff
 80047e6:	f815 6b01 	ldrb.w	r6, [r5], #1
 80047ea:	d1f1      	bne.n	80047d0 <d_append_string+0x1c>
 80047ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80047f0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80047f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80047f8:	4620      	mov	r0, r4
 80047fa:	4798      	blx	r3
 80047fc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004800:	3301      	adds	r3, #1
 8004802:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004806:	2300      	movs	r3, #0
 8004808:	2101      	movs	r1, #1
 800480a:	42bd      	cmp	r5, r7
 800480c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004810:	54e6      	strb	r6, [r4, r3]
 8004812:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004816:	d1e5      	bne.n	80047e4 <d_append_string+0x30>
 8004818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800481c <d_append_num>:
 800481c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004820:	b088      	sub	sp, #32
 8004822:	460a      	mov	r2, r1
 8004824:	4604      	mov	r4, r0
 8004826:	491b      	ldr	r1, [pc, #108]	; (8004894 <d_append_num+0x78>)
 8004828:	a801      	add	r0, sp, #4
 800482a:	f008 fa13 	bl	800cc54 <siprintf>
 800482e:	a801      	add	r0, sp, #4
 8004830:	f008 fa81 	bl	800cd36 <strlen>
 8004834:	b350      	cbz	r0, 800488c <d_append_num+0x70>
 8004836:	ad01      	add	r5, sp, #4
 8004838:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800483c:	182f      	adds	r7, r5, r0
 800483e:	f04f 0800 	mov.w	r8, #0
 8004842:	e009      	b.n	8004858 <d_append_num+0x3c>
 8004844:	460b      	mov	r3, r1
 8004846:	42bd      	cmp	r5, r7
 8004848:	f101 0101 	add.w	r1, r1, #1
 800484c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004850:	54e6      	strb	r6, [r4, r3]
 8004852:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004856:	d019      	beq.n	800488c <d_append_num+0x70>
 8004858:	29ff      	cmp	r1, #255	; 0xff
 800485a:	f815 6b01 	ldrb.w	r6, [r5], #1
 800485e:	d1f1      	bne.n	8004844 <d_append_num+0x28>
 8004860:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004864:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004868:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800486c:	4620      	mov	r0, r4
 800486e:	4798      	blx	r3
 8004870:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004874:	3301      	adds	r3, #1
 8004876:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800487a:	2300      	movs	r3, #0
 800487c:	2101      	movs	r1, #1
 800487e:	42bd      	cmp	r5, r7
 8004880:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004884:	54e6      	strb	r6, [r4, r3]
 8004886:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800488a:	d1e5      	bne.n	8004858 <d_append_num+0x3c>
 800488c:	b008      	add	sp, #32
 800488e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004892:	bf00      	nop
 8004894:	0800e53c 	.word	0x0800e53c

08004898 <d_print_comp>:
 8004898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489c:	4604      	mov	r4, r0
 800489e:	b095      	sub	sp, #84	; 0x54
 80048a0:	4615      	mov	r5, r2
 80048a2:	2a00      	cmp	r2, #0
 80048a4:	f000 80a2 	beq.w	80049ec <d_print_comp+0x154>
 80048a8:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f040 8095 	bne.w	80049dc <d_print_comp+0x144>
 80048b2:	7813      	ldrb	r3, [r2, #0]
 80048b4:	460e      	mov	r6, r1
 80048b6:	2b4b      	cmp	r3, #75	; 0x4b
 80048b8:	f201 80a2 	bhi.w	8005a00 <d_print_comp+0x1168>
 80048bc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80048c0:	07410874 	.word	0x07410874
 80048c4:	07e20741 	.word	0x07e20741
 80048c8:	0729004c 	.word	0x0729004c
 80048cc:	064b0701 	.word	0x064b0701
 80048d0:	07940638 	.word	0x07940638
 80048d4:	07bb076d 	.word	0x07bb076d
 80048d8:	06da0650 	.word	0x06da0650
 80048dc:	06b30677 	.word	0x06b30677
 80048e0:	061104d7 	.word	0x061104d7
 80048e4:	05c305ea 	.word	0x05c305ea
 80048e8:	0575059c 	.word	0x0575059c
 80048ec:	0527054e 	.word	0x0527054e
 80048f0:	04bd04fe 	.word	0x04bd04fe
 80048f4:	04bd04bd 	.word	0x04bd04bd
 80048f8:	04b804b8 	.word	0x04b804b8
 80048fc:	04b804b8 	.word	0x04b804b8
 8004900:	04b804b8 	.word	0x04b804b8
 8004904:	048604b8 	.word	0x048604b8
 8004908:	04b80486 	.word	0x04b80486
 800490c:	045904b8 	.word	0x045904b8
 8004910:	04410455 	.word	0x04410455
 8004914:	03a603d6 	.word	0x03a603d6
 8004918:	03a60333 	.word	0x03a60333
 800491c:	03000300 	.word	0x03000300
 8004920:	02a402dd 	.word	0x02a402dd
 8004924:	0376037f 	.word	0x0376037f
 8004928:	01ee0200 	.word	0x01ee0200
 800492c:	02040222 	.word	0x02040222
 8004930:	01ea026c 	.word	0x01ea026c
 8004934:	01bc01ea 	.word	0x01bc01ea
 8004938:	01b301bc 	.word	0x01b301bc
 800493c:	01a601aa 	.word	0x01a601aa
 8004940:	016e017b 	.word	0x016e017b
 8004944:	015c0165 	.word	0x015c0165
 8004948:	08a00146 	.word	0x08a00146
 800494c:	017f0139 	.word	0x017f0139
 8004950:	00c60112 	.word	0x00c60112
 8004954:	009c00ad 	.word	0x009c00ad
 8004958:	2300      	movs	r3, #0
 800495a:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
 800495e:	f8d0 813c 	ldr.w	r8, [r0, #316]	; 0x13c
 8004962:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8004966:	f8c0 513c 	str.w	r5, [r0, #316]	; 0x13c
 800496a:	074a      	lsls	r2, r1, #29
 800496c:	686f      	ldr	r7, [r5, #4]
 800496e:	d505      	bpl.n	800497c <d_print_comp+0xe4>
 8004970:	783b      	ldrb	r3, [r7, #0]
 8004972:	b91b      	cbnz	r3, 800497c <d_print_comp+0xe4>
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	2a06      	cmp	r2, #6
 8004978:	f001 851d 	beq.w	80063b6 <d_print_comp+0x1b1e>
 800497c:	463a      	mov	r2, r7
 800497e:	4620      	mov	r0, r4
 8004980:	4631      	mov	r1, r6
 8004982:	f7ff ff89 	bl	8004898 <d_print_comp>
 8004986:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800498a:	2b3c      	cmp	r3, #60	; 0x3c
 800498c:	f001 84c0 	beq.w	8006310 <d_print_comp+0x1a78>
 8004990:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004994:	29ff      	cmp	r1, #255	; 0xff
 8004996:	f001 83e5 	beq.w	8006164 <d_print_comp+0x18cc>
 800499a:	1c4a      	adds	r2, r1, #1
 800499c:	233c      	movs	r3, #60	; 0x3c
 800499e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80049a2:	5463      	strb	r3, [r4, r1]
 80049a4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80049a8:	4631      	mov	r1, r6
 80049aa:	68aa      	ldr	r2, [r5, #8]
 80049ac:	4620      	mov	r0, r4
 80049ae:	f7ff ff73 	bl	8004898 <d_print_comp>
 80049b2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80049b6:	2b3e      	cmp	r3, #62	; 0x3e
 80049b8:	f001 84a4 	beq.w	8006304 <d_print_comp+0x1a6c>
 80049bc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80049c0:	29ff      	cmp	r1, #255	; 0xff
 80049c2:	f001 83bd 	beq.w	8006140 <d_print_comp+0x18a8>
 80049c6:	1c4a      	adds	r2, r1, #1
 80049c8:	233e      	movs	r3, #62	; 0x3e
 80049ca:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80049ce:	5463      	strb	r3, [r4, r1]
 80049d0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80049d4:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80049d8:	f8c4 813c 	str.w	r8, [r4, #316]	; 0x13c
 80049dc:	b015      	add	sp, #84	; 0x54
 80049de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e2:	f1b8 0f00 	cmp.w	r8, #0
 80049e6:	d001      	beq.n	80049ec <d_print_comp+0x154>
 80049e8:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
 80049ec:	2301      	movs	r3, #1
 80049ee:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80049f2:	b015      	add	sp, #84	; 0x54
 80049f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f8:	686a      	ldr	r2, [r5, #4]
 80049fa:	f7ff ff4d 	bl	8004898 <d_print_comp>
 80049fe:	4620      	mov	r0, r4
 8004a00:	49b3      	ldr	r1, [pc, #716]	; (8004cd0 <d_print_comp+0x438>)
 8004a02:	f7ff fed7 	bl	80047b4 <d_append_string>
 8004a06:	4620      	mov	r0, r4
 8004a08:	4631      	mov	r1, r6
 8004a0a:	68aa      	ldr	r2, [r5, #8]
 8004a0c:	f7ff ff44 	bl	8004898 <d_print_comp>
 8004a10:	4620      	mov	r0, r4
 8004a12:	215d      	movs	r1, #93	; 0x5d
 8004a14:	f7ff fd0c 	bl	8004430 <d_append_char>
 8004a18:	e7e0      	b.n	80049dc <d_print_comp+0x144>
 8004a1a:	686a      	ldr	r2, [r5, #4]
 8004a1c:	f7ff ff3c 	bl	8004898 <d_print_comp>
 8004a20:	4620      	mov	r0, r4
 8004a22:	49ac      	ldr	r1, [pc, #688]	; (8004cd4 <d_print_comp+0x43c>)
 8004a24:	f7ff fec6 	bl	80047b4 <d_append_string>
 8004a28:	4631      	mov	r1, r6
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	68aa      	ldr	r2, [r5, #8]
 8004a2e:	f7ff ff33 	bl	8004898 <d_print_comp>
 8004a32:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004a36:	29ff      	cmp	r1, #255	; 0xff
 8004a38:	f001 833a 	beq.w	80060b0 <d_print_comp+0x1818>
 8004a3c:	1c4a      	adds	r2, r1, #1
 8004a3e:	235d      	movs	r3, #93	; 0x5d
 8004a40:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004a44:	5463      	strb	r3, [r4, r1]
 8004a46:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004a4a:	e7c7      	b.n	80049dc <d_print_comp+0x144>
 8004a4c:	6869      	ldr	r1, [r5, #4]
 8004a4e:	f7ff fe2f 	bl	80046b0 <d_find_pack>
 8004a52:	f04f 0800 	mov.w	r8, #0
 8004a56:	2800      	cmp	r0, #0
 8004a58:	f001 8518 	beq.w	800648c <d_print_comp+0x1bf4>
 8004a5c:	7803      	ldrb	r3, [r0, #0]
 8004a5e:	2b2f      	cmp	r3, #47	; 0x2f
 8004a60:	f041 8136 	bne.w	8005cd0 <d_print_comp+0x1438>
 8004a64:	6843      	ldr	r3, [r0, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f001 8132 	beq.w	8005cd0 <d_print_comp+0x1438>
 8004a6c:	6880      	ldr	r0, [r0, #8]
 8004a6e:	f108 0801 	add.w	r8, r8, #1
 8004a72:	2800      	cmp	r0, #0
 8004a74:	d1f2      	bne.n	8004a5c <d_print_comp+0x1c4>
 8004a76:	686b      	ldr	r3, [r5, #4]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	2700      	movs	r7, #0
 8004a7c:	f108 33ff 	add.w	r3, r8, #4294967295
 8004a80:	f8df a278 	ldr.w	sl, [pc, #632]	; 8004cfc <d_print_comp+0x464>
 8004a84:	9301      	str	r3, [sp, #4]
 8004a86:	46b9      	mov	r9, r7
 8004a88:	f8c4 711c 	str.w	r7, [r4, #284]	; 0x11c
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	4631      	mov	r1, r6
 8004a90:	9a00      	ldr	r2, [sp, #0]
 8004a92:	f7ff ff01 	bl	8004898 <d_print_comp>
 8004a96:	9b01      	ldr	r3, [sp, #4]
 8004a98:	42bb      	cmp	r3, r7
 8004a9a:	f340 87db 	ble.w	8005a54 <d_print_comp+0x11bc>
 8004a9e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004aa2:	f8df b25c 	ldr.w	fp, [pc, #604]	; 8004d00 <d_print_comp+0x468>
 8004aa6:	e009      	b.n	8004abc <d_print_comp+0x224>
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	3101      	adds	r1, #1
 8004aac:	45d3      	cmp	fp, sl
 8004aae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004ab2:	54e5      	strb	r5, [r4, r3]
 8004ab4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004ab8:	f000 87cc 	beq.w	8005a54 <d_print_comp+0x11bc>
 8004abc:	29ff      	cmp	r1, #255	; 0xff
 8004abe:	f81b 5b01 	ldrb.w	r5, [fp], #1
 8004ac2:	d1f1      	bne.n	8004aa8 <d_print_comp+0x210>
 8004ac4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ac8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004acc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	4798      	blx	r3
 8004ad4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004ad8:	3301      	adds	r3, #1
 8004ada:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004ade:	2101      	movs	r1, #1
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	e7e3      	b.n	8004aac <d_print_comp+0x214>
 8004ae4:	4f7c      	ldr	r7, [pc, #496]	; (8004cd8 <d_print_comp+0x440>)
 8004ae6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004aea:	f107 0a1a 	add.w	sl, r7, #26
 8004aee:	f04f 0900 	mov.w	r9, #0
 8004af2:	e00a      	b.n	8004b0a <d_print_comp+0x272>
 8004af4:	460b      	mov	r3, r1
 8004af6:	3101      	adds	r1, #1
 8004af8:	4557      	cmp	r7, sl
 8004afa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004afe:	f804 8003 	strb.w	r8, [r4, r3]
 8004b02:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004b06:	f000 87e8 	beq.w	8005ada <d_print_comp+0x1242>
 8004b0a:	29ff      	cmp	r1, #255	; 0xff
 8004b0c:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8004b10:	d1f0      	bne.n	8004af4 <d_print_comp+0x25c>
 8004b12:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004b16:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004b1a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004b1e:	4620      	mov	r0, r4
 8004b20:	4798      	blx	r3
 8004b22:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004b26:	3301      	adds	r3, #1
 8004b28:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e7e2      	b.n	8004af8 <d_print_comp+0x260>
 8004b32:	496a      	ldr	r1, [pc, #424]	; (8004cdc <d_print_comp+0x444>)
 8004b34:	f7ff fe3e 	bl	80047b4 <d_append_string>
 8004b38:	6869      	ldr	r1, [r5, #4]
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	3101      	adds	r1, #1
 8004b3e:	f7ff fe6d 	bl	800481c <d_append_num>
 8004b42:	4620      	mov	r0, r4
 8004b44:	217d      	movs	r1, #125	; 0x7d
 8004b46:	f7ff fc73 	bl	8004430 <d_append_char>
 8004b4a:	e747      	b.n	80049dc <d_print_comp+0x144>
 8004b4c:	4964      	ldr	r1, [pc, #400]	; (8004ce0 <d_print_comp+0x448>)
 8004b4e:	f7ff fe31 	bl	80047b4 <d_append_string>
 8004b52:	686a      	ldr	r2, [r5, #4]
 8004b54:	4620      	mov	r0, r4
 8004b56:	4631      	mov	r1, r6
 8004b58:	f7ff fe9e 	bl	8004898 <d_print_comp>
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	4961      	ldr	r1, [pc, #388]	; (8004ce4 <d_print_comp+0x44c>)
 8004b60:	f7ff fe28 	bl	80047b4 <d_append_string>
 8004b64:	68a9      	ldr	r1, [r5, #8]
 8004b66:	4620      	mov	r0, r4
 8004b68:	3101      	adds	r1, #1
 8004b6a:	f7ff fe57 	bl	800481c <d_append_num>
 8004b6e:	4620      	mov	r0, r4
 8004b70:	217d      	movs	r1, #125	; 0x7d
 8004b72:	f7ff fc5d 	bl	8004430 <d_append_char>
 8004b76:	e731      	b.n	80049dc <d_print_comp+0x144>
 8004b78:	495b      	ldr	r1, [pc, #364]	; (8004ce8 <d_print_comp+0x450>)
 8004b7a:	f7ff fe1b 	bl	80047b4 <d_append_string>
 8004b7e:	4620      	mov	r0, r4
 8004b80:	4631      	mov	r1, r6
 8004b82:	686a      	ldr	r2, [r5, #4]
 8004b84:	f7ff fe88 	bl	8004898 <d_print_comp>
 8004b88:	e728      	b.n	80049dc <d_print_comp+0x144>
 8004b8a:	4958      	ldr	r1, [pc, #352]	; (8004cec <d_print_comp+0x454>)
 8004b8c:	f7ff fe12 	bl	80047b4 <d_append_string>
 8004b90:	4620      	mov	r0, r4
 8004b92:	4631      	mov	r1, r6
 8004b94:	686a      	ldr	r2, [r5, #4]
 8004b96:	f7ff fe7f 	bl	8004898 <d_print_comp>
 8004b9a:	e71f      	b.n	80049dc <d_print_comp+0x144>
 8004b9c:	4954      	ldr	r1, [pc, #336]	; (8004cf0 <d_print_comp+0x458>)
 8004b9e:	f7ff fe09 	bl	80047b4 <d_append_string>
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	4631      	mov	r1, r6
 8004ba6:	686a      	ldr	r2, [r5, #4]
 8004ba8:	f7ff fe76 	bl	8004898 <d_print_comp>
 8004bac:	4620      	mov	r0, r4
 8004bae:	2129      	movs	r1, #41	; 0x29
 8004bb0:	f7ff fc3e 	bl	8004430 <d_append_char>
 8004bb4:	e712      	b.n	80049dc <d_print_comp+0x144>
 8004bb6:	6869      	ldr	r1, [r5, #4]
 8004bb8:	f7ff fe30 	bl	800481c <d_append_num>
 8004bbc:	e70e      	b.n	80049dc <d_print_comp+0x144>
 8004bbe:	4f4d      	ldr	r7, [pc, #308]	; (8004cf4 <d_print_comp+0x45c>)
 8004bc0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004bc4:	f107 0a16 	add.w	sl, r7, #22
 8004bc8:	f04f 0900 	mov.w	r9, #0
 8004bcc:	e00a      	b.n	8004be4 <d_print_comp+0x34c>
 8004bce:	460b      	mov	r3, r1
 8004bd0:	3101      	adds	r1, #1
 8004bd2:	4557      	cmp	r7, sl
 8004bd4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004bd8:	f804 8003 	strb.w	r8, [r4, r3]
 8004bdc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004be0:	f000 87fa 	beq.w	8005bd8 <d_print_comp+0x1340>
 8004be4:	29ff      	cmp	r1, #255	; 0xff
 8004be6:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8004bea:	d1f0      	bne.n	8004bce <d_print_comp+0x336>
 8004bec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004bf0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004bf4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	4798      	blx	r3
 8004bfc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004c00:	3301      	adds	r3, #1
 8004c02:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004c06:	2101      	movs	r1, #1
 8004c08:	2300      	movs	r3, #0
 8004c0a:	e7e2      	b.n	8004bd2 <d_print_comp+0x33a>
 8004c0c:	7929      	ldrb	r1, [r5, #4]
 8004c0e:	f7ff fc0f 	bl	8004430 <d_append_char>
 8004c12:	e6e3      	b.n	80049dc <d_print_comp+0x144>
 8004c14:	686a      	ldr	r2, [r5, #4]
 8004c16:	f7ff fe3f 	bl	8004898 <d_print_comp>
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	4631      	mov	r1, r6
 8004c1e:	68aa      	ldr	r2, [r5, #8]
 8004c20:	f7ff fe3a 	bl	8004898 <d_print_comp>
 8004c24:	e6da      	b.n	80049dc <d_print_comp+0x144>
 8004c26:	4934      	ldr	r1, [pc, #208]	; (8004cf8 <d_print_comp+0x460>)
 8004c28:	f7ff fdc4 	bl	80047b4 <d_append_string>
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	4631      	mov	r1, r6
 8004c30:	686a      	ldr	r2, [r5, #4]
 8004c32:	f7ff fe31 	bl	8004898 <d_print_comp>
 8004c36:	e6d1      	b.n	80049dc <d_print_comp+0x144>
 8004c38:	686a      	ldr	r2, [r5, #4]
 8004c3a:	7811      	ldrb	r1, [r2, #0]
 8004c3c:	2927      	cmp	r1, #39	; 0x27
 8004c3e:	f041 804f 	bne.w	8005ce0 <d_print_comp+0x1448>
 8004c42:	6852      	ldr	r2, [r2, #4]
 8004c44:	7c17      	ldrb	r7, [r2, #16]
 8004c46:	2f00      	cmp	r7, #0
 8004c48:	f001 8001 	beq.w	8005c4e <d_print_comp+0x13b6>
 8004c4c:	2f06      	cmp	r7, #6
 8004c4e:	f241 82c2 	bls.w	80061d6 <d_print_comp+0x193e>
 8004c52:	2f07      	cmp	r7, #7
 8004c54:	f040 87fb 	bne.w	8005c4e <d_print_comp+0x13b6>
 8004c58:	68aa      	ldr	r2, [r5, #8]
 8004c5a:	7811      	ldrb	r1, [r2, #0]
 8004c5c:	b919      	cbnz	r1, 8004c66 <d_print_comp+0x3ce>
 8004c5e:	6891      	ldr	r1, [r2, #8]
 8004c60:	2901      	cmp	r1, #1
 8004c62:	f001 8433 	beq.w	80064cc <d_print_comp+0x1c34>
 8004c66:	4620      	mov	r0, r4
 8004c68:	2128      	movs	r1, #40	; 0x28
 8004c6a:	f7ff fbe1 	bl	8004430 <d_append_char>
 8004c6e:	4620      	mov	r0, r4
 8004c70:	4631      	mov	r1, r6
 8004c72:	686a      	ldr	r2, [r5, #4]
 8004c74:	f7ff fe10 	bl	8004898 <d_print_comp>
 8004c78:	4620      	mov	r0, r4
 8004c7a:	2129      	movs	r1, #41	; 0x29
 8004c7c:	f7ff fbd8 	bl	8004430 <d_append_char>
 8004c80:	782b      	ldrb	r3, [r5, #0]
 8004c82:	2b3c      	cmp	r3, #60	; 0x3c
 8004c84:	f001 8356 	beq.w	8006334 <d_print_comp+0x1a9c>
 8004c88:	4620      	mov	r0, r4
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	68aa      	ldr	r2, [r5, #8]
 8004c8e:	f7ff fe03 	bl	8004898 <d_print_comp>
 8004c92:	e6a3      	b.n	80049dc <d_print_comp+0x144>
 8004c94:	2301      	movs	r3, #1
 8004c96:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8004c9a:	e69f      	b.n	80049dc <d_print_comp+0x144>
 8004c9c:	686f      	ldr	r7, [r5, #4]
 8004c9e:	68ad      	ldr	r5, [r5, #8]
 8004ca0:	783b      	ldrb	r3, [r7, #0]
 8004ca2:	2b31      	cmp	r3, #49	; 0x31
 8004ca4:	f001 8128 	beq.w	8005ef8 <d_print_comp+0x1660>
 8004ca8:	2b33      	cmp	r3, #51	; 0x33
 8004caa:	f001 8156 	beq.w	8005f5a <d_print_comp+0x16c2>
 8004cae:	463a      	mov	r2, r7
 8004cb0:	f002 fa88 	bl	80071c4 <d_print_expr_op>
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	4631      	mov	r1, r6
 8004cb8:	462a      	mov	r2, r5
 8004cba:	f002 fabf 	bl	800723c <d_print_subexpr>
 8004cbe:	e68d      	b.n	80049dc <d_print_comp+0x144>
 8004cc0:	686a      	ldr	r2, [r5, #4]
 8004cc2:	f002 fa7f 	bl	80071c4 <d_print_expr_op>
 8004cc6:	e689      	b.n	80049dc <d_print_comp+0x144>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8004cce:	e685      	b.n	80049dc <d_print_comp+0x144>
 8004cd0:	0800e7b4 	.word	0x0800e7b4
 8004cd4:	0800e540 	.word	0x0800e540
 8004cd8:	0800e697 	.word	0x0800e697
 8004cdc:	0800e7a4 	.word	0x0800e7a4
 8004ce0:	0800e794 	.word	0x0800e794
 8004ce4:	0800e7a0 	.word	0x0800e7a0
 8004ce8:	0800e774 	.word	0x0800e774
 8004cec:	0800e754 	.word	0x0800e754
 8004cf0:	0800e734 	.word	0x0800e734
 8004cf4:	0800e69b 	.word	0x0800e69b
 8004cf8:	0800e724 	.word	0x0800e724
 8004cfc:	0800e6ce 	.word	0x0800e6ce
 8004d00:	0800e6cc 	.word	0x0800e6cc
 8004d04:	68ab      	ldr	r3, [r5, #8]
 8004d06:	781a      	ldrb	r2, [r3, #0]
 8004d08:	2a37      	cmp	r2, #55	; 0x37
 8004d0a:	f47f ae6f 	bne.w	80049ec <d_print_comp+0x154>
 8004d0e:	686a      	ldr	r2, [r5, #4]
 8004d10:	6851      	ldr	r1, [r2, #4]
 8004d12:	6808      	ldr	r0, [r1, #0]
 8004d14:	7847      	ldrb	r7, [r0, #1]
 8004d16:	2f63      	cmp	r7, #99	; 0x63
 8004d18:	f001 8311 	beq.w	800633e <d_print_comp+0x1aa6>
 8004d1c:	7812      	ldrb	r2, [r2, #0]
 8004d1e:	2a31      	cmp	r2, #49	; 0x31
 8004d20:	f000 8673 	beq.w	8005a0a <d_print_comp+0x1172>
 8004d24:	461f      	mov	r7, r3
 8004d26:	49c7      	ldr	r1, [pc, #796]	; (8005044 <d_print_comp+0x7ac>)
 8004d28:	f007 fffb 	bl	800cd22 <strcmp>
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	b918      	cbnz	r0, 8004d38 <d_print_comp+0x4a0>
 8004d30:	7813      	ldrb	r3, [r2, #0]
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	f001 8391 	beq.w	800645a <d_print_comp+0x1bc2>
 8004d38:	4620      	mov	r0, r4
 8004d3a:	4631      	mov	r1, r6
 8004d3c:	f002 fa7e 	bl	800723c <d_print_subexpr>
 8004d40:	686f      	ldr	r7, [r5, #4]
 8004d42:	49c1      	ldr	r1, [pc, #772]	; (8005048 <d_print_comp+0x7b0>)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8d3 8000 	ldr.w	r8, [r3]
 8004d4a:	4640      	mov	r0, r8
 8004d4c:	f007 ffe9 	bl	800cd22 <strcmp>
 8004d50:	2800      	cmp	r0, #0
 8004d52:	f001 8342 	beq.w	80063da <d_print_comp+0x1b42>
 8004d56:	4640      	mov	r0, r8
 8004d58:	49ba      	ldr	r1, [pc, #744]	; (8005044 <d_print_comp+0x7ac>)
 8004d5a:	f007 ffe2 	bl	800cd22 <strcmp>
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	f041 835a 	bne.w	8006418 <d_print_comp+0x1b80>
 8004d64:	68ab      	ldr	r3, [r5, #8]
 8004d66:	4631      	mov	r1, r6
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	f002 fa66 	bl	800723c <d_print_subexpr>
 8004d70:	686b      	ldr	r3, [r5, #4]
 8004d72:	781a      	ldrb	r2, [r3, #0]
 8004d74:	2a31      	cmp	r2, #49	; 0x31
 8004d76:	f47f ae31 	bne.w	80049dc <d_print_comp+0x144>
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	2a01      	cmp	r2, #1
 8004d80:	f47f ae2c 	bne.w	80049dc <d_print_comp+0x144>
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b3e      	cmp	r3, #62	; 0x3e
 8004d8a:	f47f ae27 	bne.w	80049dc <d_print_comp+0x144>
 8004d8e:	4620      	mov	r0, r4
 8004d90:	2129      	movs	r1, #41	; 0x29
 8004d92:	f7ff fb4d 	bl	8004430 <d_append_char>
 8004d96:	e621      	b.n	80049dc <d_print_comp+0x144>
 8004d98:	68ab      	ldr	r3, [r5, #8]
 8004d9a:	781a      	ldrb	r2, [r3, #0]
 8004d9c:	2a39      	cmp	r2, #57	; 0x39
 8004d9e:	f47f ae25 	bne.w	80049ec <d_print_comp+0x154>
 8004da2:	689f      	ldr	r7, [r3, #8]
 8004da4:	783a      	ldrb	r2, [r7, #0]
 8004da6:	2a3a      	cmp	r2, #58	; 0x3a
 8004da8:	f47f ae20 	bne.w	80049ec <d_print_comp+0x154>
 8004dac:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8004db0:	49a6      	ldr	r1, [pc, #664]	; (800504c <d_print_comp+0x7b4>)
 8004db2:	f8da 2004 	ldr.w	r2, [sl, #4]
 8004db6:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8004dba:	6810      	ldr	r0, [r2, #0]
 8004dbc:	f8d7 9004 	ldr.w	r9, [r7, #4]
 8004dc0:	68bd      	ldr	r5, [r7, #8]
 8004dc2:	f007 ffae 	bl	800cd22 <strcmp>
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	f001 832d 	beq.w	8006426 <d_print_comp+0x1b8e>
 8004dcc:	4620      	mov	r0, r4
 8004dce:	49a0      	ldr	r1, [pc, #640]	; (8005050 <d_print_comp+0x7b8>)
 8004dd0:	f7ff fcf0 	bl	80047b4 <d_append_string>
 8004dd4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004dd8:	b143      	cbz	r3, 8004dec <d_print_comp+0x554>
 8004dda:	4620      	mov	r0, r4
 8004ddc:	4631      	mov	r1, r6
 8004dde:	4642      	mov	r2, r8
 8004de0:	f002 fa2c 	bl	800723c <d_print_subexpr>
 8004de4:	4620      	mov	r0, r4
 8004de6:	2120      	movs	r1, #32
 8004de8:	f7ff fb22 	bl	8004430 <d_append_char>
 8004dec:	464a      	mov	r2, r9
 8004dee:	4620      	mov	r0, r4
 8004df0:	4631      	mov	r1, r6
 8004df2:	f7ff fd51 	bl	8004898 <d_print_comp>
 8004df6:	2d00      	cmp	r5, #0
 8004df8:	f43f adf0 	beq.w	80049dc <d_print_comp+0x144>
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	4631      	mov	r1, r6
 8004e00:	462a      	mov	r2, r5
 8004e02:	f002 fa1b 	bl	800723c <d_print_subexpr>
 8004e06:	e5e9      	b.n	80049dc <d_print_comp+0x144>
 8004e08:	686e      	ldr	r6, [r5, #4]
 8004e0a:	4992      	ldr	r1, [pc, #584]	; (8005054 <d_print_comp+0x7bc>)
 8004e0c:	68b7      	ldr	r7, [r6, #8]
 8004e0e:	f7ff fcd1 	bl	80047b4 <d_append_string>
 8004e12:	6875      	ldr	r5, [r6, #4]
 8004e14:	782b      	ldrb	r3, [r5, #0]
 8004e16:	3b61      	subs	r3, #97	; 0x61
 8004e18:	2b19      	cmp	r3, #25
 8004e1a:	f240 87d9 	bls.w	8005dd0 <d_print_comp+0x1538>
 8004e1e:	19eb      	adds	r3, r5, r7
 8004e20:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	bf08      	it	eq
 8004e28:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8004e2c:	2f00      	cmp	r7, #0
 8004e2e:	f43f add5 	beq.w	80049dc <d_print_comp+0x144>
 8004e32:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004e36:	442f      	add	r7, r5
 8004e38:	f04f 0800 	mov.w	r8, #0
 8004e3c:	e009      	b.n	8004e52 <d_print_comp+0x5ba>
 8004e3e:	460b      	mov	r3, r1
 8004e40:	3101      	adds	r1, #1
 8004e42:	42bd      	cmp	r5, r7
 8004e44:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e48:	54e6      	strb	r6, [r4, r3]
 8004e4a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004e4e:	f43f adc5 	beq.w	80049dc <d_print_comp+0x144>
 8004e52:	29ff      	cmp	r1, #255	; 0xff
 8004e54:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004e58:	d1f1      	bne.n	8004e3e <d_print_comp+0x5a6>
 8004e5a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e5e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004e62:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e66:	4620      	mov	r0, r4
 8004e68:	4798      	blx	r3
 8004e6a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004e6e:	3301      	adds	r3, #1
 8004e70:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004e74:	2101      	movs	r1, #1
 8004e76:	2300      	movs	r3, #0
 8004e78:	e7e3      	b.n	8004e42 <d_print_comp+0x5aa>
 8004e7a:	686a      	ldr	r2, [r5, #4]
 8004e7c:	68af      	ldr	r7, [r5, #8]
 8004e7e:	b10a      	cbz	r2, 8004e84 <d_print_comp+0x5ec>
 8004e80:	f7ff fd0a 	bl	8004898 <d_print_comp>
 8004e84:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004e88:	2bff      	cmp	r3, #255	; 0xff
 8004e8a:	f001 8146 	beq.w	800611a <d_print_comp+0x1882>
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	257b      	movs	r5, #123	; 0x7b
 8004e92:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004e96:	4631      	mov	r1, r6
 8004e98:	54e5      	strb	r5, [r4, r3]
 8004e9a:	463a      	mov	r2, r7
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004ea2:	f7ff fcf9 	bl	8004898 <d_print_comp>
 8004ea6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004eaa:	29ff      	cmp	r1, #255	; 0xff
 8004eac:	f001 8123 	beq.w	80060f6 <d_print_comp+0x185e>
 8004eb0:	1c4a      	adds	r2, r1, #1
 8004eb2:	237d      	movs	r3, #125	; 0x7d
 8004eb4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004eb8:	5463      	strb	r3, [r4, r1]
 8004eba:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004ebe:	e58d      	b.n	80049dc <d_print_comp+0x144>
 8004ec0:	686a      	ldr	r2, [r5, #4]
 8004ec2:	b10a      	cbz	r2, 8004ec8 <d_print_comp+0x630>
 8004ec4:	f7ff fce8 	bl	8004898 <d_print_comp>
 8004ec8:	68ab      	ldr	r3, [r5, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f43f ad86 	beq.w	80049dc <d_print_comp+0x144>
 8004ed0:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004ed4:	2ffd      	cmp	r7, #253	; 0xfd
 8004ed6:	f201 804e 	bhi.w	8005f76 <d_print_comp+0x16de>
 8004eda:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8005068 <d_print_comp+0x7d0>
 8004ede:	f04f 0a00 	mov.w	sl, #0
 8004ee2:	f108 0b02 	add.w	fp, r8, #2
 8004ee6:	4639      	mov	r1, r7
 8004ee8:	e009      	b.n	8004efe <d_print_comp+0x666>
 8004eea:	460b      	mov	r3, r1
 8004eec:	3101      	adds	r1, #1
 8004eee:	45d8      	cmp	r8, fp
 8004ef0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004ef4:	54e7      	strb	r7, [r4, r3]
 8004ef6:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004efa:	f000 86cb 	beq.w	8005c94 <d_print_comp+0x13fc>
 8004efe:	29ff      	cmp	r1, #255	; 0xff
 8004f00:	f818 7b01 	ldrb.w	r7, [r8], #1
 8004f04:	d1f1      	bne.n	8004eea <d_print_comp+0x652>
 8004f06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f0a:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8004f0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f12:	4620      	mov	r0, r4
 8004f14:	4798      	blx	r3
 8004f16:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004f20:	2101      	movs	r1, #1
 8004f22:	2300      	movs	r3, #0
 8004f24:	e7e3      	b.n	8004eee <d_print_comp+0x656>
 8004f26:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f040 87bd 	bne.w	8005eaa <d_print_comp+0x1612>
 8004f30:	686a      	ldr	r2, [r5, #4]
 8004f32:	4b49      	ldr	r3, [pc, #292]	; (8005058 <d_print_comp+0x7c0>)
 8004f34:	6851      	ldr	r1, [r2, #4]
 8004f36:	4299      	cmp	r1, r3
 8004f38:	f000 8746 	beq.w	8005dc8 <d_print_comp+0x1530>
 8004f3c:	4631      	mov	r1, r6
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f7ff fcaa 	bl	8004898 <d_print_comp>
 8004f44:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004f48:	2bff      	cmp	r3, #255	; 0xff
 8004f4a:	f001 81c8 	beq.w	80062de <d_print_comp+0x1a46>
 8004f4e:	1c59      	adds	r1, r3, #1
 8004f50:	2220      	movs	r2, #32
 8004f52:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004f56:	54e2      	strb	r2, [r4, r3]
 8004f58:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8004f5c:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 86c0 	beq.w	8005ce6 <d_print_comp+0x144e>
 8004f66:	4d3d      	ldr	r5, [pc, #244]	; (800505c <d_print_comp+0x7c4>)
 8004f68:	f04f 0800 	mov.w	r8, #0
 8004f6c:	1daf      	adds	r7, r5, #6
 8004f6e:	e009      	b.n	8004f84 <d_print_comp+0x6ec>
 8004f70:	460b      	mov	r3, r1
 8004f72:	3101      	adds	r1, #1
 8004f74:	42bd      	cmp	r5, r7
 8004f76:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004f7a:	54e6      	strb	r6, [r4, r3]
 8004f7c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004f80:	f43f ad2c 	beq.w	80049dc <d_print_comp+0x144>
 8004f84:	29ff      	cmp	r1, #255	; 0xff
 8004f86:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004f8a:	d1f1      	bne.n	8004f70 <d_print_comp+0x6d8>
 8004f8c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f90:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004f94:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f98:	4620      	mov	r0, r4
 8004f9a:	4798      	blx	r3
 8004f9c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e7e3      	b.n	8004f74 <d_print_comp+0x6dc>
 8004fac:	492c      	ldr	r1, [pc, #176]	; (8005060 <d_print_comp+0x7c8>)
 8004fae:	f7ff fc01 	bl	80047b4 <d_append_string>
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	4631      	mov	r1, r6
 8004fb6:	1d2a      	adds	r2, r5, #4
 8004fb8:	f002 f854 	bl	8007064 <d_print_cast.isra.12>
 8004fbc:	e50e      	b.n	80049dc <d_print_comp+0x144>
 8004fbe:	4f29      	ldr	r7, [pc, #164]	; (8005064 <d_print_comp+0x7cc>)
 8004fc0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004fc4:	f107 0a09 	add.w	sl, r7, #9
 8004fc8:	f04f 0900 	mov.w	r9, #0
 8004fcc:	e00a      	b.n	8004fe4 <d_print_comp+0x74c>
 8004fce:	460b      	mov	r3, r1
 8004fd0:	3101      	adds	r1, #1
 8004fd2:	4557      	cmp	r7, sl
 8004fd4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004fd8:	f804 8003 	strb.w	r8, [r4, r3]
 8004fdc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004fe0:	f000 85f3 	beq.w	8005bca <d_print_comp+0x1332>
 8004fe4:	29ff      	cmp	r1, #255	; 0xff
 8004fe6:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8004fea:	d1f0      	bne.n	8004fce <d_print_comp+0x736>
 8004fec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ff0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004ff4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	4798      	blx	r3
 8004ffc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005000:	3301      	adds	r3, #1
 8005002:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005006:	2101      	movs	r1, #1
 8005008:	2300      	movs	r3, #0
 800500a:	e7e2      	b.n	8004fd2 <d_print_comp+0x73a>
 800500c:	ab14      	add	r3, sp, #80	; 0x50
 800500e:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 8005012:	f843 2d40 	str.w	r2, [r3, #-64]!
 8005016:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 800501a:	68aa      	ldr	r2, [r5, #8]
 800501c:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8005020:	9307      	str	r3, [sp, #28]
 8005022:	2700      	movs	r7, #0
 8005024:	9505      	str	r5, [sp, #20]
 8005026:	9706      	str	r7, [sp, #24]
 8005028:	f7ff fc36 	bl	8004898 <d_print_comp>
 800502c:	9b06      	ldr	r3, [sp, #24]
 800502e:	b923      	cbnz	r3, 800503a <d_print_comp+0x7a2>
 8005030:	4631      	mov	r1, r6
 8005032:	462a      	mov	r2, r5
 8005034:	4620      	mov	r0, r4
 8005036:	f001 faa1 	bl	800657c <d_print_mod>
 800503a:	9b04      	ldr	r3, [sp, #16]
 800503c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005040:	e4cc      	b.n	80049dc <d_print_comp+0x144>
 8005042:	bf00      	nop
 8005044:	0800e6f0 	.word	0x0800e6f0
 8005048:	0800e6f4 	.word	0x0800e6f4
 800504c:	0800e6f8 	.word	0x0800e6f8
 8005050:	0800e700 	.word	0x0800e700
 8005054:	0800e6d0 	.word	0x0800e6d0
 8005058:	0800df44 	.word	0x0800df44
 800505c:	0800e6bc 	.word	0x0800e6bc
 8005060:	0800e6dc 	.word	0x0800e6dc
 8005064:	0800e6db 	.word	0x0800e6db
 8005068:	0800e6cc 	.word	0x0800e6cc
 800506c:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8005070:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
 8005074:	f84a bd40 	str.w	fp, [sl, #-64]!
 8005078:	2200      	movs	r2, #0
 800507a:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800507e:	f8cd b000 	str.w	fp, [sp]
 8005082:	4659      	mov	r1, fp
 8005084:	f8c0 a114 	str.w	sl, [r0, #276]	; 0x114
 8005088:	9505      	str	r5, [sp, #20]
 800508a:	9206      	str	r2, [sp, #24]
 800508c:	9307      	str	r3, [sp, #28]
 800508e:	2900      	cmp	r1, #0
 8005090:	f001 81b3 	beq.w	80063fa <d_print_comp+0x1b62>
 8005094:	684b      	ldr	r3, [r1, #4]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	3b19      	subs	r3, #25
 800509a:	2b02      	cmp	r3, #2
 800509c:	f201 81ad 	bhi.w	80063fa <d_print_comp+0x1b62>
 80050a0:	46ac      	mov	ip, r5
 80050a2:	f04f 0801 	mov.w	r8, #1
 80050a6:	460f      	mov	r7, r1
 80050a8:	4655      	mov	r5, sl
 80050aa:	e004      	b.n	80050b6 <d_print_comp+0x81e>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	3b19      	subs	r3, #25
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d81d      	bhi.n	80050f2 <d_print_comp+0x85a>
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	ea4f 1e08 	mov.w	lr, r8, lsl #4
 80050bc:	aa14      	add	r2, sp, #80	; 0x50
 80050be:	eb02 0b0e 	add.w	fp, r2, lr
 80050c2:	b99b      	cbnz	r3, 80050ec <d_print_comp+0x854>
 80050c4:	f1b8 0f03 	cmp.w	r8, #3
 80050c8:	f200 87de 	bhi.w	8006088 <d_print_comp+0x17f0>
 80050cc:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80050d0:	f1ab 0940 	sub.w	r9, fp, #64	; 0x40
 80050d4:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 80050d8:	f84b 5c40 	str.w	r5, [fp, #-64]
 80050dc:	2301      	movs	r3, #1
 80050de:	eb0a 050e 	add.w	r5, sl, lr
 80050e2:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 80050e6:	f108 0801 	add.w	r8, r8, #1
 80050ea:	60bb      	str	r3, [r7, #8]
 80050ec:	683f      	ldr	r7, [r7, #0]
 80050ee:	2f00      	cmp	r7, #0
 80050f0:	d1dc      	bne.n	80050ac <d_print_comp+0x814>
 80050f2:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80050f6:	4620      	mov	r0, r4
 80050f8:	4631      	mov	r1, r6
 80050fa:	4665      	mov	r5, ip
 80050fc:	f7ff fbcc 	bl	8004898 <d_print_comp>
 8005100:	9b06      	ldr	r3, [sp, #24]
 8005102:	9a00      	ldr	r2, [sp, #0]
 8005104:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8005108:	4647      	mov	r7, r8
 800510a:	2b00      	cmp	r3, #0
 800510c:	f47f ac66 	bne.w	80049dc <d_print_comp+0x144>
 8005110:	f1b8 0f01 	cmp.w	r8, #1
 8005114:	f001 814c 	beq.w	80063b0 <d_print_comp+0x1b18>
 8005118:	eb0a 1808 	add.w	r8, sl, r8, lsl #4
 800511c:	f858 2c0c 	ldr.w	r2, [r8, #-12]
 8005120:	3f01      	subs	r7, #1
 8005122:	4620      	mov	r0, r4
 8005124:	4631      	mov	r1, r6
 8005126:	f001 fa29 	bl	800657c <d_print_mod>
 800512a:	2f01      	cmp	r7, #1
 800512c:	f1a8 0810 	sub.w	r8, r8, #16
 8005130:	d1f4      	bne.n	800511c <d_print_comp+0x884>
 8005132:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8005136:	4620      	mov	r0, r4
 8005138:	4631      	mov	r1, r6
 800513a:	1d2a      	adds	r2, r5, #4
 800513c:	f001 fdc8 	bl	8006cd0 <d_print_array_type.isra.10>
 8005140:	e44c      	b.n	80049dc <d_print_comp+0x144>
 8005142:	068b      	lsls	r3, r1, #26
 8005144:	f100 862d 	bmi.w	8005da2 <d_print_comp+0x150a>
 8005148:	686b      	ldr	r3, [r5, #4]
 800514a:	b11b      	cbz	r3, 8005154 <d_print_comp+0x8bc>
 800514c:	f016 0340 	ands.w	r3, r6, #64	; 0x40
 8005150:	f001 801a 	beq.w	8006188 <d_print_comp+0x18f0>
 8005154:	f026 0660 	bic.w	r6, r6, #96	; 0x60
 8005158:	4631      	mov	r1, r6
 800515a:	f105 0208 	add.w	r2, r5, #8
 800515e:	4620      	mov	r0, r4
 8005160:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8005164:	f001 fe8c 	bl	8006e80 <d_print_function_type.isra.11>
 8005168:	e438      	b.n	80049dc <d_print_comp+0x144>
 800516a:	686a      	ldr	r2, [r5, #4]
 800516c:	f7ff fb94 	bl	8004898 <d_print_comp>
 8005170:	e434      	b.n	80049dc <d_print_comp+0x144>
 8005172:	f011 0604 	ands.w	r6, r1, #4
 8005176:	f040 85d8 	bne.w	8005d2a <d_print_comp+0x1492>
 800517a:	686a      	ldr	r2, [r5, #4]
 800517c:	6853      	ldr	r3, [r2, #4]
 800517e:	6815      	ldr	r5, [r2, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	f43f ac2b 	beq.w	80049dc <d_print_comp+0x144>
 8005186:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800518a:	eb05 0803 	add.w	r8, r5, r3
 800518e:	e009      	b.n	80051a4 <d_print_comp+0x90c>
 8005190:	460b      	mov	r3, r1
 8005192:	3101      	adds	r1, #1
 8005194:	4545      	cmp	r5, r8
 8005196:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800519a:	54e7      	strb	r7, [r4, r3]
 800519c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80051a0:	f43f ac1c 	beq.w	80049dc <d_print_comp+0x144>
 80051a4:	29ff      	cmp	r1, #255	; 0xff
 80051a6:	f815 7b01 	ldrb.w	r7, [r5], #1
 80051aa:	d1f1      	bne.n	8005190 <d_print_comp+0x8f8>
 80051ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80051b0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80051b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80051b8:	4620      	mov	r0, r4
 80051ba:	4798      	blx	r3
 80051bc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80051c0:	3301      	adds	r3, #1
 80051c2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80051c6:	2101      	movs	r1, #1
 80051c8:	2300      	movs	r3, #0
 80051ca:	e7e3      	b.n	8005194 <d_print_comp+0x8fc>
 80051cc:	6868      	ldr	r0, [r5, #4]
 80051ce:	7803      	ldrb	r3, [r0, #0]
 80051d0:	2b05      	cmp	r3, #5
 80051d2:	f000 860d 	beq.w	8005df0 <d_print_comp+0x1558>
 80051d6:	f04f 0800 	mov.w	r8, #0
 80051da:	2b23      	cmp	r3, #35	; 0x23
 80051dc:	f000 85dc 	beq.w	8005d98 <d_print_comp+0x1500>
 80051e0:	782a      	ldrb	r2, [r5, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	f000 85d8 	beq.w	8005d98 <d_print_comp+0x1500>
 80051e8:	2b24      	cmp	r3, #36	; 0x24
 80051ea:	f001 8035 	beq.w	8006258 <d_print_comp+0x19c0>
 80051ee:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 80051f2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 80051f6:	9505      	str	r5, [sp, #20]
 80051f8:	ab14      	add	r3, sp, #80	; 0x50
 80051fa:	2100      	movs	r1, #0
 80051fc:	f843 0d40 	str.w	r0, [r3, #-64]!
 8005200:	9106      	str	r1, [sp, #24]
 8005202:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005206:	9207      	str	r2, [sp, #28]
 8005208:	686a      	ldr	r2, [r5, #4]
 800520a:	4620      	mov	r0, r4
 800520c:	4631      	mov	r1, r6
 800520e:	f7ff fb43 	bl	8004898 <d_print_comp>
 8005212:	9b06      	ldr	r3, [sp, #24]
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 8554 	beq.w	8005cc2 <d_print_comp+0x142a>
 800521a:	9b04      	ldr	r3, [sp, #16]
 800521c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005220:	f1b8 0f00 	cmp.w	r8, #0
 8005224:	f43f abda 	beq.w	80049dc <d_print_comp+0x144>
 8005228:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
 800522c:	f7ff bbd6 	b.w	80049dc <d_print_comp+0x144>
 8005230:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
 8005234:	f04f 0800 	mov.w	r8, #0
 8005238:	e7db      	b.n	80051f2 <d_print_comp+0x95a>
 800523a:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
 800523e:	f1bc 0f00 	cmp.w	ip, #0
 8005242:	f001 812e 	beq.w	80064a2 <d_print_comp+0x1c0a>
 8005246:	4662      	mov	r2, ip
 8005248:	6891      	ldr	r1, [r2, #8]
 800524a:	b951      	cbnz	r1, 8005262 <d_print_comp+0x9ca>
 800524c:	6850      	ldr	r0, [r2, #4]
 800524e:	7800      	ldrb	r0, [r0, #0]
 8005250:	f1a0 0e19 	sub.w	lr, r0, #25
 8005254:	f1be 0f02 	cmp.w	lr, #2
 8005258:	f200 86a2 	bhi.w	8005fa0 <d_print_comp+0x1708>
 800525c:	4283      	cmp	r3, r0
 800525e:	f000 86a3 	beq.w	8005fa8 <d_print_comp+0x1710>
 8005262:	6812      	ldr	r2, [r2, #0]
 8005264:	2a00      	cmp	r2, #0
 8005266:	d1ef      	bne.n	8005248 <d_print_comp+0x9b0>
 8005268:	4660      	mov	r0, ip
 800526a:	4690      	mov	r8, r2
 800526c:	e7c1      	b.n	80051f2 <d_print_comp+0x95a>
 800526e:	4fd4      	ldr	r7, [pc, #848]	; (80055c0 <d_print_comp+0xd28>)
 8005270:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005274:	f107 0a11 	add.w	sl, r7, #17
 8005278:	f04f 0900 	mov.w	r9, #0
 800527c:	e00a      	b.n	8005294 <d_print_comp+0x9fc>
 800527e:	460b      	mov	r3, r1
 8005280:	3101      	adds	r1, #1
 8005282:	4557      	cmp	r7, sl
 8005284:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005288:	f804 8003 	strb.w	r8, [r4, r3]
 800528c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005290:	f000 8494 	beq.w	8005bbc <d_print_comp+0x1324>
 8005294:	29ff      	cmp	r1, #255	; 0xff
 8005296:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 800529a:	d1f0      	bne.n	800527e <d_print_comp+0x9e6>
 800529c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80052a0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80052a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80052a8:	4620      	mov	r0, r4
 80052aa:	4798      	blx	r3
 80052ac:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80052b0:	3301      	adds	r3, #1
 80052b2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80052b6:	2101      	movs	r1, #1
 80052b8:	2300      	movs	r3, #0
 80052ba:	e7e2      	b.n	8005282 <d_print_comp+0x9ea>
 80052bc:	68af      	ldr	r7, [r5, #8]
 80052be:	686d      	ldr	r5, [r5, #4]
 80052c0:	2f00      	cmp	r7, #0
 80052c2:	f43f ab8b 	beq.w	80049dc <d_print_comp+0x144>
 80052c6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80052ca:	442f      	add	r7, r5
 80052cc:	f04f 0800 	mov.w	r8, #0
 80052d0:	e009      	b.n	80052e6 <d_print_comp+0xa4e>
 80052d2:	460b      	mov	r3, r1
 80052d4:	3101      	adds	r1, #1
 80052d6:	42bd      	cmp	r5, r7
 80052d8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80052dc:	54e6      	strb	r6, [r4, r3]
 80052de:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80052e2:	f43f ab7b 	beq.w	80049dc <d_print_comp+0x144>
 80052e6:	29ff      	cmp	r1, #255	; 0xff
 80052e8:	f815 6b01 	ldrb.w	r6, [r5], #1
 80052ec:	d1f1      	bne.n	80052d2 <d_print_comp+0xa3a>
 80052ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80052f2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80052f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80052fa:	4620      	mov	r0, r4
 80052fc:	4798      	blx	r3
 80052fe:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005302:	3301      	adds	r3, #1
 8005304:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005308:	2101      	movs	r1, #1
 800530a:	2300      	movs	r3, #0
 800530c:	e7e3      	b.n	80052d6 <d_print_comp+0xa3e>
 800530e:	4fad      	ldr	r7, [pc, #692]	; (80055c4 <d_print_comp+0xd2c>)
 8005310:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005314:	f107 0a11 	add.w	sl, r7, #17
 8005318:	f04f 0900 	mov.w	r9, #0
 800531c:	e00a      	b.n	8005334 <d_print_comp+0xa9c>
 800531e:	460b      	mov	r3, r1
 8005320:	3101      	adds	r1, #1
 8005322:	4557      	cmp	r7, sl
 8005324:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005328:	f804 8003 	strb.w	r8, [r4, r3]
 800532c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005330:	f000 843d 	beq.w	8005bae <d_print_comp+0x1316>
 8005334:	29ff      	cmp	r1, #255	; 0xff
 8005336:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 800533a:	d1f0      	bne.n	800531e <d_print_comp+0xa86>
 800533c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005340:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005344:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005348:	4620      	mov	r0, r4
 800534a:	4798      	blx	r3
 800534c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005350:	3301      	adds	r3, #1
 8005352:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005356:	2101      	movs	r1, #1
 8005358:	2300      	movs	r3, #0
 800535a:	e7e2      	b.n	8005322 <d_print_comp+0xa8a>
 800535c:	4f9a      	ldr	r7, [pc, #616]	; (80055c8 <d_print_comp+0xd30>)
 800535e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005362:	f107 0a15 	add.w	sl, r7, #21
 8005366:	f04f 0900 	mov.w	r9, #0
 800536a:	e00a      	b.n	8005382 <d_print_comp+0xaea>
 800536c:	460b      	mov	r3, r1
 800536e:	3101      	adds	r1, #1
 8005370:	4557      	cmp	r7, sl
 8005372:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005376:	f804 8003 	strb.w	r8, [r4, r3]
 800537a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800537e:	f000 83e4 	beq.w	8005b4a <d_print_comp+0x12b2>
 8005382:	29ff      	cmp	r1, #255	; 0xff
 8005384:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005388:	d1f0      	bne.n	800536c <d_print_comp+0xad4>
 800538a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800538e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005392:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005396:	4620      	mov	r0, r4
 8005398:	4798      	blx	r3
 800539a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800539e:	3301      	adds	r3, #1
 80053a0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80053a4:	2101      	movs	r1, #1
 80053a6:	2300      	movs	r3, #0
 80053a8:	e7e2      	b.n	8005370 <d_print_comp+0xad8>
 80053aa:	4f88      	ldr	r7, [pc, #544]	; (80055cc <d_print_comp+0xd34>)
 80053ac:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80053b0:	f107 0a19 	add.w	sl, r7, #25
 80053b4:	f04f 0900 	mov.w	r9, #0
 80053b8:	e00a      	b.n	80053d0 <d_print_comp+0xb38>
 80053ba:	460b      	mov	r3, r1
 80053bc:	3101      	adds	r1, #1
 80053be:	4557      	cmp	r7, sl
 80053c0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80053c4:	f804 8003 	strb.w	r8, [r4, r3]
 80053c8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80053cc:	f000 83b6 	beq.w	8005b3c <d_print_comp+0x12a4>
 80053d0:	29ff      	cmp	r1, #255	; 0xff
 80053d2:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80053d6:	d1f0      	bne.n	80053ba <d_print_comp+0xb22>
 80053d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80053dc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80053e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80053e4:	4620      	mov	r0, r4
 80053e6:	4798      	blx	r3
 80053e8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80053ec:	3301      	adds	r3, #1
 80053ee:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80053f2:	2101      	movs	r1, #1
 80053f4:	2300      	movs	r3, #0
 80053f6:	e7e2      	b.n	80053be <d_print_comp+0xb26>
 80053f8:	4f75      	ldr	r7, [pc, #468]	; (80055d0 <d_print_comp+0xd38>)
 80053fa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80053fe:	f107 0a16 	add.w	sl, r7, #22
 8005402:	f04f 0900 	mov.w	r9, #0
 8005406:	e00a      	b.n	800541e <d_print_comp+0xb86>
 8005408:	460b      	mov	r3, r1
 800540a:	3101      	adds	r1, #1
 800540c:	4557      	cmp	r7, sl
 800540e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005412:	f804 8003 	strb.w	r8, [r4, r3]
 8005416:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800541a:	f000 8388 	beq.w	8005b2e <d_print_comp+0x1296>
 800541e:	29ff      	cmp	r1, #255	; 0xff
 8005420:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005424:	d1f0      	bne.n	8005408 <d_print_comp+0xb70>
 8005426:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800542a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800542e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005432:	4620      	mov	r0, r4
 8005434:	4798      	blx	r3
 8005436:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800543a:	3301      	adds	r3, #1
 800543c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005440:	2101      	movs	r1, #1
 8005442:	2300      	movs	r3, #0
 8005444:	e7e2      	b.n	800540c <d_print_comp+0xb74>
 8005446:	4f63      	ldr	r7, [pc, #396]	; (80055d4 <d_print_comp+0xd3c>)
 8005448:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800544c:	f107 0a13 	add.w	sl, r7, #19
 8005450:	f04f 0900 	mov.w	r9, #0
 8005454:	e00a      	b.n	800546c <d_print_comp+0xbd4>
 8005456:	460b      	mov	r3, r1
 8005458:	3101      	adds	r1, #1
 800545a:	4557      	cmp	r7, sl
 800545c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005460:	f804 8003 	strb.w	r8, [r4, r3]
 8005464:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005468:	f000 835a 	beq.w	8005b20 <d_print_comp+0x1288>
 800546c:	29ff      	cmp	r1, #255	; 0xff
 800546e:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005472:	d1f0      	bne.n	8005456 <d_print_comp+0xbbe>
 8005474:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005478:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800547c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005480:	4620      	mov	r0, r4
 8005482:	4798      	blx	r3
 8005484:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005488:	3301      	adds	r3, #1
 800548a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800548e:	2101      	movs	r1, #1
 8005490:	2300      	movs	r3, #0
 8005492:	e7e2      	b.n	800545a <d_print_comp+0xbc2>
 8005494:	4f50      	ldr	r7, [pc, #320]	; (80055d8 <d_print_comp+0xd40>)
 8005496:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800549a:	f107 0a0f 	add.w	sl, r7, #15
 800549e:	f04f 0900 	mov.w	r9, #0
 80054a2:	e00a      	b.n	80054ba <d_print_comp+0xc22>
 80054a4:	460b      	mov	r3, r1
 80054a6:	3101      	adds	r1, #1
 80054a8:	4557      	cmp	r7, sl
 80054aa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80054ae:	f804 8003 	strb.w	r8, [r4, r3]
 80054b2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80054b6:	f000 832c 	beq.w	8005b12 <d_print_comp+0x127a>
 80054ba:	29ff      	cmp	r1, #255	; 0xff
 80054bc:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80054c0:	d1f0      	bne.n	80054a4 <d_print_comp+0xc0c>
 80054c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80054c6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80054ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80054ce:	4620      	mov	r0, r4
 80054d0:	4798      	blx	r3
 80054d2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80054d6:	3301      	adds	r3, #1
 80054d8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80054dc:	2101      	movs	r1, #1
 80054de:	2300      	movs	r3, #0
 80054e0:	e7e2      	b.n	80054a8 <d_print_comp+0xc10>
 80054e2:	4f3e      	ldr	r7, [pc, #248]	; (80055dc <d_print_comp+0xd44>)
 80054e4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80054e8:	f107 0a1a 	add.w	sl, r7, #26
 80054ec:	f04f 0900 	mov.w	r9, #0
 80054f0:	e00a      	b.n	8005508 <d_print_comp+0xc70>
 80054f2:	460b      	mov	r3, r1
 80054f4:	3101      	adds	r1, #1
 80054f6:	4557      	cmp	r7, sl
 80054f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80054fc:	f804 8003 	strb.w	r8, [r4, r3]
 8005500:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005504:	f000 8384 	beq.w	8005c10 <d_print_comp+0x1378>
 8005508:	29ff      	cmp	r1, #255	; 0xff
 800550a:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 800550e:	d1f0      	bne.n	80054f2 <d_print_comp+0xc5a>
 8005510:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005514:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005518:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800551c:	4620      	mov	r0, r4
 800551e:	4798      	blx	r3
 8005520:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005524:	3301      	adds	r3, #1
 8005526:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800552a:	2101      	movs	r1, #1
 800552c:	2300      	movs	r3, #0
 800552e:	e7e2      	b.n	80054f6 <d_print_comp+0xc5e>
 8005530:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005534:	29ff      	cmp	r1, #255	; 0xff
 8005536:	f000 85cd 	beq.w	80060d4 <d_print_comp+0x183c>
 800553a:	1c4a      	adds	r2, r1, #1
 800553c:	237e      	movs	r3, #126	; 0x7e
 800553e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005542:	5463      	strb	r3, [r4, r1]
 8005544:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005548:	4631      	mov	r1, r6
 800554a:	68aa      	ldr	r2, [r5, #8]
 800554c:	4620      	mov	r0, r4
 800554e:	f7ff f9a3 	bl	8004898 <d_print_comp>
 8005552:	f7ff ba43 	b.w	80049dc <d_print_comp+0x144>
 8005556:	68aa      	ldr	r2, [r5, #8]
 8005558:	f7ff f99e 	bl	8004898 <d_print_comp>
 800555c:	f7ff ba3e 	b.w	80049dc <d_print_comp+0x144>
 8005560:	4f1f      	ldr	r7, [pc, #124]	; (80055e0 <d_print_comp+0xd48>)
 8005562:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005566:	f107 0a0d 	add.w	sl, r7, #13
 800556a:	f04f 0900 	mov.w	r9, #0
 800556e:	e00a      	b.n	8005586 <d_print_comp+0xcee>
 8005570:	460b      	mov	r3, r1
 8005572:	3101      	adds	r1, #1
 8005574:	4557      	cmp	r7, sl
 8005576:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800557a:	f804 8003 	strb.w	r8, [r4, r3]
 800557e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005582:	f000 82b8 	beq.w	8005af6 <d_print_comp+0x125e>
 8005586:	29ff      	cmp	r1, #255	; 0xff
 8005588:	f817 8b01 	ldrb.w	r8, [r7], #1
 800558c:	d1f0      	bne.n	8005570 <d_print_comp+0xcd8>
 800558e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005592:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005596:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800559a:	4620      	mov	r0, r4
 800559c:	4798      	blx	r3
 800559e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80055a2:	3301      	adds	r3, #1
 80055a4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80055a8:	2101      	movs	r1, #1
 80055aa:	2300      	movs	r3, #0
 80055ac:	e7e2      	b.n	8005574 <d_print_comp+0xcdc>
 80055ae:	4f0d      	ldr	r7, [pc, #52]	; (80055e4 <d_print_comp+0xd4c>)
 80055b0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80055b4:	f107 0a10 	add.w	sl, r7, #16
 80055b8:	f04f 0900 	mov.w	r9, #0
 80055bc:	e01f      	b.n	80055fe <d_print_comp+0xd66>
 80055be:	bf00      	nop
 80055c0:	0800e5e3 	.word	0x0800e5e3
 80055c4:	0800e683 	.word	0x0800e683
 80055c8:	0800e66b 	.word	0x0800e66b
 80055cc:	0800e64f 	.word	0x0800e64f
 80055d0:	0800e637 	.word	0x0800e637
 80055d4:	0800e623 	.word	0x0800e623
 80055d8:	0800e613 	.word	0x0800e613
 80055dc:	0800e5f7 	.word	0x0800e5f7
 80055e0:	0800e5a8 	.word	0x0800e5a8
 80055e4:	0800e5cb 	.word	0x0800e5cb
 80055e8:	460b      	mov	r3, r1
 80055ea:	3101      	adds	r1, #1
 80055ec:	4557      	cmp	r7, sl
 80055ee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80055f2:	f804 8003 	strb.w	r8, [r4, r3]
 80055f6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80055fa:	f000 82fb 	beq.w	8005bf4 <d_print_comp+0x135c>
 80055fe:	29ff      	cmp	r1, #255	; 0xff
 8005600:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005604:	d1f0      	bne.n	80055e8 <d_print_comp+0xd50>
 8005606:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800560a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800560e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005612:	4620      	mov	r0, r4
 8005614:	4798      	blx	r3
 8005616:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800561a:	3301      	adds	r3, #1
 800561c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005620:	2101      	movs	r1, #1
 8005622:	2300      	movs	r3, #0
 8005624:	e7e2      	b.n	80055ec <d_print_comp+0xd54>
 8005626:	4fd9      	ldr	r7, [pc, #868]	; (800598c <d_print_comp+0x10f4>)
 8005628:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800562c:	f107 0a15 	add.w	sl, r7, #21
 8005630:	f04f 0900 	mov.w	r9, #0
 8005634:	e00a      	b.n	800564c <d_print_comp+0xdb4>
 8005636:	460b      	mov	r3, r1
 8005638:	3101      	adds	r1, #1
 800563a:	4557      	cmp	r7, sl
 800563c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005640:	f804 8003 	strb.w	r8, [r4, r3]
 8005644:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005648:	f000 82cd 	beq.w	8005be6 <d_print_comp+0x134e>
 800564c:	29ff      	cmp	r1, #255	; 0xff
 800564e:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005652:	d1f0      	bne.n	8005636 <d_print_comp+0xd9e>
 8005654:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005658:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800565c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005660:	4620      	mov	r0, r4
 8005662:	4798      	blx	r3
 8005664:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005668:	3301      	adds	r3, #1
 800566a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800566e:	2101      	movs	r1, #1
 8005670:	2300      	movs	r3, #0
 8005672:	e7e2      	b.n	800563a <d_print_comp+0xda2>
 8005674:	4fc6      	ldr	r7, [pc, #792]	; (8005990 <d_print_comp+0x10f8>)
 8005676:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800567a:	f107 0a12 	add.w	sl, r7, #18
 800567e:	f04f 0900 	mov.w	r9, #0
 8005682:	e00a      	b.n	800569a <d_print_comp+0xe02>
 8005684:	460b      	mov	r3, r1
 8005686:	3101      	adds	r1, #1
 8005688:	4557      	cmp	r7, sl
 800568a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800568e:	f804 8003 	strb.w	r8, [r4, r3]
 8005692:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005696:	f000 82b4 	beq.w	8005c02 <d_print_comp+0x136a>
 800569a:	29ff      	cmp	r1, #255	; 0xff
 800569c:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80056a0:	d1f0      	bne.n	8005684 <d_print_comp+0xdec>
 80056a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80056a6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80056aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80056ae:	4620      	mov	r0, r4
 80056b0:	4798      	blx	r3
 80056b2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80056b6:	3301      	adds	r3, #1
 80056b8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80056bc:	2101      	movs	r1, #1
 80056be:	2300      	movs	r3, #0
 80056c0:	e7e2      	b.n	8005688 <d_print_comp+0xdf0>
 80056c2:	686e      	ldr	r6, [r5, #4]
 80056c4:	2e00      	cmp	r6, #0
 80056c6:	f040 835a 	bne.w	8005d7e <d_print_comp+0x14e6>
 80056ca:	4db2      	ldr	r5, [pc, #712]	; (8005994 <d_print_comp+0x10fc>)
 80056cc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80056d0:	46b0      	mov	r8, r6
 80056d2:	1d2f      	adds	r7, r5, #4
 80056d4:	e009      	b.n	80056ea <d_print_comp+0xe52>
 80056d6:	460b      	mov	r3, r1
 80056d8:	3101      	adds	r1, #1
 80056da:	42bd      	cmp	r5, r7
 80056dc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80056e0:	54e6      	strb	r6, [r4, r3]
 80056e2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80056e6:	f43f a979 	beq.w	80049dc <d_print_comp+0x144>
 80056ea:	29ff      	cmp	r1, #255	; 0xff
 80056ec:	f815 6b01 	ldrb.w	r6, [r5], #1
 80056f0:	d1f1      	bne.n	80056d6 <d_print_comp+0xe3e>
 80056f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80056f6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80056fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80056fe:	4620      	mov	r0, r4
 8005700:	4798      	blx	r3
 8005702:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005706:	3301      	adds	r3, #1
 8005708:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800570c:	2101      	movs	r1, #1
 800570e:	2300      	movs	r3, #0
 8005710:	e7e3      	b.n	80056da <d_print_comp+0xe42>
 8005712:	1d29      	adds	r1, r5, #4
 8005714:	f7fe ffaa 	bl	800466c <d_lookup_template_argument.isra.6>
 8005718:	2800      	cmp	r0, #0
 800571a:	f43f a967 	beq.w	80049ec <d_print_comp+0x154>
 800571e:	7803      	ldrb	r3, [r0, #0]
 8005720:	2b2f      	cmp	r3, #47	; 0x2f
 8005722:	f000 8448 	beq.w	8005fb6 <d_print_comp+0x171e>
 8005726:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 800572a:	682b      	ldr	r3, [r5, #0]
 800572c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8005730:	4602      	mov	r2, r0
 8005732:	4631      	mov	r1, r6
 8005734:	4620      	mov	r0, r4
 8005736:	f7ff f8af 	bl	8004898 <d_print_comp>
 800573a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 800573e:	f7ff b94d 	b.w	80049dc <d_print_comp+0x144>
 8005742:	686a      	ldr	r2, [r5, #4]
 8005744:	f7ff f8a8 	bl	8004898 <d_print_comp>
 8005748:	f016 0904 	ands.w	r9, r6, #4
 800574c:	f040 8267 	bne.w	8005c1e <d_print_comp+0x1386>
 8005750:	4f91      	ldr	r7, [pc, #580]	; (8005998 <d_print_comp+0x1100>)
 8005752:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005756:	f107 0a02 	add.w	sl, r7, #2
 800575a:	e00a      	b.n	8005772 <d_print_comp+0xeda>
 800575c:	460b      	mov	r3, r1
 800575e:	3101      	adds	r1, #1
 8005760:	4557      	cmp	r7, sl
 8005762:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005766:	f804 8003 	strb.w	r8, [r4, r3]
 800576a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800576e:	f000 8262 	beq.w	8005c36 <d_print_comp+0x139e>
 8005772:	29ff      	cmp	r1, #255	; 0xff
 8005774:	f817 8b01 	ldrb.w	r8, [r7], #1
 8005778:	d1f0      	bne.n	800575c <d_print_comp+0xec4>
 800577a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800577e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005782:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005786:	4620      	mov	r0, r4
 8005788:	4798      	blx	r3
 800578a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800578e:	3301      	adds	r3, #1
 8005790:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005794:	2101      	movs	r1, #1
 8005796:	2300      	movs	r3, #0
 8005798:	e7e2      	b.n	8005760 <d_print_comp+0xec8>
 800579a:	4f80      	ldr	r7, [pc, #512]	; (800599c <d_print_comp+0x1104>)
 800579c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80057a0:	f107 0a08 	add.w	sl, r7, #8
 80057a4:	f04f 0900 	mov.w	r9, #0
 80057a8:	e00a      	b.n	80057c0 <d_print_comp+0xf28>
 80057aa:	460b      	mov	r3, r1
 80057ac:	3101      	adds	r1, #1
 80057ae:	4557      	cmp	r7, sl
 80057b0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80057b4:	f804 8003 	strb.w	r8, [r4, r3]
 80057b8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80057bc:	f000 81a2 	beq.w	8005b04 <d_print_comp+0x126c>
 80057c0:	29ff      	cmp	r1, #255	; 0xff
 80057c2:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80057c6:	d1f0      	bne.n	80057aa <d_print_comp+0xf12>
 80057c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80057cc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80057d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80057d4:	4620      	mov	r0, r4
 80057d6:	4798      	blx	r3
 80057d8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80057dc:	3301      	adds	r3, #1
 80057de:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80057e2:	2101      	movs	r1, #1
 80057e4:	2300      	movs	r3, #0
 80057e6:	e7e2      	b.n	80057ae <d_print_comp+0xf16>
 80057e8:	4f6d      	ldr	r7, [pc, #436]	; (80059a0 <d_print_comp+0x1108>)
 80057ea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80057ee:	f107 0a0b 	add.w	sl, r7, #11
 80057f2:	f04f 0900 	mov.w	r9, #0
 80057f6:	e00a      	b.n	800580e <d_print_comp+0xf76>
 80057f8:	460b      	mov	r3, r1
 80057fa:	3101      	adds	r1, #1
 80057fc:	4557      	cmp	r7, sl
 80057fe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005802:	f804 8003 	strb.w	r8, [r4, r3]
 8005806:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800580a:	f000 816d 	beq.w	8005ae8 <d_print_comp+0x1250>
 800580e:	29ff      	cmp	r1, #255	; 0xff
 8005810:	f817 8b01 	ldrb.w	r8, [r7], #1
 8005814:	d1f0      	bne.n	80057f8 <d_print_comp+0xf60>
 8005816:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800581a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800581e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005822:	4620      	mov	r0, r4
 8005824:	4798      	blx	r3
 8005826:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800582a:	3301      	adds	r3, #1
 800582c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005830:	2101      	movs	r1, #1
 8005832:	2300      	movs	r3, #0
 8005834:	e7e2      	b.n	80057fc <d_print_comp+0xf64>
 8005836:	4f5b      	ldr	r7, [pc, #364]	; (80059a4 <d_print_comp+0x110c>)
 8005838:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800583c:	f107 0a18 	add.w	sl, r7, #24
 8005840:	f04f 0900 	mov.w	r9, #0
 8005844:	e00a      	b.n	800585c <d_print_comp+0xfc4>
 8005846:	460b      	mov	r3, r1
 8005848:	3101      	adds	r1, #1
 800584a:	4557      	cmp	r7, sl
 800584c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005850:	f804 8003 	strb.w	r8, [r4, r3]
 8005854:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005858:	f000 810d 	beq.w	8005a76 <d_print_comp+0x11de>
 800585c:	29ff      	cmp	r1, #255	; 0xff
 800585e:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8005862:	d1f0      	bne.n	8005846 <d_print_comp+0xfae>
 8005864:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005868:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800586c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005870:	4620      	mov	r0, r4
 8005872:	4798      	blx	r3
 8005874:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005878:	3301      	adds	r3, #1
 800587a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800587e:	2101      	movs	r1, #1
 8005880:	2300      	movs	r3, #0
 8005882:	e7e2      	b.n	800584a <d_print_comp+0xfb2>
 8005884:	2200      	movs	r2, #0
 8005886:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800588a:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 800588e:	686f      	ldr	r7, [r5, #4]
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	2f00      	cmp	r7, #0
 8005894:	f000 80ea 	beq.w	8005a6c <d_print_comp+0x11d4>
 8005898:	f10d 0a10 	add.w	sl, sp, #16
 800589c:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
 80058a0:	4690      	mov	r8, r2
 80058a2:	4610      	mov	r0, r2
 80058a4:	4653      	mov	r3, sl
 80058a6:	7839      	ldrb	r1, [r7, #0]
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	f1a1 0e1c 	sub.w	lr, r1, #28
 80058ae:	f1be 0f04 	cmp.w	lr, #4
 80058b2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80058b6:	605f      	str	r7, [r3, #4]
 80058b8:	6098      	str	r0, [r3, #8]
 80058ba:	f8c3 c00c 	str.w	ip, [r3, #12]
 80058be:	461a      	mov	r2, r3
 80058c0:	f108 0801 	add.w	r8, r8, #1
 80058c4:	f103 0310 	add.w	r3, r3, #16
 80058c8:	f240 80ca 	bls.w	8005a60 <d_print_comp+0x11c8>
 80058cc:	2904      	cmp	r1, #4
 80058ce:	f000 80af 	beq.w	8005a30 <d_print_comp+0x1198>
 80058d2:	2902      	cmp	r1, #2
 80058d4:	f040 80b2 	bne.w	8005a3c <d_print_comp+0x11a4>
 80058d8:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80058dc:	f89b 3000 	ldrb.w	r3, [fp]
 80058e0:	2b45      	cmp	r3, #69	; 0x45
 80058e2:	bf08      	it	eq
 80058e4:	f8db b004 	ldreq.w	fp, [fp, #4]
 80058e8:	f89b 3000 	ldrb.w	r3, [fp]
 80058ec:	3b1c      	subs	r3, #28
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	f200 80a4 	bhi.w	8005a3c <d_print_comp+0x11a4>
 80058f4:	f1b8 0f04 	cmp.w	r8, #4
 80058f8:	f000 80b8 	beq.w	8005a6c <d_print_comp+0x11d4>
 80058fc:	f108 5e80 	add.w	lr, r8, #268435456	; 0x10000000
 8005900:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005904:	462b      	mov	r3, r5
 8005906:	eb0a 1e0e 	add.w	lr, sl, lr, lsl #4
 800590a:	46b1      	mov	r9, r6
 800590c:	465d      	mov	r5, fp
 800590e:	4666      	mov	r6, ip
 8005910:	469b      	mov	fp, r3
 8005912:	46a4      	mov	ip, r4
 8005914:	4674      	mov	r4, lr
 8005916:	e003      	b.n	8005920 <d_print_comp+0x1088>
 8005918:	f1b8 0f04 	cmp.w	r8, #4
 800591c:	f000 85c5 	beq.w	80064aa <d_print_comp+0x1c12>
 8005920:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005924:	f104 0e10 	add.w	lr, r4, #16
 8005928:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800592c:	4623      	mov	r3, r4
 800592e:	2200      	movs	r2, #0
 8005930:	611c      	str	r4, [r3, #16]
 8005932:	605d      	str	r5, [r3, #4]
 8005934:	609a      	str	r2, [r3, #8]
 8005936:	60de      	str	r6, [r3, #12]
 8005938:	f8cc e114 	str.w	lr, [ip, #276]	; 0x114
 800593c:	686d      	ldr	r5, [r5, #4]
 800593e:	782b      	ldrb	r3, [r5, #0]
 8005940:	3b1c      	subs	r3, #28
 8005942:	2b04      	cmp	r3, #4
 8005944:	4674      	mov	r4, lr
 8005946:	f108 0801 	add.w	r8, r8, #1
 800594a:	d9e5      	bls.n	8005918 <d_print_comp+0x1080>
 800594c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8005950:	4660      	mov	r0, ip
 8005952:	4649      	mov	r1, r9
 8005954:	4664      	mov	r4, ip
 8005956:	f7fe ff9f 	bl	8004898 <d_print_comp>
 800595a:	783b      	ldrb	r3, [r7, #0]
 800595c:	2b04      	cmp	r3, #4
 800595e:	464e      	mov	r6, r9
 8005960:	d074      	beq.n	8005a4c <d_print_comp+0x11b4>
 8005962:	f1b8 0f00 	cmp.w	r8, #0
 8005966:	d00c      	beq.n	8005982 <d_print_comp+0x10ea>
 8005968:	eb0a 1a08 	add.w	sl, sl, r8, lsl #4
 800596c:	4645      	mov	r5, r8
 800596e:	f85a 3c08 	ldr.w	r3, [sl, #-8]
 8005972:	3d01      	subs	r5, #1
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 84d1 	beq.w	800631c <d_print_comp+0x1a84>
 800597a:	f1aa 0a10 	sub.w	sl, sl, #16
 800597e:	2d00      	cmp	r5, #0
 8005980:	d1f5      	bne.n	800596e <d_print_comp+0x10d6>
 8005982:	9b00      	ldr	r3, [sp, #0]
 8005984:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005988:	f7ff b828 	b.w	80049dc <d_print_comp+0x144>
 800598c:	0800e5df 	.word	0x0800e5df
 8005990:	0800e5b7 	.word	0x0800e5b7
 8005994:	0800e744 	.word	0x0800e744
 8005998:	0800e548 	.word	0x0800e548
 800599c:	0800e577 	.word	0x0800e577
 80059a0:	0800e56c 	.word	0x0800e56c
 80059a4:	0800e583 	.word	0x0800e583
 80059a8:	f011 0604 	ands.w	r6, r1, #4
 80059ac:	f040 8319 	bne.w	8005fe2 <d_print_comp+0x174a>
 80059b0:	68ab      	ldr	r3, [r5, #8]
 80059b2:	686d      	ldr	r5, [r5, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f43f a811 	beq.w	80049dc <d_print_comp+0x144>
 80059ba:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80059be:	eb05 0803 	add.w	r8, r5, r3
 80059c2:	e009      	b.n	80059d8 <d_print_comp+0x1140>
 80059c4:	460b      	mov	r3, r1
 80059c6:	3101      	adds	r1, #1
 80059c8:	4545      	cmp	r5, r8
 80059ca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80059ce:	54e7      	strb	r7, [r4, r3]
 80059d0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80059d4:	f43f a802 	beq.w	80049dc <d_print_comp+0x144>
 80059d8:	29ff      	cmp	r1, #255	; 0xff
 80059da:	f815 7b01 	ldrb.w	r7, [r5], #1
 80059de:	d1f1      	bne.n	80059c4 <d_print_comp+0x112c>
 80059e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80059e4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80059e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80059ec:	4620      	mov	r0, r4
 80059ee:	4798      	blx	r3
 80059f0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80059f4:	3301      	adds	r3, #1
 80059f6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80059fa:	2101      	movs	r1, #1
 80059fc:	2300      	movs	r3, #0
 80059fe:	e7e3      	b.n	80059c8 <d_print_comp+0x1130>
 8005a00:	2301      	movs	r3, #1
 8005a02:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8005a06:	f7fe bfe9 	b.w	80049dc <d_print_comp+0x144>
 8005a0a:	688a      	ldr	r2, [r1, #8]
 8005a0c:	2a01      	cmp	r2, #1
 8005a0e:	f47f a989 	bne.w	8004d24 <d_print_comp+0x48c>
 8005a12:	684a      	ldr	r2, [r1, #4]
 8005a14:	7812      	ldrb	r2, [r2, #0]
 8005a16:	2a3e      	cmp	r2, #62	; 0x3e
 8005a18:	f47f a984 	bne.w	8004d24 <d_print_comp+0x48c>
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	2128      	movs	r1, #40	; 0x28
 8005a20:	f7fe fd06 	bl	8004430 <d_append_char>
 8005a24:	686b      	ldr	r3, [r5, #4]
 8005a26:	68af      	ldr	r7, [r5, #8]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	6818      	ldr	r0, [r3, #0]
 8005a2c:	f7ff b97b 	b.w	8004d26 <d_print_comp+0x48e>
 8005a30:	ab14      	add	r3, sp, #80	; 0x50
 8005a32:	9703      	str	r7, [sp, #12]
 8005a34:	f843 cd48 	str.w	ip, [r3, #-72]!
 8005a38:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8005a3c:	68aa      	ldr	r2, [r5, #8]
 8005a3e:	4620      	mov	r0, r4
 8005a40:	4631      	mov	r1, r6
 8005a42:	f7fe ff29 	bl	8004898 <d_print_comp>
 8005a46:	783b      	ldrb	r3, [r7, #0]
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d18d      	bne.n	8005968 <d_print_comp+0x10d0>
 8005a4c:	9b02      	ldr	r3, [sp, #8]
 8005a4e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8005a52:	e786      	b.n	8005962 <d_print_comp+0x10ca>
 8005a54:	3701      	adds	r7, #1
 8005a56:	4547      	cmp	r7, r8
 8005a58:	f47f a816 	bne.w	8004a88 <d_print_comp+0x1f0>
 8005a5c:	f7fe bfbe 	b.w	80049dc <d_print_comp+0x144>
 8005a60:	687f      	ldr	r7, [r7, #4]
 8005a62:	b11f      	cbz	r7, 8005a6c <d_print_comp+0x11d4>
 8005a64:	f1b8 0f04 	cmp.w	r8, #4
 8005a68:	f47f af1d 	bne.w	80058a6 <d_print_comp+0x100e>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8005a72:	f7fe bfb3 	b.w	80049dc <d_print_comp+0x144>
 8005a76:	4fda      	ldr	r7, [pc, #872]	; (8005de0 <d_print_comp+0x1548>)
 8005a78:	686a      	ldr	r2, [r5, #4]
 8005a7a:	4631      	mov	r1, r6
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f7fe ff0b 	bl	8004898 <d_print_comp>
 8005a82:	f107 0a04 	add.w	sl, r7, #4
 8005a86:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005a8a:	f04f 0900 	mov.w	r9, #0
 8005a8e:	e009      	b.n	8005aa4 <d_print_comp+0x120c>
 8005a90:	460b      	mov	r3, r1
 8005a92:	3101      	adds	r1, #1
 8005a94:	4557      	cmp	r7, sl
 8005a96:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005a9a:	f804 8003 	strb.w	r8, [r4, r3]
 8005a9e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005aa2:	d013      	beq.n	8005acc <d_print_comp+0x1234>
 8005aa4:	29ff      	cmp	r1, #255	; 0xff
 8005aa6:	f817 8b01 	ldrb.w	r8, [r7], #1
 8005aaa:	d1f1      	bne.n	8005a90 <d_print_comp+0x11f8>
 8005aac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ab0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005ab4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ab8:	4620      	mov	r0, r4
 8005aba:	4798      	blx	r3
 8005abc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	2300      	movs	r3, #0
 8005aca:	e7e3      	b.n	8005a94 <d_print_comp+0x11fc>
 8005acc:	4620      	mov	r0, r4
 8005ace:	4631      	mov	r1, r6
 8005ad0:	68aa      	ldr	r2, [r5, #8]
 8005ad2:	f7fe fee1 	bl	8004898 <d_print_comp>
 8005ad6:	f7fe bf81 	b.w	80049dc <d_print_comp+0x144>
 8005ada:	4620      	mov	r0, r4
 8005adc:	4631      	mov	r1, r6
 8005ade:	686a      	ldr	r2, [r5, #4]
 8005ae0:	f7fe feda 	bl	8004898 <d_print_comp>
 8005ae4:	f7fe bf7a 	b.w	80049dc <d_print_comp+0x144>
 8005ae8:	4620      	mov	r0, r4
 8005aea:	4631      	mov	r1, r6
 8005aec:	686a      	ldr	r2, [r5, #4]
 8005aee:	f7fe fed3 	bl	8004898 <d_print_comp>
 8005af2:	f7fe bf73 	b.w	80049dc <d_print_comp+0x144>
 8005af6:	4620      	mov	r0, r4
 8005af8:	4631      	mov	r1, r6
 8005afa:	686a      	ldr	r2, [r5, #4]
 8005afc:	f7fe fecc 	bl	8004898 <d_print_comp>
 8005b00:	f7fe bf6c 	b.w	80049dc <d_print_comp+0x144>
 8005b04:	4620      	mov	r0, r4
 8005b06:	4631      	mov	r1, r6
 8005b08:	686a      	ldr	r2, [r5, #4]
 8005b0a:	f7fe fec5 	bl	8004898 <d_print_comp>
 8005b0e:	f7fe bf65 	b.w	80049dc <d_print_comp+0x144>
 8005b12:	4620      	mov	r0, r4
 8005b14:	4631      	mov	r1, r6
 8005b16:	686a      	ldr	r2, [r5, #4]
 8005b18:	f7fe febe 	bl	8004898 <d_print_comp>
 8005b1c:	f7fe bf5e 	b.w	80049dc <d_print_comp+0x144>
 8005b20:	4620      	mov	r0, r4
 8005b22:	4631      	mov	r1, r6
 8005b24:	686a      	ldr	r2, [r5, #4]
 8005b26:	f7fe feb7 	bl	8004898 <d_print_comp>
 8005b2a:	f7fe bf57 	b.w	80049dc <d_print_comp+0x144>
 8005b2e:	4620      	mov	r0, r4
 8005b30:	4631      	mov	r1, r6
 8005b32:	686a      	ldr	r2, [r5, #4]
 8005b34:	f7fe feb0 	bl	8004898 <d_print_comp>
 8005b38:	f7fe bf50 	b.w	80049dc <d_print_comp+0x144>
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	4631      	mov	r1, r6
 8005b40:	686a      	ldr	r2, [r5, #4]
 8005b42:	f7fe fea9 	bl	8004898 <d_print_comp>
 8005b46:	f7fe bf49 	b.w	80049dc <d_print_comp+0x144>
 8005b4a:	4fa6      	ldr	r7, [pc, #664]	; (8005de4 <d_print_comp+0x154c>)
 8005b4c:	68aa      	ldr	r2, [r5, #8]
 8005b4e:	4631      	mov	r1, r6
 8005b50:	4620      	mov	r0, r4
 8005b52:	f7fe fea1 	bl	8004898 <d_print_comp>
 8005b56:	f107 0a05 	add.w	sl, r7, #5
 8005b5a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005b5e:	f04f 0900 	mov.w	r9, #0
 8005b62:	e009      	b.n	8005b78 <d_print_comp+0x12e0>
 8005b64:	460b      	mov	r3, r1
 8005b66:	3101      	adds	r1, #1
 8005b68:	4557      	cmp	r7, sl
 8005b6a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005b6e:	f804 8003 	strb.w	r8, [r4, r3]
 8005b72:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005b76:	d013      	beq.n	8005ba0 <d_print_comp+0x1308>
 8005b78:	29ff      	cmp	r1, #255	; 0xff
 8005b7a:	f817 8b01 	ldrb.w	r8, [r7], #1
 8005b7e:	d1f1      	bne.n	8005b64 <d_print_comp+0x12cc>
 8005b80:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005b84:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005b88:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	4798      	blx	r3
 8005b90:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005b94:	3301      	adds	r3, #1
 8005b96:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	e7e3      	b.n	8005b68 <d_print_comp+0x12d0>
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	686a      	ldr	r2, [r5, #4]
 8005ba6:	f7fe fe77 	bl	8004898 <d_print_comp>
 8005baa:	f7fe bf17 	b.w	80049dc <d_print_comp+0x144>
 8005bae:	4620      	mov	r0, r4
 8005bb0:	4631      	mov	r1, r6
 8005bb2:	686a      	ldr	r2, [r5, #4]
 8005bb4:	f7fe fe70 	bl	8004898 <d_print_comp>
 8005bb8:	f7fe bf10 	b.w	80049dc <d_print_comp+0x144>
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	4631      	mov	r1, r6
 8005bc0:	686a      	ldr	r2, [r5, #4]
 8005bc2:	f7fe fe69 	bl	8004898 <d_print_comp>
 8005bc6:	f7fe bf09 	b.w	80049dc <d_print_comp+0x144>
 8005bca:	4620      	mov	r0, r4
 8005bcc:	4631      	mov	r1, r6
 8005bce:	68aa      	ldr	r2, [r5, #8]
 8005bd0:	f7fe fe62 	bl	8004898 <d_print_comp>
 8005bd4:	f7fe bf02 	b.w	80049dc <d_print_comp+0x144>
 8005bd8:	4620      	mov	r0, r4
 8005bda:	4631      	mov	r1, r6
 8005bdc:	686a      	ldr	r2, [r5, #4]
 8005bde:	f7fe fe5b 	bl	8004898 <d_print_comp>
 8005be2:	f7fe befb 	b.w	80049dc <d_print_comp+0x144>
 8005be6:	4620      	mov	r0, r4
 8005be8:	4631      	mov	r1, r6
 8005bea:	686a      	ldr	r2, [r5, #4]
 8005bec:	f7fe fe54 	bl	8004898 <d_print_comp>
 8005bf0:	f7fe bef4 	b.w	80049dc <d_print_comp+0x144>
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	686a      	ldr	r2, [r5, #4]
 8005bfa:	f7fe fe4d 	bl	8004898 <d_print_comp>
 8005bfe:	f7fe beed 	b.w	80049dc <d_print_comp+0x144>
 8005c02:	4620      	mov	r0, r4
 8005c04:	4631      	mov	r1, r6
 8005c06:	686a      	ldr	r2, [r5, #4]
 8005c08:	f7fe fe46 	bl	8004898 <d_print_comp>
 8005c0c:	f7fe bee6 	b.w	80049dc <d_print_comp+0x144>
 8005c10:	4620      	mov	r0, r4
 8005c12:	4631      	mov	r1, r6
 8005c14:	686a      	ldr	r2, [r5, #4]
 8005c16:	f7fe fe3f 	bl	8004898 <d_print_comp>
 8005c1a:	f7fe bedf 	b.w	80049dc <d_print_comp+0x144>
 8005c1e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005c22:	29ff      	cmp	r1, #255	; 0xff
 8005c24:	f000 83b3 	beq.w	800638e <d_print_comp+0x1af6>
 8005c28:	1c4a      	adds	r2, r1, #1
 8005c2a:	232e      	movs	r3, #46	; 0x2e
 8005c2c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005c30:	5463      	strb	r3, [r4, r1]
 8005c32:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005c36:	68ad      	ldr	r5, [r5, #8]
 8005c38:	782b      	ldrb	r3, [r5, #0]
 8005c3a:	2b45      	cmp	r3, #69	; 0x45
 8005c3c:	f000 8229 	beq.w	8006092 <d_print_comp+0x17fa>
 8005c40:	4620      	mov	r0, r4
 8005c42:	4631      	mov	r1, r6
 8005c44:	462a      	mov	r2, r5
 8005c46:	f7fe fe27 	bl	8004898 <d_print_comp>
 8005c4a:	f7fe bec7 	b.w	80049dc <d_print_comp+0x144>
 8005c4e:	4620      	mov	r0, r4
 8005c50:	2128      	movs	r1, #40	; 0x28
 8005c52:	f7fe fbed 	bl	8004430 <d_append_char>
 8005c56:	4620      	mov	r0, r4
 8005c58:	4631      	mov	r1, r6
 8005c5a:	686a      	ldr	r2, [r5, #4]
 8005c5c:	f7fe fe1c 	bl	8004898 <d_print_comp>
 8005c60:	4620      	mov	r0, r4
 8005c62:	2129      	movs	r1, #41	; 0x29
 8005c64:	f7fe fbe4 	bl	8004430 <d_append_char>
 8005c68:	782b      	ldrb	r3, [r5, #0]
 8005c6a:	2b3c      	cmp	r3, #60	; 0x3c
 8005c6c:	f000 8362 	beq.w	8006334 <d_print_comp+0x1a9c>
 8005c70:	2f08      	cmp	r7, #8
 8005c72:	f47f a809 	bne.w	8004c88 <d_print_comp+0x3f0>
 8005c76:	4620      	mov	r0, r4
 8005c78:	215b      	movs	r1, #91	; 0x5b
 8005c7a:	f7fe fbd9 	bl	8004430 <d_append_char>
 8005c7e:	4620      	mov	r0, r4
 8005c80:	4631      	mov	r1, r6
 8005c82:	68aa      	ldr	r2, [r5, #8]
 8005c84:	f7fe fe08 	bl	8004898 <d_print_comp>
 8005c88:	4620      	mov	r0, r4
 8005c8a:	215d      	movs	r1, #93	; 0x5d
 8005c8c:	f7fe fbd0 	bl	8004430 <d_append_char>
 8005c90:	f7fe bea4 	b.w	80049dc <d_print_comp+0x144>
 8005c94:	68aa      	ldr	r2, [r5, #8]
 8005c96:	f8d4 5120 	ldr.w	r5, [r4, #288]	; 0x120
 8005c9a:	460f      	mov	r7, r1
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	4631      	mov	r1, r6
 8005ca0:	f7fe fdfa 	bl	8004898 <d_print_comp>
 8005ca4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005ca8:	42ab      	cmp	r3, r5
 8005caa:	f47e ae97 	bne.w	80049dc <d_print_comp+0x144>
 8005cae:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005cb2:	42bb      	cmp	r3, r7
 8005cb4:	f47e ae92 	bne.w	80049dc <d_print_comp+0x144>
 8005cb8:	3f02      	subs	r7, #2
 8005cba:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8005cbe:	f7fe be8d 	b.w	80049dc <d_print_comp+0x144>
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	462a      	mov	r2, r5
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	f000 fc58 	bl	800657c <d_print_mod>
 8005ccc:	f7ff baa5 	b.w	800521a <d_print_comp+0x982>
 8005cd0:	686b      	ldr	r3, [r5, #4]
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	f1b8 0f00 	cmp.w	r8, #0
 8005cd8:	f47e aecf 	bne.w	8004a7a <d_print_comp+0x1e2>
 8005cdc:	f7fe be7e 	b.w	80049dc <d_print_comp+0x144>
 8005ce0:	2700      	movs	r7, #0
 8005ce2:	f7fe bfc0 	b.w	8004c66 <d_print_comp+0x3ce>
 8005ce6:	4d40      	ldr	r5, [pc, #256]	; (8005de8 <d_print_comp+0x1550>)
 8005ce8:	4698      	mov	r8, r3
 8005cea:	1daf      	adds	r7, r5, #6
 8005cec:	e009      	b.n	8005d02 <d_print_comp+0x146a>
 8005cee:	460b      	mov	r3, r1
 8005cf0:	3101      	adds	r1, #1
 8005cf2:	42bd      	cmp	r5, r7
 8005cf4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005cf8:	54e6      	strb	r6, [r4, r3]
 8005cfa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005cfe:	f43e ae6d 	beq.w	80049dc <d_print_comp+0x144>
 8005d02:	29ff      	cmp	r1, #255	; 0xff
 8005d04:	f815 6b01 	ldrb.w	r6, [r5], #1
 8005d08:	d1f1      	bne.n	8005cee <d_print_comp+0x1456>
 8005d0a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d0e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005d12:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005d16:	4620      	mov	r0, r4
 8005d18:	4798      	blx	r3
 8005d1a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005d1e:	3301      	adds	r3, #1
 8005d20:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005d24:	2101      	movs	r1, #1
 8005d26:	2300      	movs	r3, #0
 8005d28:	e7e3      	b.n	8005cf2 <d_print_comp+0x145a>
 8005d2a:	686b      	ldr	r3, [r5, #4]
 8005d2c:	68df      	ldr	r7, [r3, #12]
 8005d2e:	689d      	ldr	r5, [r3, #8]
 8005d30:	2f00      	cmp	r7, #0
 8005d32:	f43e ae53 	beq.w	80049dc <d_print_comp+0x144>
 8005d36:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005d3a:	442f      	add	r7, r5
 8005d3c:	f04f 0800 	mov.w	r8, #0
 8005d40:	e009      	b.n	8005d56 <d_print_comp+0x14be>
 8005d42:	460b      	mov	r3, r1
 8005d44:	3101      	adds	r1, #1
 8005d46:	42bd      	cmp	r5, r7
 8005d48:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005d4c:	54e6      	strb	r6, [r4, r3]
 8005d4e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005d52:	f43e ae43 	beq.w	80049dc <d_print_comp+0x144>
 8005d56:	29ff      	cmp	r1, #255	; 0xff
 8005d58:	f815 6b01 	ldrb.w	r6, [r5], #1
 8005d5c:	d1f1      	bne.n	8005d42 <d_print_comp+0x14aa>
 8005d5e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d62:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005d66:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	4798      	blx	r3
 8005d6e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005d72:	3301      	adds	r3, #1
 8005d74:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005d78:	2101      	movs	r1, #1
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	e7e3      	b.n	8005d46 <d_print_comp+0x14ae>
 8005d7e:	491b      	ldr	r1, [pc, #108]	; (8005dec <d_print_comp+0x1554>)
 8005d80:	f7fe fd18 	bl	80047b4 <d_append_string>
 8005d84:	4620      	mov	r0, r4
 8005d86:	4631      	mov	r1, r6
 8005d88:	f7fe fd48 	bl	800481c <d_append_num>
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	217d      	movs	r1, #125	; 0x7d
 8005d90:	f7fe fb4e 	bl	8004430 <d_append_char>
 8005d94:	f7fe be22 	b.w	80049dc <d_print_comp+0x144>
 8005d98:	4605      	mov	r5, r0
 8005d9a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8005d9e:	f7ff ba28 	b.w	80051f2 <d_print_comp+0x95a>
 8005da2:	f021 0660 	bic.w	r6, r1, #96	; 0x60
 8005da6:	f105 0208 	add.w	r2, r5, #8
 8005daa:	4631      	mov	r1, r6
 8005dac:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8005db0:	f001 f866 	bl	8006e80 <d_print_function_type.isra.11>
 8005db4:	686a      	ldr	r2, [r5, #4]
 8005db6:	2a00      	cmp	r2, #0
 8005db8:	f43e ae10 	beq.w	80049dc <d_print_comp+0x144>
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	4631      	mov	r1, r6
 8005dc0:	f7fe fd6a 	bl	8004898 <d_print_comp>
 8005dc4:	f7fe be0a 	b.w	80049dc <d_print_comp+0x144>
 8005dc8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005dcc:	f7ff b8c6 	b.w	8004f5c <d_print_comp+0x6c4>
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	2120      	movs	r1, #32
 8005dd4:	f7fe fb2c 	bl	8004430 <d_append_char>
 8005dd8:	6875      	ldr	r5, [r6, #4]
 8005dda:	f7ff b820 	b.w	8004e1e <d_print_comp+0x586>
 8005dde:	bf00      	nop
 8005de0:	0800e5a0 	.word	0x0800e5a0
 8005de4:	0800e664 	.word	0x0800e664
 8005de8:	0800e6c4 	.word	0x0800e6c4
 8005dec:	0800e74c 	.word	0x0800e74c
 8005df0:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
 8005df4:	f8d4 c124 	ldr.w	ip, [r4, #292]	; 0x124
 8005df8:	2900      	cmp	r1, #0
 8005dfa:	dd15      	ble.n	8005e28 <d_print_comp+0x1590>
 8005dfc:	f8dc 3000 	ldr.w	r3, [ip]
 8005e00:	4298      	cmp	r0, r3
 8005e02:	f000 823c 	beq.w	800627e <d_print_comp+0x19e6>
 8005e06:	f10c 0208 	add.w	r2, ip, #8
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	46be      	mov	lr, r7
 8005e0e:	e004      	b.n	8005e1a <d_print_comp+0x1582>
 8005e10:	f85c 7033 	ldr.w	r7, [ip, r3, lsl #3]
 8005e14:	42b8      	cmp	r0, r7
 8005e16:	f000 8233 	beq.w	8006280 <d_print_comp+0x19e8>
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	428b      	cmp	r3, r1
 8005e1e:	4690      	mov	r8, r2
 8005e20:	f102 0208 	add.w	r2, r2, #8
 8005e24:	d1f4      	bne.n	8005e10 <d_print_comp+0x1578>
 8005e26:	4677      	mov	r7, lr
 8005e28:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8005e2c:	4299      	cmp	r1, r3
 8005e2e:	f280 835e 	bge.w	80064ee <d_print_comp+0x1c56>
 8005e32:	f8d4 8110 	ldr.w	r8, [r4, #272]	; 0x110
 8005e36:	1c4b      	adds	r3, r1, #1
 8005e38:	eb0c 09c1 	add.w	r9, ip, r1, lsl #3
 8005e3c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005e40:	f109 0904 	add.w	r9, r9, #4
 8005e44:	f84c 0031 	str.w	r0, [ip, r1, lsl #3]
 8005e48:	f1b8 0f00 	cmp.w	r8, #0
 8005e4c:	d020      	beq.n	8005e90 <d_print_comp+0x15f8>
 8005e4e:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8005e52:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 8005e56:	428b      	cmp	r3, r1
 8005e58:	f280 8349 	bge.w	80064ee <d_print_comp+0x1c56>
 8005e5c:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
 8005e60:	468c      	mov	ip, r1
 8005e62:	e002      	b.n	8005e6a <d_print_comp+0x15d2>
 8005e64:	4563      	cmp	r3, ip
 8005e66:	f000 8340 	beq.w	80064ea <d_print_comp+0x1c52>
 8005e6a:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 8005e6e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005e72:	4472      	add	r2, lr
 8005e74:	3301      	adds	r3, #1
 8005e76:	6051      	str	r1, [r2, #4]
 8005e78:	f8c9 2000 	str.w	r2, [r9]
 8005e7c:	f8d8 8000 	ldr.w	r8, [r8]
 8005e80:	f10e 0e08 	add.w	lr, lr, #8
 8005e84:	4691      	mov	r9, r2
 8005e86:	f1b8 0f00 	cmp.w	r8, #0
 8005e8a:	d1eb      	bne.n	8005e64 <d_print_comp+0x15cc>
 8005e8c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
 8005e90:	f04f 0800 	mov.w	r8, #0
 8005e94:	1d01      	adds	r1, r0, #4
 8005e96:	f8c9 8000 	str.w	r8, [r9]
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f7fe fbe6 	bl	800466c <d_lookup_template_argument.isra.6>
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	f040 81fc 	bne.w	800629e <d_print_comp+0x1a06>
 8005ea6:	f7fe bda1 	b.w	80049ec <d_print_comp+0x154>
 8005eaa:	4fd6      	ldr	r7, [pc, #856]	; (8006204 <d_print_comp+0x196c>)
 8005eac:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005eb0:	f107 0a05 	add.w	sl, r7, #5
 8005eb4:	f04f 0800 	mov.w	r8, #0
 8005eb8:	e00a      	b.n	8005ed0 <d_print_comp+0x1638>
 8005eba:	460b      	mov	r3, r1
 8005ebc:	3101      	adds	r1, #1
 8005ebe:	4557      	cmp	r7, sl
 8005ec0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005ec4:	f804 9003 	strb.w	r9, [r4, r3]
 8005ec8:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8005ecc:	f43f a830 	beq.w	8004f30 <d_print_comp+0x698>
 8005ed0:	29ff      	cmp	r1, #255	; 0xff
 8005ed2:	f817 9b01 	ldrb.w	r9, [r7], #1
 8005ed6:	d1f0      	bne.n	8005eba <d_print_comp+0x1622>
 8005ed8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005edc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005ee0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	4798      	blx	r3
 8005ee8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005eec:	3301      	adds	r3, #1
 8005eee:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	e7e2      	b.n	8005ebe <d_print_comp+0x1626>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	49c3      	ldr	r1, [pc, #780]	; (8006208 <d_print_comp+0x1970>)
 8005efc:	f8d3 8000 	ldr.w	r8, [r3]
 8005f00:	4640      	mov	r0, r8
 8005f02:	f006 ff0e 	bl	800cd22 <strcmp>
 8005f06:	782b      	ldrb	r3, [r5, #0]
 8005f08:	b910      	cbnz	r0, 8005f10 <d_print_comp+0x1678>
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	f000 82b3 	beq.w	8006476 <d_print_comp+0x1bde>
 8005f10:	2b37      	cmp	r3, #55	; 0x37
 8005f12:	f000 82cf 	beq.w	80064b4 <d_print_comp+0x1c1c>
 8005f16:	4620      	mov	r0, r4
 8005f18:	4631      	mov	r1, r6
 8005f1a:	463a      	mov	r2, r7
 8005f1c:	f001 f952 	bl	80071c4 <d_print_expr_op>
 8005f20:	4640      	mov	r0, r8
 8005f22:	49ba      	ldr	r1, [pc, #744]	; (800620c <d_print_comp+0x1974>)
 8005f24:	f006 fefd 	bl	800cd22 <strcmp>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	f000 814d 	beq.w	80061c8 <d_print_comp+0x1930>
 8005f2e:	4640      	mov	r0, r8
 8005f30:	49b7      	ldr	r1, [pc, #732]	; (8006210 <d_print_comp+0x1978>)
 8005f32:	f006 fef6 	bl	800cd22 <strcmp>
 8005f36:	2800      	cmp	r0, #0
 8005f38:	f47e aebc 	bne.w	8004cb4 <d_print_comp+0x41c>
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	2128      	movs	r1, #40	; 0x28
 8005f40:	f7fe fa76 	bl	8004430 <d_append_char>
 8005f44:	4620      	mov	r0, r4
 8005f46:	4631      	mov	r1, r6
 8005f48:	462a      	mov	r2, r5
 8005f4a:	f7fe fca5 	bl	8004898 <d_print_comp>
 8005f4e:	4620      	mov	r0, r4
 8005f50:	2129      	movs	r1, #41	; 0x29
 8005f52:	f7fe fa6d 	bl	8004430 <d_append_char>
 8005f56:	f7fe bd41 	b.w	80049dc <d_print_comp+0x144>
 8005f5a:	2128      	movs	r1, #40	; 0x28
 8005f5c:	f7fe fa68 	bl	8004430 <d_append_char>
 8005f60:	4620      	mov	r0, r4
 8005f62:	4631      	mov	r1, r6
 8005f64:	1d3a      	adds	r2, r7, #4
 8005f66:	f001 f87d 	bl	8007064 <d_print_cast.isra.12>
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	2129      	movs	r1, #41	; 0x29
 8005f6e:	f7fe fa5f 	bl	8004430 <d_append_char>
 8005f72:	f7fe be9f 	b.w	8004cb4 <d_print_comp+0x41c>
 8005f76:	f04f 0800 	mov.w	r8, #0
 8005f7a:	f804 8007 	strb.w	r8, [r4, r7]
 8005f7e:	4639      	mov	r1, r7
 8005f80:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005f84:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005f88:	4620      	mov	r0, r4
 8005f8a:	4798      	blx	r3
 8005f8c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005f90:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8005f94:	3301      	adds	r3, #1
 8005f96:	4647      	mov	r7, r8
 8005f98:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005f9c:	f7fe bf9d 	b.w	8004eda <d_print_comp+0x642>
 8005fa0:	4660      	mov	r0, ip
 8005fa2:	4688      	mov	r8, r1
 8005fa4:	f7ff b925 	b.w	80051f2 <d_print_comp+0x95a>
 8005fa8:	4620      	mov	r0, r4
 8005faa:	4631      	mov	r1, r6
 8005fac:	686a      	ldr	r2, [r5, #4]
 8005fae:	f7fe fc73 	bl	8004898 <d_print_comp>
 8005fb2:	f7fe bd13 	b.w	80049dc <d_print_comp+0x144>
 8005fb6:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8005fba:	e008      	b.n	8005fce <d_print_comp+0x1736>
 8005fbc:	6880      	ldr	r0, [r0, #8]
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	f43e ad13 	beq.w	80049ec <d_print_comp+0x154>
 8005fc6:	7802      	ldrb	r2, [r0, #0]
 8005fc8:	2a2f      	cmp	r2, #47	; 0x2f
 8005fca:	f47e ad0f 	bne.w	80049ec <d_print_comp+0x154>
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	dcf4      	bgt.n	8005fbc <d_print_comp+0x1724>
 8005fd2:	f47e ad0b 	bne.w	80049ec <d_print_comp+0x154>
 8005fd6:	6840      	ldr	r0, [r0, #4]
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	f47f aba4 	bne.w	8005726 <d_print_comp+0xe8e>
 8005fde:	f7fe bd05 	b.w	80049ec <d_print_comp+0x154>
 8005fe2:	686e      	ldr	r6, [r5, #4]
 8005fe4:	68ab      	ldr	r3, [r5, #8]
 8005fe6:	eb06 0803 	add.w	r8, r6, r3
 8005fea:	4546      	cmp	r6, r8
 8005fec:	f4be acf6 	bcs.w	80049dc <d_print_comp+0x144>
 8005ff0:	2700      	movs	r7, #0
 8005ff2:	e00d      	b.n	8006010 <d_print_comp+0x1778>
 8005ff4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005ff8:	29ff      	cmp	r1, #255	; 0xff
 8005ffa:	d035      	beq.n	8006068 <d_print_comp+0x17d0>
 8005ffc:	1c4b      	adds	r3, r1, #1
 8005ffe:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006002:	5465      	strb	r5, [r4, r1]
 8006004:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8006008:	3601      	adds	r6, #1
 800600a:	45b0      	cmp	r8, r6
 800600c:	f67e ace6 	bls.w	80049dc <d_print_comp+0x144>
 8006010:	ebc6 0308 	rsb	r3, r6, r8
 8006014:	2b03      	cmp	r3, #3
 8006016:	7835      	ldrb	r5, [r6, #0]
 8006018:	ddec      	ble.n	8005ff4 <d_print_comp+0x175c>
 800601a:	2d5f      	cmp	r5, #95	; 0x5f
 800601c:	d1ea      	bne.n	8005ff4 <d_print_comp+0x175c>
 800601e:	7872      	ldrb	r2, [r6, #1]
 8006020:	2a5f      	cmp	r2, #95	; 0x5f
 8006022:	d1e7      	bne.n	8005ff4 <d_print_comp+0x175c>
 8006024:	78b3      	ldrb	r3, [r6, #2]
 8006026:	2b55      	cmp	r3, #85	; 0x55
 8006028:	d001      	beq.n	800602e <d_print_comp+0x1796>
 800602a:	4615      	mov	r5, r2
 800602c:	e7e2      	b.n	8005ff4 <d_print_comp+0x175c>
 800602e:	1cf3      	adds	r3, r6, #3
 8006030:	4598      	cmp	r8, r3
 8006032:	d9fa      	bls.n	800602a <d_print_comp+0x1792>
 8006034:	2200      	movs	r2, #0
 8006036:	e005      	b.n	8006044 <d_print_comp+0x17ac>
 8006038:	460d      	mov	r5, r1
 800603a:	4543      	cmp	r3, r8
 800603c:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 8006040:	f000 8236 	beq.w	80064b0 <d_print_comp+0x1c18>
 8006044:	4699      	mov	r9, r3
 8006046:	f813 5b01 	ldrb.w	r5, [r3], #1
 800604a:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
 800604e:	b2c8      	uxtb	r0, r1
 8006050:	2809      	cmp	r0, #9
 8006052:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
 8006056:	d9ef      	bls.n	8006038 <d_print_comp+0x17a0>
 8006058:	f1be 0f05 	cmp.w	lr, #5
 800605c:	f1a5 0161 	sub.w	r1, r5, #97	; 0x61
 8006060:	f200 8138 	bhi.w	80062d4 <d_print_comp+0x1a3c>
 8006064:	3d37      	subs	r5, #55	; 0x37
 8006066:	e7e8      	b.n	800603a <d_print_comp+0x17a2>
 8006068:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800606c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8006070:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006074:	4620      	mov	r0, r4
 8006076:	4798      	blx	r3
 8006078:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800607c:	3301      	adds	r3, #1
 800607e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006082:	2100      	movs	r1, #0
 8006084:	2301      	movs	r3, #1
 8006086:	e7ba      	b.n	8005ffe <d_print_comp+0x1766>
 8006088:	2301      	movs	r3, #1
 800608a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800608e:	f7fe bca5 	b.w	80049dc <d_print_comp+0x144>
 8006092:	4620      	mov	r0, r4
 8006094:	495f      	ldr	r1, [pc, #380]	; (8006214 <d_print_comp+0x197c>)
 8006096:	f7fe fb8d 	bl	80047b4 <d_append_string>
 800609a:	68a9      	ldr	r1, [r5, #8]
 800609c:	4620      	mov	r0, r4
 800609e:	3101      	adds	r1, #1
 80060a0:	f7fe fbbc 	bl	800481c <d_append_num>
 80060a4:	4620      	mov	r0, r4
 80060a6:	495c      	ldr	r1, [pc, #368]	; (8006218 <d_print_comp+0x1980>)
 80060a8:	f7fe fb84 	bl	80047b4 <d_append_string>
 80060ac:	686d      	ldr	r5, [r5, #4]
 80060ae:	e5c7      	b.n	8005c40 <d_print_comp+0x13a8>
 80060b0:	2500      	movs	r5, #0
 80060b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80060b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80060ba:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80060be:	4620      	mov	r0, r4
 80060c0:	4798      	blx	r3
 80060c2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80060c6:	3301      	adds	r3, #1
 80060c8:	4629      	mov	r1, r5
 80060ca:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80060ce:	2201      	movs	r2, #1
 80060d0:	f7fe bcb5 	b.w	8004a3e <d_print_comp+0x1a6>
 80060d4:	2700      	movs	r7, #0
 80060d6:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80060da:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80060de:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 80060e2:	4798      	blx	r3
 80060e4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80060e8:	3301      	adds	r3, #1
 80060ea:	4639      	mov	r1, r7
 80060ec:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80060f0:	2201      	movs	r2, #1
 80060f2:	f7ff ba23 	b.w	800553c <d_print_comp+0xca4>
 80060f6:	2500      	movs	r5, #0
 80060f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80060fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006100:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006104:	4620      	mov	r0, r4
 8006106:	4798      	blx	r3
 8006108:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800610c:	3301      	adds	r3, #1
 800610e:	4629      	mov	r1, r5
 8006110:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006114:	2201      	movs	r2, #1
 8006116:	f7fe becc 	b.w	8004eb2 <d_print_comp+0x61a>
 800611a:	2500      	movs	r5, #0
 800611c:	4619      	mov	r1, r3
 800611e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006122:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006126:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800612a:	4620      	mov	r0, r4
 800612c:	4798      	blx	r3
 800612e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8006138:	462b      	mov	r3, r5
 800613a:	2201      	movs	r2, #1
 800613c:	f7fe bea8 	b.w	8004e90 <d_print_comp+0x5f8>
 8006140:	2500      	movs	r5, #0
 8006142:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006146:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800614a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800614e:	4620      	mov	r0, r4
 8006150:	4798      	blx	r3
 8006152:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006156:	3301      	adds	r3, #1
 8006158:	4629      	mov	r1, r5
 800615a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800615e:	2201      	movs	r2, #1
 8006160:	f7fe bc32 	b.w	80049c8 <d_print_comp+0x130>
 8006164:	2700      	movs	r7, #0
 8006166:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800616a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800616e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8006172:	4620      	mov	r0, r4
 8006174:	4798      	blx	r3
 8006176:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800617a:	3301      	adds	r3, #1
 800617c:	4639      	mov	r1, r7
 800617e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006182:	2201      	movs	r2, #1
 8006184:	f7fe bc0a 	b.w	800499c <d_print_comp+0x104>
 8006188:	aa14      	add	r2, sp, #80	; 0x50
 800618a:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 800618e:	f842 1d40 	str.w	r1, [r2, #-64]!
 8006192:	f026 0660 	bic.w	r6, r6, #96	; 0x60
 8006196:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 800619a:	686a      	ldr	r2, [r5, #4]
 800619c:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
 80061a0:	9306      	str	r3, [sp, #24]
 80061a2:	4631      	mov	r1, r6
 80061a4:	4620      	mov	r0, r4
 80061a6:	9505      	str	r5, [sp, #20]
 80061a8:	9707      	str	r7, [sp, #28]
 80061aa:	f7fe fb75 	bl	8004898 <d_print_comp>
 80061ae:	9b06      	ldr	r3, [sp, #24]
 80061b0:	9a04      	ldr	r2, [sp, #16]
 80061b2:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f47e ac10 	bne.w	80049dc <d_print_comp+0x144>
 80061bc:	4620      	mov	r0, r4
 80061be:	2120      	movs	r1, #32
 80061c0:	f7fe f936 	bl	8004430 <d_append_char>
 80061c4:	f7fe bfc8 	b.w	8005158 <d_print_comp+0x8c0>
 80061c8:	4620      	mov	r0, r4
 80061ca:	4631      	mov	r1, r6
 80061cc:	462a      	mov	r2, r5
 80061ce:	f7fe fb63 	bl	8004898 <d_print_comp>
 80061d2:	f7fe bc03 	b.w	80049dc <d_print_comp+0x144>
 80061d6:	68aa      	ldr	r2, [r5, #8]
 80061d8:	7812      	ldrb	r2, [r2, #0]
 80061da:	2a00      	cmp	r2, #0
 80061dc:	f47e ad43 	bne.w	8004c66 <d_print_comp+0x3ce>
 80061e0:	2b3c      	cmp	r3, #60	; 0x3c
 80061e2:	f000 8189 	beq.w	80064f8 <d_print_comp+0x1c60>
 80061e6:	4631      	mov	r1, r6
 80061e8:	68aa      	ldr	r2, [r5, #8]
 80061ea:	4620      	mov	r0, r4
 80061ec:	3f02      	subs	r7, #2
 80061ee:	f7fe fb53 	bl	8004898 <d_print_comp>
 80061f2:	2f04      	cmp	r7, #4
 80061f4:	f63e abf2 	bhi.w	80049dc <d_print_comp+0x144>
 80061f8:	e8df f007 	tbb	[pc, r7]
 80061fc:	161c2228 	.word	0x161c2228
 8006200:	10          	.byte	0x10
 8006201:	00          	.byte	0x00
 8006202:	bf00      	nop
 8006204:	0800e6b4 	.word	0x0800e6b4
 8006208:	0800e6e8 	.word	0x0800e6e8
 800620c:	0800e6ec 	.word	0x0800e6ec
 8006210:	0800ea04 	.word	0x0800ea04
 8006214:	0800e54c 	.word	0x0800e54c
 8006218:	0800e55c 	.word	0x0800e55c
 800621c:	4620      	mov	r0, r4
 800621e:	49cd      	ldr	r1, [pc, #820]	; (8006554 <d_print_comp+0x1cbc>)
 8006220:	f7fe fac8 	bl	80047b4 <d_append_string>
 8006224:	f7fe bbda 	b.w	80049dc <d_print_comp+0x144>
 8006228:	4620      	mov	r0, r4
 800622a:	49cb      	ldr	r1, [pc, #812]	; (8006558 <d_print_comp+0x1cc0>)
 800622c:	f7fe fac2 	bl	80047b4 <d_append_string>
 8006230:	f7fe bbd4 	b.w	80049dc <d_print_comp+0x144>
 8006234:	4620      	mov	r0, r4
 8006236:	49c9      	ldr	r1, [pc, #804]	; (800655c <d_print_comp+0x1cc4>)
 8006238:	f7fe fabc 	bl	80047b4 <d_append_string>
 800623c:	f7fe bbce 	b.w	80049dc <d_print_comp+0x144>
 8006240:	4620      	mov	r0, r4
 8006242:	216c      	movs	r1, #108	; 0x6c
 8006244:	f7fe f8f4 	bl	8004430 <d_append_char>
 8006248:	f7fe bbc8 	b.w	80049dc <d_print_comp+0x144>
 800624c:	4620      	mov	r0, r4
 800624e:	2175      	movs	r1, #117	; 0x75
 8006250:	f7fe f8ee 	bl	8004430 <d_append_char>
 8006254:	f7fe bbc2 	b.w	80049dc <d_print_comp+0x144>
 8006258:	ab14      	add	r3, sp, #80	; 0x50
 800625a:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 800625e:	6842      	ldr	r2, [r0, #4]
 8006260:	f843 1d40 	str.w	r1, [r3, #-64]!
 8006264:	2000      	movs	r0, #0
 8006266:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 800626a:	9505      	str	r5, [sp, #20]
 800626c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8006270:	9006      	str	r0, [sp, #24]
 8006272:	9107      	str	r1, [sp, #28]
 8006274:	2a00      	cmp	r2, #0
 8006276:	f47e afc8 	bne.w	800520a <d_print_comp+0x972>
 800627a:	f7fe bfc5 	b.w	8005208 <d_print_comp+0x970>
 800627e:	46e0      	mov	r8, ip
 8006280:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006284:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
 8006288:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800628c:	1d01      	adds	r1, r0, #4
 800628e:	4620      	mov	r0, r4
 8006290:	f7fe f9ec 	bl	800466c <d_lookup_template_argument.isra.6>
 8006294:	2800      	cmp	r0, #0
 8006296:	f43e aba7 	beq.w	80049e8 <d_print_comp+0x150>
 800629a:	f04f 0801 	mov.w	r8, #1
 800629e:	7803      	ldrb	r3, [r0, #0]
 80062a0:	2b2f      	cmp	r3, #47	; 0x2f
 80062a2:	f47e af9a 	bne.w	80051da <d_print_comp+0x942>
 80062a6:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 80062aa:	e008      	b.n	80062be <d_print_comp+0x1a26>
 80062ac:	6880      	ldr	r0, [r0, #8]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	2800      	cmp	r0, #0
 80062b2:	f43e ab96 	beq.w	80049e2 <d_print_comp+0x14a>
 80062b6:	7802      	ldrb	r2, [r0, #0]
 80062b8:	2a2f      	cmp	r2, #47	; 0x2f
 80062ba:	f47e ab92 	bne.w	80049e2 <d_print_comp+0x14a>
 80062be:	2b00      	cmp	r3, #0
 80062c0:	dcf4      	bgt.n	80062ac <d_print_comp+0x1a14>
 80062c2:	f47e ab8e 	bne.w	80049e2 <d_print_comp+0x14a>
 80062c6:	6840      	ldr	r0, [r0, #4]
 80062c8:	2800      	cmp	r0, #0
 80062ca:	f43e ab8a 	beq.w	80049e2 <d_print_comp+0x14a>
 80062ce:	7803      	ldrb	r3, [r0, #0]
 80062d0:	f7fe bf83 	b.w	80051da <d_print_comp+0x942>
 80062d4:	2905      	cmp	r1, #5
 80062d6:	f200 8113 	bhi.w	8006500 <d_print_comp+0x1c68>
 80062da:	3d57      	subs	r5, #87	; 0x57
 80062dc:	e6ad      	b.n	800603a <d_print_comp+0x17a2>
 80062de:	2600      	movs	r6, #0
 80062e0:	4619      	mov	r1, r3
 80062e2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80062e6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80062ea:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80062ee:	4620      	mov	r0, r4
 80062f0:	4798      	blx	r3
 80062f2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80062f6:	1c5a      	adds	r2, r3, #1
 80062f8:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 80062fc:	4633      	mov	r3, r6
 80062fe:	2101      	movs	r1, #1
 8006300:	f7fe be26 	b.w	8004f50 <d_print_comp+0x6b8>
 8006304:	4620      	mov	r0, r4
 8006306:	2120      	movs	r1, #32
 8006308:	f7fe f892 	bl	8004430 <d_append_char>
 800630c:	f7fe bb56 	b.w	80049bc <d_print_comp+0x124>
 8006310:	4620      	mov	r0, r4
 8006312:	2120      	movs	r1, #32
 8006314:	f7fe f88c 	bl	8004430 <d_append_char>
 8006318:	f7fe bb3a 	b.w	8004990 <d_print_comp+0xf8>
 800631c:	4620      	mov	r0, r4
 800631e:	2120      	movs	r1, #32
 8006320:	f7fe f886 	bl	8004430 <d_append_char>
 8006324:	4620      	mov	r0, r4
 8006326:	4631      	mov	r1, r6
 8006328:	f85a 2c0c 	ldr.w	r2, [sl, #-12]
 800632c:	f000 f926 	bl	800657c <d_print_mod>
 8006330:	f7ff bb23 	b.w	800597a <d_print_comp+0x10e2>
 8006334:	4620      	mov	r0, r4
 8006336:	212d      	movs	r1, #45	; 0x2d
 8006338:	f7fe f87a 	bl	8004430 <d_append_char>
 800633c:	e498      	b.n	8005c70 <d_print_comp+0x13d8>
 800633e:	7807      	ldrb	r7, [r0, #0]
 8006340:	f1a7 0e63 	sub.w	lr, r7, #99	; 0x63
 8006344:	f1be 0f01 	cmp.w	lr, #1
 8006348:	d903      	bls.n	8006352 <d_print_comp+0x1aba>
 800634a:	3f72      	subs	r7, #114	; 0x72
 800634c:	2f01      	cmp	r7, #1
 800634e:	f63e ace5 	bhi.w	8004d1c <d_print_comp+0x484>
 8006352:	4620      	mov	r0, r4
 8006354:	4631      	mov	r1, r6
 8006356:	f000 ff35 	bl	80071c4 <d_print_expr_op>
 800635a:	4620      	mov	r0, r4
 800635c:	213c      	movs	r1, #60	; 0x3c
 800635e:	f7fe f867 	bl	8004430 <d_append_char>
 8006362:	68ab      	ldr	r3, [r5, #8]
 8006364:	4620      	mov	r0, r4
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	4631      	mov	r1, r6
 800636a:	f7fe fa95 	bl	8004898 <d_print_comp>
 800636e:	4620      	mov	r0, r4
 8006370:	497b      	ldr	r1, [pc, #492]	; (8006560 <d_print_comp+0x1cc8>)
 8006372:	f7fe fa1f 	bl	80047b4 <d_append_string>
 8006376:	68ab      	ldr	r3, [r5, #8]
 8006378:	4631      	mov	r1, r6
 800637a:	4620      	mov	r0, r4
 800637c:	689a      	ldr	r2, [r3, #8]
 800637e:	f7fe fa8b 	bl	8004898 <d_print_comp>
 8006382:	4620      	mov	r0, r4
 8006384:	2129      	movs	r1, #41	; 0x29
 8006386:	f7fe f853 	bl	8004430 <d_append_char>
 800638a:	f7fe bb27 	b.w	80049dc <d_print_comp+0x144>
 800638e:	2700      	movs	r7, #0
 8006390:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006394:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006398:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800639c:	4620      	mov	r0, r4
 800639e:	4798      	blx	r3
 80063a0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80063a4:	3301      	adds	r3, #1
 80063a6:	4639      	mov	r1, r7
 80063a8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80063ac:	2201      	movs	r2, #1
 80063ae:	e43c      	b.n	8005c2a <d_print_comp+0x1392>
 80063b0:	9b00      	ldr	r3, [sp, #0]
 80063b2:	f7fe bec0 	b.w	8005136 <d_print_comp+0x89e>
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	496a      	ldr	r1, [pc, #424]	; (8006564 <d_print_comp+0x1ccc>)
 80063ba:	f006 fcc4 	bl	800cd46 <strncmp>
 80063be:	2800      	cmp	r0, #0
 80063c0:	f47e aadc 	bne.w	800497c <d_print_comp+0xe4>
 80063c4:	4631      	mov	r1, r6
 80063c6:	4620      	mov	r0, r4
 80063c8:	68aa      	ldr	r2, [r5, #8]
 80063ca:	f7fe fa65 	bl	8004898 <d_print_comp>
 80063ce:	4620      	mov	r0, r4
 80063d0:	4965      	ldr	r1, [pc, #404]	; (8006568 <d_print_comp+0x1cd0>)
 80063d2:	f7fe f9ef 	bl	80047b4 <d_append_string>
 80063d6:	f7fe bafd 	b.w	80049d4 <d_print_comp+0x13c>
 80063da:	4620      	mov	r0, r4
 80063dc:	215b      	movs	r1, #91	; 0x5b
 80063de:	f7fe f827 	bl	8004430 <d_append_char>
 80063e2:	68ab      	ldr	r3, [r5, #8]
 80063e4:	4631      	mov	r1, r6
 80063e6:	4620      	mov	r0, r4
 80063e8:	689a      	ldr	r2, [r3, #8]
 80063ea:	f7fe fa55 	bl	8004898 <d_print_comp>
 80063ee:	4620      	mov	r0, r4
 80063f0:	215d      	movs	r1, #93	; 0x5d
 80063f2:	f7fe f81d 	bl	8004430 <d_append_char>
 80063f6:	f7fe bcbb 	b.w	8004d70 <d_print_comp+0x4d8>
 80063fa:	68aa      	ldr	r2, [r5, #8]
 80063fc:	4620      	mov	r0, r4
 80063fe:	4631      	mov	r1, r6
 8006400:	f7fe fa4a 	bl	8004898 <d_print_comp>
 8006404:	9b06      	ldr	r3, [sp, #24]
 8006406:	9a00      	ldr	r2, [sp, #0]
 8006408:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 800640c:	2b00      	cmp	r3, #0
 800640e:	f47e aae5 	bne.w	80049dc <d_print_comp+0x144>
 8006412:	4613      	mov	r3, r2
 8006414:	f7fe be8f 	b.w	8005136 <d_print_comp+0x89e>
 8006418:	463a      	mov	r2, r7
 800641a:	4620      	mov	r0, r4
 800641c:	4631      	mov	r1, r6
 800641e:	f000 fed1 	bl	80071c4 <d_print_expr_op>
 8006422:	f7fe bc9f 	b.w	8004d64 <d_print_comp+0x4cc>
 8006426:	4642      	mov	r2, r8
 8006428:	4620      	mov	r0, r4
 800642a:	4631      	mov	r1, r6
 800642c:	f000 ff06 	bl	800723c <d_print_subexpr>
 8006430:	4620      	mov	r0, r4
 8006432:	4631      	mov	r1, r6
 8006434:	4652      	mov	r2, sl
 8006436:	f000 fec5 	bl	80071c4 <d_print_expr_op>
 800643a:	464a      	mov	r2, r9
 800643c:	4620      	mov	r0, r4
 800643e:	4631      	mov	r1, r6
 8006440:	f000 fefc 	bl	800723c <d_print_subexpr>
 8006444:	4620      	mov	r0, r4
 8006446:	4949      	ldr	r1, [pc, #292]	; (800656c <d_print_comp+0x1cd4>)
 8006448:	f7fe f9b4 	bl	80047b4 <d_append_string>
 800644c:	4620      	mov	r0, r4
 800644e:	4631      	mov	r1, r6
 8006450:	462a      	mov	r2, r5
 8006452:	f000 fef3 	bl	800723c <d_print_subexpr>
 8006456:	f7fe bac1 	b.w	80049dc <d_print_comp+0x144>
 800645a:	6893      	ldr	r3, [r2, #8]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b29      	cmp	r3, #41	; 0x29
 8006460:	bf1c      	itt	ne
 8006462:	2301      	movne	r3, #1
 8006464:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 8006468:	6852      	ldr	r2, [r2, #4]
 800646a:	4620      	mov	r0, r4
 800646c:	4631      	mov	r1, r6
 800646e:	f000 fee5 	bl	800723c <d_print_subexpr>
 8006472:	f7fe bc65 	b.w	8004d40 <d_print_comp+0x4a8>
 8006476:	686b      	ldr	r3, [r5, #4]
 8006478:	781a      	ldrb	r2, [r3, #0]
 800647a:	2a01      	cmp	r2, #1
 800647c:	f47f ad4b 	bne.w	8005f16 <d_print_comp+0x167e>
 8006480:	68aa      	ldr	r2, [r5, #8]
 8006482:	7812      	ldrb	r2, [r2, #0]
 8006484:	2a29      	cmp	r2, #41	; 0x29
 8006486:	bf08      	it	eq
 8006488:	461d      	moveq	r5, r3
 800648a:	e544      	b.n	8005f16 <d_print_comp+0x167e>
 800648c:	4631      	mov	r1, r6
 800648e:	4620      	mov	r0, r4
 8006490:	686a      	ldr	r2, [r5, #4]
 8006492:	f000 fed3 	bl	800723c <d_print_subexpr>
 8006496:	4620      	mov	r0, r4
 8006498:	4935      	ldr	r1, [pc, #212]	; (8006570 <d_print_comp+0x1cd8>)
 800649a:	f7fe f98b 	bl	80047b4 <d_append_string>
 800649e:	f7fe ba9d 	b.w	80049dc <d_print_comp+0x144>
 80064a2:	4660      	mov	r0, ip
 80064a4:	46e0      	mov	r8, ip
 80064a6:	f7fe bea4 	b.w	80051f2 <d_print_comp+0x95a>
 80064aa:	4664      	mov	r4, ip
 80064ac:	f7ff bade 	b.w	8005a6c <d_print_comp+0x11d4>
 80064b0:	255f      	movs	r5, #95	; 0x5f
 80064b2:	e59f      	b.n	8005ff4 <d_print_comp+0x175c>
 80064b4:	686a      	ldr	r2, [r5, #4]
 80064b6:	4620      	mov	r0, r4
 80064b8:	4631      	mov	r1, r6
 80064ba:	f000 febf 	bl	800723c <d_print_subexpr>
 80064be:	4620      	mov	r0, r4
 80064c0:	4631      	mov	r1, r6
 80064c2:	463a      	mov	r2, r7
 80064c4:	f000 fe7e 	bl	80071c4 <d_print_expr_op>
 80064c8:	f7fe ba88 	b.w	80049dc <d_print_comp+0x144>
 80064cc:	2b3b      	cmp	r3, #59	; 0x3b
 80064ce:	f47e abca 	bne.w	8004c66 <d_print_comp+0x3ce>
 80064d2:	6853      	ldr	r3, [r2, #4]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	2b30      	cmp	r3, #48	; 0x30
 80064d8:	d036      	beq.n	8006548 <d_print_comp+0x1cb0>
 80064da:	2b31      	cmp	r3, #49	; 0x31
 80064dc:	f47e abc3 	bne.w	8004c66 <d_print_comp+0x3ce>
 80064e0:	4924      	ldr	r1, [pc, #144]	; (8006574 <d_print_comp+0x1cdc>)
 80064e2:	f7fe f967 	bl	80047b4 <d_append_string>
 80064e6:	f7fe ba79 	b.w	80049dc <d_print_comp+0x144>
 80064ea:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
 80064ee:	2301      	movs	r3, #1
 80064f0:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80064f4:	f7fe ba72 	b.w	80049dc <d_print_comp+0x144>
 80064f8:	212d      	movs	r1, #45	; 0x2d
 80064fa:	f7fd ff99 	bl	8004430 <d_append_char>
 80064fe:	e672      	b.n	80061e6 <d_print_comp+0x194e>
 8006500:	45c8      	cmp	r8, r9
 8006502:	d9d5      	bls.n	80064b0 <d_print_comp+0x1c18>
 8006504:	2d5f      	cmp	r5, #95	; 0x5f
 8006506:	d1d3      	bne.n	80064b0 <d_print_comp+0x1c18>
 8006508:	2aff      	cmp	r2, #255	; 0xff
 800650a:	f63f ad73 	bhi.w	8005ff4 <d_print_comp+0x175c>
 800650e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006512:	29ff      	cmp	r1, #255	; 0xff
 8006514:	b2d5      	uxtb	r5, r2
 8006516:	d10f      	bne.n	8006538 <d_print_comp+0x1ca0>
 8006518:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800651c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8006520:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006524:	4620      	mov	r0, r4
 8006526:	4798      	blx	r3
 8006528:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800652c:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8006530:	3301      	adds	r3, #1
 8006532:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006536:	2100      	movs	r1, #0
 8006538:	1c4b      	adds	r3, r1, #1
 800653a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800653e:	464e      	mov	r6, r9
 8006540:	5465      	strb	r5, [r4, r1]
 8006542:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8006546:	e55f      	b.n	8006008 <d_print_comp+0x1770>
 8006548:	490b      	ldr	r1, [pc, #44]	; (8006578 <d_print_comp+0x1ce0>)
 800654a:	f7fe f933 	bl	80047b4 <d_append_string>
 800654e:	f7fe ba45 	b.w	80049dc <d_print_comp+0x144>
 8006552:	bf00      	nop
 8006554:	0800e710 	.word	0x0800e710
 8006558:	0800e70c 	.word	0x0800e70c
 800655c:	0800e708 	.word	0x0800e708
 8006560:	0800e7c0 	.word	0x0800e7c0
 8006564:	0800e560 	.word	0x0800e560
 8006568:	0800e568 	.word	0x0800e568
 800656c:	0800e6fc 	.word	0x0800e6fc
 8006570:	0800e740 	.word	0x0800e740
 8006574:	0800e71c 	.word	0x0800e71c
 8006578:	0800e714 	.word	0x0800e714

0800657c <d_print_mod>:
 800657c:	7813      	ldrb	r3, [r2, #0]
 800657e:	3b03      	subs	r3, #3
 8006580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006584:	4615      	mov	r5, r2
 8006586:	4604      	mov	r4, r0
 8006588:	4688      	mov	r8, r1
 800658a:	2b2a      	cmp	r3, #42	; 0x2a
 800658c:	f200 81ba 	bhi.w	8006904 <d_print_mod+0x388>
 8006590:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006594:	01b80051 	.word	0x01b80051
 8006598:	01b801b8 	.word	0x01b801b8
 800659c:	01b801b8 	.word	0x01b801b8
 80065a0:	01b801b8 	.word	0x01b801b8
 80065a4:	01b801b8 	.word	0x01b801b8
 80065a8:	01b801b8 	.word	0x01b801b8
 80065ac:	01b801b8 	.word	0x01b801b8
 80065b0:	01b801b8 	.word	0x01b801b8
 80065b4:	01b801b8 	.word	0x01b801b8
 80065b8:	01b801b8 	.word	0x01b801b8
 80065bc:	01b801b8 	.word	0x01b801b8
 80065c0:	007c0056 	.word	0x007c0056
 80065c4:	005600a2 	.word	0x005600a2
 80065c8:	00a2007c 	.word	0x00a2007c
 80065cc:	00df00c7 	.word	0x00df00c7
 80065d0:	01290116 	.word	0x01290116
 80065d4:	0132012f 	.word	0x0132012f
 80065d8:	015a0135 	.word	0x015a0135
 80065dc:	01b801b8 	.word	0x01b801b8
 80065e0:	01b801b8 	.word	0x01b801b8
 80065e4:	01b8017f 	.word	0x01b8017f
 80065e8:	002b      	.short	0x002b
 80065ea:	4ede      	ldr	r6, [pc, #888]	; (8006964 <d_print_mod+0x3e8>)
 80065ec:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80065f0:	f106 0a0a 	add.w	sl, r6, #10
 80065f4:	f04f 0900 	mov.w	r9, #0
 80065f8:	e009      	b.n	800660e <d_print_mod+0x92>
 80065fa:	460b      	mov	r3, r1
 80065fc:	3101      	adds	r1, #1
 80065fe:	4556      	cmp	r6, sl
 8006600:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006604:	54e7      	strb	r7, [r4, r3]
 8006606:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800660a:	f000 8188 	beq.w	800691e <d_print_mod+0x3a2>
 800660e:	29ff      	cmp	r1, #255	; 0xff
 8006610:	f816 7b01 	ldrb.w	r7, [r6], #1
 8006614:	d1f1      	bne.n	80065fa <d_print_mod+0x7e>
 8006616:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800661a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800661e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006622:	4620      	mov	r0, r4
 8006624:	4798      	blx	r3
 8006626:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800662a:	3301      	adds	r3, #1
 800662c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006630:	2101      	movs	r1, #1
 8006632:	2300      	movs	r3, #0
 8006634:	e7e3      	b.n	80065fe <d_print_mod+0x82>
 8006636:	686a      	ldr	r2, [r5, #4]
 8006638:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800663c:	f7fe b92c 	b.w	8004898 <d_print_comp>
 8006640:	4dc9      	ldr	r5, [pc, #804]	; (8006968 <d_print_mod+0x3ec>)
 8006642:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006646:	f105 0709 	add.w	r7, r5, #9
 800664a:	f04f 0800 	mov.w	r8, #0
 800664e:	e009      	b.n	8006664 <d_print_mod+0xe8>
 8006650:	460b      	mov	r3, r1
 8006652:	3101      	adds	r1, #1
 8006654:	42bd      	cmp	r5, r7
 8006656:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800665a:	54e6      	strb	r6, [r4, r3]
 800665c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006660:	f000 816f 	beq.w	8006942 <d_print_mod+0x3c6>
 8006664:	29ff      	cmp	r1, #255	; 0xff
 8006666:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800666a:	d1f1      	bne.n	8006650 <d_print_mod+0xd4>
 800666c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006670:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006674:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006678:	4620      	mov	r0, r4
 800667a:	4798      	blx	r3
 800667c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006680:	3301      	adds	r3, #1
 8006682:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006686:	2101      	movs	r1, #1
 8006688:	2300      	movs	r3, #0
 800668a:	e7e3      	b.n	8006654 <d_print_mod+0xd8>
 800668c:	4db7      	ldr	r5, [pc, #732]	; (800696c <d_print_mod+0x3f0>)
 800668e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006692:	f105 0709 	add.w	r7, r5, #9
 8006696:	f04f 0800 	mov.w	r8, #0
 800669a:	e009      	b.n	80066b0 <d_print_mod+0x134>
 800669c:	460b      	mov	r3, r1
 800669e:	3101      	adds	r1, #1
 80066a0:	42bd      	cmp	r5, r7
 80066a2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80066a6:	54e6      	strb	r6, [r4, r3]
 80066a8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80066ac:	f000 814b 	beq.w	8006946 <d_print_mod+0x3ca>
 80066b0:	29ff      	cmp	r1, #255	; 0xff
 80066b2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80066b6:	d1f1      	bne.n	800669c <d_print_mod+0x120>
 80066b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80066bc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80066c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80066c4:	4620      	mov	r0, r4
 80066c6:	4798      	blx	r3
 80066c8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80066cc:	3301      	adds	r3, #1
 80066ce:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80066d2:	2101      	movs	r1, #1
 80066d4:	2300      	movs	r3, #0
 80066d6:	e7e3      	b.n	80066a0 <d_print_mod+0x124>
 80066d8:	4da5      	ldr	r5, [pc, #660]	; (8006970 <d_print_mod+0x3f4>)
 80066da:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80066de:	1daf      	adds	r7, r5, #6
 80066e0:	f04f 0800 	mov.w	r8, #0
 80066e4:	e009      	b.n	80066fa <d_print_mod+0x17e>
 80066e6:	460b      	mov	r3, r1
 80066e8:	3101      	adds	r1, #1
 80066ea:	42bd      	cmp	r5, r7
 80066ec:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80066f0:	54e6      	strb	r6, [r4, r3]
 80066f2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80066f6:	f000 810a 	beq.w	800690e <d_print_mod+0x392>
 80066fa:	29ff      	cmp	r1, #255	; 0xff
 80066fc:	f815 6b01 	ldrb.w	r6, [r5], #1
 8006700:	d1f1      	bne.n	80066e6 <d_print_mod+0x16a>
 8006702:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006706:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800670a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800670e:	4620      	mov	r0, r4
 8006710:	4798      	blx	r3
 8006712:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006716:	3301      	adds	r3, #1
 8006718:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800671c:	2101      	movs	r1, #1
 800671e:	2300      	movs	r3, #0
 8006720:	e7e3      	b.n	80066ea <d_print_mod+0x16e>
 8006722:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8006726:	2bff      	cmp	r3, #255	; 0xff
 8006728:	f000 814d 	beq.w	80069c6 <d_print_mod+0x44a>
 800672c:	1c59      	adds	r1, r3, #1
 800672e:	2220      	movs	r2, #32
 8006730:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006734:	54e2      	strb	r2, [r4, r3]
 8006736:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800673a:	29ff      	cmp	r1, #255	; 0xff
 800673c:	f000 8122 	beq.w	8006984 <d_print_mod+0x408>
 8006740:	1c4a      	adds	r2, r1, #1
 8006742:	2326      	movs	r3, #38	; 0x26
 8006744:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006748:	5463      	strb	r3, [r4, r1]
 800674a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800674e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006752:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8006756:	2bff      	cmp	r3, #255	; 0xff
 8006758:	f000 8157 	beq.w	8006a0a <d_print_mod+0x48e>
 800675c:	1c59      	adds	r1, r3, #1
 800675e:	2220      	movs	r2, #32
 8006760:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006764:	54e2      	strb	r2, [r4, r3]
 8006766:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800676a:	4d82      	ldr	r5, [pc, #520]	; (8006974 <d_print_mod+0x3f8>)
 800676c:	f04f 0800 	mov.w	r8, #0
 8006770:	1caf      	adds	r7, r5, #2
 8006772:	e009      	b.n	8006788 <d_print_mod+0x20c>
 8006774:	460b      	mov	r3, r1
 8006776:	42bd      	cmp	r5, r7
 8006778:	f101 0101 	add.w	r1, r1, #1
 800677c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006780:	54e6      	strb	r6, [r4, r3]
 8006782:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006786:	d019      	beq.n	80067bc <d_print_mod+0x240>
 8006788:	29ff      	cmp	r1, #255	; 0xff
 800678a:	f815 6b01 	ldrb.w	r6, [r5], #1
 800678e:	d1f1      	bne.n	8006774 <d_print_mod+0x1f8>
 8006790:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006794:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006798:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800679c:	4620      	mov	r0, r4
 800679e:	4798      	blx	r3
 80067a0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80067a4:	3301      	adds	r3, #1
 80067a6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80067aa:	2300      	movs	r3, #0
 80067ac:	2101      	movs	r1, #1
 80067ae:	42bd      	cmp	r5, r7
 80067b0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80067b4:	54e6      	strb	r6, [r4, r3]
 80067b6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80067ba:	d1e5      	bne.n	8006788 <d_print_mod+0x20c>
 80067bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80067c4:	29ff      	cmp	r1, #255	; 0xff
 80067c6:	f000 80ee 	beq.w	80069a6 <d_print_mod+0x42a>
 80067ca:	1c4a      	adds	r2, r1, #1
 80067cc:	2320      	movs	r3, #32
 80067ce:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80067d2:	5463      	strb	r3, [r4, r1]
 80067d4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80067d8:	4641      	mov	r1, r8
 80067da:	68aa      	ldr	r2, [r5, #8]
 80067dc:	4620      	mov	r0, r4
 80067de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067e2:	f7fe b859 	b.w	8004898 <d_print_comp>
 80067e6:	f011 0804 	ands.w	r8, r1, #4
 80067ea:	f000 80ae 	beq.w	800694a <d_print_mod+0x3ce>
 80067ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80067f6:	e7a0      	b.n	800673a <d_print_mod+0x1be>
 80067f8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80067fc:	e7b5      	b.n	800676a <d_print_mod+0x1ee>
 80067fe:	4d5e      	ldr	r5, [pc, #376]	; (8006978 <d_print_mod+0x3fc>)
 8006800:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006804:	f105 0708 	add.w	r7, r5, #8
 8006808:	f04f 0800 	mov.w	r8, #0
 800680c:	e008      	b.n	8006820 <d_print_mod+0x2a4>
 800680e:	460b      	mov	r3, r1
 8006810:	3101      	adds	r1, #1
 8006812:	42bd      	cmp	r5, r7
 8006814:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006818:	54e6      	strb	r6, [r4, r3]
 800681a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800681e:	d078      	beq.n	8006912 <d_print_mod+0x396>
 8006820:	29ff      	cmp	r1, #255	; 0xff
 8006822:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006826:	d1f2      	bne.n	800680e <d_print_mod+0x292>
 8006828:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800682c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006830:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006834:	4620      	mov	r0, r4
 8006836:	4798      	blx	r3
 8006838:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800683c:	3301      	adds	r3, #1
 800683e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006842:	2101      	movs	r1, #1
 8006844:	2300      	movs	r3, #0
 8006846:	e7e4      	b.n	8006812 <d_print_mod+0x296>
 8006848:	4d4c      	ldr	r5, [pc, #304]	; (800697c <d_print_mod+0x400>)
 800684a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800684e:	f105 070a 	add.w	r7, r5, #10
 8006852:	f04f 0800 	mov.w	r8, #0
 8006856:	e008      	b.n	800686a <d_print_mod+0x2ee>
 8006858:	460b      	mov	r3, r1
 800685a:	3101      	adds	r1, #1
 800685c:	42bd      	cmp	r5, r7
 800685e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006862:	54e6      	strb	r6, [r4, r3]
 8006864:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006868:	d057      	beq.n	800691a <d_print_mod+0x39e>
 800686a:	29ff      	cmp	r1, #255	; 0xff
 800686c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8006870:	d1f2      	bne.n	8006858 <d_print_mod+0x2dc>
 8006872:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006876:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800687a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800687e:	4620      	mov	r0, r4
 8006880:	4798      	blx	r3
 8006882:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006886:	3301      	adds	r3, #1
 8006888:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800688c:	2101      	movs	r1, #1
 800688e:	2300      	movs	r3, #0
 8006890:	e7e4      	b.n	800685c <d_print_mod+0x2e0>
 8006892:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8006896:	2b28      	cmp	r3, #40	; 0x28
 8006898:	d00b      	beq.n	80068b2 <d_print_mod+0x336>
 800689a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800689e:	29ff      	cmp	r1, #255	; 0xff
 80068a0:	f000 80c4 	beq.w	8006a2c <d_print_mod+0x4b0>
 80068a4:	1c4a      	adds	r2, r1, #1
 80068a6:	2320      	movs	r3, #32
 80068a8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80068ac:	5463      	strb	r3, [r4, r1]
 80068ae:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80068b2:	686a      	ldr	r2, [r5, #4]
 80068b4:	4d32      	ldr	r5, [pc, #200]	; (8006980 <d_print_mod+0x404>)
 80068b6:	4641      	mov	r1, r8
 80068b8:	4620      	mov	r0, r4
 80068ba:	f7fd ffed 	bl	8004898 <d_print_comp>
 80068be:	1cef      	adds	r7, r5, #3
 80068c0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80068c4:	f04f 0800 	mov.w	r8, #0
 80068c8:	e008      	b.n	80068dc <d_print_mod+0x360>
 80068ca:	460b      	mov	r3, r1
 80068cc:	3101      	adds	r1, #1
 80068ce:	42bd      	cmp	r5, r7
 80068d0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80068d4:	54e6      	strb	r6, [r4, r3]
 80068d6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80068da:	d01c      	beq.n	8006916 <d_print_mod+0x39a>
 80068dc:	29ff      	cmp	r1, #255	; 0xff
 80068de:	f815 6b01 	ldrb.w	r6, [r5], #1
 80068e2:	d1f2      	bne.n	80068ca <d_print_mod+0x34e>
 80068e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80068e8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80068ec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80068f0:	4620      	mov	r0, r4
 80068f2:	4798      	blx	r3
 80068f4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80068f8:	3301      	adds	r3, #1
 80068fa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80068fe:	2101      	movs	r1, #1
 8006900:	2300      	movs	r3, #0
 8006902:	e7e4      	b.n	80068ce <d_print_mod+0x352>
 8006904:	462a      	mov	r2, r5
 8006906:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800690a:	f7fd bfc5 	b.w	8004898 <d_print_comp>
 800690e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800691a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800691e:	4641      	mov	r1, r8
 8006920:	686a      	ldr	r2, [r5, #4]
 8006922:	4620      	mov	r0, r4
 8006924:	f7fd ffb8 	bl	8004898 <d_print_comp>
 8006928:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800692c:	29ff      	cmp	r1, #255	; 0xff
 800692e:	d05b      	beq.n	80069e8 <d_print_mod+0x46c>
 8006930:	1c4a      	adds	r2, r1, #1
 8006932:	2329      	movs	r3, #41	; 0x29
 8006934:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006938:	5463      	strb	r3, [r4, r1]
 800693a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800693e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800694e:	29ff      	cmp	r1, #255	; 0xff
 8006950:	d07c      	beq.n	8006a4c <d_print_mod+0x4d0>
 8006952:	1c4a      	adds	r2, r1, #1
 8006954:	232a      	movs	r3, #42	; 0x2a
 8006956:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800695a:	5463      	strb	r3, [r4, r1]
 800695c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006964:	0800e804 	.word	0x0800e804
 8006968:	0800e7c3 	.word	0x0800e7c3
 800696c:	0800e7cf 	.word	0x0800e7cf
 8006970:	0800e7dc 	.word	0x0800e7dc
 8006974:	0800e7e4 	.word	0x0800e7e4
 8006978:	0800e7e7 	.word	0x0800e7e7
 800697c:	0800e7f4 	.word	0x0800e7f4
 8006980:	0800e800 	.word	0x0800e800
 8006984:	2500      	movs	r5, #0
 8006986:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800698a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800698e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006992:	4620      	mov	r0, r4
 8006994:	4798      	blx	r3
 8006996:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800699a:	3301      	adds	r3, #1
 800699c:	4629      	mov	r1, r5
 800699e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80069a2:	2201      	movs	r2, #1
 80069a4:	e6cd      	b.n	8006742 <d_print_mod+0x1c6>
 80069a6:	2600      	movs	r6, #0
 80069a8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80069ac:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80069b0:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80069b4:	4798      	blx	r3
 80069b6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80069ba:	3301      	adds	r3, #1
 80069bc:	4631      	mov	r1, r6
 80069be:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80069c2:	2201      	movs	r2, #1
 80069c4:	e702      	b.n	80067cc <d_print_mod+0x250>
 80069c6:	2500      	movs	r5, #0
 80069c8:	4619      	mov	r1, r3
 80069ca:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80069ce:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80069d2:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 80069d6:	4798      	blx	r3
 80069d8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 80069e2:	462b      	mov	r3, r5
 80069e4:	2101      	movs	r1, #1
 80069e6:	e6a2      	b.n	800672e <d_print_mod+0x1b2>
 80069e8:	2500      	movs	r5, #0
 80069ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80069ee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80069f2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80069f6:	4620      	mov	r0, r4
 80069f8:	4798      	blx	r3
 80069fa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80069fe:	3301      	adds	r3, #1
 8006a00:	4629      	mov	r1, r5
 8006a02:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006a06:	2201      	movs	r2, #1
 8006a08:	e793      	b.n	8006932 <d_print_mod+0x3b6>
 8006a0a:	2500      	movs	r5, #0
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006a12:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8006a16:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8006a1a:	4798      	blx	r3
 8006a1c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8006a26:	462b      	mov	r3, r5
 8006a28:	2101      	movs	r1, #1
 8006a2a:	e698      	b.n	800675e <d_print_mod+0x1e2>
 8006a2c:	2600      	movs	r6, #0
 8006a2e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8006a32:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006a36:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8006a3a:	4798      	blx	r3
 8006a3c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006a40:	3301      	adds	r3, #1
 8006a42:	4631      	mov	r1, r6
 8006a44:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006a48:	2201      	movs	r2, #1
 8006a4a:	e72c      	b.n	80068a6 <d_print_mod+0x32a>
 8006a4c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8006a50:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006a54:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 8006a58:	4798      	blx	r3
 8006a5a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006a5e:	3301      	adds	r3, #1
 8006a60:	4641      	mov	r1, r8
 8006a62:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006a66:	2201      	movs	r2, #1
 8006a68:	e774      	b.n	8006954 <d_print_mod+0x3d8>
 8006a6a:	bf00      	nop

08006a6c <d_print_mod_list>:
 8006a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a70:	4614      	mov	r4, r2
 8006a72:	b089      	sub	sp, #36	; 0x24
 8006a74:	b352      	cbz	r2, 8006acc <d_print_mod_list+0x60>
 8006a76:	461e      	mov	r6, r3
 8006a78:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8006a7c:	4605      	mov	r5, r0
 8006a7e:	bb2b      	cbnz	r3, 8006acc <d_print_mod_list+0x60>
 8006a80:	460f      	mov	r7, r1
 8006a82:	f04f 0801 	mov.w	r8, #1
 8006a86:	e002      	b.n	8006a8e <d_print_mod_list+0x22>
 8006a88:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8006a8c:	b9f3      	cbnz	r3, 8006acc <d_print_mod_list+0x60>
 8006a8e:	68a3      	ldr	r3, [r4, #8]
 8006a90:	b9cb      	cbnz	r3, 8006ac6 <d_print_mod_list+0x5a>
 8006a92:	6862      	ldr	r2, [r4, #4]
 8006a94:	7813      	ldrb	r3, [r2, #0]
 8006a96:	b91e      	cbnz	r6, 8006aa0 <d_print_mod_list+0x34>
 8006a98:	f1a3 011c 	sub.w	r1, r3, #28
 8006a9c:	2904      	cmp	r1, #4
 8006a9e:	d912      	bls.n	8006ac6 <d_print_mod_list+0x5a>
 8006aa0:	68e1      	ldr	r1, [r4, #12]
 8006aa2:	f8c4 8008 	str.w	r8, [r4, #8]
 8006aa6:	2b29      	cmp	r3, #41	; 0x29
 8006aa8:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
 8006aac:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
 8006ab0:	d00f      	beq.n	8006ad2 <d_print_mod_list+0x66>
 8006ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ab4:	d018      	beq.n	8006ae8 <d_print_mod_list+0x7c>
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d021      	beq.n	8006afe <d_print_mod_list+0x92>
 8006aba:	4628      	mov	r0, r5
 8006abc:	4639      	mov	r1, r7
 8006abe:	f7ff fd5d 	bl	800657c <d_print_mod>
 8006ac2:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8006ac6:	6824      	ldr	r4, [r4, #0]
 8006ac8:	2c00      	cmp	r4, #0
 8006aca:	d1dd      	bne.n	8006a88 <d_print_mod_list+0x1c>
 8006acc:	b009      	add	sp, #36	; 0x24
 8006ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad2:	4639      	mov	r1, r7
 8006ad4:	3208      	adds	r2, #8
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	4628      	mov	r0, r5
 8006ada:	f000 f9d1 	bl	8006e80 <d_print_function_type.isra.11>
 8006ade:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8006ae2:	b009      	add	sp, #36	; 0x24
 8006ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae8:	4639      	mov	r1, r7
 8006aea:	3204      	adds	r2, #4
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	4628      	mov	r0, r5
 8006af0:	f000 f8ee 	bl	8006cd0 <d_print_array_type.isra.10>
 8006af4:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8006af8:	b009      	add	sp, #36	; 0x24
 8006afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006afe:	2600      	movs	r6, #0
 8006b00:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
 8006b04:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 8006b08:	6852      	ldr	r2, [r2, #4]
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	4639      	mov	r1, r7
 8006b0e:	f7fd fec3 	bl	8004898 <d_print_comp>
 8006b12:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
 8006b16:	f017 0804 	ands.w	r8, r7, #4
 8006b1a:	d123      	bne.n	8006b64 <d_print_mod_list+0xf8>
 8006b1c:	4e68      	ldr	r6, [pc, #416]	; (8006cc0 <d_print_mod_list+0x254>)
 8006b1e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8006b22:	f106 0b02 	add.w	fp, r6, #2
 8006b26:	e009      	b.n	8006b3c <d_print_mod_list+0xd0>
 8006b28:	460b      	mov	r3, r1
 8006b2a:	3101      	adds	r1, #1
 8006b2c:	455e      	cmp	r6, fp
 8006b2e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8006b32:	f805 a003 	strb.w	sl, [r5, r3]
 8006b36:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 8006b3a:	d01e      	beq.n	8006b7a <d_print_mod_list+0x10e>
 8006b3c:	29ff      	cmp	r1, #255	; 0xff
 8006b3e:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006b42:	d1f1      	bne.n	8006b28 <d_print_mod_list+0xbc>
 8006b44:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006b48:	f885 80ff 	strb.w	r8, [r5, #255]	; 0xff
 8006b4c:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006b50:	4628      	mov	r0, r5
 8006b52:	4798      	blx	r3
 8006b54:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8006b58:	3301      	adds	r3, #1
 8006b5a:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 8006b5e:	2101      	movs	r1, #1
 8006b60:	2300      	movs	r3, #0
 8006b62:	e7e3      	b.n	8006b2c <d_print_mod_list+0xc0>
 8006b64:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8006b68:	29ff      	cmp	r1, #255	; 0xff
 8006b6a:	d01b      	beq.n	8006ba4 <d_print_mod_list+0x138>
 8006b6c:	1c4a      	adds	r2, r1, #1
 8006b6e:	232e      	movs	r3, #46	; 0x2e
 8006b70:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 8006b74:	546b      	strb	r3, [r5, r1]
 8006b76:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 8006b7a:	6863      	ldr	r3, [r4, #4]
 8006b7c:	689c      	ldr	r4, [r3, #8]
 8006b7e:	7823      	ldrb	r3, [r4, #0]
 8006b80:	2b45      	cmp	r3, #69	; 0x45
 8006b82:	d102      	bne.n	8006b8a <d_print_mod_list+0x11e>
 8006b84:	e01e      	b.n	8006bc4 <d_print_mod_list+0x158>
 8006b86:	6864      	ldr	r4, [r4, #4]
 8006b88:	7823      	ldrb	r3, [r4, #0]
 8006b8a:	3b1c      	subs	r3, #28
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	d9fa      	bls.n	8006b86 <d_print_mod_list+0x11a>
 8006b90:	4639      	mov	r1, r7
 8006b92:	4622      	mov	r2, r4
 8006b94:	4628      	mov	r0, r5
 8006b96:	f7fd fe7f 	bl	8004898 <d_print_comp>
 8006b9a:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8006b9e:	b009      	add	sp, #36	; 0x24
 8006ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba4:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006ba8:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006bac:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	4798      	blx	r3
 8006bb4:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8006bb8:	3301      	adds	r3, #1
 8006bba:	4631      	mov	r1, r6
 8006bbc:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	e7d4      	b.n	8006b6e <d_print_mod_list+0x102>
 8006bc4:	4e3f      	ldr	r6, [pc, #252]	; (8006cc4 <d_print_mod_list+0x258>)
 8006bc6:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8006bca:	f106 0a0d 	add.w	sl, r6, #13
 8006bce:	f04f 0b00 	mov.w	fp, #0
 8006bd2:	e009      	b.n	8006be8 <d_print_mod_list+0x17c>
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	3101      	adds	r1, #1
 8006bd8:	4556      	cmp	r6, sl
 8006bda:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8006bde:	f805 8003 	strb.w	r8, [r5, r3]
 8006be2:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8006be6:	d013      	beq.n	8006c10 <d_print_mod_list+0x1a4>
 8006be8:	29ff      	cmp	r1, #255	; 0xff
 8006bea:	f816 8b01 	ldrb.w	r8, [r6], #1
 8006bee:	d1f1      	bne.n	8006bd4 <d_print_mod_list+0x168>
 8006bf0:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006bf4:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8006bf8:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	4798      	blx	r3
 8006c00:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8006c04:	3301      	adds	r3, #1
 8006c06:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	e7e3      	b.n	8006bd8 <d_print_mod_list+0x16c>
 8006c10:	68a2      	ldr	r2, [r4, #8]
 8006c12:	492d      	ldr	r1, [pc, #180]	; (8006cc8 <d_print_mod_list+0x25c>)
 8006c14:	3201      	adds	r2, #1
 8006c16:	a801      	add	r0, sp, #4
 8006c18:	f006 f81c 	bl	800cc54 <siprintf>
 8006c1c:	a801      	add	r0, sp, #4
 8006c1e:	f006 f88a 	bl	800cd36 <strlen>
 8006c22:	b328      	cbz	r0, 8006c70 <d_print_mod_list+0x204>
 8006c24:	ae01      	add	r6, sp, #4
 8006c26:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8006c2a:	eb06 0a00 	add.w	sl, r6, r0
 8006c2e:	f04f 0b00 	mov.w	fp, #0
 8006c32:	e009      	b.n	8006c48 <d_print_mod_list+0x1dc>
 8006c34:	460b      	mov	r3, r1
 8006c36:	3101      	adds	r1, #1
 8006c38:	4556      	cmp	r6, sl
 8006c3a:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8006c3e:	f805 8003 	strb.w	r8, [r5, r3]
 8006c42:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8006c46:	d015      	beq.n	8006c74 <d_print_mod_list+0x208>
 8006c48:	29ff      	cmp	r1, #255	; 0xff
 8006c4a:	f816 8b01 	ldrb.w	r8, [r6], #1
 8006c4e:	d1f1      	bne.n	8006c34 <d_print_mod_list+0x1c8>
 8006c50:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006c54:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8006c58:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	4798      	blx	r3
 8006c60:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8006c64:	3301      	adds	r3, #1
 8006c66:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	e7e3      	b.n	8006c38 <d_print_mod_list+0x1cc>
 8006c70:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8006c74:	4e15      	ldr	r6, [pc, #84]	; (8006ccc <d_print_mod_list+0x260>)
 8006c76:	f04f 0b00 	mov.w	fp, #0
 8006c7a:	f106 0a03 	add.w	sl, r6, #3
 8006c7e:	e00a      	b.n	8006c96 <d_print_mod_list+0x22a>
 8006c80:	460b      	mov	r3, r1
 8006c82:	3101      	adds	r1, #1
 8006c84:	4556      	cmp	r6, sl
 8006c86:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8006c8a:	f805 8003 	strb.w	r8, [r5, r3]
 8006c8e:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8006c92:	f43f af78 	beq.w	8006b86 <d_print_mod_list+0x11a>
 8006c96:	29ff      	cmp	r1, #255	; 0xff
 8006c98:	f816 8b01 	ldrb.w	r8, [r6], #1
 8006c9c:	d1f0      	bne.n	8006c80 <d_print_mod_list+0x214>
 8006c9e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006ca2:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8006ca6:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006caa:	4628      	mov	r0, r5
 8006cac:	4798      	blx	r3
 8006cae:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 8006cb8:	2101      	movs	r1, #1
 8006cba:	2300      	movs	r3, #0
 8006cbc:	e7e2      	b.n	8006c84 <d_print_mod_list+0x218>
 8006cbe:	bf00      	nop
 8006cc0:	0800e548 	.word	0x0800e548
 8006cc4:	0800e54c 	.word	0x0800e54c
 8006cc8:	0800e53c 	.word	0x0800e53c
 8006ccc:	0800e55c 	.word	0x0800e55c

08006cd0 <d_print_array_type.isra.10>:
 8006cd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	460e      	mov	r6, r1
 8006cd8:	4617      	mov	r7, r2
 8006cda:	4699      	mov	r9, r3
 8006cdc:	b14b      	cbz	r3, 8006cf2 <d_print_array_type.isra.10+0x22>
 8006cde:	6898      	ldr	r0, [r3, #8]
 8006ce0:	b378      	cbz	r0, 8006d42 <d_print_array_type.isra.10+0x72>
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1fa      	bne.n	8006cde <d_print_array_type.isra.10+0xe>
 8006ce8:	464a      	mov	r2, r9
 8006cea:	4620      	mov	r0, r4
 8006cec:	4631      	mov	r1, r6
 8006cee:	f7ff febd 	bl	8006a6c <d_print_mod_list>
 8006cf2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006cf6:	2bff      	cmp	r3, #255	; 0xff
 8006cf8:	d068      	beq.n	8006dcc <d_print_array_type.isra.10+0xfc>
 8006cfa:	1c59      	adds	r1, r3, #1
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006d02:	54e2      	strb	r2, [r4, r3]
 8006d04:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006d08:	29ff      	cmp	r1, #255	; 0xff
 8006d0a:	f000 8094 	beq.w	8006e36 <d_print_array_type.isra.10+0x166>
 8006d0e:	225b      	movs	r2, #91	; 0x5b
 8006d10:	1c4b      	adds	r3, r1, #1
 8006d12:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006d16:	5462      	strb	r2, [r4, r1]
 8006d18:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	b12a      	cbz	r2, 8006d2c <d_print_array_type.isra.10+0x5c>
 8006d20:	4631      	mov	r1, r6
 8006d22:	4620      	mov	r0, r4
 8006d24:	f7fd fdb8 	bl	8004898 <d_print_comp>
 8006d28:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006d2c:	2bff      	cmp	r3, #255	; 0xff
 8006d2e:	d070      	beq.n	8006e12 <d_print_array_type.isra.10+0x142>
 8006d30:	1c59      	adds	r1, r3, #1
 8006d32:	225d      	movs	r2, #93	; 0x5d
 8006d34:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006d38:	54e2      	strb	r2, [r4, r3]
 8006d3a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006d3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	2b2a      	cmp	r3, #42	; 0x2a
 8006d48:	f000 808f 	beq.w	8006e6a <d_print_array_type.isra.10+0x19a>
 8006d4c:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8006e7c <d_print_array_type.isra.10+0x1ac>
 8006d50:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006d54:	4605      	mov	r5, r0
 8006d56:	f108 0b02 	add.w	fp, r8, #2
 8006d5a:	e00a      	b.n	8006d72 <d_print_array_type.isra.10+0xa2>
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	45d8      	cmp	r8, fp
 8006d60:	f101 0101 	add.w	r1, r1, #1
 8006d64:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006d68:	f804 a003 	strb.w	sl, [r4, r3]
 8006d6c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8006d70:	d01a      	beq.n	8006da8 <d_print_array_type.isra.10+0xd8>
 8006d72:	29ff      	cmp	r1, #255	; 0xff
 8006d74:	f818 ab01 	ldrb.w	sl, [r8], #1
 8006d78:	d1f0      	bne.n	8006d5c <d_print_array_type.isra.10+0x8c>
 8006d7a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006d7e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006d82:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006d86:	4620      	mov	r0, r4
 8006d88:	4798      	blx	r3
 8006d8a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006d8e:	3301      	adds	r3, #1
 8006d90:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006d94:	2300      	movs	r3, #0
 8006d96:	2101      	movs	r1, #1
 8006d98:	45d8      	cmp	r8, fp
 8006d9a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006d9e:	f804 a003 	strb.w	sl, [r4, r3]
 8006da2:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8006da6:	d1e4      	bne.n	8006d72 <d_print_array_type.isra.10+0xa2>
 8006da8:	4631      	mov	r1, r6
 8006daa:	464a      	mov	r2, r9
 8006dac:	4620      	mov	r0, r4
 8006dae:	2300      	movs	r3, #0
 8006db0:	f7ff fe5c 	bl	8006a6c <d_print_mod_list>
 8006db4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006db8:	29ff      	cmp	r1, #255	; 0xff
 8006dba:	d019      	beq.n	8006df0 <d_print_array_type.isra.10+0x120>
 8006dbc:	1c4b      	adds	r3, r1, #1
 8006dbe:	2229      	movs	r2, #41	; 0x29
 8006dc0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006dc4:	5462      	strb	r2, [r4, r1]
 8006dc6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006dca:	e794      	b.n	8006cf6 <d_print_array_type.isra.10+0x26>
 8006dcc:	2500      	movs	r5, #0
 8006dce:	4619      	mov	r1, r3
 8006dd0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006dd4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006dd8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006ddc:	4620      	mov	r0, r4
 8006dde:	4798      	blx	r3
 8006de0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006de4:	1c5a      	adds	r2, r3, #1
 8006de6:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8006dea:	462b      	mov	r3, r5
 8006dec:	2101      	movs	r1, #1
 8006dee:	e785      	b.n	8006cfc <d_print_array_type.isra.10+0x2c>
 8006df0:	2500      	movs	r5, #0
 8006df2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006df6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006dfa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006dfe:	4620      	mov	r0, r4
 8006e00:	4798      	blx	r3
 8006e02:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006e06:	3301      	adds	r3, #1
 8006e08:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e7d5      	b.n	8006dbe <d_print_array_type.isra.10+0xee>
 8006e12:	2500      	movs	r5, #0
 8006e14:	4619      	mov	r1, r3
 8006e16:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006e1a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006e1e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006e22:	4620      	mov	r0, r4
 8006e24:	4798      	blx	r3
 8006e26:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8006e30:	462b      	mov	r3, r5
 8006e32:	2101      	movs	r1, #1
 8006e34:	e77d      	b.n	8006d32 <d_print_array_type.isra.10+0x62>
 8006e36:	2300      	movs	r3, #0
 8006e38:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8006e3c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006e40:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006e44:	4620      	mov	r0, r4
 8006e46:	4798      	blx	r3
 8006e48:	235b      	movs	r3, #91	; 0x5b
 8006e4a:	7023      	strb	r3, [r4, #0]
 8006e4c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006e50:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006e54:	683a      	ldr	r2, [r7, #0]
 8006e56:	1c59      	adds	r1, r3, #1
 8006e58:	2301      	movs	r3, #1
 8006e5a:	f8c4 1120 	str.w	r1, [r4, #288]	; 0x120
 8006e5e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006e62:	2a00      	cmp	r2, #0
 8006e64:	f47f af5c 	bne.w	8006d20 <d_print_array_type.isra.10+0x50>
 8006e68:	e762      	b.n	8006d30 <d_print_array_type.isra.10+0x60>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	4631      	mov	r1, r6
 8006e6e:	464a      	mov	r2, r9
 8006e70:	4620      	mov	r0, r4
 8006e72:	f7ff fdfb 	bl	8006a6c <d_print_mod_list>
 8006e76:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006e7a:	e745      	b.n	8006d08 <d_print_array_type.isra.10+0x38>
 8006e7c:	0800e73c 	.word	0x0800e73c

08006e80 <d_print_function_type.isra.11>:
 8006e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e84:	4604      	mov	r4, r0
 8006e86:	460d      	mov	r5, r1
 8006e88:	4616      	mov	r6, r2
 8006e8a:	461f      	mov	r7, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d03e      	beq.n	8006f0e <d_print_function_type.isra.11+0x8e>
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d13b      	bne.n	8006f0e <d_print_function_type.isra.11+0x8e>
 8006e96:	463a      	mov	r2, r7
 8006e98:	f04f 0e01 	mov.w	lr, #1
 8006e9c:	e006      	b.n	8006eac <d_print_function_type.isra.11+0x2c>
 8006e9e:	f410 6f60 	tst.w	r0, #3584	; 0xe00
 8006ea2:	d164      	bne.n	8006f6e <d_print_function_type.isra.11+0xee>
 8006ea4:	6812      	ldr	r2, [r2, #0]
 8006ea6:	b392      	cbz	r2, 8006f0e <d_print_function_type.isra.11+0x8e>
 8006ea8:	6893      	ldr	r3, [r2, #8]
 8006eaa:	bb83      	cbnz	r3, 8006f0e <d_print_function_type.isra.11+0x8e>
 8006eac:	6853      	ldr	r3, [r2, #4]
 8006eae:	496c      	ldr	r1, [pc, #432]	; (8007060 <d_print_function_type.isra.11+0x1e0>)
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	3b19      	subs	r3, #25
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	fa0e f003 	lsl.w	r0, lr, r3
 8006eba:	2b12      	cmp	r3, #18
 8006ebc:	ea01 0100 	and.w	r1, r1, r0
 8006ec0:	d8f0      	bhi.n	8006ea4 <d_print_function_type.isra.11+0x24>
 8006ec2:	2900      	cmp	r1, #0
 8006ec4:	d0eb      	beq.n	8006e9e <d_print_function_type.isra.11+0x1e>
 8006ec6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8006eca:	2b20      	cmp	r3, #32
 8006ecc:	d055      	beq.n	8006f7a <d_print_function_type.isra.11+0xfa>
 8006ece:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006ed2:	2bff      	cmp	r3, #255	; 0xff
 8006ed4:	f000 80b1 	beq.w	800703a <d_print_function_type.isra.11+0x1ba>
 8006ed8:	1c59      	adds	r1, r3, #1
 8006eda:	2220      	movs	r2, #32
 8006edc:	29ff      	cmp	r1, #255	; 0xff
 8006ede:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006ee2:	54e2      	strb	r2, [r4, r3]
 8006ee4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006ee8:	d14b      	bne.n	8006f82 <d_print_function_type.isra.11+0x102>
 8006eea:	f04f 0800 	mov.w	r8, #0
 8006eee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006ef2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006ef6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006efa:	4620      	mov	r0, r4
 8006efc:	4798      	blx	r3
 8006efe:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006f02:	3301      	adds	r3, #1
 8006f04:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006f08:	4641      	mov	r1, r8
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e03a      	b.n	8006f84 <d_print_function_type.isra.11+0x104>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8006f14:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8006f18:	4629      	mov	r1, r5
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	463a      	mov	r2, r7
 8006f1e:	f7ff fda5 	bl	8006a6c <d_print_mod_list>
 8006f22:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006f26:	29ff      	cmp	r1, #255	; 0xff
 8006f28:	d04b      	beq.n	8006fc2 <d_print_function_type.isra.11+0x142>
 8006f2a:	2228      	movs	r2, #40	; 0x28
 8006f2c:	1c4b      	adds	r3, r1, #1
 8006f2e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006f32:	5462      	strb	r2, [r4, r1]
 8006f34:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006f38:	6832      	ldr	r2, [r6, #0]
 8006f3a:	b12a      	cbz	r2, 8006f48 <d_print_function_type.isra.11+0xc8>
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	4629      	mov	r1, r5
 8006f40:	f7fd fcaa 	bl	8004898 <d_print_comp>
 8006f44:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006f48:	2bff      	cmp	r3, #255	; 0xff
 8006f4a:	d053      	beq.n	8006ff4 <d_print_function_type.isra.11+0x174>
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	2629      	movs	r6, #41	; 0x29
 8006f50:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006f54:	4629      	mov	r1, r5
 8006f56:	54e6      	strb	r6, [r4, r3]
 8006f58:	463a      	mov	r2, r7
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006f60:	2301      	movs	r3, #1
 8006f62:	f7ff fd83 	bl	8006a6c <d_print_mod_list>
 8006f66:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 8006f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f6e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8006f72:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8006f76:	2a28      	cmp	r2, #40	; 0x28
 8006f78:	d1a7      	bne.n	8006eca <d_print_function_type.isra.11+0x4a>
 8006f7a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006f7e:	29ff      	cmp	r1, #255	; 0xff
 8006f80:	d0b3      	beq.n	8006eea <d_print_function_type.isra.11+0x6a>
 8006f82:	1c4b      	adds	r3, r1, #1
 8006f84:	2228      	movs	r2, #40	; 0x28
 8006f86:	f04f 0900 	mov.w	r9, #0
 8006f8a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006f8e:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8006f92:	5462      	strb	r2, [r4, r1]
 8006f94:	464b      	mov	r3, r9
 8006f96:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006f9a:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	463a      	mov	r2, r7
 8006fa4:	f7ff fd62 	bl	8006a6c <d_print_mod_list>
 8006fa8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006fac:	2bff      	cmp	r3, #255	; 0xff
 8006fae:	d033      	beq.n	8007018 <d_print_function_type.isra.11+0x198>
 8006fb0:	1c59      	adds	r1, r3, #1
 8006fb2:	2229      	movs	r2, #41	; 0x29
 8006fb4:	29ff      	cmp	r1, #255	; 0xff
 8006fb6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006fba:	54e2      	strb	r2, [r4, r3]
 8006fbc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006fc0:	d1b3      	bne.n	8006f2a <d_print_function_type.isra.11+0xaa>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8006fc8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006fcc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	4798      	blx	r3
 8006fd4:	2328      	movs	r3, #40	; 0x28
 8006fd6:	7023      	strb	r3, [r4, #0]
 8006fd8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006fdc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006fe0:	6832      	ldr	r2, [r6, #0]
 8006fe2:	1c59      	adds	r1, r3, #1
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	f8c4 1120 	str.w	r1, [r4, #288]	; 0x120
 8006fea:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006fee:	2a00      	cmp	r2, #0
 8006ff0:	d1a4      	bne.n	8006f3c <d_print_function_type.isra.11+0xbc>
 8006ff2:	e7ab      	b.n	8006f4c <d_print_function_type.isra.11+0xcc>
 8006ff4:	2600      	movs	r6, #0
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006ffc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007000:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8007004:	4620      	mov	r0, r4
 8007006:	4798      	blx	r3
 8007008:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800700c:	1c5a      	adds	r2, r3, #1
 800700e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8007012:	4633      	mov	r3, r6
 8007014:	2201      	movs	r2, #1
 8007016:	e79a      	b.n	8006f4e <d_print_function_type.isra.11+0xce>
 8007018:	4619      	mov	r1, r3
 800701a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800701e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007022:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007026:	4620      	mov	r0, r4
 8007028:	4798      	blx	r3
 800702a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800702e:	1c5a      	adds	r2, r3, #1
 8007030:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8007034:	464b      	mov	r3, r9
 8007036:	2101      	movs	r1, #1
 8007038:	e7bb      	b.n	8006fb2 <d_print_function_type.isra.11+0x132>
 800703a:	f04f 0800 	mov.w	r8, #0
 800703e:	4619      	mov	r1, r3
 8007040:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007044:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007048:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800704c:	4620      	mov	r0, r4
 800704e:	4798      	blx	r3
 8007050:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007054:	1c5a      	adds	r2, r3, #1
 8007056:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800705a:	4643      	mov	r3, r8
 800705c:	2101      	movs	r1, #1
 800705e:	e73c      	b.n	8006eda <d_print_function_type.isra.11+0x5a>
 8007060:	00043107 	.word	0x00043107

08007064 <d_print_cast.isra.12>:
 8007064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007066:	460e      	mov	r6, r1
 8007068:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
 800706c:	b083      	sub	sp, #12
 800706e:	4604      	mov	r4, r0
 8007070:	4615      	mov	r5, r2
 8007072:	b139      	cbz	r1, 8007084 <d_print_cast.isra.12+0x20>
 8007074:	ab02      	add	r3, sp, #8
 8007076:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 800707a:	f843 2d08 	str.w	r2, [r3, #-8]!
 800707e:	9101      	str	r1, [sp, #4]
 8007080:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 8007084:	682a      	ldr	r2, [r5, #0]
 8007086:	7813      	ldrb	r3, [r2, #0]
 8007088:	2b04      	cmp	r3, #4
 800708a:	d00b      	beq.n	80070a4 <d_print_cast.isra.12+0x40>
 800708c:	4631      	mov	r1, r6
 800708e:	4620      	mov	r0, r4
 8007090:	f7fd fc02 	bl	8004898 <d_print_comp>
 8007094:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8007098:	b113      	cbz	r3, 80070a0 <d_print_cast.isra.12+0x3c>
 800709a:	9b00      	ldr	r3, [sp, #0]
 800709c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80070a0:	b003      	add	sp, #12
 80070a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070a4:	6852      	ldr	r2, [r2, #4]
 80070a6:	4620      	mov	r0, r4
 80070a8:	4631      	mov	r1, r6
 80070aa:	f7fd fbf5 	bl	8004898 <d_print_comp>
 80070ae:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 80070b2:	b113      	cbz	r3, 80070ba <d_print_cast.isra.12+0x56>
 80070b4:	9b00      	ldr	r3, [sp, #0]
 80070b6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80070ba:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80070be:	2b3c      	cmp	r3, #60	; 0x3c
 80070c0:	d043      	beq.n	800714a <d_print_cast.isra.12+0xe6>
 80070c2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80070c6:	29ff      	cmp	r1, #255	; 0xff
 80070c8:	d01d      	beq.n	8007106 <d_print_cast.isra.12+0xa2>
 80070ca:	1c4a      	adds	r2, r1, #1
 80070cc:	233c      	movs	r3, #60	; 0x3c
 80070ce:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80070d2:	5463      	strb	r3, [r4, r1]
 80070d4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80070d8:	682b      	ldr	r3, [r5, #0]
 80070da:	4631      	mov	r1, r6
 80070dc:	689a      	ldr	r2, [r3, #8]
 80070de:	4620      	mov	r0, r4
 80070e0:	f7fd fbda 	bl	8004898 <d_print_comp>
 80070e4:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80070e8:	2b3e      	cmp	r3, #62	; 0x3e
 80070ea:	d03a      	beq.n	8007162 <d_print_cast.isra.12+0xfe>
 80070ec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80070f0:	29ff      	cmp	r1, #255	; 0xff
 80070f2:	d019      	beq.n	8007128 <d_print_cast.isra.12+0xc4>
 80070f4:	1c4a      	adds	r2, r1, #1
 80070f6:	233e      	movs	r3, #62	; 0x3e
 80070f8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80070fc:	5463      	strb	r3, [r4, r1]
 80070fe:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007102:	b003      	add	sp, #12
 8007104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007106:	2700      	movs	r7, #0
 8007108:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800710c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007110:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8007114:	4620      	mov	r0, r4
 8007116:	4798      	blx	r3
 8007118:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800711c:	3301      	adds	r3, #1
 800711e:	4639      	mov	r1, r7
 8007120:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007124:	2201      	movs	r2, #1
 8007126:	e7d1      	b.n	80070cc <d_print_cast.isra.12+0x68>
 8007128:	2500      	movs	r5, #0
 800712a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800712e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007132:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8007136:	4620      	mov	r0, r4
 8007138:	4798      	blx	r3
 800713a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800713e:	3301      	adds	r3, #1
 8007140:	4629      	mov	r1, r5
 8007142:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007146:	2201      	movs	r2, #1
 8007148:	e7d5      	b.n	80070f6 <d_print_cast.isra.12+0x92>
 800714a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800714e:	2bff      	cmp	r3, #255	; 0xff
 8007150:	d013      	beq.n	800717a <d_print_cast.isra.12+0x116>
 8007152:	1c59      	adds	r1, r3, #1
 8007154:	2220      	movs	r2, #32
 8007156:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800715a:	54e2      	strb	r2, [r4, r3]
 800715c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8007160:	e7b1      	b.n	80070c6 <d_print_cast.isra.12+0x62>
 8007162:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007166:	2bff      	cmp	r3, #255	; 0xff
 8007168:	d019      	beq.n	800719e <d_print_cast.isra.12+0x13a>
 800716a:	1c59      	adds	r1, r3, #1
 800716c:	2220      	movs	r2, #32
 800716e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007172:	54e2      	strb	r2, [r4, r3]
 8007174:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8007178:	e7ba      	b.n	80070f0 <d_print_cast.isra.12+0x8c>
 800717a:	2700      	movs	r7, #0
 800717c:	4619      	mov	r1, r3
 800717e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007182:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007186:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800718a:	4620      	mov	r0, r4
 800718c:	4798      	blx	r3
 800718e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007192:	1c5a      	adds	r2, r3, #1
 8007194:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8007198:	463b      	mov	r3, r7
 800719a:	2101      	movs	r1, #1
 800719c:	e7da      	b.n	8007154 <d_print_cast.isra.12+0xf0>
 800719e:	2500      	movs	r5, #0
 80071a0:	4619      	mov	r1, r3
 80071a2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80071a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80071aa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80071ae:	4620      	mov	r0, r4
 80071b0:	4798      	blx	r3
 80071b2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80071b6:	1c5a      	adds	r2, r3, #1
 80071b8:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 80071bc:	462b      	mov	r3, r5
 80071be:	2101      	movs	r1, #1
 80071c0:	e7d4      	b.n	800716c <d_print_cast.isra.12+0x108>
 80071c2:	bf00      	nop

080071c4 <d_print_expr_op>:
 80071c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c8:	7815      	ldrb	r5, [r2, #0]
 80071ca:	2d31      	cmp	r5, #49	; 0x31
 80071cc:	d003      	beq.n	80071d6 <d_print_expr_op+0x12>
 80071ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071d2:	f7fd bb61 	b.w	8004898 <d_print_comp>
 80071d6:	6853      	ldr	r3, [r2, #4]
 80071d8:	689f      	ldr	r7, [r3, #8]
 80071da:	685d      	ldr	r5, [r3, #4]
 80071dc:	b367      	cbz	r7, 8007238 <d_print_expr_op+0x74>
 80071de:	4604      	mov	r4, r0
 80071e0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80071e4:	442f      	add	r7, r5
 80071e6:	f04f 0800 	mov.w	r8, #0
 80071ea:	e009      	b.n	8007200 <d_print_expr_op+0x3c>
 80071ec:	460b      	mov	r3, r1
 80071ee:	42bd      	cmp	r5, r7
 80071f0:	f101 0101 	add.w	r1, r1, #1
 80071f4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80071f8:	54e6      	strb	r6, [r4, r3]
 80071fa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80071fe:	d019      	beq.n	8007234 <d_print_expr_op+0x70>
 8007200:	29ff      	cmp	r1, #255	; 0xff
 8007202:	f815 6b01 	ldrb.w	r6, [r5], #1
 8007206:	d1f1      	bne.n	80071ec <d_print_expr_op+0x28>
 8007208:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800720c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8007210:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007214:	4620      	mov	r0, r4
 8007216:	4798      	blx	r3
 8007218:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800721c:	3301      	adds	r3, #1
 800721e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007222:	2300      	movs	r3, #0
 8007224:	2101      	movs	r1, #1
 8007226:	42bd      	cmp	r5, r7
 8007228:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800722c:	54e6      	strb	r6, [r4, r3]
 800722e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8007232:	d1e5      	bne.n	8007200 <d_print_expr_op+0x3c>
 8007234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800723c <d_print_subexpr>:
 800723c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723e:	7813      	ldrb	r3, [r2, #0]
 8007240:	2b01      	cmp	r3, #1
 8007242:	4604      	mov	r4, r0
 8007244:	d921      	bls.n	800728a <d_print_subexpr+0x4e>
 8007246:	2b30      	cmp	r3, #48	; 0x30
 8007248:	d01f      	beq.n	800728a <d_print_subexpr+0x4e>
 800724a:	2b06      	cmp	r3, #6
 800724c:	d01d      	beq.n	800728a <d_print_subexpr+0x4e>
 800724e:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8007252:	2bff      	cmp	r3, #255	; 0xff
 8007254:	460e      	mov	r6, r1
 8007256:	4615      	mov	r5, r2
 8007258:	d02d      	beq.n	80072b6 <d_print_subexpr+0x7a>
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	2728      	movs	r7, #40	; 0x28
 800725e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007262:	4631      	mov	r1, r6
 8007264:	54e7      	strb	r7, [r4, r3]
 8007266:	462a      	mov	r2, r5
 8007268:	4620      	mov	r0, r4
 800726a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800726e:	f7fd fb13 	bl	8004898 <d_print_comp>
 8007272:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007276:	29ff      	cmp	r1, #255	; 0xff
 8007278:	d00c      	beq.n	8007294 <d_print_subexpr+0x58>
 800727a:	1c4a      	adds	r2, r1, #1
 800727c:	2329      	movs	r3, #41	; 0x29
 800727e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007282:	5463      	strb	r3, [r4, r1]
 8007284:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800728a:	4620      	mov	r0, r4
 800728c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007290:	f7fd bb02 	b.w	8004898 <d_print_comp>
 8007294:	2500      	movs	r5, #0
 8007296:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800729a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800729e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80072a2:	4620      	mov	r0, r4
 80072a4:	4798      	blx	r3
 80072a6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80072aa:	3301      	adds	r3, #1
 80072ac:	4629      	mov	r1, r5
 80072ae:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80072b2:	2201      	movs	r2, #1
 80072b4:	e7e2      	b.n	800727c <d_print_subexpr+0x40>
 80072b6:	2700      	movs	r7, #0
 80072b8:	4619      	mov	r1, r3
 80072ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80072be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80072c2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80072c6:	4798      	blx	r3
 80072c8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80072cc:	1c5a      	adds	r2, r3, #1
 80072ce:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 80072d2:	463b      	mov	r3, r7
 80072d4:	2201      	movs	r2, #1
 80072d6:	e7c1      	b.n	800725c <d_print_subexpr+0x20>

080072d8 <d_expr_primary>:
 80072d8:	b570      	push	{r4, r5, r6, lr}
 80072da:	68c3      	ldr	r3, [r0, #12]
 80072dc:	781a      	ldrb	r2, [r3, #0]
 80072de:	2a4c      	cmp	r2, #76	; 0x4c
 80072e0:	4604      	mov	r4, r0
 80072e2:	d001      	beq.n	80072e8 <d_expr_primary+0x10>
 80072e4:	2000      	movs	r0, #0
 80072e6:	bd70      	pop	{r4, r5, r6, pc}
 80072e8:	1c5a      	adds	r2, r3, #1
 80072ea:	60c2      	str	r2, [r0, #12]
 80072ec:	7859      	ldrb	r1, [r3, #1]
 80072ee:	295f      	cmp	r1, #95	; 0x5f
 80072f0:	d037      	beq.n	8007362 <d_expr_primary+0x8a>
 80072f2:	295a      	cmp	r1, #90	; 0x5a
 80072f4:	d10c      	bne.n	8007310 <d_expr_primary+0x38>
 80072f6:	3201      	adds	r2, #1
 80072f8:	60e2      	str	r2, [r4, #12]
 80072fa:	4620      	mov	r0, r4
 80072fc:	2100      	movs	r1, #0
 80072fe:	f002 fead 	bl	800a05c <d_encoding>
 8007302:	68e2      	ldr	r2, [r4, #12]
 8007304:	7813      	ldrb	r3, [r2, #0]
 8007306:	2b45      	cmp	r3, #69	; 0x45
 8007308:	d1ec      	bne.n	80072e4 <d_expr_primary+0xc>
 800730a:	3201      	adds	r2, #1
 800730c:	60e2      	str	r2, [r4, #12]
 800730e:	bd70      	pop	{r4, r5, r6, pc}
 8007310:	f001 fd88 	bl	8008e24 <d_type>
 8007314:	4605      	mov	r5, r0
 8007316:	2800      	cmp	r0, #0
 8007318:	d0e4      	beq.n	80072e4 <d_expr_primary+0xc>
 800731a:	7803      	ldrb	r3, [r0, #0]
 800731c:	2b27      	cmp	r3, #39	; 0x27
 800731e:	d030      	beq.n	8007382 <d_expr_primary+0xaa>
 8007320:	68e1      	ldr	r1, [r4, #12]
 8007322:	780b      	ldrb	r3, [r1, #0]
 8007324:	2b6e      	cmp	r3, #110	; 0x6e
 8007326:	d026      	beq.n	8007376 <d_expr_primary+0x9e>
 8007328:	263b      	movs	r6, #59	; 0x3b
 800732a:	2b45      	cmp	r3, #69	; 0x45
 800732c:	d032      	beq.n	8007394 <d_expr_primary+0xbc>
 800732e:	2b00      	cmp	r3, #0
 8007330:	d0d8      	beq.n	80072e4 <d_expr_primary+0xc>
 8007332:	460a      	mov	r2, r1
 8007334:	e001      	b.n	800733a <d_expr_primary+0x62>
 8007336:	2b00      	cmp	r3, #0
 8007338:	d0d4      	beq.n	80072e4 <d_expr_primary+0xc>
 800733a:	3201      	adds	r2, #1
 800733c:	60e2      	str	r2, [r4, #12]
 800733e:	7813      	ldrb	r3, [r2, #0]
 8007340:	2b45      	cmp	r3, #69	; 0x45
 8007342:	d1f8      	bne.n	8007336 <d_expr_primary+0x5e>
 8007344:	1a52      	subs	r2, r2, r1
 8007346:	4620      	mov	r0, r4
 8007348:	f7fc fef0 	bl	800412c <d_make_name>
 800734c:	462a      	mov	r2, r5
 800734e:	4603      	mov	r3, r0
 8007350:	4631      	mov	r1, r6
 8007352:	4620      	mov	r0, r4
 8007354:	f7fc fe9e 	bl	8004094 <d_make_comp>
 8007358:	68e2      	ldr	r2, [r4, #12]
 800735a:	7813      	ldrb	r3, [r2, #0]
 800735c:	2b45      	cmp	r3, #69	; 0x45
 800735e:	d1c1      	bne.n	80072e4 <d_expr_primary+0xc>
 8007360:	e7d3      	b.n	800730a <d_expr_primary+0x32>
 8007362:	1c9a      	adds	r2, r3, #2
 8007364:	60c2      	str	r2, [r0, #12]
 8007366:	789b      	ldrb	r3, [r3, #2]
 8007368:	2b5a      	cmp	r3, #90	; 0x5a
 800736a:	d0c4      	beq.n	80072f6 <d_expr_primary+0x1e>
 800736c:	2b45      	cmp	r3, #69	; 0x45
 800736e:	f04f 0000 	mov.w	r0, #0
 8007372:	d1b7      	bne.n	80072e4 <d_expr_primary+0xc>
 8007374:	e7c9      	b.n	800730a <d_expr_primary+0x32>
 8007376:	1c4a      	adds	r2, r1, #1
 8007378:	60e2      	str	r2, [r4, #12]
 800737a:	784b      	ldrb	r3, [r1, #1]
 800737c:	263c      	movs	r6, #60	; 0x3c
 800737e:	4611      	mov	r1, r2
 8007380:	e7d3      	b.n	800732a <d_expr_primary+0x52>
 8007382:	6843      	ldr	r3, [r0, #4]
 8007384:	7c1a      	ldrb	r2, [r3, #16]
 8007386:	2a00      	cmp	r2, #0
 8007388:	d0ca      	beq.n	8007320 <d_expr_primary+0x48>
 800738a:	685a      	ldr	r2, [r3, #4]
 800738c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800738e:	1a9b      	subs	r3, r3, r2
 8007390:	6323      	str	r3, [r4, #48]	; 0x30
 8007392:	e7c5      	b.n	8007320 <d_expr_primary+0x48>
 8007394:	2200      	movs	r2, #0
 8007396:	e7d6      	b.n	8007346 <d_expr_primary+0x6e>

08007398 <d_exprlist>:
 8007398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800739c:	68c5      	ldr	r5, [r0, #12]
 800739e:	782b      	ldrb	r3, [r5, #0]
 80073a0:	b082      	sub	sp, #8
 80073a2:	2200      	movs	r2, #0
 80073a4:	428b      	cmp	r3, r1
 80073a6:	4604      	mov	r4, r0
 80073a8:	9201      	str	r2, [sp, #4]
 80073aa:	f000 81fa 	beq.w	80077a2 <d_exprlist+0x40a>
 80073ae:	460f      	mov	r7, r1
 80073b0:	ae01      	add	r6, sp, #4
 80073b2:	f04f 0901 	mov.w	r9, #1
 80073b6:	f8d4 8034 	ldr.w	r8, [r4, #52]	; 0x34
 80073ba:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 80073be:	782b      	ldrb	r3, [r5, #0]
 80073c0:	2b4c      	cmp	r3, #76	; 0x4c
 80073c2:	f000 8091 	beq.w	80074e8 <d_exprlist+0x150>
 80073c6:	2b54      	cmp	r3, #84	; 0x54
 80073c8:	f000 80ab 	beq.w	8007522 <d_exprlist+0x18a>
 80073cc:	2b73      	cmp	r3, #115	; 0x73
 80073ce:	d053      	beq.n	8007478 <d_exprlist+0xe0>
 80073d0:	2b66      	cmp	r3, #102	; 0x66
 80073d2:	d064      	beq.n	800749e <d_exprlist+0x106>
 80073d4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80073d8:	2a09      	cmp	r2, #9
 80073da:	d92b      	bls.n	8007434 <d_exprlist+0x9c>
 80073dc:	2b6f      	cmp	r3, #111	; 0x6f
 80073de:	d024      	beq.n	800742a <d_exprlist+0x92>
 80073e0:	2b69      	cmp	r3, #105	; 0x69
 80073e2:	f000 808a 	beq.w	80074fa <d_exprlist+0x162>
 80073e6:	2b74      	cmp	r3, #116	; 0x74
 80073e8:	f000 80b9 	beq.w	800755e <d_exprlist+0x1c6>
 80073ec:	4620      	mov	r0, r4
 80073ee:	f002 faf3 	bl	80099d8 <d_operator_name>
 80073f2:	4605      	mov	r5, r0
 80073f4:	2800      	cmp	r0, #0
 80073f6:	d071      	beq.n	80074dc <d_exprlist+0x144>
 80073f8:	7803      	ldrb	r3, [r0, #0]
 80073fa:	2b31      	cmp	r3, #49	; 0x31
 80073fc:	f000 8096 	beq.w	800752c <d_exprlist+0x194>
 8007400:	2b32      	cmp	r3, #50	; 0x32
 8007402:	f000 80b6 	beq.w	8007572 <d_exprlist+0x1da>
 8007406:	2b33      	cmp	r3, #51	; 0x33
 8007408:	d168      	bne.n	80074dc <d_exprlist+0x144>
 800740a:	68e3      	ldr	r3, [r4, #12]
 800740c:	781a      	ldrb	r2, [r3, #0]
 800740e:	2a5f      	cmp	r2, #95	; 0x5f
 8007410:	f000 81df 	beq.w	80077d2 <d_exprlist+0x43a>
 8007414:	4620      	mov	r0, r4
 8007416:	f003 f94f 	bl	800a6b8 <d_expression_1>
 800741a:	462a      	mov	r2, r5
 800741c:	4603      	mov	r3, r0
 800741e:	2135      	movs	r1, #53	; 0x35
 8007420:	4620      	mov	r0, r4
 8007422:	f7fc fe37 	bl	8004094 <d_make_comp>
 8007426:	4602      	mov	r2, r0
 8007428:	e062      	b.n	80074f0 <d_exprlist+0x158>
 800742a:	786b      	ldrb	r3, [r5, #1]
 800742c:	2b6e      	cmp	r3, #110	; 0x6e
 800742e:	d1dd      	bne.n	80073ec <d_exprlist+0x54>
 8007430:	3502      	adds	r5, #2
 8007432:	60e5      	str	r5, [r4, #12]
 8007434:	4620      	mov	r0, r4
 8007436:	f002 fb51 	bl	8009adc <d_unqualified_name>
 800743a:	4605      	mov	r5, r0
 800743c:	2800      	cmp	r0, #0
 800743e:	d04d      	beq.n	80074dc <d_exprlist+0x144>
 8007440:	68e3      	ldr	r3, [r4, #12]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	2b49      	cmp	r3, #73	; 0x49
 8007446:	f000 80a3 	beq.w	8007590 <d_exprlist+0x1f8>
 800744a:	4602      	mov	r2, r0
 800744c:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
 8007450:	4620      	mov	r0, r4
 8007452:	212e      	movs	r1, #46	; 0x2e
 8007454:	2300      	movs	r3, #0
 8007456:	f7fc fe1d 	bl	8004094 <d_make_comp>
 800745a:	6030      	str	r0, [r6, #0]
 800745c:	2800      	cmp	r0, #0
 800745e:	d03f      	beq.n	80074e0 <d_exprlist+0x148>
 8007460:	68e5      	ldr	r5, [r4, #12]
 8007462:	782b      	ldrb	r3, [r5, #0]
 8007464:	42bb      	cmp	r3, r7
 8007466:	f100 0608 	add.w	r6, r0, #8
 800746a:	d1a2      	bne.n	80073b2 <d_exprlist+0x1a>
 800746c:	9801      	ldr	r0, [sp, #4]
 800746e:	3501      	adds	r5, #1
 8007470:	60e5      	str	r5, [r4, #12]
 8007472:	b002      	add	sp, #8
 8007474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007478:	786b      	ldrb	r3, [r5, #1]
 800747a:	2b72      	cmp	r3, #114	; 0x72
 800747c:	f000 8139 	beq.w	80076f2 <d_exprlist+0x35a>
 8007480:	2b70      	cmp	r3, #112	; 0x70
 8007482:	d1b3      	bne.n	80073ec <d_exprlist+0x54>
 8007484:	3502      	adds	r5, #2
 8007486:	60e5      	str	r5, [r4, #12]
 8007488:	4620      	mov	r0, r4
 800748a:	f003 f915 	bl	800a6b8 <d_expression_1>
 800748e:	2149      	movs	r1, #73	; 0x49
 8007490:	4602      	mov	r2, r0
 8007492:	2300      	movs	r3, #0
 8007494:	4620      	mov	r0, r4
 8007496:	f7fc fdfd 	bl	8004094 <d_make_comp>
 800749a:	4602      	mov	r2, r0
 800749c:	e028      	b.n	80074f0 <d_exprlist+0x158>
 800749e:	786b      	ldrb	r3, [r5, #1]
 80074a0:	2b70      	cmp	r3, #112	; 0x70
 80074a2:	d1a3      	bne.n	80073ec <d_exprlist+0x54>
 80074a4:	1cab      	adds	r3, r5, #2
 80074a6:	60e3      	str	r3, [r4, #12]
 80074a8:	78ab      	ldrb	r3, [r5, #2]
 80074aa:	2b54      	cmp	r3, #84	; 0x54
 80074ac:	d07b      	beq.n	80075a6 <d_exprlist+0x20e>
 80074ae:	4620      	mov	r0, r4
 80074b0:	f7fd f826 	bl	8004500 <d_compact_number>
 80074b4:	3001      	adds	r0, #1
 80074b6:	d011      	beq.n	80074dc <d_exprlist+0x144>
 80074b8:	6963      	ldr	r3, [r4, #20]
 80074ba:	69a2      	ldr	r2, [r4, #24]
 80074bc:	4293      	cmp	r3, r2
 80074be:	da0d      	bge.n	80074dc <d_exprlist+0x144>
 80074c0:	6922      	ldr	r2, [r4, #16]
 80074c2:	1c59      	adds	r1, r3, #1
 80074c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80074c8:	6161      	str	r1, [r4, #20]
 80074ca:	eb12 0183 	adds.w	r1, r2, r3, lsl #2
 80074ce:	d005      	beq.n	80074dc <d_exprlist+0x144>
 80074d0:	2506      	movs	r5, #6
 80074d2:	f802 5023 	strb.w	r5, [r2, r3, lsl #2]
 80074d6:	460a      	mov	r2, r1
 80074d8:	6048      	str	r0, [r1, #4]
 80074da:	e7b7      	b.n	800744c <d_exprlist+0xb4>
 80074dc:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
 80074e0:	2000      	movs	r0, #0
 80074e2:	b002      	add	sp, #8
 80074e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e8:	4620      	mov	r0, r4
 80074ea:	f7ff fef5 	bl	80072d8 <d_expr_primary>
 80074ee:	4602      	mov	r2, r0
 80074f0:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
 80074f4:	2a00      	cmp	r2, #0
 80074f6:	d1ab      	bne.n	8007450 <d_exprlist+0xb8>
 80074f8:	e7f2      	b.n	80074e0 <d_exprlist+0x148>
 80074fa:	786b      	ldrb	r3, [r5, #1]
 80074fc:	2b6c      	cmp	r3, #108	; 0x6c
 80074fe:	f47f af75 	bne.w	80073ec <d_exprlist+0x54>
 8007502:	f04f 0900 	mov.w	r9, #0
 8007506:	3502      	adds	r5, #2
 8007508:	2145      	movs	r1, #69	; 0x45
 800750a:	60e5      	str	r5, [r4, #12]
 800750c:	4620      	mov	r0, r4
 800750e:	f7ff ff43 	bl	8007398 <d_exprlist>
 8007512:	464a      	mov	r2, r9
 8007514:	4603      	mov	r3, r0
 8007516:	2130      	movs	r1, #48	; 0x30
 8007518:	4620      	mov	r0, r4
 800751a:	f7fc fdbb 	bl	8004094 <d_make_comp>
 800751e:	4602      	mov	r2, r0
 8007520:	e7e6      	b.n	80074f0 <d_exprlist+0x158>
 8007522:	4620      	mov	r0, r4
 8007524:	f7fd f804 	bl	8004530 <d_template_param>
 8007528:	4602      	mov	r2, r0
 800752a:	e7e1      	b.n	80074f0 <d_exprlist+0x158>
 800752c:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8007530:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007532:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007536:	f8da 9000 	ldr.w	r9, [sl]
 800753a:	49b1      	ldr	r1, [pc, #708]	; (8007800 <d_exprlist+0x468>)
 800753c:	3b02      	subs	r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	6323      	str	r3, [r4, #48]	; 0x30
 8007542:	4648      	mov	r0, r9
 8007544:	f005 fbed 	bl	800cd22 <strcmp>
 8007548:	2800      	cmp	r0, #0
 800754a:	f000 80ed 	beq.w	8007728 <d_exprlist+0x390>
 800754e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007552:	2b03      	cmp	r3, #3
 8007554:	d8c2      	bhi.n	80074dc <d_exprlist+0x144>
 8007556:	e8df f003 	tbb	[pc, r3]
 800755a:	b12a      	.short	0xb12a
 800755c:	3480      	.short	0x3480
 800755e:	786b      	ldrb	r3, [r5, #1]
 8007560:	2b6c      	cmp	r3, #108	; 0x6c
 8007562:	f47f af43 	bne.w	80073ec <d_exprlist+0x54>
 8007566:	4620      	mov	r0, r4
 8007568:	f001 fc5c 	bl	8008e24 <d_type>
 800756c:	68e5      	ldr	r5, [r4, #12]
 800756e:	4681      	mov	r9, r0
 8007570:	e7c9      	b.n	8007506 <d_exprlist+0x16e>
 8007572:	686b      	ldr	r3, [r5, #4]
 8007574:	2b03      	cmp	r3, #3
 8007576:	d8b1      	bhi.n	80074dc <d_exprlist+0x144>
 8007578:	a201      	add	r2, pc, #4	; (adr r2, 8007580 <d_exprlist+0x1e8>)
 800757a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757e:	bf00      	nop
 8007580:	080075af 	.word	0x080075af
 8007584:	08007415 	.word	0x08007415
 8007588:	08007657 	.word	0x08007657
 800758c:	080075bf 	.word	0x080075bf
 8007590:	4620      	mov	r0, r4
 8007592:	f000 f93f 	bl	8007814 <d_template_args>
 8007596:	462a      	mov	r2, r5
 8007598:	4603      	mov	r3, r0
 800759a:	2104      	movs	r1, #4
 800759c:	4620      	mov	r0, r4
 800759e:	f7fc fd79 	bl	8004094 <d_make_comp>
 80075a2:	4602      	mov	r2, r0
 80075a4:	e7a4      	b.n	80074f0 <d_exprlist+0x158>
 80075a6:	3503      	adds	r5, #3
 80075a8:	60e5      	str	r5, [r4, #12]
 80075aa:	2000      	movs	r0, #0
 80075ac:	e784      	b.n	80074b8 <d_exprlist+0x120>
 80075ae:	462a      	mov	r2, r5
 80075b0:	4620      	mov	r0, r4
 80075b2:	2134      	movs	r1, #52	; 0x34
 80075b4:	2300      	movs	r3, #0
 80075b6:	f7fc fd6d 	bl	8004094 <d_make_comp>
 80075ba:	4602      	mov	r2, r0
 80075bc:	e798      	b.n	80074f0 <d_exprlist+0x158>
 80075be:	f04f 0900 	mov.w	r9, #0
 80075c2:	4648      	mov	r0, r9
 80075c4:	498f      	ldr	r1, [pc, #572]	; (8007804 <d_exprlist+0x46c>)
 80075c6:	f005 fbac 	bl	800cd22 <strcmp>
 80075ca:	2800      	cmp	r0, #0
 80075cc:	f000 80bd 	beq.w	800774a <d_exprlist+0x3b2>
 80075d0:	f899 3000 	ldrb.w	r3, [r9]
 80075d4:	2b6e      	cmp	r3, #110	; 0x6e
 80075d6:	d181      	bne.n	80074dc <d_exprlist+0x144>
 80075d8:	f899 3001 	ldrb.w	r3, [r9, #1]
 80075dc:	2b77      	cmp	r3, #119	; 0x77
 80075de:	d002      	beq.n	80075e6 <d_exprlist+0x24e>
 80075e0:	2b61      	cmp	r3, #97	; 0x61
 80075e2:	f47f af7b 	bne.w	80074dc <d_exprlist+0x144>
 80075e6:	215f      	movs	r1, #95	; 0x5f
 80075e8:	4620      	mov	r0, r4
 80075ea:	f7ff fed5 	bl	8007398 <d_exprlist>
 80075ee:	4681      	mov	r9, r0
 80075f0:	4620      	mov	r0, r4
 80075f2:	f001 fc17 	bl	8008e24 <d_type>
 80075f6:	68e3      	ldr	r3, [r4, #12]
 80075f8:	781a      	ldrb	r2, [r3, #0]
 80075fa:	2a45      	cmp	r2, #69	; 0x45
 80075fc:	4682      	mov	sl, r0
 80075fe:	f000 80d9 	beq.w	80077b4 <d_exprlist+0x41c>
 8007602:	2a70      	cmp	r2, #112	; 0x70
 8007604:	f000 80ec 	beq.w	80077e0 <d_exprlist+0x448>
 8007608:	2a69      	cmp	r2, #105	; 0x69
 800760a:	f47f af67 	bne.w	80074dc <d_exprlist+0x144>
 800760e:	785a      	ldrb	r2, [r3, #1]
 8007610:	2a6c      	cmp	r2, #108	; 0x6c
 8007612:	f47f af63 	bne.w	80074dc <d_exprlist+0x144>
 8007616:	3302      	adds	r3, #2
 8007618:	60e3      	str	r3, [r4, #12]
 800761a:	2145      	movs	r1, #69	; 0x45
 800761c:	4620      	mov	r0, r4
 800761e:	f7ff febb 	bl	8007398 <d_exprlist>
 8007622:	2130      	movs	r1, #48	; 0x30
 8007624:	4603      	mov	r3, r0
 8007626:	2200      	movs	r2, #0
 8007628:	4620      	mov	r0, r4
 800762a:	f7fc fd33 	bl	8004094 <d_make_comp>
 800762e:	4603      	mov	r3, r0
 8007630:	4652      	mov	r2, sl
 8007632:	213a      	movs	r1, #58	; 0x3a
 8007634:	4620      	mov	r0, r4
 8007636:	f7fc fd2d 	bl	8004094 <d_make_comp>
 800763a:	464a      	mov	r2, r9
 800763c:	4603      	mov	r3, r0
 800763e:	2139      	movs	r1, #57	; 0x39
 8007640:	4620      	mov	r0, r4
 8007642:	f7fc fd27 	bl	8004094 <d_make_comp>
 8007646:	462a      	mov	r2, r5
 8007648:	4603      	mov	r3, r0
 800764a:	2138      	movs	r1, #56	; 0x38
 800764c:	4620      	mov	r0, r4
 800764e:	f7fc fd21 	bl	8004094 <d_make_comp>
 8007652:	4602      	mov	r2, r0
 8007654:	e74c      	b.n	80074f0 <d_exprlist+0x158>
 8007656:	f04f 0900 	mov.w	r9, #0
 800765a:	686b      	ldr	r3, [r5, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	785a      	ldrb	r2, [r3, #1]
 8007660:	2a63      	cmp	r2, #99	; 0x63
 8007662:	d07f      	beq.n	8007764 <d_exprlist+0x3cc>
 8007664:	4620      	mov	r0, r4
 8007666:	f003 f827 	bl	800a6b8 <d_expression_1>
 800766a:	4682      	mov	sl, r0
 800766c:	4648      	mov	r0, r9
 800766e:	4966      	ldr	r1, [pc, #408]	; (8007808 <d_exprlist+0x470>)
 8007670:	f005 fb57 	bl	800cd22 <strcmp>
 8007674:	2800      	cmp	r0, #0
 8007676:	d062      	beq.n	800773e <d_exprlist+0x3a6>
 8007678:	4648      	mov	r0, r9
 800767a:	4964      	ldr	r1, [pc, #400]	; (800780c <d_exprlist+0x474>)
 800767c:	f005 fb51 	bl	800cd22 <strcmp>
 8007680:	b128      	cbz	r0, 800768e <d_exprlist+0x2f6>
 8007682:	4648      	mov	r0, r9
 8007684:	4962      	ldr	r1, [pc, #392]	; (8007810 <d_exprlist+0x478>)
 8007686:	f005 fb4c 	bl	800cd22 <strcmp>
 800768a:	2800      	cmp	r0, #0
 800768c:	d147      	bne.n	800771e <d_exprlist+0x386>
 800768e:	4620      	mov	r0, r4
 8007690:	f002 fa24 	bl	8009adc <d_unqualified_name>
 8007694:	68e3      	ldr	r3, [r4, #12]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	2b49      	cmp	r3, #73	; 0x49
 800769a:	4681      	mov	r9, r0
 800769c:	f000 808e 	beq.w	80077bc <d_exprlist+0x424>
 80076a0:	4652      	mov	r2, sl
 80076a2:	464b      	mov	r3, r9
 80076a4:	2137      	movs	r1, #55	; 0x37
 80076a6:	4620      	mov	r0, r4
 80076a8:	f7fc fcf4 	bl	8004094 <d_make_comp>
 80076ac:	462a      	mov	r2, r5
 80076ae:	4603      	mov	r3, r0
 80076b0:	2136      	movs	r1, #54	; 0x36
 80076b2:	4620      	mov	r0, r4
 80076b4:	f7fc fcee 	bl	8004094 <d_make_comp>
 80076b8:	4602      	mov	r2, r0
 80076ba:	e719      	b.n	80074f0 <d_exprlist+0x158>
 80076bc:	f899 3000 	ldrb.w	r3, [r9]
 80076c0:	2b70      	cmp	r3, #112	; 0x70
 80076c2:	d002      	beq.n	80076ca <d_exprlist+0x332>
 80076c4:	2b6d      	cmp	r3, #109	; 0x6d
 80076c6:	f47f aea5 	bne.w	8007414 <d_exprlist+0x7c>
 80076ca:	f899 2001 	ldrb.w	r2, [r9, #1]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	f47f aea0 	bne.w	8007414 <d_exprlist+0x7c>
 80076d4:	68e3      	ldr	r3, [r4, #12]
 80076d6:	781a      	ldrb	r2, [r3, #0]
 80076d8:	2a5f      	cmp	r2, #95	; 0x5f
 80076da:	f000 808d 	beq.w	80077f8 <d_exprlist+0x460>
 80076de:	4620      	mov	r0, r4
 80076e0:	f002 ffea 	bl	800a6b8 <d_expression_1>
 80076e4:	4602      	mov	r2, r0
 80076e6:	4613      	mov	r3, r2
 80076e8:	4620      	mov	r0, r4
 80076ea:	2137      	movs	r1, #55	; 0x37
 80076ec:	f7fc fcd2 	bl	8004094 <d_make_comp>
 80076f0:	e01d      	b.n	800772e <d_exprlist+0x396>
 80076f2:	3502      	adds	r5, #2
 80076f4:	60e5      	str	r5, [r4, #12]
 80076f6:	4620      	mov	r0, r4
 80076f8:	f001 fb94 	bl	8008e24 <d_type>
 80076fc:	4605      	mov	r5, r0
 80076fe:	4620      	mov	r0, r4
 8007700:	f002 f9ec 	bl	8009adc <d_unqualified_name>
 8007704:	68e3      	ldr	r3, [r4, #12]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	2b49      	cmp	r3, #73	; 0x49
 800770a:	4682      	mov	sl, r0
 800770c:	d038      	beq.n	8007780 <d_exprlist+0x3e8>
 800770e:	462a      	mov	r2, r5
 8007710:	4603      	mov	r3, r0
 8007712:	4649      	mov	r1, r9
 8007714:	4620      	mov	r0, r4
 8007716:	f7fc fcbd 	bl	8004094 <d_make_comp>
 800771a:	4602      	mov	r2, r0
 800771c:	e6e8      	b.n	80074f0 <d_exprlist+0x158>
 800771e:	4620      	mov	r0, r4
 8007720:	f002 ffca 	bl	800a6b8 <d_expression_1>
 8007724:	4681      	mov	r9, r0
 8007726:	e7bb      	b.n	80076a0 <d_exprlist+0x308>
 8007728:	4620      	mov	r0, r4
 800772a:	f001 fb7b 	bl	8008e24 <d_type>
 800772e:	4603      	mov	r3, r0
 8007730:	462a      	mov	r2, r5
 8007732:	4620      	mov	r0, r4
 8007734:	2135      	movs	r1, #53	; 0x35
 8007736:	f7fc fcad 	bl	8004094 <d_make_comp>
 800773a:	4602      	mov	r2, r0
 800773c:	e6d8      	b.n	80074f0 <d_exprlist+0x158>
 800773e:	4620      	mov	r0, r4
 8007740:	2145      	movs	r1, #69	; 0x45
 8007742:	f7ff fe29 	bl	8007398 <d_exprlist>
 8007746:	4681      	mov	r9, r0
 8007748:	e7aa      	b.n	80076a0 <d_exprlist+0x308>
 800774a:	4620      	mov	r0, r4
 800774c:	f002 ffb4 	bl	800a6b8 <d_expression_1>
 8007750:	4681      	mov	r9, r0
 8007752:	4620      	mov	r0, r4
 8007754:	f002 ffb0 	bl	800a6b8 <d_expression_1>
 8007758:	4682      	mov	sl, r0
 800775a:	4620      	mov	r0, r4
 800775c:	f002 ffac 	bl	800a6b8 <d_expression_1>
 8007760:	4603      	mov	r3, r0
 8007762:	e765      	b.n	8007630 <d_exprlist+0x298>
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800776a:	2a01      	cmp	r2, #1
 800776c:	d903      	bls.n	8007776 <d_exprlist+0x3de>
 800776e:	3b72      	subs	r3, #114	; 0x72
 8007770:	2b01      	cmp	r3, #1
 8007772:	f63f af77 	bhi.w	8007664 <d_exprlist+0x2cc>
 8007776:	4620      	mov	r0, r4
 8007778:	f001 fb54 	bl	8008e24 <d_type>
 800777c:	4682      	mov	sl, r0
 800777e:	e775      	b.n	800766c <d_exprlist+0x2d4>
 8007780:	4620      	mov	r0, r4
 8007782:	f000 f847 	bl	8007814 <d_template_args>
 8007786:	4652      	mov	r2, sl
 8007788:	4603      	mov	r3, r0
 800778a:	2104      	movs	r1, #4
 800778c:	4620      	mov	r0, r4
 800778e:	f7fc fc81 	bl	8004094 <d_make_comp>
 8007792:	462a      	mov	r2, r5
 8007794:	4603      	mov	r3, r0
 8007796:	4649      	mov	r1, r9
 8007798:	4620      	mov	r0, r4
 800779a:	f7fc fc7b 	bl	8004094 <d_make_comp>
 800779e:	4602      	mov	r2, r0
 80077a0:	e6a6      	b.n	80074f0 <d_exprlist+0x158>
 80077a2:	3501      	adds	r5, #1
 80077a4:	212e      	movs	r1, #46	; 0x2e
 80077a6:	4613      	mov	r3, r2
 80077a8:	60c5      	str	r5, [r0, #12]
 80077aa:	b002      	add	sp, #8
 80077ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b0:	f7fc bc70 	b.w	8004094 <d_make_comp>
 80077b4:	3301      	adds	r3, #1
 80077b6:	60e3      	str	r3, [r4, #12]
 80077b8:	2300      	movs	r3, #0
 80077ba:	e739      	b.n	8007630 <d_exprlist+0x298>
 80077bc:	4620      	mov	r0, r4
 80077be:	f000 f829 	bl	8007814 <d_template_args>
 80077c2:	464a      	mov	r2, r9
 80077c4:	4603      	mov	r3, r0
 80077c6:	2104      	movs	r1, #4
 80077c8:	4620      	mov	r0, r4
 80077ca:	f7fc fc63 	bl	8004094 <d_make_comp>
 80077ce:	4681      	mov	r9, r0
 80077d0:	e766      	b.n	80076a0 <d_exprlist+0x308>
 80077d2:	3301      	adds	r3, #1
 80077d4:	60e3      	str	r3, [r4, #12]
 80077d6:	4620      	mov	r0, r4
 80077d8:	2145      	movs	r1, #69	; 0x45
 80077da:	f7ff fddd 	bl	8007398 <d_exprlist>
 80077de:	e61c      	b.n	800741a <d_exprlist+0x82>
 80077e0:	785a      	ldrb	r2, [r3, #1]
 80077e2:	2a69      	cmp	r2, #105	; 0x69
 80077e4:	f47f ae7a 	bne.w	80074dc <d_exprlist+0x144>
 80077e8:	3302      	adds	r3, #2
 80077ea:	60e3      	str	r3, [r4, #12]
 80077ec:	4620      	mov	r0, r4
 80077ee:	2145      	movs	r1, #69	; 0x45
 80077f0:	f7ff fdd2 	bl	8007398 <d_exprlist>
 80077f4:	4603      	mov	r3, r0
 80077f6:	e71b      	b.n	8007630 <d_exprlist+0x298>
 80077f8:	3301      	adds	r3, #1
 80077fa:	60e3      	str	r3, [r4, #12]
 80077fc:	e60a      	b.n	8007414 <d_exprlist+0x7c>
 80077fe:	bf00      	nop
 8007800:	0800ea04 	.word	0x0800ea04
 8007804:	0800e6f8 	.word	0x0800e6f8
 8007808:	0800e6f0 	.word	0x0800e6f0
 800780c:	0800e810 	.word	0x0800e810
 8007810:	0800e814 	.word	0x0800e814

08007814 <d_template_args>:
 8007814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007818:	68c1      	ldr	r1, [r0, #12]
 800781a:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
 800781e:	780b      	ldrb	r3, [r1, #0]
 8007820:	3b49      	subs	r3, #73	; 0x49
 8007822:	2b01      	cmp	r3, #1
 8007824:	b085      	sub	sp, #20
 8007826:	4604      	mov	r4, r0
 8007828:	f200 808a 	bhi.w	8007940 <d_template_args+0x12c>
 800782c:	1c4a      	adds	r2, r1, #1
 800782e:	60c2      	str	r2, [r0, #12]
 8007830:	784b      	ldrb	r3, [r1, #1]
 8007832:	2b45      	cmp	r3, #69	; 0x45
 8007834:	f000 8186 	beq.w	8007b44 <d_template_args+0x330>
 8007838:	ad04      	add	r5, sp, #16
 800783a:	2100      	movs	r1, #0
 800783c:	f845 1d04 	str.w	r1, [r5, #-4]!
 8007840:	3b49      	subs	r3, #73	; 0x49
 8007842:	2b0f      	cmp	r3, #15
 8007844:	d861      	bhi.n	800790a <d_template_args+0xf6>
 8007846:	e8df f003 	tbb	[pc, r3]
 800784a:	5b5b      	.short	0x5b5b
 800784c:	60604060 	.word	0x60604060
 8007850:	60606060 	.word	0x60606060
 8007854:	60606060 	.word	0x60606060
 8007858:	0860      	.short	0x0860
 800785a:	1c51      	adds	r1, r2, #1
 800785c:	2701      	movs	r7, #1
 800785e:	60e1      	str	r1, [r4, #12]
 8007860:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8007862:	6367      	str	r7, [r4, #52]	; 0x34
 8007864:	7853      	ldrb	r3, [r2, #1]
 8007866:	2b4c      	cmp	r3, #76	; 0x4c
 8007868:	f000 80d5 	beq.w	8007a16 <d_template_args+0x202>
 800786c:	2b54      	cmp	r3, #84	; 0x54
 800786e:	f000 80d8 	beq.w	8007a22 <d_template_args+0x20e>
 8007872:	2b73      	cmp	r3, #115	; 0x73
 8007874:	d07d      	beq.n	8007972 <d_template_args+0x15e>
 8007876:	2b66      	cmp	r3, #102	; 0x66
 8007878:	f000 808f 	beq.w	800799a <d_template_args+0x186>
 800787c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8007880:	2809      	cmp	r0, #9
 8007882:	d94c      	bls.n	800791e <d_template_args+0x10a>
 8007884:	2b6f      	cmp	r3, #111	; 0x6f
 8007886:	d045      	beq.n	8007914 <d_template_args+0x100>
 8007888:	2b69      	cmp	r3, #105	; 0x69
 800788a:	f000 80a6 	beq.w	80079da <d_template_args+0x1c6>
 800788e:	2b74      	cmp	r3, #116	; 0x74
 8007890:	f000 80b7 	beq.w	8007a02 <d_template_args+0x1ee>
 8007894:	4620      	mov	r0, r4
 8007896:	f002 f89f 	bl	80099d8 <d_operator_name>
 800789a:	4607      	mov	r7, r0
 800789c:	2800      	cmp	r0, #0
 800789e:	d065      	beq.n	800796c <d_template_args+0x158>
 80078a0:	7803      	ldrb	r3, [r0, #0]
 80078a2:	2b31      	cmp	r3, #49	; 0x31
 80078a4:	f000 80c3 	beq.w	8007a2e <d_template_args+0x21a>
 80078a8:	2b32      	cmp	r3, #50	; 0x32
 80078aa:	f000 8121 	beq.w	8007af0 <d_template_args+0x2dc>
 80078ae:	2b33      	cmp	r3, #51	; 0x33
 80078b0:	d15c      	bne.n	800796c <d_template_args+0x158>
 80078b2:	68e3      	ldr	r3, [r4, #12]
 80078b4:	781a      	ldrb	r2, [r3, #0]
 80078b6:	2a5f      	cmp	r2, #95	; 0x5f
 80078b8:	f040 8138 	bne.w	8007b2c <d_template_args+0x318>
 80078bc:	3301      	adds	r3, #1
 80078be:	60e3      	str	r3, [r4, #12]
 80078c0:	4620      	mov	r0, r4
 80078c2:	2145      	movs	r1, #69	; 0x45
 80078c4:	f7ff fd68 	bl	8007398 <d_exprlist>
 80078c8:	e133      	b.n	8007b32 <d_template_args+0x31e>
 80078ca:	4620      	mov	r0, r4
 80078cc:	f7ff fd04 	bl	80072d8 <d_expr_primary>
 80078d0:	4602      	mov	r2, r0
 80078d2:	2a00      	cmp	r2, #0
 80078d4:	d034      	beq.n	8007940 <d_template_args+0x12c>
 80078d6:	4620      	mov	r0, r4
 80078d8:	212f      	movs	r1, #47	; 0x2f
 80078da:	2300      	movs	r3, #0
 80078dc:	f7fc fbda 	bl	8004094 <d_make_comp>
 80078e0:	6028      	str	r0, [r5, #0]
 80078e2:	b368      	cbz	r0, 8007940 <d_template_args+0x12c>
 80078e4:	68e2      	ldr	r2, [r4, #12]
 80078e6:	7813      	ldrb	r3, [r2, #0]
 80078e8:	2b45      	cmp	r3, #69	; 0x45
 80078ea:	f100 0508 	add.w	r5, r0, #8
 80078ee:	d1a7      	bne.n	8007840 <d_template_args+0x2c>
 80078f0:	9803      	ldr	r0, [sp, #12]
 80078f2:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 80078f6:	3201      	adds	r2, #1
 80078f8:	60e2      	str	r2, [r4, #12]
 80078fa:	b005      	add	sp, #20
 80078fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007900:	4620      	mov	r0, r4
 8007902:	f7ff ff87 	bl	8007814 <d_template_args>
 8007906:	4602      	mov	r2, r0
 8007908:	e7e3      	b.n	80078d2 <d_template_args+0xbe>
 800790a:	4620      	mov	r0, r4
 800790c:	f001 fa8a 	bl	8008e24 <d_type>
 8007910:	4602      	mov	r2, r0
 8007912:	e7de      	b.n	80078d2 <d_template_args+0xbe>
 8007914:	7893      	ldrb	r3, [r2, #2]
 8007916:	2b6e      	cmp	r3, #110	; 0x6e
 8007918:	d1bc      	bne.n	8007894 <d_template_args+0x80>
 800791a:	3203      	adds	r2, #3
 800791c:	60e2      	str	r2, [r4, #12]
 800791e:	4620      	mov	r0, r4
 8007920:	f002 f8dc 	bl	8009adc <d_unqualified_name>
 8007924:	4607      	mov	r7, r0
 8007926:	2800      	cmp	r0, #0
 8007928:	f000 827f 	beq.w	8007e2a <d_template_args+0x616>
 800792c:	68e3      	ldr	r3, [r4, #12]
 800792e:	7819      	ldrb	r1, [r3, #0]
 8007930:	2949      	cmp	r1, #73	; 0x49
 8007932:	f000 80ed 	beq.w	8007b10 <d_template_args+0x2fc>
 8007936:	4602      	mov	r2, r0
 8007938:	6366      	str	r6, [r4, #52]	; 0x34
 800793a:	7819      	ldrb	r1, [r3, #0]
 800793c:	2945      	cmp	r1, #69	; 0x45
 800793e:	d003      	beq.n	8007948 <d_template_args+0x134>
 8007940:	2000      	movs	r0, #0
 8007942:	b005      	add	sp, #20
 8007944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007948:	3301      	adds	r3, #1
 800794a:	60e3      	str	r3, [r4, #12]
 800794c:	e7c1      	b.n	80078d2 <d_template_args+0xbe>
 800794e:	f04f 0a00 	mov.w	sl, #0
 8007952:	4650      	mov	r0, sl
 8007954:	49ce      	ldr	r1, [pc, #824]	; (8007c90 <d_template_args+0x47c>)
 8007956:	f005 f9e4 	bl	800cd22 <strcmp>
 800795a:	4681      	mov	r9, r0
 800795c:	2800      	cmp	r0, #0
 800795e:	f000 81af 	beq.w	8007cc0 <d_template_args+0x4ac>
 8007962:	f89a 3000 	ldrb.w	r3, [sl]
 8007966:	2b6e      	cmp	r3, #110	; 0x6e
 8007968:	f000 8134 	beq.w	8007bd4 <d_template_args+0x3c0>
 800796c:	68e3      	ldr	r3, [r4, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	e7e2      	b.n	8007938 <d_template_args+0x124>
 8007972:	7893      	ldrb	r3, [r2, #2]
 8007974:	2b72      	cmp	r3, #114	; 0x72
 8007976:	f000 810f 	beq.w	8007b98 <d_template_args+0x384>
 800797a:	2b70      	cmp	r3, #112	; 0x70
 800797c:	d18a      	bne.n	8007894 <d_template_args+0x80>
 800797e:	3203      	adds	r2, #3
 8007980:	60e2      	str	r2, [r4, #12]
 8007982:	4620      	mov	r0, r4
 8007984:	f002 fe98 	bl	800a6b8 <d_expression_1>
 8007988:	2300      	movs	r3, #0
 800798a:	4602      	mov	r2, r0
 800798c:	2149      	movs	r1, #73	; 0x49
 800798e:	4620      	mov	r0, r4
 8007990:	f7fc fb80 	bl	8004094 <d_make_comp>
 8007994:	68e3      	ldr	r3, [r4, #12]
 8007996:	4602      	mov	r2, r0
 8007998:	e7ce      	b.n	8007938 <d_template_args+0x124>
 800799a:	7893      	ldrb	r3, [r2, #2]
 800799c:	2b70      	cmp	r3, #112	; 0x70
 800799e:	f47f af79 	bne.w	8007894 <d_template_args+0x80>
 80079a2:	1cd3      	adds	r3, r2, #3
 80079a4:	60e3      	str	r3, [r4, #12]
 80079a6:	78d3      	ldrb	r3, [r2, #3]
 80079a8:	2b54      	cmp	r3, #84	; 0x54
 80079aa:	f040 810c 	bne.w	8007bc6 <d_template_args+0x3b2>
 80079ae:	3204      	adds	r2, #4
 80079b0:	60e2      	str	r2, [r4, #12]
 80079b2:	2000      	movs	r0, #0
 80079b4:	6963      	ldr	r3, [r4, #20]
 80079b6:	69a1      	ldr	r1, [r4, #24]
 80079b8:	428b      	cmp	r3, r1
 80079ba:	dad7      	bge.n	800796c <d_template_args+0x158>
 80079bc:	6921      	ldr	r1, [r4, #16]
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80079c4:	6162      	str	r2, [r4, #20]
 80079c6:	eb11 0283 	adds.w	r2, r1, r3, lsl #2
 80079ca:	f000 80e3 	beq.w	8007b94 <d_template_args+0x380>
 80079ce:	2706      	movs	r7, #6
 80079d0:	f801 7023 	strb.w	r7, [r1, r3, lsl #2]
 80079d4:	6050      	str	r0, [r2, #4]
 80079d6:	68e3      	ldr	r3, [r4, #12]
 80079d8:	e7ae      	b.n	8007938 <d_template_args+0x124>
 80079da:	7893      	ldrb	r3, [r2, #2]
 80079dc:	2b6c      	cmp	r3, #108	; 0x6c
 80079de:	f47f af59 	bne.w	8007894 <d_template_args+0x80>
 80079e2:	2700      	movs	r7, #0
 80079e4:	3102      	adds	r1, #2
 80079e6:	60e1      	str	r1, [r4, #12]
 80079e8:	4620      	mov	r0, r4
 80079ea:	2145      	movs	r1, #69	; 0x45
 80079ec:	f7ff fcd4 	bl	8007398 <d_exprlist>
 80079f0:	463a      	mov	r2, r7
 80079f2:	4603      	mov	r3, r0
 80079f4:	2130      	movs	r1, #48	; 0x30
 80079f6:	4620      	mov	r0, r4
 80079f8:	f7fc fb4c 	bl	8004094 <d_make_comp>
 80079fc:	68e3      	ldr	r3, [r4, #12]
 80079fe:	4602      	mov	r2, r0
 8007a00:	e79a      	b.n	8007938 <d_template_args+0x124>
 8007a02:	7893      	ldrb	r3, [r2, #2]
 8007a04:	2b6c      	cmp	r3, #108	; 0x6c
 8007a06:	f47f af45 	bne.w	8007894 <d_template_args+0x80>
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	f001 fa0a 	bl	8008e24 <d_type>
 8007a10:	68e1      	ldr	r1, [r4, #12]
 8007a12:	4607      	mov	r7, r0
 8007a14:	e7e6      	b.n	80079e4 <d_template_args+0x1d0>
 8007a16:	4620      	mov	r0, r4
 8007a18:	f7ff fc5e 	bl	80072d8 <d_expr_primary>
 8007a1c:	68e3      	ldr	r3, [r4, #12]
 8007a1e:	4602      	mov	r2, r0
 8007a20:	e78a      	b.n	8007938 <d_template_args+0x124>
 8007a22:	4620      	mov	r0, r4
 8007a24:	f7fc fd84 	bl	8004530 <d_template_param>
 8007a28:	68e3      	ldr	r3, [r4, #12]
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	e784      	b.n	8007938 <d_template_args+0x124>
 8007a2e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8007a32:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007a34:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007a38:	f8d9 a000 	ldr.w	sl, [r9]
 8007a3c:	4995      	ldr	r1, [pc, #596]	; (8007c94 <d_template_args+0x480>)
 8007a3e:	3b02      	subs	r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	6323      	str	r3, [r4, #48]	; 0x30
 8007a44:	4650      	mov	r0, sl
 8007a46:	f005 f96c 	bl	800cd22 <strcmp>
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	f000 8115 	beq.w	8007c7a <d_template_args+0x466>
 8007a50:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007a54:	2b03      	cmp	r3, #3
 8007a56:	d889      	bhi.n	800796c <d_template_args+0x158>
 8007a58:	a201      	add	r2, pc, #4	; (adr r2, 8007a60 <d_template_args+0x24c>)
 8007a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5e:	bf00      	nop
 8007a60:	08007adf 	.word	0x08007adf
 8007a64:	08007b59 	.word	0x08007b59
 8007a68:	08007a75 	.word	0x08007a75
 8007a6c:	08007953 	.word	0x08007953
 8007a70:	f04f 0a00 	mov.w	sl, #0
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	785a      	ldrb	r2, [r3, #1]
 8007a7a:	2a63      	cmp	r2, #99	; 0x63
 8007a7c:	f000 8112 	beq.w	8007ca4 <d_template_args+0x490>
 8007a80:	4620      	mov	r0, r4
 8007a82:	f002 fe19 	bl	800a6b8 <d_expression_1>
 8007a86:	4681      	mov	r9, r0
 8007a88:	4650      	mov	r0, sl
 8007a8a:	4983      	ldr	r1, [pc, #524]	; (8007c98 <d_template_args+0x484>)
 8007a8c:	f005 f949 	bl	800cd22 <strcmp>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	f000 80f6 	beq.w	8007c82 <d_template_args+0x46e>
 8007a96:	4650      	mov	r0, sl
 8007a98:	4980      	ldr	r1, [pc, #512]	; (8007c9c <d_template_args+0x488>)
 8007a9a:	f005 f942 	bl	800cd22 <strcmp>
 8007a9e:	b130      	cbz	r0, 8007aae <d_template_args+0x29a>
 8007aa0:	4650      	mov	r0, sl
 8007aa2:	497f      	ldr	r1, [pc, #508]	; (8007ca0 <d_template_args+0x48c>)
 8007aa4:	f005 f93d 	bl	800cd22 <strcmp>
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	f040 81c3 	bne.w	8007e34 <d_template_args+0x620>
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f002 f814 	bl	8009adc <d_unqualified_name>
 8007ab4:	68e3      	ldr	r3, [r4, #12]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	2b49      	cmp	r3, #73	; 0x49
 8007aba:	4682      	mov	sl, r0
 8007abc:	f000 820b 	beq.w	8007ed6 <d_template_args+0x6c2>
 8007ac0:	464a      	mov	r2, r9
 8007ac2:	4653      	mov	r3, sl
 8007ac4:	2137      	movs	r1, #55	; 0x37
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f7fc fae4 	bl	8004094 <d_make_comp>
 8007acc:	463a      	mov	r2, r7
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2136      	movs	r1, #54	; 0x36
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f7fc fade 	bl	8004094 <d_make_comp>
 8007ad8:	68e3      	ldr	r3, [r4, #12]
 8007ada:	4602      	mov	r2, r0
 8007adc:	e72c      	b.n	8007938 <d_template_args+0x124>
 8007ade:	463a      	mov	r2, r7
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	2134      	movs	r1, #52	; 0x34
 8007ae6:	f7fc fad5 	bl	8004094 <d_make_comp>
 8007aea:	68e3      	ldr	r3, [r4, #12]
 8007aec:	4602      	mov	r2, r0
 8007aee:	e723      	b.n	8007938 <d_template_args+0x124>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b03      	cmp	r3, #3
 8007af4:	f63f af3a 	bhi.w	800796c <d_template_args+0x158>
 8007af8:	a201      	add	r2, pc, #4	; (adr r2, 8007b00 <d_template_args+0x2ec>)
 8007afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afe:	bf00      	nop
 8007b00:	08007adf 	.word	0x08007adf
 8007b04:	08007b2d 	.word	0x08007b2d
 8007b08:	08007a71 	.word	0x08007a71
 8007b0c:	0800794f 	.word	0x0800794f
 8007b10:	4620      	mov	r0, r4
 8007b12:	f7ff fe7f 	bl	8007814 <d_template_args>
 8007b16:	463a      	mov	r2, r7
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2104      	movs	r1, #4
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	f7fc fab9 	bl	8004094 <d_make_comp>
 8007b22:	68e3      	ldr	r3, [r4, #12]
 8007b24:	4602      	mov	r2, r0
 8007b26:	e707      	b.n	8007938 <d_template_args+0x124>
 8007b28:	3301      	adds	r3, #1
 8007b2a:	60e3      	str	r3, [r4, #12]
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	f002 fdc3 	bl	800a6b8 <d_expression_1>
 8007b32:	4603      	mov	r3, r0
 8007b34:	463a      	mov	r2, r7
 8007b36:	4620      	mov	r0, r4
 8007b38:	2135      	movs	r1, #53	; 0x35
 8007b3a:	f7fc faab 	bl	8004094 <d_make_comp>
 8007b3e:	68e3      	ldr	r3, [r4, #12]
 8007b40:	4602      	mov	r2, r0
 8007b42:	e6f9      	b.n	8007938 <d_template_args+0x124>
 8007b44:	3102      	adds	r1, #2
 8007b46:	2200      	movs	r2, #0
 8007b48:	60c1      	str	r1, [r0, #12]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	212f      	movs	r1, #47	; 0x2f
 8007b4e:	b005      	add	sp, #20
 8007b50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b54:	f7fc ba9e 	b.w	8004094 <d_make_comp>
 8007b58:	f89a 3000 	ldrb.w	r3, [sl]
 8007b5c:	2b70      	cmp	r3, #112	; 0x70
 8007b5e:	d001      	beq.n	8007b64 <d_template_args+0x350>
 8007b60:	2b6d      	cmp	r3, #109	; 0x6d
 8007b62:	d1e3      	bne.n	8007b2c <d_template_args+0x318>
 8007b64:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d1df      	bne.n	8007b2c <d_template_args+0x318>
 8007b6c:	68e3      	ldr	r3, [r4, #12]
 8007b6e:	781a      	ldrb	r2, [r3, #0]
 8007b70:	2a5f      	cmp	r2, #95	; 0x5f
 8007b72:	d0d9      	beq.n	8007b28 <d_template_args+0x314>
 8007b74:	4620      	mov	r0, r4
 8007b76:	f002 fd9f 	bl	800a6b8 <d_expression_1>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	4620      	mov	r0, r4
 8007b80:	2137      	movs	r1, #55	; 0x37
 8007b82:	f7fc fa87 	bl	8004094 <d_make_comp>
 8007b86:	4603      	mov	r3, r0
 8007b88:	463a      	mov	r2, r7
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	2135      	movs	r1, #53	; 0x35
 8007b8e:	f7fc fa81 	bl	8004094 <d_make_comp>
 8007b92:	4602      	mov	r2, r0
 8007b94:	68e3      	ldr	r3, [r4, #12]
 8007b96:	e6cf      	b.n	8007938 <d_template_args+0x124>
 8007b98:	3203      	adds	r2, #3
 8007b9a:	60e2      	str	r2, [r4, #12]
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	f001 f941 	bl	8008e24 <d_type>
 8007ba2:	4681      	mov	r9, r0
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f001 ff99 	bl	8009adc <d_unqualified_name>
 8007baa:	68e3      	ldr	r3, [r4, #12]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	2b49      	cmp	r3, #73	; 0x49
 8007bb0:	4682      	mov	sl, r0
 8007bb2:	d050      	beq.n	8007c56 <d_template_args+0x442>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	464a      	mov	r2, r9
 8007bb8:	4639      	mov	r1, r7
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f7fc fa6a 	bl	8004094 <d_make_comp>
 8007bc0:	68e3      	ldr	r3, [r4, #12]
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	e6b8      	b.n	8007938 <d_template_args+0x124>
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f7fc fc9a 	bl	8004500 <d_compact_number>
 8007bcc:	3001      	adds	r0, #1
 8007bce:	f47f aef1 	bne.w	80079b4 <d_template_args+0x1a0>
 8007bd2:	e7de      	b.n	8007b92 <d_template_args+0x37e>
 8007bd4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8007bd8:	2b77      	cmp	r3, #119	; 0x77
 8007bda:	d002      	beq.n	8007be2 <d_template_args+0x3ce>
 8007bdc:	2b61      	cmp	r3, #97	; 0x61
 8007bde:	f47f aec5 	bne.w	800796c <d_template_args+0x158>
 8007be2:	215f      	movs	r1, #95	; 0x5f
 8007be4:	4620      	mov	r0, r4
 8007be6:	f7ff fbd7 	bl	8007398 <d_exprlist>
 8007bea:	4683      	mov	fp, r0
 8007bec:	4620      	mov	r0, r4
 8007bee:	f001 f919 	bl	8008e24 <d_type>
 8007bf2:	68e3      	ldr	r3, [r4, #12]
 8007bf4:	781a      	ldrb	r2, [r3, #0]
 8007bf6:	2a45      	cmp	r2, #69	; 0x45
 8007bf8:	4681      	mov	r9, r0
 8007bfa:	f000 8156 	beq.w	8007eaa <d_template_args+0x696>
 8007bfe:	2a70      	cmp	r2, #112	; 0x70
 8007c00:	f000 81cf 	beq.w	8007fa2 <d_template_args+0x78e>
 8007c04:	2a69      	cmp	r2, #105	; 0x69
 8007c06:	f040 8113 	bne.w	8007e30 <d_template_args+0x61c>
 8007c0a:	785a      	ldrb	r2, [r3, #1]
 8007c0c:	2a6c      	cmp	r2, #108	; 0x6c
 8007c0e:	f040 810f 	bne.w	8007e30 <d_template_args+0x61c>
 8007c12:	3302      	adds	r3, #2
 8007c14:	60e3      	str	r3, [r4, #12]
 8007c16:	2145      	movs	r1, #69	; 0x45
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f7ff fbbd 	bl	8007398 <d_exprlist>
 8007c1e:	2130      	movs	r1, #48	; 0x30
 8007c20:	4603      	mov	r3, r0
 8007c22:	2200      	movs	r2, #0
 8007c24:	4620      	mov	r0, r4
 8007c26:	f7fc fa35 	bl	8004094 <d_make_comp>
 8007c2a:	4682      	mov	sl, r0
 8007c2c:	464a      	mov	r2, r9
 8007c2e:	4653      	mov	r3, sl
 8007c30:	213a      	movs	r1, #58	; 0x3a
 8007c32:	4620      	mov	r0, r4
 8007c34:	f7fc fa2e 	bl	8004094 <d_make_comp>
 8007c38:	465a      	mov	r2, fp
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2139      	movs	r1, #57	; 0x39
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f7fc fa28 	bl	8004094 <d_make_comp>
 8007c44:	463a      	mov	r2, r7
 8007c46:	4603      	mov	r3, r0
 8007c48:	2138      	movs	r1, #56	; 0x38
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f7fc fa22 	bl	8004094 <d_make_comp>
 8007c50:	68e3      	ldr	r3, [r4, #12]
 8007c52:	4602      	mov	r2, r0
 8007c54:	e670      	b.n	8007938 <d_template_args+0x124>
 8007c56:	4620      	mov	r0, r4
 8007c58:	f7ff fddc 	bl	8007814 <d_template_args>
 8007c5c:	4652      	mov	r2, sl
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2104      	movs	r1, #4
 8007c62:	4620      	mov	r0, r4
 8007c64:	f7fc fa16 	bl	8004094 <d_make_comp>
 8007c68:	464a      	mov	r2, r9
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	4639      	mov	r1, r7
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f7fc fa10 	bl	8004094 <d_make_comp>
 8007c74:	68e3      	ldr	r3, [r4, #12]
 8007c76:	4602      	mov	r2, r0
 8007c78:	e65e      	b.n	8007938 <d_template_args+0x124>
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f001 f8d2 	bl	8008e24 <d_type>
 8007c80:	e781      	b.n	8007b86 <d_template_args+0x372>
 8007c82:	4620      	mov	r0, r4
 8007c84:	2145      	movs	r1, #69	; 0x45
 8007c86:	f7ff fb87 	bl	8007398 <d_exprlist>
 8007c8a:	4682      	mov	sl, r0
 8007c8c:	e718      	b.n	8007ac0 <d_template_args+0x2ac>
 8007c8e:	bf00      	nop
 8007c90:	0800e6f8 	.word	0x0800e6f8
 8007c94:	0800ea04 	.word	0x0800ea04
 8007c98:	0800e6f0 	.word	0x0800e6f0
 8007c9c:	0800e810 	.word	0x0800e810
 8007ca0:	0800e814 	.word	0x0800e814
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8007caa:	2a01      	cmp	r2, #1
 8007cac:	d903      	bls.n	8007cb6 <d_template_args+0x4a2>
 8007cae:	3b72      	subs	r3, #114	; 0x72
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	f63f aee5 	bhi.w	8007a80 <d_template_args+0x26c>
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f001 f8b4 	bl	8008e24 <d_type>
 8007cbc:	4681      	mov	r9, r0
 8007cbe:	e6e3      	b.n	8007a88 <d_template_args+0x274>
 8007cc0:	68e3      	ldr	r3, [r4, #12]
 8007cc2:	781a      	ldrb	r2, [r3, #0]
 8007cc4:	2a4c      	cmp	r2, #76	; 0x4c
 8007cc6:	f000 8203 	beq.w	80080d0 <d_template_args+0x8bc>
 8007cca:	2a54      	cmp	r2, #84	; 0x54
 8007ccc:	f000 836b 	beq.w	80083a6 <d_template_args+0xb92>
 8007cd0:	2a73      	cmp	r2, #115	; 0x73
 8007cd2:	f000 8172 	beq.w	8007fba <d_template_args+0x7a6>
 8007cd6:	2a66      	cmp	r2, #102	; 0x66
 8007cd8:	f000 81af 	beq.w	800803a <d_template_args+0x826>
 8007cdc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007ce0:	2909      	cmp	r1, #9
 8007ce2:	f240 8126 	bls.w	8007f32 <d_template_args+0x71e>
 8007ce6:	2a6f      	cmp	r2, #111	; 0x6f
 8007ce8:	f000 811d 	beq.w	8007f26 <d_template_args+0x712>
 8007cec:	2a69      	cmp	r2, #105	; 0x69
 8007cee:	f000 81f6 	beq.w	80080de <d_template_args+0x8ca>
 8007cf2:	2a74      	cmp	r2, #116	; 0x74
 8007cf4:	f000 835e 	beq.w	80083b4 <d_template_args+0xba0>
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f001 fe6d 	bl	80099d8 <d_operator_name>
 8007cfe:	4683      	mov	fp, r0
 8007d00:	2800      	cmp	r0, #0
 8007d02:	f000 83b4 	beq.w	800846e <d_template_args+0xc5a>
 8007d06:	7803      	ldrb	r3, [r0, #0]
 8007d08:	2b31      	cmp	r3, #49	; 0x31
 8007d0a:	f000 83f6 	beq.w	80084fa <d_template_args+0xce6>
 8007d0e:	2b32      	cmp	r3, #50	; 0x32
 8007d10:	f000 835a 	beq.w	80083c8 <d_template_args+0xbb4>
 8007d14:	2b33      	cmp	r3, #51	; 0x33
 8007d16:	f040 81f6 	bne.w	8008106 <d_template_args+0x8f2>
 8007d1a:	68e3      	ldr	r3, [r4, #12]
 8007d1c:	781a      	ldrb	r2, [r3, #0]
 8007d1e:	2a5f      	cmp	r2, #95	; 0x5f
 8007d20:	f001 8061 	beq.w	8008de6 <d_template_args+0x15d2>
 8007d24:	4620      	mov	r0, r4
 8007d26:	f002 fcc7 	bl	800a6b8 <d_expression_1>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	465a      	mov	r2, fp
 8007d2e:	4620      	mov	r0, r4
 8007d30:	2135      	movs	r1, #53	; 0x35
 8007d32:	f7fc f9af 	bl	8004094 <d_make_comp>
 8007d36:	68e2      	ldr	r2, [r4, #12]
 8007d38:	7813      	ldrb	r3, [r2, #0]
 8007d3a:	4683      	mov	fp, r0
 8007d3c:	2b4c      	cmp	r3, #76	; 0x4c
 8007d3e:	f000 8203 	beq.w	8008148 <d_template_args+0x934>
 8007d42:	2b54      	cmp	r3, #84	; 0x54
 8007d44:	f000 8267 	beq.w	8008216 <d_template_args+0xa02>
 8007d48:	2b73      	cmp	r3, #115	; 0x73
 8007d4a:	f000 8160 	beq.w	800800e <d_template_args+0x7fa>
 8007d4e:	2b66      	cmp	r3, #102	; 0x66
 8007d50:	f000 8188 	beq.w	8008064 <d_template_args+0x850>
 8007d54:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007d58:	2909      	cmp	r1, #9
 8007d5a:	f240 8109 	bls.w	8007f70 <d_template_args+0x75c>
 8007d5e:	2b6f      	cmp	r3, #111	; 0x6f
 8007d60:	f000 8100 	beq.w	8007f64 <d_template_args+0x750>
 8007d64:	2b69      	cmp	r3, #105	; 0x69
 8007d66:	f000 81d8 	beq.w	800811a <d_template_args+0x906>
 8007d6a:	2b74      	cmp	r3, #116	; 0x74
 8007d6c:	f000 8312 	beq.w	8008394 <d_template_args+0xb80>
 8007d70:	4620      	mov	r0, r4
 8007d72:	f001 fe31 	bl	80099d8 <d_operator_name>
 8007d76:	4681      	mov	r9, r0
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	f000 82aa 	beq.w	80082d2 <d_template_args+0xabe>
 8007d7e:	7803      	ldrb	r3, [r0, #0]
 8007d80:	2b31      	cmp	r3, #49	; 0x31
 8007d82:	f000 82e6 	beq.w	8008352 <d_template_args+0xb3e>
 8007d86:	2b32      	cmp	r3, #50	; 0x32
 8007d88:	f000 8251 	beq.w	800822e <d_template_args+0xa1a>
 8007d8c:	2b33      	cmp	r3, #51	; 0x33
 8007d8e:	f040 81e7 	bne.w	8008160 <d_template_args+0x94c>
 8007d92:	68e3      	ldr	r3, [r4, #12]
 8007d94:	781a      	ldrb	r2, [r3, #0]
 8007d96:	2a5f      	cmp	r2, #95	; 0x5f
 8007d98:	f000 878b 	beq.w	8008cb2 <d_template_args+0x149e>
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f002 fc8b 	bl	800a6b8 <d_expression_1>
 8007da2:	4603      	mov	r3, r0
 8007da4:	464a      	mov	r2, r9
 8007da6:	4620      	mov	r0, r4
 8007da8:	2135      	movs	r1, #53	; 0x35
 8007daa:	f7fc f973 	bl	8004094 <d_make_comp>
 8007dae:	68e3      	ldr	r3, [r4, #12]
 8007db0:	781a      	ldrb	r2, [r3, #0]
 8007db2:	4681      	mov	r9, r0
 8007db4:	2a4c      	cmp	r2, #76	; 0x4c
 8007db6:	f000 81ce 	beq.w	8008156 <d_template_args+0x942>
 8007dba:	2a54      	cmp	r2, #84	; 0x54
 8007dbc:	f000 8232 	beq.w	8008224 <d_template_args+0xa10>
 8007dc0:	2a73      	cmp	r2, #115	; 0x73
 8007dc2:	f000 8110 	beq.w	8007fe6 <d_template_args+0x7d2>
 8007dc6:	2a66      	cmp	r2, #102	; 0x66
 8007dc8:	f000 8162 	beq.w	8008090 <d_template_args+0x87c>
 8007dcc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007dd0:	2909      	cmp	r1, #9
 8007dd2:	f240 8091 	bls.w	8007ef8 <d_template_args+0x6e4>
 8007dd6:	2a6f      	cmp	r2, #111	; 0x6f
 8007dd8:	f000 8088 	beq.w	8007eec <d_template_args+0x6d8>
 8007ddc:	2a69      	cmp	r2, #105	; 0x69
 8007dde:	f000 81c6 	beq.w	800816e <d_template_args+0x95a>
 8007de2:	2a74      	cmp	r2, #116	; 0x74
 8007de4:	f000 820e 	beq.w	8008204 <d_template_args+0x9f0>
 8007de8:	4620      	mov	r0, r4
 8007dea:	f001 fdf5 	bl	80099d8 <d_operator_name>
 8007dee:	4682      	mov	sl, r0
 8007df0:	2800      	cmp	r0, #0
 8007df2:	f43f af1b 	beq.w	8007c2c <d_template_args+0x418>
 8007df6:	7803      	ldrb	r3, [r0, #0]
 8007df8:	2b31      	cmp	r3, #49	; 0x31
 8007dfa:	f000 8448 	beq.w	800868e <d_template_args+0xe7a>
 8007dfe:	2b32      	cmp	r3, #50	; 0x32
 8007e00:	f000 83a6 	beq.w	8008550 <d_template_args+0xd3c>
 8007e04:	2b33      	cmp	r3, #51	; 0x33
 8007e06:	f040 8183 	bne.w	8008110 <d_template_args+0x8fc>
 8007e0a:	68e3      	ldr	r3, [r4, #12]
 8007e0c:	781a      	ldrb	r2, [r3, #0]
 8007e0e:	2a5f      	cmp	r2, #95	; 0x5f
 8007e10:	f000 86bd 	beq.w	8008b8e <d_template_args+0x137a>
 8007e14:	4620      	mov	r0, r4
 8007e16:	f002 fc4f 	bl	800a6b8 <d_expression_1>
 8007e1a:	4652      	mov	r2, sl
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2135      	movs	r1, #53	; 0x35
 8007e20:	4620      	mov	r0, r4
 8007e22:	f7fc f937 	bl	8004094 <d_make_comp>
 8007e26:	4682      	mov	sl, r0
 8007e28:	e700      	b.n	8007c2c <d_template_args+0x418>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	68e3      	ldr	r3, [r4, #12]
 8007e2e:	e583      	b.n	8007938 <d_template_args+0x124>
 8007e30:	2200      	movs	r2, #0
 8007e32:	e581      	b.n	8007938 <d_template_args+0x124>
 8007e34:	68e3      	ldr	r3, [r4, #12]
 8007e36:	781a      	ldrb	r2, [r3, #0]
 8007e38:	2a4c      	cmp	r2, #76	; 0x4c
 8007e3a:	f000 84e4 	beq.w	8008806 <d_template_args+0xff2>
 8007e3e:	2a54      	cmp	r2, #84	; 0x54
 8007e40:	f000 84c4 	beq.w	80087cc <d_template_args+0xfb8>
 8007e44:	2a73      	cmp	r2, #115	; 0x73
 8007e46:	f000 81c9 	beq.w	80081dc <d_template_args+0x9c8>
 8007e4a:	2a66      	cmp	r2, #102	; 0x66
 8007e4c:	f000 81a4 	beq.w	8008198 <d_template_args+0x984>
 8007e50:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007e54:	2909      	cmp	r1, #9
 8007e56:	d932      	bls.n	8007ebe <d_template_args+0x6aa>
 8007e58:	2a6f      	cmp	r2, #111	; 0x6f
 8007e5a:	d02b      	beq.n	8007eb4 <d_template_args+0x6a0>
 8007e5c:	2a69      	cmp	r2, #105	; 0x69
 8007e5e:	f000 8610 	beq.w	8008a82 <d_template_args+0x126e>
 8007e62:	2a74      	cmp	r2, #116	; 0x74
 8007e64:	f000 850e 	beq.w	8008884 <d_template_args+0x1070>
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f001 fdb5 	bl	80099d8 <d_operator_name>
 8007e6e:	4682      	mov	sl, r0
 8007e70:	2800      	cmp	r0, #0
 8007e72:	f000 8369 	beq.w	8008548 <d_template_args+0xd34>
 8007e76:	7803      	ldrb	r3, [r0, #0]
 8007e78:	2b31      	cmp	r3, #49	; 0x31
 8007e7a:	f000 846d 	beq.w	8008758 <d_template_args+0xf44>
 8007e7e:	2b32      	cmp	r3, #50	; 0x32
 8007e80:	f000 85a8 	beq.w	80089d4 <d_template_args+0x11c0>
 8007e84:	2b33      	cmp	r3, #51	; 0x33
 8007e86:	f040 835f 	bne.w	8008548 <d_template_args+0xd34>
 8007e8a:	68e3      	ldr	r3, [r4, #12]
 8007e8c:	781a      	ldrb	r2, [r3, #0]
 8007e8e:	2a5f      	cmp	r2, #95	; 0x5f
 8007e90:	f000 8750 	beq.w	8008d34 <d_template_args+0x1520>
 8007e94:	4620      	mov	r0, r4
 8007e96:	f002 fc0f 	bl	800a6b8 <d_expression_1>
 8007e9a:	4652      	mov	r2, sl
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2135      	movs	r1, #53	; 0x35
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f7fc f8f7 	bl	8004094 <d_make_comp>
 8007ea6:	4682      	mov	sl, r0
 8007ea8:	e60a      	b.n	8007ac0 <d_template_args+0x2ac>
 8007eaa:	3301      	adds	r3, #1
 8007eac:	60e3      	str	r3, [r4, #12]
 8007eae:	f04f 0a00 	mov.w	sl, #0
 8007eb2:	e6bb      	b.n	8007c2c <d_template_args+0x418>
 8007eb4:	785a      	ldrb	r2, [r3, #1]
 8007eb6:	2a6e      	cmp	r2, #110	; 0x6e
 8007eb8:	d1d6      	bne.n	8007e68 <d_template_args+0x654>
 8007eba:	3302      	adds	r3, #2
 8007ebc:	60e3      	str	r3, [r4, #12]
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f001 fe0c 	bl	8009adc <d_unqualified_name>
 8007ec4:	4682      	mov	sl, r0
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	f000 833e 	beq.w	8008548 <d_template_args+0xd34>
 8007ecc:	68e3      	ldr	r3, [r4, #12]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	2b49      	cmp	r3, #73	; 0x49
 8007ed2:	f47f adf5 	bne.w	8007ac0 <d_template_args+0x2ac>
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f7ff fc9c 	bl	8007814 <d_template_args>
 8007edc:	4652      	mov	r2, sl
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2104      	movs	r1, #4
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f7fc f8d6 	bl	8004094 <d_make_comp>
 8007ee8:	4682      	mov	sl, r0
 8007eea:	e5e9      	b.n	8007ac0 <d_template_args+0x2ac>
 8007eec:	785a      	ldrb	r2, [r3, #1]
 8007eee:	2a6e      	cmp	r2, #110	; 0x6e
 8007ef0:	f47f af7a 	bne.w	8007de8 <d_template_args+0x5d4>
 8007ef4:	3302      	adds	r3, #2
 8007ef6:	60e3      	str	r3, [r4, #12]
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f001 fdef 	bl	8009adc <d_unqualified_name>
 8007efe:	4682      	mov	sl, r0
 8007f00:	2800      	cmp	r0, #0
 8007f02:	f43f ae93 	beq.w	8007c2c <d_template_args+0x418>
 8007f06:	68e3      	ldr	r3, [r4, #12]
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	2b49      	cmp	r3, #73	; 0x49
 8007f0c:	f47f ae8e 	bne.w	8007c2c <d_template_args+0x418>
 8007f10:	4620      	mov	r0, r4
 8007f12:	f7ff fc7f 	bl	8007814 <d_template_args>
 8007f16:	4652      	mov	r2, sl
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2104      	movs	r1, #4
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f7fc f8b9 	bl	8004094 <d_make_comp>
 8007f22:	4682      	mov	sl, r0
 8007f24:	e682      	b.n	8007c2c <d_template_args+0x418>
 8007f26:	785a      	ldrb	r2, [r3, #1]
 8007f28:	2a6e      	cmp	r2, #110	; 0x6e
 8007f2a:	f47f aee5 	bne.w	8007cf8 <d_template_args+0x4e4>
 8007f2e:	3302      	adds	r3, #2
 8007f30:	60e3      	str	r3, [r4, #12]
 8007f32:	4620      	mov	r0, r4
 8007f34:	f001 fdd2 	bl	8009adc <d_unqualified_name>
 8007f38:	68e2      	ldr	r2, [r4, #12]
 8007f3a:	4683      	mov	fp, r0
 8007f3c:	7813      	ldrb	r3, [r2, #0]
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	f43f aefc 	beq.w	8007d3c <d_template_args+0x528>
 8007f44:	2b49      	cmp	r3, #73	; 0x49
 8007f46:	f47f aef9 	bne.w	8007d3c <d_template_args+0x528>
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f7ff fc62 	bl	8007814 <d_template_args>
 8007f50:	465a      	mov	r2, fp
 8007f52:	4603      	mov	r3, r0
 8007f54:	2104      	movs	r1, #4
 8007f56:	4620      	mov	r0, r4
 8007f58:	f7fc f89c 	bl	8004094 <d_make_comp>
 8007f5c:	68e2      	ldr	r2, [r4, #12]
 8007f5e:	4683      	mov	fp, r0
 8007f60:	7813      	ldrb	r3, [r2, #0]
 8007f62:	e6eb      	b.n	8007d3c <d_template_args+0x528>
 8007f64:	7853      	ldrb	r3, [r2, #1]
 8007f66:	2b6e      	cmp	r3, #110	; 0x6e
 8007f68:	f47f af02 	bne.w	8007d70 <d_template_args+0x55c>
 8007f6c:	1c93      	adds	r3, r2, #2
 8007f6e:	60e3      	str	r3, [r4, #12]
 8007f70:	4620      	mov	r0, r4
 8007f72:	f001 fdb3 	bl	8009adc <d_unqualified_name>
 8007f76:	68e3      	ldr	r3, [r4, #12]
 8007f78:	4681      	mov	r9, r0
 8007f7a:	781a      	ldrb	r2, [r3, #0]
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	f43f af19 	beq.w	8007db4 <d_template_args+0x5a0>
 8007f82:	2a49      	cmp	r2, #73	; 0x49
 8007f84:	f47f af16 	bne.w	8007db4 <d_template_args+0x5a0>
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f7ff fc43 	bl	8007814 <d_template_args>
 8007f8e:	464a      	mov	r2, r9
 8007f90:	4603      	mov	r3, r0
 8007f92:	2104      	movs	r1, #4
 8007f94:	4620      	mov	r0, r4
 8007f96:	f7fc f87d 	bl	8004094 <d_make_comp>
 8007f9a:	68e3      	ldr	r3, [r4, #12]
 8007f9c:	4681      	mov	r9, r0
 8007f9e:	781a      	ldrb	r2, [r3, #0]
 8007fa0:	e708      	b.n	8007db4 <d_template_args+0x5a0>
 8007fa2:	785a      	ldrb	r2, [r3, #1]
 8007fa4:	2a69      	cmp	r2, #105	; 0x69
 8007fa6:	f47f af43 	bne.w	8007e30 <d_template_args+0x61c>
 8007faa:	3302      	adds	r3, #2
 8007fac:	60e3      	str	r3, [r4, #12]
 8007fae:	4620      	mov	r0, r4
 8007fb0:	2145      	movs	r1, #69	; 0x45
 8007fb2:	f7ff f9f1 	bl	8007398 <d_exprlist>
 8007fb6:	4682      	mov	sl, r0
 8007fb8:	e638      	b.n	8007c2c <d_template_args+0x418>
 8007fba:	785a      	ldrb	r2, [r3, #1]
 8007fbc:	2a72      	cmp	r2, #114	; 0x72
 8007fbe:	f000 8447 	beq.w	8008850 <d_template_args+0x103c>
 8007fc2:	2a70      	cmp	r2, #112	; 0x70
 8007fc4:	f47f ae98 	bne.w	8007cf8 <d_template_args+0x4e4>
 8007fc8:	3302      	adds	r3, #2
 8007fca:	60e3      	str	r3, [r4, #12]
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f002 fb73 	bl	800a6b8 <d_expression_1>
 8007fd2:	464b      	mov	r3, r9
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	2149      	movs	r1, #73	; 0x49
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f7fc f85b 	bl	8004094 <d_make_comp>
 8007fde:	68e2      	ldr	r2, [r4, #12]
 8007fe0:	4683      	mov	fp, r0
 8007fe2:	7813      	ldrb	r3, [r2, #0]
 8007fe4:	e6aa      	b.n	8007d3c <d_template_args+0x528>
 8007fe6:	785a      	ldrb	r2, [r3, #1]
 8007fe8:	2a72      	cmp	r2, #114	; 0x72
 8007fea:	f000 83f5 	beq.w	80087d8 <d_template_args+0xfc4>
 8007fee:	2a70      	cmp	r2, #112	; 0x70
 8007ff0:	f47f aefa 	bne.w	8007de8 <d_template_args+0x5d4>
 8007ff4:	3302      	adds	r3, #2
 8007ff6:	60e3      	str	r3, [r4, #12]
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f002 fb5d 	bl	800a6b8 <d_expression_1>
 8007ffe:	2149      	movs	r1, #73	; 0x49
 8008000:	4602      	mov	r2, r0
 8008002:	2300      	movs	r3, #0
 8008004:	4620      	mov	r0, r4
 8008006:	f7fc f845 	bl	8004094 <d_make_comp>
 800800a:	4682      	mov	sl, r0
 800800c:	e60e      	b.n	8007c2c <d_template_args+0x418>
 800800e:	7853      	ldrb	r3, [r2, #1]
 8008010:	2b72      	cmp	r3, #114	; 0x72
 8008012:	f000 8366 	beq.w	80086e2 <d_template_args+0xece>
 8008016:	2b70      	cmp	r3, #112	; 0x70
 8008018:	f47f aeaa 	bne.w	8007d70 <d_template_args+0x55c>
 800801c:	1c93      	adds	r3, r2, #2
 800801e:	60e3      	str	r3, [r4, #12]
 8008020:	4620      	mov	r0, r4
 8008022:	f002 fb49 	bl	800a6b8 <d_expression_1>
 8008026:	2149      	movs	r1, #73	; 0x49
 8008028:	4602      	mov	r2, r0
 800802a:	4620      	mov	r0, r4
 800802c:	2300      	movs	r3, #0
 800802e:	f7fc f831 	bl	8004094 <d_make_comp>
 8008032:	68e3      	ldr	r3, [r4, #12]
 8008034:	4681      	mov	r9, r0
 8008036:	781a      	ldrb	r2, [r3, #0]
 8008038:	e6bc      	b.n	8007db4 <d_template_args+0x5a0>
 800803a:	785a      	ldrb	r2, [r3, #1]
 800803c:	2a70      	cmp	r2, #112	; 0x70
 800803e:	f47f ae5b 	bne.w	8007cf8 <d_template_args+0x4e4>
 8008042:	1c9a      	adds	r2, r3, #2
 8008044:	60e2      	str	r2, [r4, #12]
 8008046:	789a      	ldrb	r2, [r3, #2]
 8008048:	2a54      	cmp	r2, #84	; 0x54
 800804a:	f040 83f6 	bne.w	800883a <d_template_args+0x1026>
 800804e:	1cda      	adds	r2, r3, #3
 8008050:	60e2      	str	r2, [r4, #12]
 8008052:	6963      	ldr	r3, [r4, #20]
 8008054:	69a1      	ldr	r1, [r4, #24]
 8008056:	428b      	cmp	r3, r1
 8008058:	f2c0 83db 	blt.w	8008812 <d_template_args+0xffe>
 800805c:	7813      	ldrb	r3, [r2, #0]
 800805e:	f04f 0b00 	mov.w	fp, #0
 8008062:	e66b      	b.n	8007d3c <d_template_args+0x528>
 8008064:	7853      	ldrb	r3, [r2, #1]
 8008066:	2b70      	cmp	r3, #112	; 0x70
 8008068:	f47f ae82 	bne.w	8007d70 <d_template_args+0x55c>
 800806c:	1c93      	adds	r3, r2, #2
 800806e:	60e3      	str	r3, [r4, #12]
 8008070:	7893      	ldrb	r3, [r2, #2]
 8008072:	2b54      	cmp	r3, #84	; 0x54
 8008074:	f040 84fa 	bne.w	8008a6c <d_template_args+0x1258>
 8008078:	1cd3      	adds	r3, r2, #3
 800807a:	60e3      	str	r3, [r4, #12]
 800807c:	2000      	movs	r0, #0
 800807e:	6962      	ldr	r2, [r4, #20]
 8008080:	69a1      	ldr	r1, [r4, #24]
 8008082:	428a      	cmp	r2, r1
 8008084:	f2c0 84de 	blt.w	8008a44 <d_template_args+0x1230>
 8008088:	781a      	ldrb	r2, [r3, #0]
 800808a:	f04f 0900 	mov.w	r9, #0
 800808e:	e691      	b.n	8007db4 <d_template_args+0x5a0>
 8008090:	785a      	ldrb	r2, [r3, #1]
 8008092:	2a70      	cmp	r2, #112	; 0x70
 8008094:	f47f aea8 	bne.w	8007de8 <d_template_args+0x5d4>
 8008098:	1c9a      	adds	r2, r3, #2
 800809a:	60e2      	str	r2, [r4, #12]
 800809c:	789a      	ldrb	r2, [r3, #2]
 800809e:	2a54      	cmp	r2, #84	; 0x54
 80080a0:	f040 8316 	bne.w	80086d0 <d_template_args+0xebc>
 80080a4:	3303      	adds	r3, #3
 80080a6:	60e3      	str	r3, [r4, #12]
 80080a8:	2000      	movs	r0, #0
 80080aa:	6963      	ldr	r3, [r4, #20]
 80080ac:	69a2      	ldr	r2, [r4, #24]
 80080ae:	4293      	cmp	r3, r2
 80080b0:	da2e      	bge.n	8008110 <d_template_args+0x8fc>
 80080b2:	6922      	ldr	r2, [r4, #16]
 80080b4:	1c59      	adds	r1, r3, #1
 80080b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80080ba:	eb12 0a83 	adds.w	sl, r2, r3, lsl #2
 80080be:	6161      	str	r1, [r4, #20]
 80080c0:	f43f adb4 	beq.w	8007c2c <d_template_args+0x418>
 80080c4:	2106      	movs	r1, #6
 80080c6:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 80080ca:	f8ca 0004 	str.w	r0, [sl, #4]
 80080ce:	e5ad      	b.n	8007c2c <d_template_args+0x418>
 80080d0:	4620      	mov	r0, r4
 80080d2:	f7ff f901 	bl	80072d8 <d_expr_primary>
 80080d6:	68e2      	ldr	r2, [r4, #12]
 80080d8:	4683      	mov	fp, r0
 80080da:	7813      	ldrb	r3, [r2, #0]
 80080dc:	e62e      	b.n	8007d3c <d_template_args+0x528>
 80080de:	785a      	ldrb	r2, [r3, #1]
 80080e0:	2a6c      	cmp	r2, #108	; 0x6c
 80080e2:	f47f ae09 	bne.w	8007cf8 <d_template_args+0x4e4>
 80080e6:	3302      	adds	r3, #2
 80080e8:	60e3      	str	r3, [r4, #12]
 80080ea:	2145      	movs	r1, #69	; 0x45
 80080ec:	4620      	mov	r0, r4
 80080ee:	f7ff f953 	bl	8007398 <d_exprlist>
 80080f2:	464a      	mov	r2, r9
 80080f4:	4603      	mov	r3, r0
 80080f6:	2130      	movs	r1, #48	; 0x30
 80080f8:	4620      	mov	r0, r4
 80080fa:	f7fb ffcb 	bl	8004094 <d_make_comp>
 80080fe:	68e2      	ldr	r2, [r4, #12]
 8008100:	4683      	mov	fp, r0
 8008102:	7813      	ldrb	r3, [r2, #0]
 8008104:	e61a      	b.n	8007d3c <d_template_args+0x528>
 8008106:	68e2      	ldr	r2, [r4, #12]
 8008108:	f04f 0b00 	mov.w	fp, #0
 800810c:	7813      	ldrb	r3, [r2, #0]
 800810e:	e615      	b.n	8007d3c <d_template_args+0x528>
 8008110:	f04f 0a00 	mov.w	sl, #0
 8008114:	e58a      	b.n	8007c2c <d_template_args+0x418>
 8008116:	f04f 0b00 	mov.w	fp, #0
 800811a:	7853      	ldrb	r3, [r2, #1]
 800811c:	2b6c      	cmp	r3, #108	; 0x6c
 800811e:	f47f ae27 	bne.w	8007d70 <d_template_args+0x55c>
 8008122:	f04f 0900 	mov.w	r9, #0
 8008126:	68e3      	ldr	r3, [r4, #12]
 8008128:	3302      	adds	r3, #2
 800812a:	60e3      	str	r3, [r4, #12]
 800812c:	2145      	movs	r1, #69	; 0x45
 800812e:	4620      	mov	r0, r4
 8008130:	f7ff f932 	bl	8007398 <d_exprlist>
 8008134:	464a      	mov	r2, r9
 8008136:	4603      	mov	r3, r0
 8008138:	2130      	movs	r1, #48	; 0x30
 800813a:	4620      	mov	r0, r4
 800813c:	f7fb ffaa 	bl	8004094 <d_make_comp>
 8008140:	68e3      	ldr	r3, [r4, #12]
 8008142:	4681      	mov	r9, r0
 8008144:	781a      	ldrb	r2, [r3, #0]
 8008146:	e635      	b.n	8007db4 <d_template_args+0x5a0>
 8008148:	4620      	mov	r0, r4
 800814a:	f7ff f8c5 	bl	80072d8 <d_expr_primary>
 800814e:	68e3      	ldr	r3, [r4, #12]
 8008150:	4681      	mov	r9, r0
 8008152:	781a      	ldrb	r2, [r3, #0]
 8008154:	e62e      	b.n	8007db4 <d_template_args+0x5a0>
 8008156:	4620      	mov	r0, r4
 8008158:	f7ff f8be 	bl	80072d8 <d_expr_primary>
 800815c:	4682      	mov	sl, r0
 800815e:	e565      	b.n	8007c2c <d_template_args+0x418>
 8008160:	68e3      	ldr	r3, [r4, #12]
 8008162:	f04f 0900 	mov.w	r9, #0
 8008166:	781a      	ldrb	r2, [r3, #0]
 8008168:	e624      	b.n	8007db4 <d_template_args+0x5a0>
 800816a:	f04f 0900 	mov.w	r9, #0
 800816e:	785b      	ldrb	r3, [r3, #1]
 8008170:	2b6c      	cmp	r3, #108	; 0x6c
 8008172:	f47f ae39 	bne.w	8007de8 <d_template_args+0x5d4>
 8008176:	f04f 0a00 	mov.w	sl, #0
 800817a:	68e3      	ldr	r3, [r4, #12]
 800817c:	3302      	adds	r3, #2
 800817e:	60e3      	str	r3, [r4, #12]
 8008180:	2145      	movs	r1, #69	; 0x45
 8008182:	4620      	mov	r0, r4
 8008184:	f7ff f908 	bl	8007398 <d_exprlist>
 8008188:	4652      	mov	r2, sl
 800818a:	4603      	mov	r3, r0
 800818c:	2130      	movs	r1, #48	; 0x30
 800818e:	4620      	mov	r0, r4
 8008190:	f7fb ff80 	bl	8004094 <d_make_comp>
 8008194:	4682      	mov	sl, r0
 8008196:	e549      	b.n	8007c2c <d_template_args+0x418>
 8008198:	785a      	ldrb	r2, [r3, #1]
 800819a:	2a70      	cmp	r2, #112	; 0x70
 800819c:	f47f ae64 	bne.w	8007e68 <d_template_args+0x654>
 80081a0:	1c9a      	adds	r2, r3, #2
 80081a2:	60e2      	str	r2, [r4, #12]
 80081a4:	789a      	ldrb	r2, [r3, #2]
 80081a6:	2a54      	cmp	r2, #84	; 0x54
 80081a8:	f040 81c8 	bne.w	800853c <d_template_args+0xd28>
 80081ac:	3303      	adds	r3, #3
 80081ae:	60e3      	str	r3, [r4, #12]
 80081b0:	2000      	movs	r0, #0
 80081b2:	6962      	ldr	r2, [r4, #20]
 80081b4:	69a3      	ldr	r3, [r4, #24]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	f280 81c6 	bge.w	8008548 <d_template_args+0xd34>
 80081bc:	230c      	movs	r3, #12
 80081be:	6921      	ldr	r1, [r4, #16]
 80081c0:	fb03 f302 	mul.w	r3, r3, r2
 80081c4:	eb11 0a03 	adds.w	sl, r1, r3
 80081c8:	f102 0201 	add.w	r2, r2, #1
 80081cc:	6162      	str	r2, [r4, #20]
 80081ce:	f43f ac77 	beq.w	8007ac0 <d_template_args+0x2ac>
 80081d2:	2206      	movs	r2, #6
 80081d4:	54ca      	strb	r2, [r1, r3]
 80081d6:	f8ca 0004 	str.w	r0, [sl, #4]
 80081da:	e471      	b.n	8007ac0 <d_template_args+0x2ac>
 80081dc:	785a      	ldrb	r2, [r3, #1]
 80081de:	2a72      	cmp	r2, #114	; 0x72
 80081e0:	f000 856f 	beq.w	8008cc2 <d_template_args+0x14ae>
 80081e4:	2a70      	cmp	r2, #112	; 0x70
 80081e6:	f47f ae3f 	bne.w	8007e68 <d_template_args+0x654>
 80081ea:	3302      	adds	r3, #2
 80081ec:	60e3      	str	r3, [r4, #12]
 80081ee:	4620      	mov	r0, r4
 80081f0:	f002 fa62 	bl	800a6b8 <d_expression_1>
 80081f4:	2149      	movs	r1, #73	; 0x49
 80081f6:	4602      	mov	r2, r0
 80081f8:	2300      	movs	r3, #0
 80081fa:	4620      	mov	r0, r4
 80081fc:	f7fb ff4a 	bl	8004094 <d_make_comp>
 8008200:	4682      	mov	sl, r0
 8008202:	e45d      	b.n	8007ac0 <d_template_args+0x2ac>
 8008204:	785b      	ldrb	r3, [r3, #1]
 8008206:	2b6c      	cmp	r3, #108	; 0x6c
 8008208:	f47f adee 	bne.w	8007de8 <d_template_args+0x5d4>
 800820c:	4620      	mov	r0, r4
 800820e:	f000 fe09 	bl	8008e24 <d_type>
 8008212:	4682      	mov	sl, r0
 8008214:	e7b1      	b.n	800817a <d_template_args+0x966>
 8008216:	4620      	mov	r0, r4
 8008218:	f7fc f98a 	bl	8004530 <d_template_param>
 800821c:	68e3      	ldr	r3, [r4, #12]
 800821e:	4681      	mov	r9, r0
 8008220:	781a      	ldrb	r2, [r3, #0]
 8008222:	e5c7      	b.n	8007db4 <d_template_args+0x5a0>
 8008224:	4620      	mov	r0, r4
 8008226:	f7fc f983 	bl	8004530 <d_template_param>
 800822a:	4682      	mov	sl, r0
 800822c:	e4fe      	b.n	8007c2c <d_template_args+0x418>
 800822e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008232:	2b03      	cmp	r3, #3
 8008234:	d894      	bhi.n	8008160 <d_template_args+0x94c>
 8008236:	a201      	add	r2, pc, #4	; (adr r2, 800823c <d_template_args+0xa28>)
 8008238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823c:	0800834b 	.word	0x0800834b
 8008240:	08007d9d 	.word	0x08007d9d
 8008244:	080082d9 	.word	0x080082d9
 8008248:	0800824d 	.word	0x0800824d
 800824c:	f04f 0a00 	mov.w	sl, #0
 8008250:	4650      	mov	r0, sl
 8008252:	49c7      	ldr	r1, [pc, #796]	; (8008570 <d_template_args+0xd5c>)
 8008254:	f004 fd65 	bl	800cd22 <strcmp>
 8008258:	2800      	cmp	r0, #0
 800825a:	f000 85a4 	beq.w	8008da6 <d_template_args+0x1592>
 800825e:	f89a 2000 	ldrb.w	r2, [sl]
 8008262:	2a6e      	cmp	r2, #110	; 0x6e
 8008264:	f47f af7c 	bne.w	8008160 <d_template_args+0x94c>
 8008268:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800826c:	2b77      	cmp	r3, #119	; 0x77
 800826e:	d002      	beq.n	8008276 <d_template_args+0xa62>
 8008270:	2b61      	cmp	r3, #97	; 0x61
 8008272:	f47f af75 	bne.w	8008160 <d_template_args+0x94c>
 8008276:	215f      	movs	r1, #95	; 0x5f
 8008278:	4620      	mov	r0, r4
 800827a:	f7ff f88d 	bl	8007398 <d_exprlist>
 800827e:	9000      	str	r0, [sp, #0]
 8008280:	4620      	mov	r0, r4
 8008282:	f000 fdcf 	bl	8008e24 <d_type>
 8008286:	68e3      	ldr	r3, [r4, #12]
 8008288:	781a      	ldrb	r2, [r3, #0]
 800828a:	2a45      	cmp	r2, #69	; 0x45
 800828c:	4682      	mov	sl, r0
 800828e:	f000 8579 	beq.w	8008d84 <d_template_args+0x1570>
 8008292:	2a70      	cmp	r2, #112	; 0x70
 8008294:	f000 856f 	beq.w	8008d76 <d_template_args+0x1562>
 8008298:	2a69      	cmp	r2, #105	; 0x69
 800829a:	f040 8568 	bne.w	8008d6e <d_template_args+0x155a>
 800829e:	785a      	ldrb	r2, [r3, #1]
 80082a0:	2a6c      	cmp	r2, #108	; 0x6c
 80082a2:	f47f af62 	bne.w	800816a <d_template_args+0x956>
 80082a6:	4620      	mov	r0, r4
 80082a8:	f002 fa06 	bl	800a6b8 <d_expression_1>
 80082ac:	4603      	mov	r3, r0
 80082ae:	4652      	mov	r2, sl
 80082b0:	213a      	movs	r1, #58	; 0x3a
 80082b2:	4620      	mov	r0, r4
 80082b4:	f7fb feee 	bl	8004094 <d_make_comp>
 80082b8:	9a00      	ldr	r2, [sp, #0]
 80082ba:	4603      	mov	r3, r0
 80082bc:	2139      	movs	r1, #57	; 0x39
 80082be:	4620      	mov	r0, r4
 80082c0:	f7fb fee8 	bl	8004094 <d_make_comp>
 80082c4:	464a      	mov	r2, r9
 80082c6:	4603      	mov	r3, r0
 80082c8:	2138      	movs	r1, #56	; 0x38
 80082ca:	4620      	mov	r0, r4
 80082cc:	f7fb fee2 	bl	8004094 <d_make_comp>
 80082d0:	4681      	mov	r9, r0
 80082d2:	68e3      	ldr	r3, [r4, #12]
 80082d4:	781a      	ldrb	r2, [r3, #0]
 80082d6:	e56d      	b.n	8007db4 <d_template_args+0x5a0>
 80082d8:	f04f 0a00 	mov.w	sl, #0
 80082dc:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80082e0:	6812      	ldr	r2, [r2, #0]
 80082e2:	7851      	ldrb	r1, [r2, #1]
 80082e4:	2963      	cmp	r1, #99	; 0x63
 80082e6:	f000 852d 	beq.w	8008d44 <d_template_args+0x1530>
 80082ea:	4620      	mov	r0, r4
 80082ec:	f002 f9e4 	bl	800a6b8 <d_expression_1>
 80082f0:	9000      	str	r0, [sp, #0]
 80082f2:	4650      	mov	r0, sl
 80082f4:	499f      	ldr	r1, [pc, #636]	; (8008574 <d_template_args+0xd60>)
 80082f6:	f004 fd14 	bl	800cd22 <strcmp>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	f000 856c 	beq.w	8008dd8 <d_template_args+0x15c4>
 8008300:	4650      	mov	r0, sl
 8008302:	499d      	ldr	r1, [pc, #628]	; (8008578 <d_template_args+0xd64>)
 8008304:	f004 fd0d 	bl	800cd22 <strcmp>
 8008308:	b130      	cbz	r0, 8008318 <d_template_args+0xb04>
 800830a:	4650      	mov	r0, sl
 800830c:	499b      	ldr	r1, [pc, #620]	; (800857c <d_template_args+0xd68>)
 800830e:	f004 fd08 	bl	800cd22 <strcmp>
 8008312:	2800      	cmp	r0, #0
 8008314:	f040 8525 	bne.w	8008d62 <d_template_args+0x154e>
 8008318:	4620      	mov	r0, r4
 800831a:	f001 fbdf 	bl	8009adc <d_unqualified_name>
 800831e:	68e3      	ldr	r3, [r4, #12]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	2b49      	cmp	r3, #73	; 0x49
 8008324:	4682      	mov	sl, r0
 8008326:	f000 8532 	beq.w	8008d8e <d_template_args+0x157a>
 800832a:	9a00      	ldr	r2, [sp, #0]
 800832c:	4653      	mov	r3, sl
 800832e:	2137      	movs	r1, #55	; 0x37
 8008330:	4620      	mov	r0, r4
 8008332:	f7fb feaf 	bl	8004094 <d_make_comp>
 8008336:	464a      	mov	r2, r9
 8008338:	4603      	mov	r3, r0
 800833a:	2136      	movs	r1, #54	; 0x36
 800833c:	4620      	mov	r0, r4
 800833e:	f7fb fea9 	bl	8004094 <d_make_comp>
 8008342:	68e3      	ldr	r3, [r4, #12]
 8008344:	4681      	mov	r9, r0
 8008346:	781a      	ldrb	r2, [r3, #0]
 8008348:	e534      	b.n	8007db4 <d_template_args+0x5a0>
 800834a:	464a      	mov	r2, r9
 800834c:	4620      	mov	r0, r4
 800834e:	2134      	movs	r1, #52	; 0x34
 8008350:	e66c      	b.n	800802c <d_template_args+0x818>
 8008352:	6843      	ldr	r3, [r0, #4]
 8008354:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008356:	689a      	ldr	r2, [r3, #8]
 8008358:	f8d3 a000 	ldr.w	sl, [r3]
 800835c:	4988      	ldr	r1, [pc, #544]	; (8008580 <d_template_args+0xd6c>)
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	3a02      	subs	r2, #2
 8008362:	4410      	add	r0, r2
 8008364:	6320      	str	r0, [r4, #48]	; 0x30
 8008366:	4650      	mov	r0, sl
 8008368:	f004 fcdb 	bl	800cd22 <strcmp>
 800836c:	9b00      	ldr	r3, [sp, #0]
 800836e:	2800      	cmp	r0, #0
 8008370:	f000 852e 	beq.w	8008dd0 <d_template_args+0x15bc>
 8008374:	68da      	ldr	r2, [r3, #12]
 8008376:	2a03      	cmp	r2, #3
 8008378:	f63f aef2 	bhi.w	8008160 <d_template_args+0x94c>
 800837c:	a301      	add	r3, pc, #4	; (adr r3, 8008384 <d_template_args+0xb70>)
 800837e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8008382:	bf00      	nop
 8008384:	0800834b 	.word	0x0800834b
 8008388:	0800878f 	.word	0x0800878f
 800838c:	080082dd 	.word	0x080082dd
 8008390:	08008251 	.word	0x08008251
 8008394:	7853      	ldrb	r3, [r2, #1]
 8008396:	2b6c      	cmp	r3, #108	; 0x6c
 8008398:	f47f acea 	bne.w	8007d70 <d_template_args+0x55c>
 800839c:	4620      	mov	r0, r4
 800839e:	f000 fd41 	bl	8008e24 <d_type>
 80083a2:	4681      	mov	r9, r0
 80083a4:	e6bf      	b.n	8008126 <d_template_args+0x912>
 80083a6:	4620      	mov	r0, r4
 80083a8:	f7fc f8c2 	bl	8004530 <d_template_param>
 80083ac:	68e2      	ldr	r2, [r4, #12]
 80083ae:	4683      	mov	fp, r0
 80083b0:	7813      	ldrb	r3, [r2, #0]
 80083b2:	e4c3      	b.n	8007d3c <d_template_args+0x528>
 80083b4:	785b      	ldrb	r3, [r3, #1]
 80083b6:	2b6c      	cmp	r3, #108	; 0x6c
 80083b8:	f47f ac9e 	bne.w	8007cf8 <d_template_args+0x4e4>
 80083bc:	4620      	mov	r0, r4
 80083be:	f000 fd31 	bl	8008e24 <d_type>
 80083c2:	68e3      	ldr	r3, [r4, #12]
 80083c4:	4681      	mov	r9, r0
 80083c6:	e68e      	b.n	80080e6 <d_template_args+0x8d2>
 80083c8:	f8db 3004 	ldr.w	r3, [fp, #4]
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	f63f ae9a 	bhi.w	8008106 <d_template_args+0x8f2>
 80083d2:	a201      	add	r2, pc, #4	; (adr r2, 80083d8 <d_template_args+0xbc4>)
 80083d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d8:	080084e7 	.word	0x080084e7
 80083dc:	08007d25 	.word	0x08007d25
 80083e0:	08008475 	.word	0x08008475
 80083e4:	080083e9 	.word	0x080083e9
 80083e8:	f04f 0900 	mov.w	r9, #0
 80083ec:	4648      	mov	r0, r9
 80083ee:	4960      	ldr	r1, [pc, #384]	; (8008570 <d_template_args+0xd5c>)
 80083f0:	f004 fc97 	bl	800cd22 <strcmp>
 80083f4:	2800      	cmp	r0, #0
 80083f6:	f000 8370 	beq.w	8008ada <d_template_args+0x12c6>
 80083fa:	f899 3000 	ldrb.w	r3, [r9]
 80083fe:	2b6e      	cmp	r3, #110	; 0x6e
 8008400:	f47f ae81 	bne.w	8008106 <d_template_args+0x8f2>
 8008404:	f899 3001 	ldrb.w	r3, [r9, #1]
 8008408:	2b77      	cmp	r3, #119	; 0x77
 800840a:	d002      	beq.n	8008412 <d_template_args+0xbfe>
 800840c:	2b61      	cmp	r3, #97	; 0x61
 800840e:	f47f ae7a 	bne.w	8008106 <d_template_args+0x8f2>
 8008412:	215f      	movs	r1, #95	; 0x5f
 8008414:	4620      	mov	r0, r4
 8008416:	f7fe ffbf 	bl	8007398 <d_exprlist>
 800841a:	4681      	mov	r9, r0
 800841c:	4620      	mov	r0, r4
 800841e:	f000 fd01 	bl	8008e24 <d_type>
 8008422:	68e2      	ldr	r2, [r4, #12]
 8008424:	7813      	ldrb	r3, [r2, #0]
 8008426:	2b45      	cmp	r3, #69	; 0x45
 8008428:	4682      	mov	sl, r0
 800842a:	f000 839a 	beq.w	8008b62 <d_template_args+0x134e>
 800842e:	2b70      	cmp	r3, #112	; 0x70
 8008430:	f000 8390 	beq.w	8008b54 <d_template_args+0x1340>
 8008434:	2b69      	cmp	r3, #105	; 0x69
 8008436:	f040 8389 	bne.w	8008b4c <d_template_args+0x1338>
 800843a:	7853      	ldrb	r3, [r2, #1]
 800843c:	2b6c      	cmp	r3, #108	; 0x6c
 800843e:	f47f ae6a 	bne.w	8008116 <d_template_args+0x902>
 8008442:	4620      	mov	r0, r4
 8008444:	f002 f938 	bl	800a6b8 <d_expression_1>
 8008448:	4603      	mov	r3, r0
 800844a:	4652      	mov	r2, sl
 800844c:	213a      	movs	r1, #58	; 0x3a
 800844e:	4620      	mov	r0, r4
 8008450:	f7fb fe20 	bl	8004094 <d_make_comp>
 8008454:	464a      	mov	r2, r9
 8008456:	4603      	mov	r3, r0
 8008458:	2139      	movs	r1, #57	; 0x39
 800845a:	4620      	mov	r0, r4
 800845c:	f7fb fe1a 	bl	8004094 <d_make_comp>
 8008460:	465a      	mov	r2, fp
 8008462:	4603      	mov	r3, r0
 8008464:	2138      	movs	r1, #56	; 0x38
 8008466:	4620      	mov	r0, r4
 8008468:	f7fb fe14 	bl	8004094 <d_make_comp>
 800846c:	4683      	mov	fp, r0
 800846e:	68e2      	ldr	r2, [r4, #12]
 8008470:	7813      	ldrb	r3, [r2, #0]
 8008472:	e463      	b.n	8007d3c <d_template_args+0x528>
 8008474:	f04f 0900 	mov.w	r9, #0
 8008478:	f8db 3004 	ldr.w	r3, [fp, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	785a      	ldrb	r2, [r3, #1]
 8008480:	2a63      	cmp	r2, #99	; 0x63
 8008482:	f000 831c 	beq.w	8008abe <d_template_args+0x12aa>
 8008486:	4620      	mov	r0, r4
 8008488:	f002 f916 	bl	800a6b8 <d_expression_1>
 800848c:	4682      	mov	sl, r0
 800848e:	4648      	mov	r0, r9
 8008490:	4938      	ldr	r1, [pc, #224]	; (8008574 <d_template_args+0xd60>)
 8008492:	f004 fc46 	bl	800cd22 <strcmp>
 8008496:	2800      	cmp	r0, #0
 8008498:	f000 830b 	beq.w	8008ab2 <d_template_args+0x129e>
 800849c:	4648      	mov	r0, r9
 800849e:	4936      	ldr	r1, [pc, #216]	; (8008578 <d_template_args+0xd64>)
 80084a0:	f004 fc3f 	bl	800cd22 <strcmp>
 80084a4:	b130      	cbz	r0, 80084b4 <d_template_args+0xca0>
 80084a6:	4648      	mov	r0, r9
 80084a8:	4934      	ldr	r1, [pc, #208]	; (800857c <d_template_args+0xd68>)
 80084aa:	f004 fc3a 	bl	800cd22 <strcmp>
 80084ae:	2800      	cmp	r0, #0
 80084b0:	f040 831f 	bne.w	8008af2 <d_template_args+0x12de>
 80084b4:	4620      	mov	r0, r4
 80084b6:	f001 fb11 	bl	8009adc <d_unqualified_name>
 80084ba:	68e3      	ldr	r3, [r4, #12]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	2b49      	cmp	r3, #73	; 0x49
 80084c0:	4681      	mov	r9, r0
 80084c2:	f000 8359 	beq.w	8008b78 <d_template_args+0x1364>
 80084c6:	4652      	mov	r2, sl
 80084c8:	464b      	mov	r3, r9
 80084ca:	2137      	movs	r1, #55	; 0x37
 80084cc:	4620      	mov	r0, r4
 80084ce:	f7fb fde1 	bl	8004094 <d_make_comp>
 80084d2:	465a      	mov	r2, fp
 80084d4:	4603      	mov	r3, r0
 80084d6:	2136      	movs	r1, #54	; 0x36
 80084d8:	4620      	mov	r0, r4
 80084da:	f7fb fddb 	bl	8004094 <d_make_comp>
 80084de:	68e2      	ldr	r2, [r4, #12]
 80084e0:	4683      	mov	fp, r0
 80084e2:	7813      	ldrb	r3, [r2, #0]
 80084e4:	e42a      	b.n	8007d3c <d_template_args+0x528>
 80084e6:	465a      	mov	r2, fp
 80084e8:	2300      	movs	r3, #0
 80084ea:	4620      	mov	r0, r4
 80084ec:	2134      	movs	r1, #52	; 0x34
 80084ee:	f7fb fdd1 	bl	8004094 <d_make_comp>
 80084f2:	68e2      	ldr	r2, [r4, #12]
 80084f4:	4683      	mov	fp, r0
 80084f6:	7813      	ldrb	r3, [r2, #0]
 80084f8:	e420      	b.n	8007d3c <d_template_args+0x528>
 80084fa:	f8d0 a004 	ldr.w	sl, [r0, #4]
 80084fe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008500:	f8da 3008 	ldr.w	r3, [sl, #8]
 8008504:	f8da 9000 	ldr.w	r9, [sl]
 8008508:	491d      	ldr	r1, [pc, #116]	; (8008580 <d_template_args+0xd6c>)
 800850a:	3b02      	subs	r3, #2
 800850c:	4413      	add	r3, r2
 800850e:	6323      	str	r3, [r4, #48]	; 0x30
 8008510:	4648      	mov	r0, r9
 8008512:	f004 fc06 	bl	800cd22 <strcmp>
 8008516:	2800      	cmp	r0, #0
 8008518:	f000 82ba 	beq.w	8008a90 <d_template_args+0x127c>
 800851c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8008520:	2b03      	cmp	r3, #3
 8008522:	f63f adf0 	bhi.w	8008106 <d_template_args+0x8f2>
 8008526:	a201      	add	r2, pc, #4	; (adr r2, 800852c <d_template_args+0xd18>)
 8008528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800852c:	080084e7 	.word	0x080084e7
 8008530:	080089f5 	.word	0x080089f5
 8008534:	08008479 	.word	0x08008479
 8008538:	080083ed 	.word	0x080083ed
 800853c:	4620      	mov	r0, r4
 800853e:	f7fb ffdf 	bl	8004500 <d_compact_number>
 8008542:	3001      	adds	r0, #1
 8008544:	f47f ae35 	bne.w	80081b2 <d_template_args+0x99e>
 8008548:	f04f 0a00 	mov.w	sl, #0
 800854c:	f7ff bab8 	b.w	8007ac0 <d_template_args+0x2ac>
 8008550:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008554:	2b03      	cmp	r3, #3
 8008556:	f63f addb 	bhi.w	8008110 <d_template_args+0x8fc>
 800855a:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <d_template_args+0xd4c>)
 800855c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008560:	0800867d 	.word	0x0800867d
 8008564:	08007e15 	.word	0x08007e15
 8008568:	0800860d 	.word	0x0800860d
 800856c:	08008585 	.word	0x08008585
 8008570:	0800e6f8 	.word	0x0800e6f8
 8008574:	0800e6f0 	.word	0x0800e6f0
 8008578:	0800e810 	.word	0x0800e810
 800857c:	0800e814 	.word	0x0800e814
 8008580:	0800ea04 	.word	0x0800ea04
 8008584:	2300      	movs	r3, #0
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	9800      	ldr	r0, [sp, #0]
 800858a:	49ca      	ldr	r1, [pc, #808]	; (80088b4 <d_template_args+0x10a0>)
 800858c:	f004 fbc9 	bl	800cd22 <strcmp>
 8008590:	2800      	cmp	r0, #0
 8008592:	f000 82c2 	beq.w	8008b1a <d_template_args+0x1306>
 8008596:	9900      	ldr	r1, [sp, #0]
 8008598:	780a      	ldrb	r2, [r1, #0]
 800859a:	2a6e      	cmp	r2, #110	; 0x6e
 800859c:	f47f adb8 	bne.w	8008110 <d_template_args+0x8fc>
 80085a0:	784b      	ldrb	r3, [r1, #1]
 80085a2:	2b77      	cmp	r3, #119	; 0x77
 80085a4:	d002      	beq.n	80085ac <d_template_args+0xd98>
 80085a6:	2b61      	cmp	r3, #97	; 0x61
 80085a8:	f47f adb2 	bne.w	8008110 <d_template_args+0x8fc>
 80085ac:	215f      	movs	r1, #95	; 0x5f
 80085ae:	4620      	mov	r0, r4
 80085b0:	f7fe fef2 	bl	8007398 <d_exprlist>
 80085b4:	9000      	str	r0, [sp, #0]
 80085b6:	4620      	mov	r0, r4
 80085b8:	f000 fc34 	bl	8008e24 <d_type>
 80085bc:	68e3      	ldr	r3, [r4, #12]
 80085be:	9001      	str	r0, [sp, #4]
 80085c0:	781a      	ldrb	r2, [r3, #0]
 80085c2:	2a45      	cmp	r2, #69	; 0x45
 80085c4:	f000 82a5 	beq.w	8008b12 <d_template_args+0x12fe>
 80085c8:	2a70      	cmp	r2, #112	; 0x70
 80085ca:	f000 8297 	beq.w	8008afc <d_template_args+0x12e8>
 80085ce:	2a69      	cmp	r2, #105	; 0x69
 80085d0:	f47f ad9e 	bne.w	8008110 <d_template_args+0x8fc>
 80085d4:	785b      	ldrb	r3, [r3, #1]
 80085d6:	2b6c      	cmp	r3, #108	; 0x6c
 80085d8:	f47f ad9a 	bne.w	8008110 <d_template_args+0x8fc>
 80085dc:	4620      	mov	r0, r4
 80085de:	f002 f86b 	bl	800a6b8 <d_expression_1>
 80085e2:	4603      	mov	r3, r0
 80085e4:	9a01      	ldr	r2, [sp, #4]
 80085e6:	213a      	movs	r1, #58	; 0x3a
 80085e8:	4620      	mov	r0, r4
 80085ea:	f7fb fd53 	bl	8004094 <d_make_comp>
 80085ee:	9a00      	ldr	r2, [sp, #0]
 80085f0:	4603      	mov	r3, r0
 80085f2:	2139      	movs	r1, #57	; 0x39
 80085f4:	4620      	mov	r0, r4
 80085f6:	f7fb fd4d 	bl	8004094 <d_make_comp>
 80085fa:	4652      	mov	r2, sl
 80085fc:	4603      	mov	r3, r0
 80085fe:	2138      	movs	r1, #56	; 0x38
 8008600:	4620      	mov	r0, r4
 8008602:	f7fb fd47 	bl	8004094 <d_make_comp>
 8008606:	4682      	mov	sl, r0
 8008608:	f7ff bb10 	b.w	8007c2c <d_template_args+0x418>
 800860c:	2300      	movs	r3, #0
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	f8da 2004 	ldr.w	r2, [sl, #4]
 8008614:	6812      	ldr	r2, [r2, #0]
 8008616:	7851      	ldrb	r1, [r2, #1]
 8008618:	2963      	cmp	r1, #99	; 0x63
 800861a:	f000 831b 	beq.w	8008c54 <d_template_args+0x1440>
 800861e:	4620      	mov	r0, r4
 8008620:	f002 f84a 	bl	800a6b8 <d_expression_1>
 8008624:	9001      	str	r0, [sp, #4]
 8008626:	9800      	ldr	r0, [sp, #0]
 8008628:	49a3      	ldr	r1, [pc, #652]	; (80088b8 <d_template_args+0x10a4>)
 800862a:	f004 fb7a 	bl	800cd22 <strcmp>
 800862e:	2800      	cmp	r0, #0
 8008630:	f000 835e 	beq.w	8008cf0 <d_template_args+0x14dc>
 8008634:	9800      	ldr	r0, [sp, #0]
 8008636:	49a1      	ldr	r1, [pc, #644]	; (80088bc <d_template_args+0x10a8>)
 8008638:	f004 fb73 	bl	800cd22 <strcmp>
 800863c:	b130      	cbz	r0, 800864c <d_template_args+0xe38>
 800863e:	9800      	ldr	r0, [sp, #0]
 8008640:	499f      	ldr	r1, [pc, #636]	; (80088c0 <d_template_args+0x10ac>)
 8008642:	f004 fb6e 	bl	800cd22 <strcmp>
 8008646:	2800      	cmp	r0, #0
 8008648:	f040 832a 	bne.w	8008ca0 <d_template_args+0x148c>
 800864c:	4620      	mov	r0, r4
 800864e:	f001 fa45 	bl	8009adc <d_unqualified_name>
 8008652:	68e3      	ldr	r3, [r4, #12]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	2b49      	cmp	r3, #73	; 0x49
 8008658:	4601      	mov	r1, r0
 800865a:	f000 826a 	beq.w	8008b32 <d_template_args+0x131e>
 800865e:	460b      	mov	r3, r1
 8008660:	9a01      	ldr	r2, [sp, #4]
 8008662:	2137      	movs	r1, #55	; 0x37
 8008664:	4620      	mov	r0, r4
 8008666:	f7fb fd15 	bl	8004094 <d_make_comp>
 800866a:	4652      	mov	r2, sl
 800866c:	4603      	mov	r3, r0
 800866e:	2136      	movs	r1, #54	; 0x36
 8008670:	4620      	mov	r0, r4
 8008672:	f7fb fd0f 	bl	8004094 <d_make_comp>
 8008676:	4682      	mov	sl, r0
 8008678:	f7ff bad8 	b.w	8007c2c <d_template_args+0x418>
 800867c:	4652      	mov	r2, sl
 800867e:	4620      	mov	r0, r4
 8008680:	2134      	movs	r1, #52	; 0x34
 8008682:	2300      	movs	r3, #0
 8008684:	f7fb fd06 	bl	8004094 <d_make_comp>
 8008688:	4682      	mov	sl, r0
 800868a:	f7ff bacf 	b.w	8007c2c <d_template_args+0x418>
 800868e:	6843      	ldr	r3, [r0, #4]
 8008690:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008692:	689a      	ldr	r2, [r3, #8]
 8008694:	6819      	ldr	r1, [r3, #0]
 8008696:	9301      	str	r3, [sp, #4]
 8008698:	3a02      	subs	r2, #2
 800869a:	460b      	mov	r3, r1
 800869c:	4410      	add	r0, r2
 800869e:	9100      	str	r1, [sp, #0]
 80086a0:	6320      	str	r0, [r4, #48]	; 0x30
 80086a2:	4988      	ldr	r1, [pc, #544]	; (80088c4 <d_template_args+0x10b0>)
 80086a4:	4618      	mov	r0, r3
 80086a6:	f004 fb3c 	bl	800cd22 <strcmp>
 80086aa:	9b01      	ldr	r3, [sp, #4]
 80086ac:	2800      	cmp	r0, #0
 80086ae:	f000 8276 	beq.w	8008b9e <d_template_args+0x138a>
 80086b2:	68da      	ldr	r2, [r3, #12]
 80086b4:	2a03      	cmp	r2, #3
 80086b6:	f63f ad2b 	bhi.w	8008110 <d_template_args+0x8fc>
 80086ba:	a301      	add	r3, pc, #4	; (adr r3, 80086c0 <d_template_args+0xeac>)
 80086bc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80086c0:	0800867d 	.word	0x0800867d
 80086c4:	08008717 	.word	0x08008717
 80086c8:	08008611 	.word	0x08008611
 80086cc:	08008589 	.word	0x08008589
 80086d0:	4620      	mov	r0, r4
 80086d2:	f7fb ff15 	bl	8004500 <d_compact_number>
 80086d6:	3001      	adds	r0, #1
 80086d8:	f47f ace7 	bne.w	80080aa <d_template_args+0x896>
 80086dc:	4682      	mov	sl, r0
 80086de:	f7ff baa5 	b.w	8007c2c <d_template_args+0x418>
 80086e2:	1c93      	adds	r3, r2, #2
 80086e4:	60e3      	str	r3, [r4, #12]
 80086e6:	4620      	mov	r0, r4
 80086e8:	f000 fb9c 	bl	8008e24 <d_type>
 80086ec:	4681      	mov	r9, r0
 80086ee:	4620      	mov	r0, r4
 80086f0:	f001 f9f4 	bl	8009adc <d_unqualified_name>
 80086f4:	68e3      	ldr	r3, [r4, #12]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	2b49      	cmp	r3, #73	; 0x49
 80086fa:	4682      	mov	sl, r0
 80086fc:	f000 8253 	beq.w	8008ba6 <d_template_args+0x1392>
 8008700:	4603      	mov	r3, r0
 8008702:	464a      	mov	r2, r9
 8008704:	4620      	mov	r0, r4
 8008706:	2101      	movs	r1, #1
 8008708:	f7fb fcc4 	bl	8004094 <d_make_comp>
 800870c:	68e3      	ldr	r3, [r4, #12]
 800870e:	4681      	mov	r9, r0
 8008710:	781a      	ldrb	r2, [r3, #0]
 8008712:	f7ff bb4f 	b.w	8007db4 <d_template_args+0x5a0>
 8008716:	9b00      	ldr	r3, [sp, #0]
 8008718:	781a      	ldrb	r2, [r3, #0]
 800871a:	2a70      	cmp	r2, #112	; 0x70
 800871c:	d002      	beq.n	8008724 <d_template_args+0xf10>
 800871e:	2a6d      	cmp	r2, #109	; 0x6d
 8008720:	f47f ab78 	bne.w	8007e14 <d_template_args+0x600>
 8008724:	9b00      	ldr	r3, [sp, #0]
 8008726:	785b      	ldrb	r3, [r3, #1]
 8008728:	4293      	cmp	r3, r2
 800872a:	f47f ab73 	bne.w	8007e14 <d_template_args+0x600>
 800872e:	68e3      	ldr	r3, [r4, #12]
 8008730:	781a      	ldrb	r2, [r3, #0]
 8008732:	2a5f      	cmp	r2, #95	; 0x5f
 8008734:	f000 82e2 	beq.w	8008cfc <d_template_args+0x14e8>
 8008738:	4620      	mov	r0, r4
 800873a:	f001 ffbd 	bl	800a6b8 <d_expression_1>
 800873e:	4602      	mov	r2, r0
 8008740:	4613      	mov	r3, r2
 8008742:	4620      	mov	r0, r4
 8008744:	2137      	movs	r1, #55	; 0x37
 8008746:	f7fb fca5 	bl	8004094 <d_make_comp>
 800874a:	4603      	mov	r3, r0
 800874c:	4652      	mov	r2, sl
 800874e:	4620      	mov	r0, r4
 8008750:	2135      	movs	r1, #53	; 0x35
 8008752:	f7fb fc9f 	bl	8004094 <d_make_comp>
 8008756:	e7c1      	b.n	80086dc <d_template_args+0xec8>
 8008758:	6843      	ldr	r3, [r0, #4]
 800875a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800875c:	689a      	ldr	r2, [r3, #8]
 800875e:	f8d3 b000 	ldr.w	fp, [r3]
 8008762:	4958      	ldr	r1, [pc, #352]	; (80088c4 <d_template_args+0x10b0>)
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	3a02      	subs	r2, #2
 8008768:	4410      	add	r0, r2
 800876a:	6320      	str	r0, [r4, #48]	; 0x30
 800876c:	4658      	mov	r0, fp
 800876e:	f004 fad8 	bl	800cd22 <strcmp>
 8008772:	9b00      	ldr	r3, [sp, #0]
 8008774:	2800      	cmp	r0, #0
 8008776:	f000 834d 	beq.w	8008e14 <d_template_args+0x1600>
 800877a:	68da      	ldr	r2, [r3, #12]
 800877c:	2a03      	cmp	r2, #3
 800877e:	f63f aee3 	bhi.w	8008548 <d_template_args+0xd34>
 8008782:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008786:	0156      	.short	0x0156
 8008788:	00e80245 	.word	0x00e80245
 800878c:	00a3      	.short	0x00a3
 800878e:	f89a 2000 	ldrb.w	r2, [sl]
 8008792:	2a70      	cmp	r2, #112	; 0x70
 8008794:	d002      	beq.n	800879c <d_template_args+0xf88>
 8008796:	2a6d      	cmp	r2, #109	; 0x6d
 8008798:	f47f ab00 	bne.w	8007d9c <d_template_args+0x588>
 800879c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80087a0:	4293      	cmp	r3, r2
 80087a2:	f47f aafb 	bne.w	8007d9c <d_template_args+0x588>
 80087a6:	68e3      	ldr	r3, [r4, #12]
 80087a8:	781a      	ldrb	r2, [r3, #0]
 80087aa:	2a5f      	cmp	r2, #95	; 0x5f
 80087ac:	f000 8260 	beq.w	8008c70 <d_template_args+0x145c>
 80087b0:	4620      	mov	r0, r4
 80087b2:	f001 ff81 	bl	800a6b8 <d_expression_1>
 80087b6:	4602      	mov	r2, r0
 80087b8:	4613      	mov	r3, r2
 80087ba:	4620      	mov	r0, r4
 80087bc:	2137      	movs	r1, #55	; 0x37
 80087be:	f7fb fc69 	bl	8004094 <d_make_comp>
 80087c2:	4603      	mov	r3, r0
 80087c4:	464a      	mov	r2, r9
 80087c6:	4620      	mov	r0, r4
 80087c8:	f7ff baee 	b.w	8007da8 <d_template_args+0x594>
 80087cc:	4620      	mov	r0, r4
 80087ce:	f7fb feaf 	bl	8004530 <d_template_param>
 80087d2:	4682      	mov	sl, r0
 80087d4:	f7ff b974 	b.w	8007ac0 <d_template_args+0x2ac>
 80087d8:	3302      	adds	r3, #2
 80087da:	60e3      	str	r3, [r4, #12]
 80087dc:	4620      	mov	r0, r4
 80087de:	f000 fb21 	bl	8008e24 <d_type>
 80087e2:	4682      	mov	sl, r0
 80087e4:	4620      	mov	r0, r4
 80087e6:	f001 f979 	bl	8009adc <d_unqualified_name>
 80087ea:	68e3      	ldr	r3, [r4, #12]
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	2b49      	cmp	r3, #73	; 0x49
 80087f0:	f000 8242 	beq.w	8008c78 <d_template_args+0x1464>
 80087f4:	4652      	mov	r2, sl
 80087f6:	4603      	mov	r3, r0
 80087f8:	2101      	movs	r1, #1
 80087fa:	4620      	mov	r0, r4
 80087fc:	f7fb fc4a 	bl	8004094 <d_make_comp>
 8008800:	4682      	mov	sl, r0
 8008802:	f7ff ba13 	b.w	8007c2c <d_template_args+0x418>
 8008806:	4620      	mov	r0, r4
 8008808:	f7fe fd66 	bl	80072d8 <d_expr_primary>
 800880c:	4682      	mov	sl, r0
 800880e:	f7ff b957 	b.w	8007ac0 <d_template_args+0x2ac>
 8008812:	6921      	ldr	r1, [r4, #16]
 8008814:	f103 0e01 	add.w	lr, r3, #1
 8008818:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800881c:	eb11 0b83 	adds.w	fp, r1, r3, lsl #2
 8008820:	f8c4 e014 	str.w	lr, [r4, #20]
 8008824:	f43f ae24 	beq.w	8008470 <d_template_args+0xc5c>
 8008828:	f04f 0e06 	mov.w	lr, #6
 800882c:	f801 e023 	strb.w	lr, [r1, r3, lsl #2]
 8008830:	f8cb 0004 	str.w	r0, [fp, #4]
 8008834:	7813      	ldrb	r3, [r2, #0]
 8008836:	f7ff ba81 	b.w	8007d3c <d_template_args+0x528>
 800883a:	4620      	mov	r0, r4
 800883c:	f7fb fe60 	bl	8004500 <d_compact_number>
 8008840:	3001      	adds	r0, #1
 8008842:	68e2      	ldr	r2, [r4, #12]
 8008844:	f47f ac05 	bne.w	8008052 <d_template_args+0x83e>
 8008848:	4683      	mov	fp, r0
 800884a:	7813      	ldrb	r3, [r2, #0]
 800884c:	f7ff ba76 	b.w	8007d3c <d_template_args+0x528>
 8008850:	3302      	adds	r3, #2
 8008852:	60e3      	str	r3, [r4, #12]
 8008854:	4620      	mov	r0, r4
 8008856:	f000 fae5 	bl	8008e24 <d_type>
 800885a:	4681      	mov	r9, r0
 800885c:	4620      	mov	r0, r4
 800885e:	f001 f93d 	bl	8009adc <d_unqualified_name>
 8008862:	68e3      	ldr	r3, [r4, #12]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	2b49      	cmp	r3, #73	; 0x49
 8008868:	4682      	mov	sl, r0
 800886a:	f000 8115 	beq.w	8008a98 <d_template_args+0x1284>
 800886e:	4603      	mov	r3, r0
 8008870:	464a      	mov	r2, r9
 8008872:	4620      	mov	r0, r4
 8008874:	2101      	movs	r1, #1
 8008876:	f7fb fc0d 	bl	8004094 <d_make_comp>
 800887a:	68e2      	ldr	r2, [r4, #12]
 800887c:	4683      	mov	fp, r0
 800887e:	7813      	ldrb	r3, [r2, #0]
 8008880:	f7ff ba5c 	b.w	8007d3c <d_template_args+0x528>
 8008884:	785b      	ldrb	r3, [r3, #1]
 8008886:	2b6c      	cmp	r3, #108	; 0x6c
 8008888:	f47f aaee 	bne.w	8007e68 <d_template_args+0x654>
 800888c:	4620      	mov	r0, r4
 800888e:	f000 fac9 	bl	8008e24 <d_type>
 8008892:	68e3      	ldr	r3, [r4, #12]
 8008894:	4682      	mov	sl, r0
 8008896:	3302      	adds	r3, #2
 8008898:	60e3      	str	r3, [r4, #12]
 800889a:	2145      	movs	r1, #69	; 0x45
 800889c:	4620      	mov	r0, r4
 800889e:	f7fe fd7b 	bl	8007398 <d_exprlist>
 80088a2:	4652      	mov	r2, sl
 80088a4:	4603      	mov	r3, r0
 80088a6:	2130      	movs	r1, #48	; 0x30
 80088a8:	4620      	mov	r0, r4
 80088aa:	f7fb fbf3 	bl	8004094 <d_make_comp>
 80088ae:	4682      	mov	sl, r0
 80088b0:	f7ff b906 	b.w	8007ac0 <d_template_args+0x2ac>
 80088b4:	0800e6f8 	.word	0x0800e6f8
 80088b8:	0800e6f0 	.word	0x0800e6f0
 80088bc:	0800e810 	.word	0x0800e810
 80088c0:	0800e814 	.word	0x0800e814
 80088c4:	0800ea04 	.word	0x0800ea04
 80088c8:	f04f 0b00 	mov.w	fp, #0
 80088cc:	4658      	mov	r0, fp
 80088ce:	49cc      	ldr	r1, [pc, #816]	; (8008c00 <d_template_args+0x13ec>)
 80088d0:	f004 fa27 	bl	800cd22 <strcmp>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	f000 8186 	beq.w	8008be6 <d_template_args+0x13d2>
 80088da:	f89b 2000 	ldrb.w	r2, [fp]
 80088de:	2a6e      	cmp	r2, #110	; 0x6e
 80088e0:	f47f ae32 	bne.w	8008548 <d_template_args+0xd34>
 80088e4:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80088e8:	2b77      	cmp	r3, #119	; 0x77
 80088ea:	d002      	beq.n	80088f2 <d_template_args+0x10de>
 80088ec:	2b61      	cmp	r3, #97	; 0x61
 80088ee:	f47f ae2b 	bne.w	8008548 <d_template_args+0xd34>
 80088f2:	215f      	movs	r1, #95	; 0x5f
 80088f4:	4620      	mov	r0, r4
 80088f6:	f7fe fd4f 	bl	8007398 <d_exprlist>
 80088fa:	9000      	str	r0, [sp, #0]
 80088fc:	4620      	mov	r0, r4
 80088fe:	f000 fa91 	bl	8008e24 <d_type>
 8008902:	68e3      	ldr	r3, [r4, #12]
 8008904:	781a      	ldrb	r2, [r3, #0]
 8008906:	2a45      	cmp	r2, #69	; 0x45
 8008908:	4683      	mov	fp, r0
 800890a:	f000 827f 	beq.w	8008e0c <d_template_args+0x15f8>
 800890e:	2a70      	cmp	r2, #112	; 0x70
 8008910:	f000 8271 	beq.w	8008df6 <d_template_args+0x15e2>
 8008914:	2a69      	cmp	r2, #105	; 0x69
 8008916:	f47f ae17 	bne.w	8008548 <d_template_args+0xd34>
 800891a:	785b      	ldrb	r3, [r3, #1]
 800891c:	2b6c      	cmp	r3, #108	; 0x6c
 800891e:	f47f ae13 	bne.w	8008548 <d_template_args+0xd34>
 8008922:	4620      	mov	r0, r4
 8008924:	f001 fec8 	bl	800a6b8 <d_expression_1>
 8008928:	4603      	mov	r3, r0
 800892a:	465a      	mov	r2, fp
 800892c:	213a      	movs	r1, #58	; 0x3a
 800892e:	4620      	mov	r0, r4
 8008930:	f7fb fbb0 	bl	8004094 <d_make_comp>
 8008934:	9a00      	ldr	r2, [sp, #0]
 8008936:	4603      	mov	r3, r0
 8008938:	2139      	movs	r1, #57	; 0x39
 800893a:	4620      	mov	r0, r4
 800893c:	f7fb fbaa 	bl	8004094 <d_make_comp>
 8008940:	4652      	mov	r2, sl
 8008942:	4603      	mov	r3, r0
 8008944:	2138      	movs	r1, #56	; 0x38
 8008946:	4620      	mov	r0, r4
 8008948:	f7fb fba4 	bl	8004094 <d_make_comp>
 800894c:	4682      	mov	sl, r0
 800894e:	f7ff b8b7 	b.w	8007ac0 <d_template_args+0x2ac>
 8008952:	f04f 0b00 	mov.w	fp, #0
 8008956:	f8da 2004 	ldr.w	r2, [sl, #4]
 800895a:	6812      	ldr	r2, [r2, #0]
 800895c:	7851      	ldrb	r1, [r2, #1]
 800895e:	2963      	cmp	r1, #99	; 0x63
 8008960:	f000 812e 	beq.w	8008bc0 <d_template_args+0x13ac>
 8008964:	4620      	mov	r0, r4
 8008966:	f001 fea7 	bl	800a6b8 <d_expression_1>
 800896a:	9000      	str	r0, [sp, #0]
 800896c:	4658      	mov	r0, fp
 800896e:	49a5      	ldr	r1, [pc, #660]	; (8008c04 <d_template_args+0x13f0>)
 8008970:	f004 f9d7 	bl	800cd22 <strcmp>
 8008974:	2800      	cmp	r0, #0
 8008976:	f000 81d7 	beq.w	8008d28 <d_template_args+0x1514>
 800897a:	4658      	mov	r0, fp
 800897c:	49a2      	ldr	r1, [pc, #648]	; (8008c08 <d_template_args+0x13f4>)
 800897e:	f004 f9d0 	bl	800cd22 <strcmp>
 8008982:	b130      	cbz	r0, 8008992 <d_template_args+0x117e>
 8008984:	4658      	mov	r0, fp
 8008986:	49a1      	ldr	r1, [pc, #644]	; (8008c0c <d_template_args+0x13f8>)
 8008988:	f004 f9cb 	bl	800cd22 <strcmp>
 800898c:	2800      	cmp	r0, #0
 800898e:	f040 8125 	bne.w	8008bdc <d_template_args+0x13c8>
 8008992:	4620      	mov	r0, r4
 8008994:	f001 f8a2 	bl	8009adc <d_unqualified_name>
 8008998:	68e3      	ldr	r3, [r4, #12]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	2b49      	cmp	r3, #73	; 0x49
 800899e:	4683      	mov	fp, r0
 80089a0:	d109      	bne.n	80089b6 <d_template_args+0x11a2>
 80089a2:	4620      	mov	r0, r4
 80089a4:	f7fe ff36 	bl	8007814 <d_template_args>
 80089a8:	465a      	mov	r2, fp
 80089aa:	4603      	mov	r3, r0
 80089ac:	2104      	movs	r1, #4
 80089ae:	4620      	mov	r0, r4
 80089b0:	f7fb fb70 	bl	8004094 <d_make_comp>
 80089b4:	4683      	mov	fp, r0
 80089b6:	9a00      	ldr	r2, [sp, #0]
 80089b8:	465b      	mov	r3, fp
 80089ba:	2137      	movs	r1, #55	; 0x37
 80089bc:	4620      	mov	r0, r4
 80089be:	f7fb fb69 	bl	8004094 <d_make_comp>
 80089c2:	4652      	mov	r2, sl
 80089c4:	4603      	mov	r3, r0
 80089c6:	2136      	movs	r1, #54	; 0x36
 80089c8:	4620      	mov	r0, r4
 80089ca:	f7fb fb63 	bl	8004094 <d_make_comp>
 80089ce:	4682      	mov	sl, r0
 80089d0:	f7ff b876 	b.w	8007ac0 <d_template_args+0x2ac>
 80089d4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80089d8:	2b03      	cmp	r3, #3
 80089da:	f63f adb5 	bhi.w	8008548 <d_template_args+0xd34>
 80089de:	a201      	add	r2, pc, #4	; (adr r2, 80089e4 <d_template_args+0x11d0>)
 80089e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e4:	08008a33 	.word	0x08008a33
 80089e8:	08007e95 	.word	0x08007e95
 80089ec:	08008953 	.word	0x08008953
 80089f0:	080088c9 	.word	0x080088c9
 80089f4:	f899 3000 	ldrb.w	r3, [r9]
 80089f8:	2b70      	cmp	r3, #112	; 0x70
 80089fa:	d002      	beq.n	8008a02 <d_template_args+0x11ee>
 80089fc:	2b6d      	cmp	r3, #109	; 0x6d
 80089fe:	f47f a991 	bne.w	8007d24 <d_template_args+0x510>
 8008a02:	f899 2001 	ldrb.w	r2, [r9, #1]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	f47f a98c 	bne.w	8007d24 <d_template_args+0x510>
 8008a0c:	68e3      	ldr	r3, [r4, #12]
 8008a0e:	781a      	ldrb	r2, [r3, #0]
 8008a10:	2a5f      	cmp	r2, #95	; 0x5f
 8008a12:	f000 8203 	beq.w	8008e1c <d_template_args+0x1608>
 8008a16:	4620      	mov	r0, r4
 8008a18:	f001 fe4e 	bl	800a6b8 <d_expression_1>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	4613      	mov	r3, r2
 8008a20:	4620      	mov	r0, r4
 8008a22:	2137      	movs	r1, #55	; 0x37
 8008a24:	f7fb fb36 	bl	8004094 <d_make_comp>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	465a      	mov	r2, fp
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	f7ff b97f 	b.w	8007d30 <d_template_args+0x51c>
 8008a32:	4652      	mov	r2, sl
 8008a34:	4620      	mov	r0, r4
 8008a36:	2134      	movs	r1, #52	; 0x34
 8008a38:	2300      	movs	r3, #0
 8008a3a:	f7fb fb2b 	bl	8004094 <d_make_comp>
 8008a3e:	4682      	mov	sl, r0
 8008a40:	f7ff b83e 	b.w	8007ac0 <d_template_args+0x2ac>
 8008a44:	6921      	ldr	r1, [r4, #16]
 8008a46:	f102 0e01 	add.w	lr, r2, #1
 8008a4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008a4e:	eb11 0982 	adds.w	r9, r1, r2, lsl #2
 8008a52:	f8c4 e014 	str.w	lr, [r4, #20]
 8008a56:	f43f ac3d 	beq.w	80082d4 <d_template_args+0xac0>
 8008a5a:	f04f 0e06 	mov.w	lr, #6
 8008a5e:	f801 e022 	strb.w	lr, [r1, r2, lsl #2]
 8008a62:	f8c9 0004 	str.w	r0, [r9, #4]
 8008a66:	781a      	ldrb	r2, [r3, #0]
 8008a68:	f7ff b9a4 	b.w	8007db4 <d_template_args+0x5a0>
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f7fb fd47 	bl	8004500 <d_compact_number>
 8008a72:	3001      	adds	r0, #1
 8008a74:	68e3      	ldr	r3, [r4, #12]
 8008a76:	f47f ab02 	bne.w	800807e <d_template_args+0x86a>
 8008a7a:	4681      	mov	r9, r0
 8008a7c:	781a      	ldrb	r2, [r3, #0]
 8008a7e:	f7ff b999 	b.w	8007db4 <d_template_args+0x5a0>
 8008a82:	785a      	ldrb	r2, [r3, #1]
 8008a84:	2a6c      	cmp	r2, #108	; 0x6c
 8008a86:	f47f a9ef 	bne.w	8007e68 <d_template_args+0x654>
 8008a8a:	f04f 0a00 	mov.w	sl, #0
 8008a8e:	e702      	b.n	8008896 <d_template_args+0x1082>
 8008a90:	4620      	mov	r0, r4
 8008a92:	f000 f9c7 	bl	8008e24 <d_type>
 8008a96:	e7c7      	b.n	8008a28 <d_template_args+0x1214>
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f7fe febb 	bl	8007814 <d_template_args>
 8008a9e:	4652      	mov	r2, sl
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2104      	movs	r1, #4
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f7fb faf5 	bl	8004094 <d_make_comp>
 8008aaa:	464a      	mov	r2, r9
 8008aac:	4603      	mov	r3, r0
 8008aae:	4620      	mov	r0, r4
 8008ab0:	e6e0      	b.n	8008874 <d_template_args+0x1060>
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	2145      	movs	r1, #69	; 0x45
 8008ab6:	f7fe fc6f 	bl	8007398 <d_exprlist>
 8008aba:	4681      	mov	r9, r0
 8008abc:	e503      	b.n	80084c6 <d_template_args+0xcb2>
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8008ac4:	2a01      	cmp	r2, #1
 8008ac6:	d903      	bls.n	8008ad0 <d_template_args+0x12bc>
 8008ac8:	3b72      	subs	r3, #114	; 0x72
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	f63f acdb 	bhi.w	8008486 <d_template_args+0xc72>
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f000 f9a7 	bl	8008e24 <d_type>
 8008ad6:	4682      	mov	sl, r0
 8008ad8:	e4d9      	b.n	800848e <d_template_args+0xc7a>
 8008ada:	4620      	mov	r0, r4
 8008adc:	f001 fdec 	bl	800a6b8 <d_expression_1>
 8008ae0:	4681      	mov	r9, r0
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f001 fde8 	bl	800a6b8 <d_expression_1>
 8008ae8:	4682      	mov	sl, r0
 8008aea:	4620      	mov	r0, r4
 8008aec:	f001 fde4 	bl	800a6b8 <d_expression_1>
 8008af0:	e4aa      	b.n	8008448 <d_template_args+0xc34>
 8008af2:	4620      	mov	r0, r4
 8008af4:	f001 fde0 	bl	800a6b8 <d_expression_1>
 8008af8:	4681      	mov	r9, r0
 8008afa:	e4e4      	b.n	80084c6 <d_template_args+0xcb2>
 8008afc:	785a      	ldrb	r2, [r3, #1]
 8008afe:	2a69      	cmp	r2, #105	; 0x69
 8008b00:	f47f ab06 	bne.w	8008110 <d_template_args+0x8fc>
 8008b04:	3302      	adds	r3, #2
 8008b06:	60e3      	str	r3, [r4, #12]
 8008b08:	4620      	mov	r0, r4
 8008b0a:	2145      	movs	r1, #69	; 0x45
 8008b0c:	f7fe fc44 	bl	8007398 <d_exprlist>
 8008b10:	e567      	b.n	80085e2 <d_template_args+0xdce>
 8008b12:	3301      	adds	r3, #1
 8008b14:	60e3      	str	r3, [r4, #12]
 8008b16:	2000      	movs	r0, #0
 8008b18:	e563      	b.n	80085e2 <d_template_args+0xdce>
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f001 fdcc 	bl	800a6b8 <d_expression_1>
 8008b20:	9000      	str	r0, [sp, #0]
 8008b22:	4620      	mov	r0, r4
 8008b24:	f001 fdc8 	bl	800a6b8 <d_expression_1>
 8008b28:	9001      	str	r0, [sp, #4]
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f001 fdc4 	bl	800a6b8 <d_expression_1>
 8008b30:	e557      	b.n	80085e2 <d_template_args+0xdce>
 8008b32:	9000      	str	r0, [sp, #0]
 8008b34:	4620      	mov	r0, r4
 8008b36:	f7fe fe6d 	bl	8007814 <d_template_args>
 8008b3a:	9900      	ldr	r1, [sp, #0]
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	460a      	mov	r2, r1
 8008b40:	4620      	mov	r0, r4
 8008b42:	2104      	movs	r1, #4
 8008b44:	f7fb faa6 	bl	8004094 <d_make_comp>
 8008b48:	4601      	mov	r1, r0
 8008b4a:	e588      	b.n	800865e <d_template_args+0xe4a>
 8008b4c:	f04f 0b00 	mov.w	fp, #0
 8008b50:	f7ff b8f4 	b.w	8007d3c <d_template_args+0x528>
 8008b54:	7853      	ldrb	r3, [r2, #1]
 8008b56:	2b69      	cmp	r3, #105	; 0x69
 8008b58:	d007      	beq.n	8008b6a <d_template_args+0x1356>
 8008b5a:	f04f 0b00 	mov.w	fp, #0
 8008b5e:	f7ff b907 	b.w	8007d70 <d_template_args+0x55c>
 8008b62:	1c53      	adds	r3, r2, #1
 8008b64:	60e3      	str	r3, [r4, #12]
 8008b66:	2000      	movs	r0, #0
 8008b68:	e46e      	b.n	8008448 <d_template_args+0xc34>
 8008b6a:	1c93      	adds	r3, r2, #2
 8008b6c:	60e3      	str	r3, [r4, #12]
 8008b6e:	4620      	mov	r0, r4
 8008b70:	2145      	movs	r1, #69	; 0x45
 8008b72:	f7fe fc11 	bl	8007398 <d_exprlist>
 8008b76:	e467      	b.n	8008448 <d_template_args+0xc34>
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f7fe fe4b 	bl	8007814 <d_template_args>
 8008b7e:	464a      	mov	r2, r9
 8008b80:	4603      	mov	r3, r0
 8008b82:	2104      	movs	r1, #4
 8008b84:	4620      	mov	r0, r4
 8008b86:	f7fb fa85 	bl	8004094 <d_make_comp>
 8008b8a:	4681      	mov	r9, r0
 8008b8c:	e49b      	b.n	80084c6 <d_template_args+0xcb2>
 8008b8e:	3301      	adds	r3, #1
 8008b90:	60e3      	str	r3, [r4, #12]
 8008b92:	4620      	mov	r0, r4
 8008b94:	2145      	movs	r1, #69	; 0x45
 8008b96:	f7fe fbff 	bl	8007398 <d_exprlist>
 8008b9a:	f7ff b93e 	b.w	8007e1a <d_template_args+0x606>
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f000 f940 	bl	8008e24 <d_type>
 8008ba4:	e5d1      	b.n	800874a <d_template_args+0xf36>
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f7fe fe34 	bl	8007814 <d_template_args>
 8008bac:	4652      	mov	r2, sl
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2104      	movs	r1, #4
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f7fb fa6e 	bl	8004094 <d_make_comp>
 8008bb8:	464a      	mov	r2, r9
 8008bba:	4603      	mov	r3, r0
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	e5a2      	b.n	8008706 <d_template_args+0xef2>
 8008bc0:	7812      	ldrb	r2, [r2, #0]
 8008bc2:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8008bc6:	2901      	cmp	r1, #1
 8008bc8:	d903      	bls.n	8008bd2 <d_template_args+0x13be>
 8008bca:	3a72      	subs	r2, #114	; 0x72
 8008bcc:	2a01      	cmp	r2, #1
 8008bce:	f63f aec9 	bhi.w	8008964 <d_template_args+0x1150>
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	f000 f926 	bl	8008e24 <d_type>
 8008bd8:	9000      	str	r0, [sp, #0]
 8008bda:	e6c7      	b.n	800896c <d_template_args+0x1158>
 8008bdc:	4620      	mov	r0, r4
 8008bde:	f001 fd6b 	bl	800a6b8 <d_expression_1>
 8008be2:	4683      	mov	fp, r0
 8008be4:	e6e7      	b.n	80089b6 <d_template_args+0x11a2>
 8008be6:	4620      	mov	r0, r4
 8008be8:	f001 fd66 	bl	800a6b8 <d_expression_1>
 8008bec:	9000      	str	r0, [sp, #0]
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f001 fd62 	bl	800a6b8 <d_expression_1>
 8008bf4:	4683      	mov	fp, r0
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f001 fd5e 	bl	800a6b8 <d_expression_1>
 8008bfc:	e694      	b.n	8008928 <d_template_args+0x1114>
 8008bfe:	bf00      	nop
 8008c00:	0800e6f8 	.word	0x0800e6f8
 8008c04:	0800e6f0 	.word	0x0800e6f0
 8008c08:	0800e810 	.word	0x0800e810
 8008c0c:	0800e814 	.word	0x0800e814
 8008c10:	f89b 2000 	ldrb.w	r2, [fp]
 8008c14:	2a70      	cmp	r2, #112	; 0x70
 8008c16:	d002      	beq.n	8008c1e <d_template_args+0x140a>
 8008c18:	2a6d      	cmp	r2, #109	; 0x6d
 8008c1a:	f47f a93b 	bne.w	8007e94 <d_template_args+0x680>
 8008c1e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8008c22:	4293      	cmp	r3, r2
 8008c24:	f47f a936 	bne.w	8007e94 <d_template_args+0x680>
 8008c28:	68e3      	ldr	r3, [r4, #12]
 8008c2a:	781a      	ldrb	r2, [r3, #0]
 8008c2c:	2a5f      	cmp	r2, #95	; 0x5f
 8008c2e:	d03c      	beq.n	8008caa <d_template_args+0x1496>
 8008c30:	4620      	mov	r0, r4
 8008c32:	f001 fd41 	bl	800a6b8 <d_expression_1>
 8008c36:	4602      	mov	r2, r0
 8008c38:	4613      	mov	r3, r2
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	2137      	movs	r1, #55	; 0x37
 8008c3e:	f7fb fa29 	bl	8004094 <d_make_comp>
 8008c42:	4603      	mov	r3, r0
 8008c44:	4652      	mov	r2, sl
 8008c46:	4620      	mov	r0, r4
 8008c48:	2135      	movs	r1, #53	; 0x35
 8008c4a:	f7fb fa23 	bl	8004094 <d_make_comp>
 8008c4e:	4682      	mov	sl, r0
 8008c50:	f7fe bf36 	b.w	8007ac0 <d_template_args+0x2ac>
 8008c54:	7812      	ldrb	r2, [r2, #0]
 8008c56:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8008c5a:	2901      	cmp	r1, #1
 8008c5c:	d903      	bls.n	8008c66 <d_template_args+0x1452>
 8008c5e:	3a72      	subs	r2, #114	; 0x72
 8008c60:	2a01      	cmp	r2, #1
 8008c62:	f63f acdc 	bhi.w	800861e <d_template_args+0xe0a>
 8008c66:	4620      	mov	r0, r4
 8008c68:	f000 f8dc 	bl	8008e24 <d_type>
 8008c6c:	9001      	str	r0, [sp, #4]
 8008c6e:	e4da      	b.n	8008626 <d_template_args+0xe12>
 8008c70:	3301      	adds	r3, #1
 8008c72:	60e3      	str	r3, [r4, #12]
 8008c74:	f7ff b892 	b.w	8007d9c <d_template_args+0x588>
 8008c78:	9000      	str	r0, [sp, #0]
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f7fe fdca 	bl	8007814 <d_template_args>
 8008c80:	9900      	ldr	r1, [sp, #0]
 8008c82:	4603      	mov	r3, r0
 8008c84:	460a      	mov	r2, r1
 8008c86:	4620      	mov	r0, r4
 8008c88:	2104      	movs	r1, #4
 8008c8a:	f7fb fa03 	bl	8004094 <d_make_comp>
 8008c8e:	4652      	mov	r2, sl
 8008c90:	4603      	mov	r3, r0
 8008c92:	2101      	movs	r1, #1
 8008c94:	4620      	mov	r0, r4
 8008c96:	f7fb f9fd 	bl	8004094 <d_make_comp>
 8008c9a:	4682      	mov	sl, r0
 8008c9c:	f7fe bfc6 	b.w	8007c2c <d_template_args+0x418>
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	f001 fd09 	bl	800a6b8 <d_expression_1>
 8008ca6:	4601      	mov	r1, r0
 8008ca8:	e4d9      	b.n	800865e <d_template_args+0xe4a>
 8008caa:	3301      	adds	r3, #1
 8008cac:	60e3      	str	r3, [r4, #12]
 8008cae:	f7ff b8f1 	b.w	8007e94 <d_template_args+0x680>
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	60e3      	str	r3, [r4, #12]
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	2145      	movs	r1, #69	; 0x45
 8008cba:	f7fe fb6d 	bl	8007398 <d_exprlist>
 8008cbe:	f7ff b870 	b.w	8007da2 <d_template_args+0x58e>
 8008cc2:	3302      	adds	r3, #2
 8008cc4:	60e3      	str	r3, [r4, #12]
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f000 f8ac 	bl	8008e24 <d_type>
 8008ccc:	4682      	mov	sl, r0
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f000 ff04 	bl	8009adc <d_unqualified_name>
 8008cd4:	68e3      	ldr	r3, [r4, #12]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	2b49      	cmp	r3, #73	; 0x49
 8008cda:	4683      	mov	fp, r0
 8008cdc:	d012      	beq.n	8008d04 <d_template_args+0x14f0>
 8008cde:	4652      	mov	r2, sl
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2101      	movs	r1, #1
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f7fb f9d5 	bl	8004094 <d_make_comp>
 8008cea:	4682      	mov	sl, r0
 8008cec:	f7fe bee8 	b.w	8007ac0 <d_template_args+0x2ac>
 8008cf0:	2145      	movs	r1, #69	; 0x45
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f7fe fb50 	bl	8007398 <d_exprlist>
 8008cf8:	4601      	mov	r1, r0
 8008cfa:	e4b0      	b.n	800865e <d_template_args+0xe4a>
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	60e3      	str	r3, [r4, #12]
 8008d00:	f7ff b888 	b.w	8007e14 <d_template_args+0x600>
 8008d04:	4620      	mov	r0, r4
 8008d06:	f7fe fd85 	bl	8007814 <d_template_args>
 8008d0a:	465a      	mov	r2, fp
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2104      	movs	r1, #4
 8008d10:	4620      	mov	r0, r4
 8008d12:	f7fb f9bf 	bl	8004094 <d_make_comp>
 8008d16:	4652      	mov	r2, sl
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2101      	movs	r1, #1
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f7fb f9b9 	bl	8004094 <d_make_comp>
 8008d22:	4682      	mov	sl, r0
 8008d24:	f7fe becc 	b.w	8007ac0 <d_template_args+0x2ac>
 8008d28:	4620      	mov	r0, r4
 8008d2a:	2145      	movs	r1, #69	; 0x45
 8008d2c:	f7fe fb34 	bl	8007398 <d_exprlist>
 8008d30:	4683      	mov	fp, r0
 8008d32:	e640      	b.n	80089b6 <d_template_args+0x11a2>
 8008d34:	3301      	adds	r3, #1
 8008d36:	60e3      	str	r3, [r4, #12]
 8008d38:	4620      	mov	r0, r4
 8008d3a:	2145      	movs	r1, #69	; 0x45
 8008d3c:	f7fe fb2c 	bl	8007398 <d_exprlist>
 8008d40:	f7ff b8ab 	b.w	8007e9a <d_template_args+0x686>
 8008d44:	7812      	ldrb	r2, [r2, #0]
 8008d46:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8008d4a:	2901      	cmp	r1, #1
 8008d4c:	d903      	bls.n	8008d56 <d_template_args+0x1542>
 8008d4e:	3a72      	subs	r2, #114	; 0x72
 8008d50:	2a01      	cmp	r2, #1
 8008d52:	f63f aaca 	bhi.w	80082ea <d_template_args+0xad6>
 8008d56:	4620      	mov	r0, r4
 8008d58:	f000 f864 	bl	8008e24 <d_type>
 8008d5c:	9000      	str	r0, [sp, #0]
 8008d5e:	f7ff bac8 	b.w	80082f2 <d_template_args+0xade>
 8008d62:	4620      	mov	r0, r4
 8008d64:	f001 fca8 	bl	800a6b8 <d_expression_1>
 8008d68:	4682      	mov	sl, r0
 8008d6a:	f7ff bade 	b.w	800832a <d_template_args+0xb16>
 8008d6e:	f04f 0900 	mov.w	r9, #0
 8008d72:	f7ff b81f 	b.w	8007db4 <d_template_args+0x5a0>
 8008d76:	785a      	ldrb	r2, [r3, #1]
 8008d78:	2a69      	cmp	r2, #105	; 0x69
 8008d7a:	d021      	beq.n	8008dc0 <d_template_args+0x15ac>
 8008d7c:	f04f 0900 	mov.w	r9, #0
 8008d80:	f7ff b832 	b.w	8007de8 <d_template_args+0x5d4>
 8008d84:	3301      	adds	r3, #1
 8008d86:	60e3      	str	r3, [r4, #12]
 8008d88:	2000      	movs	r0, #0
 8008d8a:	f7ff ba8f 	b.w	80082ac <d_template_args+0xa98>
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f7fe fd40 	bl	8007814 <d_template_args>
 8008d94:	4652      	mov	r2, sl
 8008d96:	4603      	mov	r3, r0
 8008d98:	2104      	movs	r1, #4
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f7fb f97a 	bl	8004094 <d_make_comp>
 8008da0:	4682      	mov	sl, r0
 8008da2:	f7ff bac2 	b.w	800832a <d_template_args+0xb16>
 8008da6:	4620      	mov	r0, r4
 8008da8:	f001 fc86 	bl	800a6b8 <d_expression_1>
 8008dac:	9000      	str	r0, [sp, #0]
 8008dae:	4620      	mov	r0, r4
 8008db0:	f001 fc82 	bl	800a6b8 <d_expression_1>
 8008db4:	4682      	mov	sl, r0
 8008db6:	4620      	mov	r0, r4
 8008db8:	f001 fc7e 	bl	800a6b8 <d_expression_1>
 8008dbc:	f7ff ba76 	b.w	80082ac <d_template_args+0xa98>
 8008dc0:	3302      	adds	r3, #2
 8008dc2:	60e3      	str	r3, [r4, #12]
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	2145      	movs	r1, #69	; 0x45
 8008dc8:	f7fe fae6 	bl	8007398 <d_exprlist>
 8008dcc:	f7ff ba6e 	b.w	80082ac <d_template_args+0xa98>
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f000 f827 	bl	8008e24 <d_type>
 8008dd6:	e4f4      	b.n	80087c2 <d_template_args+0xfae>
 8008dd8:	4620      	mov	r0, r4
 8008dda:	2145      	movs	r1, #69	; 0x45
 8008ddc:	f7fe fadc 	bl	8007398 <d_exprlist>
 8008de0:	4682      	mov	sl, r0
 8008de2:	f7ff baa2 	b.w	800832a <d_template_args+0xb16>
 8008de6:	3301      	adds	r3, #1
 8008de8:	60e3      	str	r3, [r4, #12]
 8008dea:	4620      	mov	r0, r4
 8008dec:	2145      	movs	r1, #69	; 0x45
 8008dee:	f7fe fad3 	bl	8007398 <d_exprlist>
 8008df2:	f7fe bf9a 	b.w	8007d2a <d_template_args+0x516>
 8008df6:	785a      	ldrb	r2, [r3, #1]
 8008df8:	2a69      	cmp	r2, #105	; 0x69
 8008dfa:	f47f aba5 	bne.w	8008548 <d_template_args+0xd34>
 8008dfe:	3302      	adds	r3, #2
 8008e00:	60e3      	str	r3, [r4, #12]
 8008e02:	4620      	mov	r0, r4
 8008e04:	2145      	movs	r1, #69	; 0x45
 8008e06:	f7fe fac7 	bl	8007398 <d_exprlist>
 8008e0a:	e58d      	b.n	8008928 <d_template_args+0x1114>
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	60e3      	str	r3, [r4, #12]
 8008e10:	2000      	movs	r0, #0
 8008e12:	e589      	b.n	8008928 <d_template_args+0x1114>
 8008e14:	4620      	mov	r0, r4
 8008e16:	f000 f805 	bl	8008e24 <d_type>
 8008e1a:	e712      	b.n	8008c42 <d_template_args+0x142e>
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	60e3      	str	r3, [r4, #12]
 8008e20:	f7fe bf80 	b.w	8007d24 <d_template_args+0x510>

08008e24 <d_type>:
 8008e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e28:	68c1      	ldr	r1, [r0, #12]
 8008e2a:	780b      	ldrb	r3, [r1, #0]
 8008e2c:	2b72      	cmp	r3, #114	; 0x72
 8008e2e:	b083      	sub	sp, #12
 8008e30:	4604      	mov	r4, r0
 8008e32:	d055      	beq.n	8008ee0 <d_type+0xbc>
 8008e34:	2b56      	cmp	r3, #86	; 0x56
 8008e36:	d053      	beq.n	8008ee0 <d_type+0xbc>
 8008e38:	2b4b      	cmp	r3, #75	; 0x4b
 8008e3a:	d051      	beq.n	8008ee0 <d_type+0xbc>
 8008e3c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008e40:	2a4a      	cmp	r2, #74	; 0x4a
 8008e42:	f200 80c3 	bhi.w	8008fcc <d_type+0x1a8>
 8008e46:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008e4a:	00eb      	.short	0x00eb
 8008e4c:	00eb00eb 	.word	0x00eb00eb
 8008e50:	00eb00eb 	.word	0x00eb00eb
 8008e54:	00eb00eb 	.word	0x00eb00eb
 8008e58:	00eb00eb 	.word	0x00eb00eb
 8008e5c:	00c100eb 	.word	0x00c100eb
 8008e60:	00c100c1 	.word	0x00c100c1
 8008e64:	00c100c1 	.word	0x00c100c1
 8008e68:	00c100c1 	.word	0x00c100c1
 8008e6c:	00c100f1 	.word	0x00c100f1
 8008e70:	010500f7 	.word	0x010500f7
 8008e74:	017500c1 	.word	0x017500c1
 8008e78:	00c1017b 	.word	0x00c1017b
 8008e7c:	00c100c1 	.word	0x00c100c1
 8008e80:	00c100c1 	.word	0x00c100c1
 8008e84:	00eb0189 	.word	0x00eb0189
 8008e88:	01af01a1 	.word	0x01af01a1
 8008e8c:	01bd00c1 	.word	0x01bd00c1
 8008e90:	01ed01cb 	.word	0x01ed01cb
 8008e94:	00c1020a 	.word	0x00c1020a
 8008e98:	00c100c1 	.word	0x00c100c1
 8008e9c:	00eb00c1 	.word	0x00eb00c1
 8008ea0:	00c100c1 	.word	0x00c100c1
 8008ea4:	00c100c1 	.word	0x00c100c1
 8008ea8:	00c100c1 	.word	0x00c100c1
 8008eac:	021c021c 	.word	0x021c021c
 8008eb0:	021c021c 	.word	0x021c021c
 8008eb4:	021c021c 	.word	0x021c021c
 8008eb8:	021c021c 	.word	0x021c021c
 8008ebc:	021c021c 	.word	0x021c021c
 8008ec0:	021c00c1 	.word	0x021c00c1
 8008ec4:	021c021c 	.word	0x021c021c
 8008ec8:	00c1021c 	.word	0x00c1021c
 8008ecc:	00c100c1 	.word	0x00c100c1
 8008ed0:	021c021c 	.word	0x021c021c
 8008ed4:	021c00d1 	.word	0x021c00d1
 8008ed8:	021c021c 	.word	0x021c021c
 8008edc:	021c021c 	.word	0x021c021c
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	a901      	add	r1, sp, #4
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f7fb f93b 	bl	8004160 <d_cv_qualifiers>
 8008eea:	4605      	mov	r5, r0
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d06d      	beq.n	8008fcc <d_type+0x1a8>
 8008ef0:	68e3      	ldr	r3, [r4, #12]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	2b46      	cmp	r3, #70	; 0x46
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	d06d      	beq.n	8008fd6 <d_type+0x1b2>
 8008efa:	f7ff ff93 	bl	8008e24 <d_type>
 8008efe:	6028      	str	r0, [r5, #0]
 8008f00:	2800      	cmp	r0, #0
 8008f02:	d063      	beq.n	8008fcc <d_type+0x1a8>
 8008f04:	7803      	ldrb	r3, [r0, #0]
 8008f06:	3b1f      	subs	r3, #31
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d968      	bls.n	8008fde <d_type+0x1ba>
 8008f0c:	9a01      	ldr	r2, [sp, #4]
 8008f0e:	2a00      	cmp	r2, #0
 8008f10:	d05c      	beq.n	8008fcc <d_type+0x1a8>
 8008f12:	6a23      	ldr	r3, [r4, #32]
 8008f14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008f16:	428b      	cmp	r3, r1
 8008f18:	da58      	bge.n	8008fcc <d_type+0x1a8>
 8008f1a:	69e0      	ldr	r0, [r4, #28]
 8008f1c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8008f20:	1c59      	adds	r1, r3, #1
 8008f22:	9d01      	ldr	r5, [sp, #4]
 8008f24:	6221      	str	r1, [r4, #32]
 8008f26:	4628      	mov	r0, r5
 8008f28:	b003      	add	sp, #12
 8008f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f2e:	2501      	movs	r5, #1
 8008f30:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8008f32:	6365      	str	r5, [r4, #52]	; 0x34
 8008f34:	788b      	ldrb	r3, [r1, #2]
 8008f36:	2b4c      	cmp	r3, #76	; 0x4c
 8008f38:	f000 841d 	beq.w	8009776 <d_type+0x952>
 8008f3c:	2b54      	cmp	r3, #84	; 0x54
 8008f3e:	f000 8416 	beq.w	800976e <d_type+0x94a>
 8008f42:	2b73      	cmp	r3, #115	; 0x73
 8008f44:	f000 834e 	beq.w	80095e4 <d_type+0x7c0>
 8008f48:	2b66      	cmp	r3, #102	; 0x66
 8008f4a:	f000 832b 	beq.w	80095a4 <d_type+0x780>
 8008f4e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008f52:	2a09      	cmp	r2, #9
 8008f54:	f240 82ce 	bls.w	80094f4 <d_type+0x6d0>
 8008f58:	2b6f      	cmp	r3, #111	; 0x6f
 8008f5a:	f000 82c5 	beq.w	80094e8 <d_type+0x6c4>
 8008f5e:	2b69      	cmp	r3, #105	; 0x69
 8008f60:	f000 8353 	beq.w	800960a <d_type+0x7e6>
 8008f64:	2b74      	cmp	r3, #116	; 0x74
 8008f66:	f000 8420 	beq.w	80097aa <d_type+0x986>
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f000 fd34 	bl	80099d8 <d_operator_name>
 8008f70:	4605      	mov	r5, r0
 8008f72:	2800      	cmp	r0, #0
 8008f74:	f000 83f9 	beq.w	800976a <d_type+0x946>
 8008f78:	7803      	ldrb	r3, [r0, #0]
 8008f7a:	2b31      	cmp	r3, #49	; 0x31
 8008f7c:	f000 8358 	beq.w	8009630 <d_type+0x80c>
 8008f80:	2b32      	cmp	r3, #50	; 0x32
 8008f82:	f000 841b 	beq.w	80097bc <d_type+0x998>
 8008f86:	2b33      	cmp	r3, #51	; 0x33
 8008f88:	f040 83ef 	bne.w	800976a <d_type+0x946>
 8008f8c:	68e3      	ldr	r3, [r4, #12]
 8008f8e:	781a      	ldrb	r2, [r3, #0]
 8008f90:	2a5f      	cmp	r2, #95	; 0x5f
 8008f92:	f000 8443 	beq.w	800981c <d_type+0x9f8>
 8008f96:	4620      	mov	r0, r4
 8008f98:	f001 fb8e 	bl	800a6b8 <d_expression_1>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	462a      	mov	r2, r5
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	2135      	movs	r1, #53	; 0x35
 8008fa4:	f7fb f876 	bl	8004094 <d_make_comp>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	6367      	str	r7, [r4, #52]	; 0x34
 8008fac:	4620      	mov	r0, r4
 8008fae:	2141      	movs	r1, #65	; 0x41
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	f7fb f86f 	bl	8004094 <d_make_comp>
 8008fb6:	4605      	mov	r5, r0
 8008fb8:	9001      	str	r0, [sp, #4]
 8008fba:	b138      	cbz	r0, 8008fcc <d_type+0x1a8>
 8008fbc:	68e3      	ldr	r3, [r4, #12]
 8008fbe:	781a      	ldrb	r2, [r3, #0]
 8008fc0:	b122      	cbz	r2, 8008fcc <d_type+0x1a8>
 8008fc2:	1c5a      	adds	r2, r3, #1
 8008fc4:	60e2      	str	r2, [r4, #12]
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	2b45      	cmp	r3, #69	; 0x45
 8008fca:	d01e      	beq.n	800900a <d_type+0x1e6>
 8008fcc:	2500      	movs	r5, #0
 8008fce:	4628      	mov	r0, r5
 8008fd0:	b003      	add	sp, #12
 8008fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fd6:	f000 fcdf 	bl	8009998 <d_function_type>
 8008fda:	6028      	str	r0, [r5, #0]
 8008fdc:	e790      	b.n	8008f00 <d_type+0xdc>
 8008fde:	9a01      	ldr	r2, [sp, #4]
 8008fe0:	6843      	ldr	r3, [r0, #4]
 8008fe2:	6042      	str	r2, [r0, #4]
 8008fe4:	682a      	ldr	r2, [r5, #0]
 8008fe6:	9201      	str	r2, [sp, #4]
 8008fe8:	602b      	str	r3, [r5, #0]
 8008fea:	e78f      	b.n	8008f0c <d_type+0xe8>
 8008fec:	3101      	adds	r1, #1
 8008fee:	60e1      	str	r1, [r4, #12]
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f7fb facf 	bl	8004594 <d_source_name>
 8008ff6:	2128      	movs	r1, #40	; 0x28
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f7fb f849 	bl	8004094 <d_make_comp>
 8009002:	4605      	mov	r5, r0
 8009004:	9001      	str	r0, [sp, #4]
 8009006:	2d00      	cmp	r5, #0
 8009008:	d0e0      	beq.n	8008fcc <d_type+0x1a8>
 800900a:	6a23      	ldr	r3, [r4, #32]
 800900c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800900e:	4293      	cmp	r3, r2
 8009010:	dadc      	bge.n	8008fcc <d_type+0x1a8>
 8009012:	69e1      	ldr	r1, [r4, #28]
 8009014:	1c5a      	adds	r2, r3, #1
 8009016:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 800901a:	9d01      	ldr	r5, [sp, #4]
 800901c:	6222      	str	r2, [r4, #32]
 800901e:	e782      	b.n	8008f26 <d_type+0x102>
 8009020:	4620      	mov	r0, r4
 8009022:	f000 fe9b 	bl	8009d5c <d_name>
 8009026:	4605      	mov	r5, r0
 8009028:	9001      	str	r0, [sp, #4]
 800902a:	e7ec      	b.n	8009006 <d_type+0x1e2>
 800902c:	4620      	mov	r0, r4
 800902e:	f001 fe85 	bl	800ad3c <d_array_type>
 8009032:	4605      	mov	r5, r0
 8009034:	9001      	str	r0, [sp, #4]
 8009036:	e7e6      	b.n	8009006 <d_type+0x1e2>
 8009038:	3101      	adds	r1, #1
 800903a:	60e1      	str	r1, [r4, #12]
 800903c:	4620      	mov	r0, r4
 800903e:	f7ff fef1 	bl	8008e24 <d_type>
 8009042:	2125      	movs	r1, #37	; 0x25
 8009044:	4602      	mov	r2, r0
 8009046:	2300      	movs	r3, #0
 8009048:	4620      	mov	r0, r4
 800904a:	f7fb f823 	bl	8004094 <d_make_comp>
 800904e:	4605      	mov	r5, r0
 8009050:	9001      	str	r0, [sp, #4]
 8009052:	e7d8      	b.n	8009006 <d_type+0x1e2>
 8009054:	1c4b      	adds	r3, r1, #1
 8009056:	60e3      	str	r3, [r4, #12]
 8009058:	784b      	ldrb	r3, [r1, #1]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d0b6      	beq.n	8008fcc <d_type+0x1a8>
 800905e:	1c8b      	adds	r3, r1, #2
 8009060:	60e3      	str	r3, [r4, #12]
 8009062:	784b      	ldrb	r3, [r1, #1]
 8009064:	3b46      	subs	r3, #70	; 0x46
 8009066:	2b30      	cmp	r3, #48	; 0x30
 8009068:	d8b0      	bhi.n	8008fcc <d_type+0x1a8>
 800906a:	a201      	add	r2, pc, #4	; (adr r2, 8009070 <d_type+0x24c>)
 800906c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009070:	08009429 	.word	0x08009429
 8009074:	08008fcd 	.word	0x08008fcd
 8009078:	08008fcd 	.word	0x08008fcd
 800907c:	08008fcd 	.word	0x08008fcd
 8009080:	08008fcd 	.word	0x08008fcd
 8009084:	08008fcd 	.word	0x08008fcd
 8009088:	08008fcd 	.word	0x08008fcd
 800908c:	08008fcd 	.word	0x08008fcd
 8009090:	08008fcd 	.word	0x08008fcd
 8009094:	08008fcd 	.word	0x08008fcd
 8009098:	08008fcd 	.word	0x08008fcd
 800909c:	08008fcd 	.word	0x08008fcd
 80090a0:	08008fcd 	.word	0x08008fcd
 80090a4:	08008fcd 	.word	0x08008fcd
 80090a8:	08008f2f 	.word	0x08008f2f
 80090ac:	08008fcd 	.word	0x08008fcd
 80090b0:	08008fcd 	.word	0x08008fcd
 80090b4:	08008fcd 	.word	0x08008fcd
 80090b8:	08008fcd 	.word	0x08008fcd
 80090bc:	08008fcd 	.word	0x08008fcd
 80090c0:	08008fcd 	.word	0x08008fcd
 80090c4:	08008fcd 	.word	0x08008fcd
 80090c8:	08008fcd 	.word	0x08008fcd
 80090cc:	08008fcd 	.word	0x08008fcd
 80090d0:	08008fcd 	.word	0x08008fcd
 80090d4:	08008fcd 	.word	0x08008fcd
 80090d8:	08008fcd 	.word	0x08008fcd
 80090dc:	0800941b 	.word	0x0800941b
 80090e0:	08008fcd 	.word	0x08008fcd
 80090e4:	08008fcd 	.word	0x08008fcd
 80090e8:	080093fd 	.word	0x080093fd
 80090ec:	080093d5 	.word	0x080093d5
 80090f0:	080093ad 	.word	0x080093ad
 80090f4:	08008fcd 	.word	0x08008fcd
 80090f8:	08009383 	.word	0x08009383
 80090fc:	08009361 	.word	0x08009361
 8009100:	08008fcd 	.word	0x08008fcd
 8009104:	08008fcd 	.word	0x08008fcd
 8009108:	08008fcd 	.word	0x08008fcd
 800910c:	08008fcd 	.word	0x08008fcd
 8009110:	08009309 	.word	0x08009309
 8009114:	08008fcd 	.word	0x08008fcd
 8009118:	080092f1 	.word	0x080092f1
 800911c:	08008fcd 	.word	0x08008fcd
 8009120:	08008fcd 	.word	0x08008fcd
 8009124:	08009335 	.word	0x08009335
 8009128:	08008f2f 	.word	0x08008f2f
 800912c:	08008fcd 	.word	0x08008fcd
 8009130:	080092cd 	.word	0x080092cd
 8009134:	4620      	mov	r0, r4
 8009136:	f000 fc2f 	bl	8009998 <d_function_type>
 800913a:	4605      	mov	r5, r0
 800913c:	9001      	str	r0, [sp, #4]
 800913e:	e762      	b.n	8009006 <d_type+0x1e2>
 8009140:	3101      	adds	r1, #1
 8009142:	60e1      	str	r1, [r4, #12]
 8009144:	4620      	mov	r0, r4
 8009146:	f7ff fe6d 	bl	8008e24 <d_type>
 800914a:	2126      	movs	r1, #38	; 0x26
 800914c:	4602      	mov	r2, r0
 800914e:	2300      	movs	r3, #0
 8009150:	4620      	mov	r0, r4
 8009152:	f7fa ff9f 	bl	8004094 <d_make_comp>
 8009156:	4605      	mov	r5, r0
 8009158:	9001      	str	r0, [sp, #4]
 800915a:	e754      	b.n	8009006 <d_type+0x1e2>
 800915c:	3101      	adds	r1, #1
 800915e:	60e1      	str	r1, [r4, #12]
 8009160:	4620      	mov	r0, r4
 8009162:	f7ff fe5f 	bl	8008e24 <d_type>
 8009166:	4605      	mov	r5, r0
 8009168:	2800      	cmp	r0, #0
 800916a:	f000 80bf 	beq.w	80092ec <d_type+0x4c8>
 800916e:	4620      	mov	r0, r4
 8009170:	f7ff fe58 	bl	8008e24 <d_type>
 8009174:	2800      	cmp	r0, #0
 8009176:	f000 80b9 	beq.w	80092ec <d_type+0x4c8>
 800917a:	462a      	mov	r2, r5
 800917c:	4603      	mov	r3, r0
 800917e:	212b      	movs	r1, #43	; 0x2b
 8009180:	4620      	mov	r0, r4
 8009182:	f7fa ff87 	bl	8004094 <d_make_comp>
 8009186:	4605      	mov	r5, r0
 8009188:	9501      	str	r5, [sp, #4]
 800918a:	e73c      	b.n	8009006 <d_type+0x1e2>
 800918c:	3101      	adds	r1, #1
 800918e:	60e1      	str	r1, [r4, #12]
 8009190:	4620      	mov	r0, r4
 8009192:	f7ff fe47 	bl	8008e24 <d_type>
 8009196:	2124      	movs	r1, #36	; 0x24
 8009198:	4602      	mov	r2, r0
 800919a:	2300      	movs	r3, #0
 800919c:	4620      	mov	r0, r4
 800919e:	f7fa ff79 	bl	8004094 <d_make_comp>
 80091a2:	4605      	mov	r5, r0
 80091a4:	9001      	str	r0, [sp, #4]
 80091a6:	e72e      	b.n	8009006 <d_type+0x1e2>
 80091a8:	3101      	adds	r1, #1
 80091aa:	60e1      	str	r1, [r4, #12]
 80091ac:	4620      	mov	r0, r4
 80091ae:	f7ff fe39 	bl	8008e24 <d_type>
 80091b2:	2122      	movs	r1, #34	; 0x22
 80091b4:	4602      	mov	r2, r0
 80091b6:	2300      	movs	r3, #0
 80091b8:	4620      	mov	r0, r4
 80091ba:	f7fa ff6b 	bl	8004094 <d_make_comp>
 80091be:	4605      	mov	r5, r0
 80091c0:	9001      	str	r0, [sp, #4]
 80091c2:	e720      	b.n	8009006 <d_type+0x1e2>
 80091c4:	3101      	adds	r1, #1
 80091c6:	60e1      	str	r1, [r4, #12]
 80091c8:	4620      	mov	r0, r4
 80091ca:	f7ff fe2b 	bl	8008e24 <d_type>
 80091ce:	2123      	movs	r1, #35	; 0x23
 80091d0:	4602      	mov	r2, r0
 80091d2:	2300      	movs	r3, #0
 80091d4:	4620      	mov	r0, r4
 80091d6:	f7fa ff5d 	bl	8004094 <d_make_comp>
 80091da:	4605      	mov	r5, r0
 80091dc:	9001      	str	r0, [sp, #4]
 80091de:	e712      	b.n	8009006 <d_type+0x1e2>
 80091e0:	784b      	ldrb	r3, [r1, #1]
 80091e2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80091e6:	2a09      	cmp	r2, #9
 80091e8:	d905      	bls.n	80091f6 <d_type+0x3d2>
 80091ea:	2b5f      	cmp	r3, #95	; 0x5f
 80091ec:	d003      	beq.n	80091f6 <d_type+0x3d2>
 80091ee:	3b41      	subs	r3, #65	; 0x41
 80091f0:	2b19      	cmp	r3, #25
 80091f2:	f200 8153 	bhi.w	800949c <d_type+0x678>
 80091f6:	4620      	mov	r0, r4
 80091f8:	2100      	movs	r1, #0
 80091fa:	f7fb f823 	bl	8004244 <d_substitution>
 80091fe:	68e3      	ldr	r3, [r4, #12]
 8009200:	9001      	str	r0, [sp, #4]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	2b49      	cmp	r3, #73	; 0x49
 8009206:	4605      	mov	r5, r0
 8009208:	f47f ae8d 	bne.w	8008f26 <d_type+0x102>
 800920c:	4620      	mov	r0, r4
 800920e:	f7fe fb01 	bl	8007814 <d_template_args>
 8009212:	462a      	mov	r2, r5
 8009214:	4603      	mov	r3, r0
 8009216:	2104      	movs	r1, #4
 8009218:	4620      	mov	r0, r4
 800921a:	f7fa ff3b 	bl	8004094 <d_make_comp>
 800921e:	4605      	mov	r5, r0
 8009220:	9001      	str	r0, [sp, #4]
 8009222:	e6f0      	b.n	8009006 <d_type+0x1e2>
 8009224:	4620      	mov	r0, r4
 8009226:	f7fb f983 	bl	8004530 <d_template_param>
 800922a:	68e6      	ldr	r6, [r4, #12]
 800922c:	9001      	str	r0, [sp, #4]
 800922e:	7833      	ldrb	r3, [r6, #0]
 8009230:	2b49      	cmp	r3, #73	; 0x49
 8009232:	4605      	mov	r5, r0
 8009234:	f47f aee7 	bne.w	8009006 <d_type+0x1e2>
 8009238:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800923a:	2b00      	cmp	r3, #0
 800923c:	f040 813b 	bne.w	80094b6 <d_type+0x692>
 8009240:	2800      	cmp	r0, #0
 8009242:	f43f aec3 	beq.w	8008fcc <d_type+0x1a8>
 8009246:	6a23      	ldr	r3, [r4, #32]
 8009248:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800924a:	4293      	cmp	r3, r2
 800924c:	f6bf aebe 	bge.w	8008fcc <d_type+0x1a8>
 8009250:	69e1      	ldr	r1, [r4, #28]
 8009252:	1c5a      	adds	r2, r3, #1
 8009254:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8009258:	9d01      	ldr	r5, [sp, #4]
 800925a:	6222      	str	r2, [r4, #32]
 800925c:	e7d6      	b.n	800920c <d_type+0x3e8>
 800925e:	3101      	adds	r1, #1
 8009260:	60e1      	str	r1, [r4, #12]
 8009262:	4620      	mov	r0, r4
 8009264:	f7fb f996 	bl	8004594 <d_source_name>
 8009268:	9001      	str	r0, [sp, #4]
 800926a:	4620      	mov	r0, r4
 800926c:	f7ff fdda 	bl	8008e24 <d_type>
 8009270:	2121      	movs	r1, #33	; 0x21
 8009272:	4602      	mov	r2, r0
 8009274:	9b01      	ldr	r3, [sp, #4]
 8009276:	4620      	mov	r0, r4
 8009278:	f7fa ff0c 	bl	8004094 <d_make_comp>
 800927c:	4605      	mov	r5, r0
 800927e:	9001      	str	r0, [sp, #4]
 8009280:	e6c1      	b.n	8009006 <d_type+0x1e2>
 8009282:	3b61      	subs	r3, #97	; 0x61
 8009284:	4fad      	ldr	r7, [pc, #692]	; (800953c <d_type+0x718>)
 8009286:	6962      	ldr	r2, [r4, #20]
 8009288:	69a5      	ldr	r5, [r4, #24]
 800928a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8009294:	42aa      	cmp	r2, r5
 8009296:	4418      	add	r0, r3
 8009298:	f280 80fc 	bge.w	8009494 <d_type+0x670>
 800929c:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 80092a0:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80092a4:	00b6      	lsls	r6, r6, #2
 80092a6:	3201      	adds	r2, #1
 80092a8:	eb1e 0506 	adds.w	r5, lr, r6
 80092ac:	6162      	str	r2, [r4, #20]
 80092ae:	f000 80f1 	beq.w	8009494 <d_type+0x670>
 80092b2:	2227      	movs	r2, #39	; 0x27
 80092b4:	443b      	add	r3, r7
 80092b6:	f80e 2006 	strb.w	r2, [lr, r6]
 80092ba:	6068      	str	r0, [r5, #4]
 80092bc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80092be:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80092c2:	3101      	adds	r1, #1
 80092c4:	4413      	add	r3, r2
 80092c6:	60e1      	str	r1, [r4, #12]
 80092c8:	6323      	str	r3, [r4, #48]	; 0x30
 80092ca:	e62c      	b.n	8008f26 <d_type+0x102>
 80092cc:	788b      	ldrb	r3, [r1, #2]
 80092ce:	2b5f      	cmp	r3, #95	; 0x5f
 80092d0:	f000 815d 	beq.w	800958e <d_type+0x76a>
 80092d4:	4620      	mov	r0, r4
 80092d6:	f7fb f8f7 	bl	80044c8 <d_number_component>
 80092da:	4605      	mov	r5, r0
 80092dc:	2d00      	cmp	r5, #0
 80092de:	f43f af53 	beq.w	8009188 <d_type+0x364>
 80092e2:	68e3      	ldr	r3, [r4, #12]
 80092e4:	781a      	ldrb	r2, [r3, #0]
 80092e6:	2a5f      	cmp	r2, #95	; 0x5f
 80092e8:	f000 811a 	beq.w	8009520 <d_type+0x6fc>
 80092ec:	2500      	movs	r5, #0
 80092ee:	e74b      	b.n	8009188 <d_type+0x364>
 80092f0:	4620      	mov	r0, r4
 80092f2:	f7ff fd97 	bl	8008e24 <d_type>
 80092f6:	2149      	movs	r1, #73	; 0x49
 80092f8:	4602      	mov	r2, r0
 80092fa:	2300      	movs	r3, #0
 80092fc:	4620      	mov	r0, r4
 80092fe:	f7fa fec9 	bl	8004094 <d_make_comp>
 8009302:	4605      	mov	r5, r0
 8009304:	9001      	str	r0, [sp, #4]
 8009306:	e67e      	b.n	8009006 <d_type+0x1e2>
 8009308:	6963      	ldr	r3, [r4, #20]
 800930a:	69a2      	ldr	r2, [r4, #24]
 800930c:	4293      	cmp	r3, r2
 800930e:	f280 80c1 	bge.w	8009494 <d_type+0x670>
 8009312:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8009316:	6921      	ldr	r1, [r4, #16]
 8009318:	0092      	lsls	r2, r2, #2
 800931a:	3301      	adds	r3, #1
 800931c:	188d      	adds	r5, r1, r2
 800931e:	6163      	str	r3, [r4, #20]
 8009320:	f000 80b8 	beq.w	8009494 <d_type+0x670>
 8009324:	4b86      	ldr	r3, [pc, #536]	; (8009540 <d_type+0x71c>)
 8009326:	2027      	movs	r0, #39	; 0x27
 8009328:	5488      	strb	r0, [r1, r2]
 800932a:	606b      	str	r3, [r5, #4]
 800932c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800932e:	3311      	adds	r3, #17
 8009330:	6323      	str	r3, [r4, #48]	; 0x30
 8009332:	e5f8      	b.n	8008f26 <d_type+0x102>
 8009334:	6963      	ldr	r3, [r4, #20]
 8009336:	69a2      	ldr	r2, [r4, #24]
 8009338:	4293      	cmp	r3, r2
 800933a:	f280 80ab 	bge.w	8009494 <d_type+0x670>
 800933e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8009342:	6921      	ldr	r1, [r4, #16]
 8009344:	0092      	lsls	r2, r2, #2
 8009346:	3301      	adds	r3, #1
 8009348:	188d      	adds	r5, r1, r2
 800934a:	6163      	str	r3, [r4, #20]
 800934c:	f000 80a2 	beq.w	8009494 <d_type+0x670>
 8009350:	4b7c      	ldr	r3, [pc, #496]	; (8009544 <d_type+0x720>)
 8009352:	2027      	movs	r0, #39	; 0x27
 8009354:	5488      	strb	r0, [r1, r2]
 8009356:	606b      	str	r3, [r5, #4]
 8009358:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800935a:	3308      	adds	r3, #8
 800935c:	6323      	str	r3, [r4, #48]	; 0x30
 800935e:	e5e2      	b.n	8008f26 <d_type+0x102>
 8009360:	6963      	ldr	r3, [r4, #20]
 8009362:	69a2      	ldr	r2, [r4, #24]
 8009364:	4293      	cmp	r3, r2
 8009366:	f280 8095 	bge.w	8009494 <d_type+0x670>
 800936a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800936e:	6921      	ldr	r1, [r4, #16]
 8009370:	0092      	lsls	r2, r2, #2
 8009372:	3301      	adds	r3, #1
 8009374:	188d      	adds	r5, r1, r2
 8009376:	6163      	str	r3, [r4, #20]
 8009378:	f000 808c 	beq.w	8009494 <d_type+0x670>
 800937c:	2027      	movs	r0, #39	; 0x27
 800937e:	4b72      	ldr	r3, [pc, #456]	; (8009548 <d_type+0x724>)
 8009380:	e7e8      	b.n	8009354 <d_type+0x530>
 8009382:	6963      	ldr	r3, [r4, #20]
 8009384:	69a2      	ldr	r2, [r4, #24]
 8009386:	4293      	cmp	r3, r2
 8009388:	f280 8084 	bge.w	8009494 <d_type+0x670>
 800938c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8009390:	6921      	ldr	r1, [r4, #16]
 8009392:	0092      	lsls	r2, r2, #2
 8009394:	3301      	adds	r3, #1
 8009396:	188d      	adds	r5, r1, r2
 8009398:	6163      	str	r3, [r4, #20]
 800939a:	d07b      	beq.n	8009494 <d_type+0x670>
 800939c:	4b6b      	ldr	r3, [pc, #428]	; (800954c <d_type+0x728>)
 800939e:	2027      	movs	r0, #39	; 0x27
 80093a0:	5488      	strb	r0, [r1, r2]
 80093a2:	606b      	str	r3, [r5, #4]
 80093a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80093a6:	3304      	adds	r3, #4
 80093a8:	6323      	str	r3, [r4, #48]	; 0x30
 80093aa:	e5bc      	b.n	8008f26 <d_type+0x102>
 80093ac:	6963      	ldr	r3, [r4, #20]
 80093ae:	69a2      	ldr	r2, [r4, #24]
 80093b0:	4293      	cmp	r3, r2
 80093b2:	da6f      	bge.n	8009494 <d_type+0x670>
 80093b4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80093b8:	6921      	ldr	r1, [r4, #16]
 80093ba:	0092      	lsls	r2, r2, #2
 80093bc:	3301      	adds	r3, #1
 80093be:	188d      	adds	r5, r1, r2
 80093c0:	6163      	str	r3, [r4, #20]
 80093c2:	d067      	beq.n	8009494 <d_type+0x670>
 80093c4:	4b62      	ldr	r3, [pc, #392]	; (8009550 <d_type+0x72c>)
 80093c6:	2027      	movs	r0, #39	; 0x27
 80093c8:	5488      	strb	r0, [r1, r2]
 80093ca:	606b      	str	r3, [r5, #4]
 80093cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80093ce:	3309      	adds	r3, #9
 80093d0:	6323      	str	r3, [r4, #48]	; 0x30
 80093d2:	e5a8      	b.n	8008f26 <d_type+0x102>
 80093d4:	6963      	ldr	r3, [r4, #20]
 80093d6:	69a2      	ldr	r2, [r4, #24]
 80093d8:	4293      	cmp	r3, r2
 80093da:	da5b      	bge.n	8009494 <d_type+0x670>
 80093dc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80093e0:	6921      	ldr	r1, [r4, #16]
 80093e2:	0092      	lsls	r2, r2, #2
 80093e4:	3301      	adds	r3, #1
 80093e6:	188d      	adds	r5, r1, r2
 80093e8:	6163      	str	r3, [r4, #20]
 80093ea:	d053      	beq.n	8009494 <d_type+0x670>
 80093ec:	4b59      	ldr	r3, [pc, #356]	; (8009554 <d_type+0x730>)
 80093ee:	2027      	movs	r0, #39	; 0x27
 80093f0:	5488      	strb	r0, [r1, r2]
 80093f2:	606b      	str	r3, [r5, #4]
 80093f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80093f6:	330a      	adds	r3, #10
 80093f8:	6323      	str	r3, [r4, #48]	; 0x30
 80093fa:	e594      	b.n	8008f26 <d_type+0x102>
 80093fc:	6963      	ldr	r3, [r4, #20]
 80093fe:	69a2      	ldr	r2, [r4, #24]
 8009400:	4293      	cmp	r3, r2
 8009402:	da47      	bge.n	8009494 <d_type+0x670>
 8009404:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8009408:	6921      	ldr	r1, [r4, #16]
 800940a:	0092      	lsls	r2, r2, #2
 800940c:	3301      	adds	r3, #1
 800940e:	188d      	adds	r5, r1, r2
 8009410:	6163      	str	r3, [r4, #20]
 8009412:	d03f      	beq.n	8009494 <d_type+0x670>
 8009414:	2027      	movs	r0, #39	; 0x27
 8009416:	4b50      	ldr	r3, [pc, #320]	; (8009558 <d_type+0x734>)
 8009418:	e7d6      	b.n	80093c8 <d_type+0x5a4>
 800941a:	4620      	mov	r0, r4
 800941c:	494f      	ldr	r1, [pc, #316]	; (800955c <d_type+0x738>)
 800941e:	2204      	movs	r2, #4
 8009420:	f7fa fe84 	bl	800412c <d_make_name>
 8009424:	4605      	mov	r5, r0
 8009426:	e57e      	b.n	8008f26 <d_type+0x102>
 8009428:	6963      	ldr	r3, [r4, #20]
 800942a:	69a2      	ldr	r2, [r4, #24]
 800942c:	4293      	cmp	r3, r2
 800942e:	da58      	bge.n	80094e2 <d_type+0x6be>
 8009430:	6925      	ldr	r5, [r4, #16]
 8009432:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8009436:	0092      	lsls	r2, r2, #2
 8009438:	3301      	adds	r3, #1
 800943a:	18a8      	adds	r0, r5, r2
 800943c:	262c      	movs	r6, #44	; 0x2c
 800943e:	6163      	str	r3, [r4, #20]
 8009440:	9001      	str	r0, [sp, #4]
 8009442:	54ae      	strb	r6, [r5, r2]
 8009444:	788b      	ldrb	r3, [r1, #2]
 8009446:	3b30      	subs	r3, #48	; 0x30
 8009448:	2b09      	cmp	r3, #9
 800944a:	bf8c      	ite	hi
 800944c:	2300      	movhi	r3, #0
 800944e:	2301      	movls	r3, #1
 8009450:	8103      	strh	r3, [r0, #8]
 8009452:	b11b      	cbz	r3, 800945c <d_type+0x638>
 8009454:	f104 000c 	add.w	r0, r4, #12
 8009458:	f7fb f80e 	bl	8004478 <d_number.isra.0>
 800945c:	4620      	mov	r0, r4
 800945e:	9d01      	ldr	r5, [sp, #4]
 8009460:	f7ff fce0 	bl	8008e24 <d_type>
 8009464:	9b01      	ldr	r3, [sp, #4]
 8009466:	6068      	str	r0, [r5, #4]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	f43f adae 	beq.w	8008fcc <d_type+0x1a8>
 8009470:	f104 000c 	add.w	r0, r4, #12
 8009474:	f7fb f800 	bl	8004478 <d_number.isra.0>
 8009478:	68e2      	ldr	r2, [r4, #12]
 800947a:	7813      	ldrb	r3, [r2, #0]
 800947c:	b13b      	cbz	r3, 800948e <d_type+0x66a>
 800947e:	1c53      	adds	r3, r2, #1
 8009480:	60e3      	str	r3, [r4, #12]
 8009482:	7813      	ldrb	r3, [r2, #0]
 8009484:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
 8009488:	fab3 f383 	clz	r3, r3
 800948c:	095b      	lsrs	r3, r3, #5
 800948e:	9d01      	ldr	r5, [sp, #4]
 8009490:	816b      	strh	r3, [r5, #10]
 8009492:	e548      	b.n	8008f26 <d_type+0x102>
 8009494:	2300      	movs	r3, #0
 8009496:	9301      	str	r3, [sp, #4]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	deff      	udf	#255	; 0xff
 800949c:	4620      	mov	r0, r4
 800949e:	f000 fc5d 	bl	8009d5c <d_name>
 80094a2:	4605      	mov	r5, r0
 80094a4:	9001      	str	r0, [sp, #4]
 80094a6:	2800      	cmp	r0, #0
 80094a8:	f43f ad90 	beq.w	8008fcc <d_type+0x1a8>
 80094ac:	7803      	ldrb	r3, [r0, #0]
 80094ae:	2b18      	cmp	r3, #24
 80094b0:	f47f adab 	bne.w	800900a <d_type+0x1e6>
 80094b4:	e537      	b.n	8008f26 <d_type+0x102>
 80094b6:	4620      	mov	r0, r4
 80094b8:	f8d4 9014 	ldr.w	r9, [r4, #20]
 80094bc:	f8d4 8020 	ldr.w	r8, [r4, #32]
 80094c0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80094c2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80094c4:	f7fe f9a6 	bl	8007814 <d_template_args>
 80094c8:	68e2      	ldr	r2, [r4, #12]
 80094ca:	7812      	ldrb	r2, [r2, #0]
 80094cc:	2a49      	cmp	r2, #73	; 0x49
 80094ce:	d047      	beq.n	8009560 <d_type+0x73c>
 80094d0:	6325      	str	r5, [r4, #48]	; 0x30
 80094d2:	60e6      	str	r6, [r4, #12]
 80094d4:	f8c4 9014 	str.w	r9, [r4, #20]
 80094d8:	f8c4 8020 	str.w	r8, [r4, #32]
 80094dc:	62a7      	str	r7, [r4, #40]	; 0x28
 80094de:	9d01      	ldr	r5, [sp, #4]
 80094e0:	e591      	b.n	8009006 <d_type+0x1e2>
 80094e2:	2300      	movs	r3, #0
 80094e4:	701b      	strb	r3, [r3, #0]
 80094e6:	deff      	udf	#255	; 0xff
 80094e8:	78cb      	ldrb	r3, [r1, #3]
 80094ea:	2b6e      	cmp	r3, #110	; 0x6e
 80094ec:	f47f ad3d 	bne.w	8008f6a <d_type+0x146>
 80094f0:	3104      	adds	r1, #4
 80094f2:	60e1      	str	r1, [r4, #12]
 80094f4:	4620      	mov	r0, r4
 80094f6:	f000 faf1 	bl	8009adc <d_unqualified_name>
 80094fa:	4605      	mov	r5, r0
 80094fc:	2800      	cmp	r0, #0
 80094fe:	f000 8134 	beq.w	800976a <d_type+0x946>
 8009502:	68e3      	ldr	r3, [r4, #12]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	2b49      	cmp	r3, #73	; 0x49
 8009508:	f47f ad4e 	bne.w	8008fa8 <d_type+0x184>
 800950c:	4620      	mov	r0, r4
 800950e:	f7fe f981 	bl	8007814 <d_template_args>
 8009512:	462a      	mov	r2, r5
 8009514:	4603      	mov	r3, r0
 8009516:	2104      	movs	r1, #4
 8009518:	4620      	mov	r0, r4
 800951a:	f7fa fdbb 	bl	8004094 <d_make_comp>
 800951e:	e543      	b.n	8008fa8 <d_type+0x184>
 8009520:	3301      	adds	r3, #1
 8009522:	60e3      	str	r3, [r4, #12]
 8009524:	4620      	mov	r0, r4
 8009526:	f7ff fc7d 	bl	8008e24 <d_type>
 800952a:	462a      	mov	r2, r5
 800952c:	4603      	mov	r3, r0
 800952e:	212d      	movs	r1, #45	; 0x2d
 8009530:	4620      	mov	r0, r4
 8009532:	f7fa fdaf 	bl	8004094 <d_make_comp>
 8009536:	4605      	mov	r5, r0
 8009538:	e626      	b.n	8009188 <d_type+0x364>
 800953a:	bf00      	nop
 800953c:	0800dde0 	.word	0x0800dde0
 8009540:	0800e124 	.word	0x0800e124
 8009544:	0800e0fc 	.word	0x0800e0fc
 8009548:	0800e110 	.word	0x0800e110
 800954c:	0800e0e8 	.word	0x0800e0e8
 8009550:	0800e0ac 	.word	0x0800e0ac
 8009554:	0800e0d4 	.word	0x0800e0d4
 8009558:	0800e0c0 	.word	0x0800e0c0
 800955c:	0800e818 	.word	0x0800e818
 8009560:	9b01      	ldr	r3, [sp, #4]
 8009562:	2b00      	cmp	r3, #0
 8009564:	f43f ad32 	beq.w	8008fcc <d_type+0x1a8>
 8009568:	6a22      	ldr	r2, [r4, #32]
 800956a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800956c:	428a      	cmp	r2, r1
 800956e:	f6bf ad2d 	bge.w	8008fcc <d_type+0x1a8>
 8009572:	69e5      	ldr	r5, [r4, #28]
 8009574:	1c51      	adds	r1, r2, #1
 8009576:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 800957a:	9a01      	ldr	r2, [sp, #4]
 800957c:	6221      	str	r1, [r4, #32]
 800957e:	4603      	mov	r3, r0
 8009580:	2104      	movs	r1, #4
 8009582:	4620      	mov	r0, r4
 8009584:	f7fa fd86 	bl	8004094 <d_make_comp>
 8009588:	4605      	mov	r5, r0
 800958a:	9001      	str	r0, [sp, #4]
 800958c:	e53b      	b.n	8009006 <d_type+0x1e2>
 800958e:	3103      	adds	r1, #3
 8009590:	2301      	movs	r3, #1
 8009592:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8009594:	60e1      	str	r1, [r4, #12]
 8009596:	6363      	str	r3, [r4, #52]	; 0x34
 8009598:	4620      	mov	r0, r4
 800959a:	f001 f88d 	bl	800a6b8 <d_expression_1>
 800959e:	6366      	str	r6, [r4, #52]	; 0x34
 80095a0:	4605      	mov	r5, r0
 80095a2:	e69b      	b.n	80092dc <d_type+0x4b8>
 80095a4:	78cb      	ldrb	r3, [r1, #3]
 80095a6:	2b70      	cmp	r3, #112	; 0x70
 80095a8:	f47f acdf 	bne.w	8008f6a <d_type+0x146>
 80095ac:	1d0b      	adds	r3, r1, #4
 80095ae:	60e3      	str	r3, [r4, #12]
 80095b0:	790b      	ldrb	r3, [r1, #4]
 80095b2:	2b54      	cmp	r3, #84	; 0x54
 80095b4:	f040 80d3 	bne.w	800975e <d_type+0x93a>
 80095b8:	3105      	adds	r1, #5
 80095ba:	60e1      	str	r1, [r4, #12]
 80095bc:	2500      	movs	r5, #0
 80095be:	6962      	ldr	r2, [r4, #20]
 80095c0:	69a3      	ldr	r3, [r4, #24]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	f280 80d1 	bge.w	800976a <d_type+0x946>
 80095c8:	230c      	movs	r3, #12
 80095ca:	6921      	ldr	r1, [r4, #16]
 80095cc:	fb03 f302 	mul.w	r3, r3, r2
 80095d0:	3201      	adds	r2, #1
 80095d2:	6162      	str	r2, [r4, #20]
 80095d4:	18ca      	adds	r2, r1, r3
 80095d6:	f000 811e 	beq.w	8009816 <d_type+0x9f2>
 80095da:	2006      	movs	r0, #6
 80095dc:	54c8      	strb	r0, [r1, r3]
 80095de:	4610      	mov	r0, r2
 80095e0:	6055      	str	r5, [r2, #4]
 80095e2:	e4e1      	b.n	8008fa8 <d_type+0x184>
 80095e4:	78cb      	ldrb	r3, [r1, #3]
 80095e6:	2b72      	cmp	r3, #114	; 0x72
 80095e8:	f000 80c9 	beq.w	800977e <d_type+0x95a>
 80095ec:	2b70      	cmp	r3, #112	; 0x70
 80095ee:	f47f acbc 	bne.w	8008f6a <d_type+0x146>
 80095f2:	3104      	adds	r1, #4
 80095f4:	60e1      	str	r1, [r4, #12]
 80095f6:	4620      	mov	r0, r4
 80095f8:	f001 f85e 	bl	800a6b8 <d_expression_1>
 80095fc:	2149      	movs	r1, #73	; 0x49
 80095fe:	4602      	mov	r2, r0
 8009600:	2300      	movs	r3, #0
 8009602:	4620      	mov	r0, r4
 8009604:	f7fa fd46 	bl	8004094 <d_make_comp>
 8009608:	e4ce      	b.n	8008fa8 <d_type+0x184>
 800960a:	78cb      	ldrb	r3, [r1, #3]
 800960c:	2b6c      	cmp	r3, #108	; 0x6c
 800960e:	f47f acac 	bne.w	8008f6a <d_type+0x146>
 8009612:	2500      	movs	r5, #0
 8009614:	68e3      	ldr	r3, [r4, #12]
 8009616:	3302      	adds	r3, #2
 8009618:	60e3      	str	r3, [r4, #12]
 800961a:	4620      	mov	r0, r4
 800961c:	2145      	movs	r1, #69	; 0x45
 800961e:	f7fd febb 	bl	8007398 <d_exprlist>
 8009622:	462a      	mov	r2, r5
 8009624:	4603      	mov	r3, r0
 8009626:	2130      	movs	r1, #48	; 0x30
 8009628:	4620      	mov	r0, r4
 800962a:	f7fa fd33 	bl	8004094 <d_make_comp>
 800962e:	e4bb      	b.n	8008fa8 <d_type+0x184>
 8009630:	6841      	ldr	r1, [r0, #4]
 8009632:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009634:	688b      	ldr	r3, [r1, #8]
 8009636:	680e      	ldr	r6, [r1, #0]
 8009638:	49a2      	ldr	r1, [pc, #648]	; (80098c4 <d_type+0xaa0>)
 800963a:	3b02      	subs	r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	6323      	str	r3, [r4, #48]	; 0x30
 8009640:	4630      	mov	r0, r6
 8009642:	f003 fb6e 	bl	800cd22 <strcmp>
 8009646:	2800      	cmp	r0, #0
 8009648:	f000 80f0 	beq.w	800982c <d_type+0xa08>
 800964c:	686b      	ldr	r3, [r5, #4]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	2b03      	cmp	r3, #3
 8009652:	f200 808a 	bhi.w	800976a <d_type+0x946>
 8009656:	e8df f003 	tbb	[pc, r3]
 800965a:	bf7b      	.short	0xbf7b
 800965c:	033f      	.short	0x033f
 800965e:	2600      	movvc	r6, #0
 8009660:	4630      	movvs	r0, r6
 8009662:	4999      	ldrvc	r1, [pc, #612]	; (80098c8 <d_type+0xaa4>)
 8009664:	f003 fb5d 	bl	800cd22 <strcmp>
 8009668:	2800      	cmp	r0, #0
 800966a:	f000 8106 	beq.w	800987a <d_type+0xa56>
 800966e:	7833      	ldrb	r3, [r6, #0]
 8009670:	2b6e      	cmp	r3, #110	; 0x6e
 8009672:	d17a      	bne.n	800976a <d_type+0x946>
 8009674:	7873      	ldrb	r3, [r6, #1]
 8009676:	2b77      	cmp	r3, #119	; 0x77
 8009678:	d001      	beq.n	800967e <d_type+0x85a>
 800967a:	2b61      	cmp	r3, #97	; 0x61
 800967c:	d175      	bne.n	800976a <d_type+0x946>
 800967e:	215f      	movs	r1, #95	; 0x5f
 8009680:	4620      	mov	r0, r4
 8009682:	f7fd fe89 	bl	8007398 <d_exprlist>
 8009686:	4606      	mov	r6, r0
 8009688:	4620      	mov	r0, r4
 800968a:	f7ff fbcb 	bl	8008e24 <d_type>
 800968e:	68e3      	ldr	r3, [r4, #12]
 8009690:	781a      	ldrb	r2, [r3, #0]
 8009692:	2a45      	cmp	r2, #69	; 0x45
 8009694:	4680      	mov	r8, r0
 8009696:	f000 80ec 	beq.w	8009872 <d_type+0xa4e>
 800969a:	2a70      	cmp	r2, #112	; 0x70
 800969c:	f000 80df 	beq.w	800985e <d_type+0xa3a>
 80096a0:	2a69      	cmp	r2, #105	; 0x69
 80096a2:	d162      	bne.n	800976a <d_type+0x946>
 80096a4:	785b      	ldrb	r3, [r3, #1]
 80096a6:	2b6c      	cmp	r3, #108	; 0x6c
 80096a8:	d15f      	bne.n	800976a <d_type+0x946>
 80096aa:	4620      	mov	r0, r4
 80096ac:	f001 f804 	bl	800a6b8 <d_expression_1>
 80096b0:	4642      	mov	r2, r8
 80096b2:	4603      	mov	r3, r0
 80096b4:	213a      	movs	r1, #58	; 0x3a
 80096b6:	4620      	mov	r0, r4
 80096b8:	f7fa fcec 	bl	8004094 <d_make_comp>
 80096bc:	4632      	mov	r2, r6
 80096be:	4603      	mov	r3, r0
 80096c0:	2139      	movs	r1, #57	; 0x39
 80096c2:	4620      	mov	r0, r4
 80096c4:	f7fa fce6 	bl	8004094 <d_make_comp>
 80096c8:	462a      	mov	r2, r5
 80096ca:	4603      	mov	r3, r0
 80096cc:	2138      	movs	r1, #56	; 0x38
 80096ce:	4620      	mov	r0, r4
 80096d0:	f7fa fce0 	bl	8004094 <d_make_comp>
 80096d4:	e468      	b.n	8008fa8 <d_type+0x184>
 80096d6:	2600      	movs	r6, #0
 80096d8:	686b      	ldr	r3, [r5, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	785a      	ldrb	r2, [r3, #1]
 80096de:	2a63      	cmp	r2, #99	; 0x63
 80096e0:	f000 80e2 	beq.w	80098a8 <d_type+0xa84>
 80096e4:	4620      	mov	r0, r4
 80096e6:	f000 ffe7 	bl	800a6b8 <d_expression_1>
 80096ea:	4680      	mov	r8, r0
 80096ec:	4630      	mov	r0, r6
 80096ee:	4977      	ldr	r1, [pc, #476]	; (80098cc <d_type+0xaa8>)
 80096f0:	f003 fb17 	bl	800cd22 <strcmp>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	f000 80d1 	beq.w	800989c <d_type+0xa78>
 80096fa:	4630      	mov	r0, r6
 80096fc:	4974      	ldr	r1, [pc, #464]	; (80098d0 <d_type+0xaac>)
 80096fe:	f003 fb10 	bl	800cd22 <strcmp>
 8009702:	b130      	cbz	r0, 8009712 <d_type+0x8ee>
 8009704:	4630      	mov	r0, r6
 8009706:	4973      	ldr	r1, [pc, #460]	; (80098d4 <d_type+0xab0>)
 8009708:	f003 fb0b 	bl	800cd22 <strcmp>
 800970c:	2800      	cmp	r0, #0
 800970e:	f040 80c0 	bne.w	8009892 <d_type+0xa6e>
 8009712:	4620      	mov	r0, r4
 8009714:	f000 f9e2 	bl	8009adc <d_unqualified_name>
 8009718:	68e3      	ldr	r3, [r4, #12]
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	2b49      	cmp	r3, #73	; 0x49
 800971e:	4606      	mov	r6, r0
 8009720:	d109      	bne.n	8009736 <d_type+0x912>
 8009722:	4620      	mov	r0, r4
 8009724:	f7fe f876 	bl	8007814 <d_template_args>
 8009728:	4632      	mov	r2, r6
 800972a:	4603      	mov	r3, r0
 800972c:	2104      	movs	r1, #4
 800972e:	4620      	mov	r0, r4
 8009730:	f7fa fcb0 	bl	8004094 <d_make_comp>
 8009734:	4606      	mov	r6, r0
 8009736:	4642      	mov	r2, r8
 8009738:	4633      	mov	r3, r6
 800973a:	4620      	mov	r0, r4
 800973c:	2137      	movs	r1, #55	; 0x37
 800973e:	f7fa fca9 	bl	8004094 <d_make_comp>
 8009742:	462a      	mov	r2, r5
 8009744:	4603      	mov	r3, r0
 8009746:	2136      	movs	r1, #54	; 0x36
 8009748:	4620      	mov	r0, r4
 800974a:	f7fa fca3 	bl	8004094 <d_make_comp>
 800974e:	e42b      	b.n	8008fa8 <d_type+0x184>
 8009750:	462a      	mov	r2, r5
 8009752:	4620      	mov	r0, r4
 8009754:	2134      	movs	r1, #52	; 0x34
 8009756:	2300      	movs	r3, #0
 8009758:	f7fa fc9c 	bl	8004094 <d_make_comp>
 800975c:	e424      	b.n	8008fa8 <d_type+0x184>
 800975e:	4620      	mov	r0, r4
 8009760:	f7fa fece 	bl	8004500 <d_compact_number>
 8009764:	1c45      	adds	r5, r0, #1
 8009766:	f47f af2a 	bne.w	80095be <d_type+0x79a>
 800976a:	2000      	movs	r0, #0
 800976c:	e41c      	b.n	8008fa8 <d_type+0x184>
 800976e:	4620      	mov	r0, r4
 8009770:	f7fa fede 	bl	8004530 <d_template_param>
 8009774:	e418      	b.n	8008fa8 <d_type+0x184>
 8009776:	4620      	mov	r0, r4
 8009778:	f7fd fdae 	bl	80072d8 <d_expr_primary>
 800977c:	e414      	b.n	8008fa8 <d_type+0x184>
 800977e:	3104      	adds	r1, #4
 8009780:	60e1      	str	r1, [r4, #12]
 8009782:	4620      	mov	r0, r4
 8009784:	f7ff fb4e 	bl	8008e24 <d_type>
 8009788:	4606      	mov	r6, r0
 800978a:	4620      	mov	r0, r4
 800978c:	f000 f9a6 	bl	8009adc <d_unqualified_name>
 8009790:	68e3      	ldr	r3, [r4, #12]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	2b49      	cmp	r3, #73	; 0x49
 8009796:	4680      	mov	r8, r0
 8009798:	d04c      	beq.n	8009834 <d_type+0xa10>
 800979a:	4603      	mov	r3, r0
 800979c:	4629      	mov	r1, r5
 800979e:	4632      	mov	r2, r6
 80097a0:	4620      	mov	r0, r4
 80097a2:	f7fa fc77 	bl	8004094 <d_make_comp>
 80097a6:	f7ff bbff 	b.w	8008fa8 <d_type+0x184>
 80097aa:	78cb      	ldrb	r3, [r1, #3]
 80097ac:	2b6c      	cmp	r3, #108	; 0x6c
 80097ae:	f47f abdc 	bne.w	8008f6a <d_type+0x146>
 80097b2:	4620      	mov	r0, r4
 80097b4:	f7ff fb36 	bl	8008e24 <d_type>
 80097b8:	4605      	mov	r5, r0
 80097ba:	e72b      	b.n	8009614 <d_type+0x7f0>
 80097bc:	686b      	ldr	r3, [r5, #4]
 80097be:	2b03      	cmp	r3, #3
 80097c0:	d8d3      	bhi.n	800976a <d_type+0x946>
 80097c2:	a201      	add	r2, pc, #4	; (adr r2, 80097c8 <d_type+0x9a4>)
 80097c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c8:	08009751 	.word	0x08009751
 80097cc:	08008f97 	.word	0x08008f97
 80097d0:	080096d7 	.word	0x080096d7
 80097d4:	0800965f 	.word	0x0800965f
 80097d8:	7833      	ldrb	r3, [r6, #0]
 80097da:	2b70      	cmp	r3, #112	; 0x70
 80097dc:	d002      	beq.n	80097e4 <d_type+0x9c0>
 80097de:	2b6d      	cmp	r3, #109	; 0x6d
 80097e0:	f47f abd9 	bne.w	8008f96 <d_type+0x172>
 80097e4:	7872      	ldrb	r2, [r6, #1]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	f47f abd5 	bne.w	8008f96 <d_type+0x172>
 80097ec:	68e3      	ldr	r3, [r4, #12]
 80097ee:	781a      	ldrb	r2, [r3, #0]
 80097f0:	2a5f      	cmp	r2, #95	; 0x5f
 80097f2:	d030      	beq.n	8009856 <d_type+0xa32>
 80097f4:	4620      	mov	r0, r4
 80097f6:	f000 ff5f 	bl	800a6b8 <d_expression_1>
 80097fa:	4602      	mov	r2, r0
 80097fc:	4613      	mov	r3, r2
 80097fe:	4620      	mov	r0, r4
 8009800:	2137      	movs	r1, #55	; 0x37
 8009802:	f7fa fc47 	bl	8004094 <d_make_comp>
 8009806:	4603      	mov	r3, r0
 8009808:	462a      	mov	r2, r5
 800980a:	4620      	mov	r0, r4
 800980c:	2135      	movs	r1, #53	; 0x35
 800980e:	f7fa fc41 	bl	8004094 <d_make_comp>
 8009812:	f7ff bbc9 	b.w	8008fa8 <d_type+0x184>
 8009816:	4610      	mov	r0, r2
 8009818:	f7ff bbc6 	b.w	8008fa8 <d_type+0x184>
 800981c:	3301      	adds	r3, #1
 800981e:	60e3      	str	r3, [r4, #12]
 8009820:	4620      	mov	r0, r4
 8009822:	2145      	movs	r1, #69	; 0x45
 8009824:	f7fd fdb8 	bl	8007398 <d_exprlist>
 8009828:	f7ff bbb8 	b.w	8008f9c <d_type+0x178>
 800982c:	4620      	mov	r0, r4
 800982e:	f7ff faf9 	bl	8008e24 <d_type>
 8009832:	e7e8      	b.n	8009806 <d_type+0x9e2>
 8009834:	4620      	mov	r0, r4
 8009836:	f7fd ffed 	bl	8007814 <d_template_args>
 800983a:	4642      	mov	r2, r8
 800983c:	4603      	mov	r3, r0
 800983e:	2104      	movs	r1, #4
 8009840:	4620      	mov	r0, r4
 8009842:	f7fa fc27 	bl	8004094 <d_make_comp>
 8009846:	4629      	mov	r1, r5
 8009848:	4603      	mov	r3, r0
 800984a:	4632      	mov	r2, r6
 800984c:	4620      	mov	r0, r4
 800984e:	f7fa fc21 	bl	8004094 <d_make_comp>
 8009852:	f7ff bba9 	b.w	8008fa8 <d_type+0x184>
 8009856:	3301      	adds	r3, #1
 8009858:	60e3      	str	r3, [r4, #12]
 800985a:	f7ff bb9c 	b.w	8008f96 <d_type+0x172>
 800985e:	785a      	ldrb	r2, [r3, #1]
 8009860:	2a69      	cmp	r2, #105	; 0x69
 8009862:	d182      	bne.n	800976a <d_type+0x946>
 8009864:	3302      	adds	r3, #2
 8009866:	60e3      	str	r3, [r4, #12]
 8009868:	4620      	mov	r0, r4
 800986a:	2145      	movs	r1, #69	; 0x45
 800986c:	f7fd fd94 	bl	8007398 <d_exprlist>
 8009870:	e71e      	b.n	80096b0 <d_type+0x88c>
 8009872:	3301      	adds	r3, #1
 8009874:	60e3      	str	r3, [r4, #12]
 8009876:	2000      	movs	r0, #0
 8009878:	e71a      	b.n	80096b0 <d_type+0x88c>
 800987a:	4620      	mov	r0, r4
 800987c:	f000 ff1c 	bl	800a6b8 <d_expression_1>
 8009880:	4606      	mov	r6, r0
 8009882:	4620      	mov	r0, r4
 8009884:	f000 ff18 	bl	800a6b8 <d_expression_1>
 8009888:	4680      	mov	r8, r0
 800988a:	4620      	mov	r0, r4
 800988c:	f000 ff14 	bl	800a6b8 <d_expression_1>
 8009890:	e70e      	b.n	80096b0 <d_type+0x88c>
 8009892:	4620      	mov	r0, r4
 8009894:	f000 ff10 	bl	800a6b8 <d_expression_1>
 8009898:	4606      	mov	r6, r0
 800989a:	e74c      	b.n	8009736 <d_type+0x912>
 800989c:	4620      	mov	r0, r4
 800989e:	2145      	movs	r1, #69	; 0x45
 80098a0:	f7fd fd7a 	bl	8007398 <d_exprlist>
 80098a4:	4606      	mov	r6, r0
 80098a6:	e746      	b.n	8009736 <d_type+0x912>
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 80098ae:	2a01      	cmp	r2, #1
 80098b0:	d903      	bls.n	80098ba <d_type+0xa96>
 80098b2:	3b72      	subs	r3, #114	; 0x72
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	f63f af15 	bhi.w	80096e4 <d_type+0x8c0>
 80098ba:	4620      	mov	r0, r4
 80098bc:	f7ff fab2 	bl	8008e24 <d_type>
 80098c0:	4680      	mov	r8, r0
 80098c2:	e713      	b.n	80096ec <d_type+0x8c8>
 80098c4:	0800ea04 	.word	0x0800ea04
 80098c8:	0800e6f8 	.word	0x0800e6f8
 80098cc:	0800e6f0 	.word	0x0800e6f0
 80098d0:	0800e810 	.word	0x0800e810
 80098d4:	0800e814 	.word	0x0800e814

080098d8 <d_parmlist>:
 80098d8:	b530      	push	{r4, r5, lr}
 80098da:	68c2      	ldr	r2, [r0, #12]
 80098dc:	b083      	sub	sp, #12
 80098de:	2300      	movs	r3, #0
 80098e0:	9301      	str	r3, [sp, #4]
 80098e2:	7813      	ldrb	r3, [r2, #0]
 80098e4:	b343      	cbz	r3, 8009938 <d_parmlist+0x60>
 80098e6:	2b45      	cmp	r3, #69	; 0x45
 80098e8:	d026      	beq.n	8009938 <d_parmlist+0x60>
 80098ea:	2b2e      	cmp	r3, #46	; 0x2e
 80098ec:	d024      	beq.n	8009938 <d_parmlist+0x60>
 80098ee:	4604      	mov	r4, r0
 80098f0:	ad01      	add	r5, sp, #4
 80098f2:	e015      	b.n	8009920 <d_parmlist+0x48>
 80098f4:	2b4f      	cmp	r3, #79	; 0x4f
 80098f6:	d016      	beq.n	8009926 <d_parmlist+0x4e>
 80098f8:	f7ff fa94 	bl	8008e24 <d_type>
 80098fc:	212e      	movs	r1, #46	; 0x2e
 80098fe:	4602      	mov	r2, r0
 8009900:	2300      	movs	r3, #0
 8009902:	b1c8      	cbz	r0, 8009938 <d_parmlist+0x60>
 8009904:	4620      	mov	r0, r4
 8009906:	f7fa fbc5 	bl	8004094 <d_make_comp>
 800990a:	6028      	str	r0, [r5, #0]
 800990c:	b1a0      	cbz	r0, 8009938 <d_parmlist+0x60>
 800990e:	68e2      	ldr	r2, [r4, #12]
 8009910:	7813      	ldrb	r3, [r2, #0]
 8009912:	f100 0508 	add.w	r5, r0, #8
 8009916:	b14b      	cbz	r3, 800992c <d_parmlist+0x54>
 8009918:	2b45      	cmp	r3, #69	; 0x45
 800991a:	d007      	beq.n	800992c <d_parmlist+0x54>
 800991c:	2b2e      	cmp	r3, #46	; 0x2e
 800991e:	d005      	beq.n	800992c <d_parmlist+0x54>
 8009920:	2b52      	cmp	r3, #82	; 0x52
 8009922:	4620      	mov	r0, r4
 8009924:	d1e6      	bne.n	80098f4 <d_parmlist+0x1c>
 8009926:	7853      	ldrb	r3, [r2, #1]
 8009928:	2b45      	cmp	r3, #69	; 0x45
 800992a:	d1e5      	bne.n	80098f8 <d_parmlist+0x20>
 800992c:	9801      	ldr	r0, [sp, #4]
 800992e:	b118      	cbz	r0, 8009938 <d_parmlist+0x60>
 8009930:	6883      	ldr	r3, [r0, #8]
 8009932:	b123      	cbz	r3, 800993e <d_parmlist+0x66>
 8009934:	b003      	add	sp, #12
 8009936:	bd30      	pop	{r4, r5, pc}
 8009938:	2000      	movs	r0, #0
 800993a:	b003      	add	sp, #12
 800993c:	bd30      	pop	{r4, r5, pc}
 800993e:	6842      	ldr	r2, [r0, #4]
 8009940:	7811      	ldrb	r1, [r2, #0]
 8009942:	2927      	cmp	r1, #39	; 0x27
 8009944:	d1f6      	bne.n	8009934 <d_parmlist+0x5c>
 8009946:	6852      	ldr	r2, [r2, #4]
 8009948:	7c11      	ldrb	r1, [r2, #16]
 800994a:	2909      	cmp	r1, #9
 800994c:	d1f2      	bne.n	8009934 <d_parmlist+0x5c>
 800994e:	6851      	ldr	r1, [r2, #4]
 8009950:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009952:	1a52      	subs	r2, r2, r1
 8009954:	6322      	str	r2, [r4, #48]	; 0x30
 8009956:	6043      	str	r3, [r0, #4]
 8009958:	e7ec      	b.n	8009934 <d_parmlist+0x5c>
 800995a:	bf00      	nop

0800995c <d_bare_function_type>:
 800995c:	b570      	push	{r4, r5, r6, lr}
 800995e:	68c3      	ldr	r3, [r0, #12]
 8009960:	781a      	ldrb	r2, [r3, #0]
 8009962:	2a4a      	cmp	r2, #74	; 0x4a
 8009964:	4604      	mov	r4, r0
 8009966:	d00d      	beq.n	8009984 <d_bare_function_type+0x28>
 8009968:	b971      	cbnz	r1, 8009988 <d_bare_function_type+0x2c>
 800996a:	460d      	mov	r5, r1
 800996c:	4620      	mov	r0, r4
 800996e:	f7ff ffb3 	bl	80098d8 <d_parmlist>
 8009972:	4603      	mov	r3, r0
 8009974:	b170      	cbz	r0, 8009994 <d_bare_function_type+0x38>
 8009976:	4620      	mov	r0, r4
 8009978:	462a      	mov	r2, r5
 800997a:	2129      	movs	r1, #41	; 0x29
 800997c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009980:	f7fa bb88 	b.w	8004094 <d_make_comp>
 8009984:	3301      	adds	r3, #1
 8009986:	60c3      	str	r3, [r0, #12]
 8009988:	4620      	mov	r0, r4
 800998a:	f7ff fa4b 	bl	8008e24 <d_type>
 800998e:	4605      	mov	r5, r0
 8009990:	2800      	cmp	r0, #0
 8009992:	d1eb      	bne.n	800996c <d_bare_function_type+0x10>
 8009994:	2000      	movs	r0, #0
 8009996:	bd70      	pop	{r4, r5, r6, pc}

08009998 <d_function_type>:
 8009998:	68c3      	ldr	r3, [r0, #12]
 800999a:	781a      	ldrb	r2, [r3, #0]
 800999c:	2a46      	cmp	r2, #70	; 0x46
 800999e:	d001      	beq.n	80099a4 <d_function_type+0xc>
 80099a0:	2000      	movs	r0, #0
 80099a2:	4770      	bx	lr
 80099a4:	b510      	push	{r4, lr}
 80099a6:	1c5a      	adds	r2, r3, #1
 80099a8:	60c2      	str	r2, [r0, #12]
 80099aa:	785a      	ldrb	r2, [r3, #1]
 80099ac:	2a59      	cmp	r2, #89	; 0x59
 80099ae:	bf04      	itt	eq
 80099b0:	3302      	addeq	r3, #2
 80099b2:	60c3      	streq	r3, [r0, #12]
 80099b4:	2101      	movs	r1, #1
 80099b6:	4604      	mov	r4, r0
 80099b8:	f7ff ffd0 	bl	800995c <d_bare_function_type>
 80099bc:	4601      	mov	r1, r0
 80099be:	4620      	mov	r0, r4
 80099c0:	f7fa fc26 	bl	8004210 <d_ref_qualifier>
 80099c4:	68e3      	ldr	r3, [r4, #12]
 80099c6:	781a      	ldrb	r2, [r3, #0]
 80099c8:	2a45      	cmp	r2, #69	; 0x45
 80099ca:	d001      	beq.n	80099d0 <d_function_type+0x38>
 80099cc:	2000      	movs	r0, #0
 80099ce:	bd10      	pop	{r4, pc}
 80099d0:	3301      	adds	r3, #1
 80099d2:	60e3      	str	r3, [r4, #12]
 80099d4:	bd10      	pop	{r4, pc}
 80099d6:	bf00      	nop

080099d8 <d_operator_name>:
 80099d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099dc:	68c3      	ldr	r3, [r0, #12]
 80099de:	781a      	ldrb	r2, [r3, #0]
 80099e0:	4684      	mov	ip, r0
 80099e2:	b312      	cbz	r2, 8009a2a <d_operator_name+0x52>
 80099e4:	1c5a      	adds	r2, r3, #1
 80099e6:	60c2      	str	r2, [r0, #12]
 80099e8:	785a      	ldrb	r2, [r3, #1]
 80099ea:	781e      	ldrb	r6, [r3, #0]
 80099ec:	bb02      	cbnz	r2, 8009a30 <d_operator_name+0x58>
 80099ee:	4696      	mov	lr, r2
 80099f0:	4d39      	ldr	r5, [pc, #228]	; (8009ad8 <d_operator_name+0x100>)
 80099f2:	203d      	movs	r0, #61	; 0x3d
 80099f4:	2200      	movs	r2, #0
 80099f6:	1a83      	subs	r3, r0, r2
 80099f8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80099fc:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8009a00:	0119      	lsls	r1, r3, #4
 8009a02:	186f      	adds	r7, r5, r1
 8009a04:	586c      	ldr	r4, [r5, r1]
 8009a06:	7821      	ldrb	r1, [r4, #0]
 8009a08:	428e      	cmp	r6, r1
 8009a0a:	d007      	beq.n	8009a1c <d_operator_name+0x44>
 8009a0c:	42b1      	cmp	r1, r6
 8009a0e:	d90a      	bls.n	8009a26 <d_operator_name+0x4e>
 8009a10:	4618      	mov	r0, r3
 8009a12:	4282      	cmp	r2, r0
 8009a14:	d1ef      	bne.n	80099f6 <d_operator_name+0x1e>
 8009a16:	2000      	movs	r0, #0
 8009a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a1c:	7861      	ldrb	r1, [r4, #1]
 8009a1e:	458e      	cmp	lr, r1
 8009a20:	d040      	beq.n	8009aa4 <d_operator_name+0xcc>
 8009a22:	4571      	cmp	r1, lr
 8009a24:	d8f4      	bhi.n	8009a10 <d_operator_name+0x38>
 8009a26:	1c5a      	adds	r2, r3, #1
 8009a28:	e7f3      	b.n	8009a12 <d_operator_name+0x3a>
 8009a2a:	4696      	mov	lr, r2
 8009a2c:	4616      	mov	r6, r2
 8009a2e:	e7df      	b.n	80099f0 <d_operator_name+0x18>
 8009a30:	1c9a      	adds	r2, r3, #2
 8009a32:	60c2      	str	r2, [r0, #12]
 8009a34:	2e76      	cmp	r6, #118	; 0x76
 8009a36:	4604      	mov	r4, r0
 8009a38:	f893 e001 	ldrb.w	lr, [r3, #1]
 8009a3c:	d11c      	bne.n	8009a78 <d_operator_name+0xa0>
 8009a3e:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
 8009a42:	b2eb      	uxtb	r3, r5
 8009a44:	2b09      	cmp	r3, #9
 8009a46:	d8d3      	bhi.n	80099f0 <d_operator_name+0x18>
 8009a48:	f7fa fda4 	bl	8004594 <d_source_name>
 8009a4c:	6963      	ldr	r3, [r4, #20]
 8009a4e:	69a1      	ldr	r1, [r4, #24]
 8009a50:	428b      	cmp	r3, r1
 8009a52:	4602      	mov	r2, r0
 8009a54:	dadf      	bge.n	8009a16 <d_operator_name+0x3e>
 8009a56:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8009a5a:	6920      	ldr	r0, [r4, #16]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	0089      	lsls	r1, r1, #2
 8009a60:	6163      	str	r3, [r4, #20]
 8009a62:	1843      	adds	r3, r0, r1
 8009a64:	d0d7      	beq.n	8009a16 <d_operator_name+0x3e>
 8009a66:	2a00      	cmp	r2, #0
 8009a68:	d0d5      	beq.n	8009a16 <d_operator_name+0x3e>
 8009a6a:	2432      	movs	r4, #50	; 0x32
 8009a6c:	5444      	strb	r4, [r0, r1]
 8009a6e:	605d      	str	r5, [r3, #4]
 8009a70:	609a      	str	r2, [r3, #8]
 8009a72:	4618      	mov	r0, r3
 8009a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a78:	2e63      	cmp	r6, #99	; 0x63
 8009a7a:	d1b9      	bne.n	80099f0 <d_operator_name+0x18>
 8009a7c:	f1be 0f76 	cmp.w	lr, #118	; 0x76
 8009a80:	d1b6      	bne.n	80099f0 <d_operator_name+0x18>
 8009a82:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009a84:	fab3 f383 	clz	r3, r3
 8009a88:	095b      	lsrs	r3, r3, #5
 8009a8a:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8009a8c:	6383      	str	r3, [r0, #56]	; 0x38
 8009a8e:	f7ff f9c9 	bl	8008e24 <d_type>
 8009a92:	63a5      	str	r5, [r4, #56]	; 0x38
 8009a94:	4602      	mov	r2, r0
 8009a96:	2133      	movs	r1, #51	; 0x33
 8009a98:	4620      	mov	r0, r4
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa0:	f7fa baf8 	b.w	8004094 <d_make_comp>
 8009aa4:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8009aa8:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8009aac:	4293      	cmp	r3, r2
 8009aae:	dab2      	bge.n	8009a16 <d_operator_name+0x3e>
 8009ab0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8009ab4:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8009ab8:	3301      	adds	r3, #1
 8009aba:	0092      	lsls	r2, r2, #2
 8009abc:	f8cc 3014 	str.w	r3, [ip, #20]
 8009ac0:	188b      	adds	r3, r1, r2
 8009ac2:	d005      	beq.n	8009ad0 <d_operator_name+0xf8>
 8009ac4:	2031      	movs	r0, #49	; 0x31
 8009ac6:	5488      	strb	r0, [r1, r2]
 8009ac8:	605f      	str	r7, [r3, #4]
 8009aca:	4618      	mov	r0, r3
 8009acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ad6:	bf00      	nop
 8009ad8:	0800e138 	.word	0x0800e138

08009adc <d_unqualified_name>:
 8009adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ade:	68c2      	ldr	r2, [r0, #12]
 8009ae0:	7813      	ldrb	r3, [r2, #0]
 8009ae2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009ae6:	2909      	cmp	r1, #9
 8009ae8:	4604      	mov	r4, r0
 8009aea:	d92e      	bls.n	8009b4a <d_unqualified_name+0x6e>
 8009aec:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8009af0:	2919      	cmp	r1, #25
 8009af2:	d933      	bls.n	8009b5c <d_unqualified_name+0x80>
 8009af4:	f1a3 0143 	sub.w	r1, r3, #67	; 0x43
 8009af8:	2901      	cmp	r1, #1
 8009afa:	d971      	bls.n	8009be0 <d_unqualified_name+0x104>
 8009afc:	2b4c      	cmp	r3, #76	; 0x4c
 8009afe:	f000 808d 	beq.w	8009c1c <d_unqualified_name+0x140>
 8009b02:	2b55      	cmp	r3, #85	; 0x55
 8009b04:	f040 8088 	bne.w	8009c18 <d_unqualified_name+0x13c>
 8009b08:	7853      	ldrb	r3, [r2, #1]
 8009b0a:	2b6c      	cmp	r3, #108	; 0x6c
 8009b0c:	d030      	beq.n	8009b70 <d_unqualified_name+0x94>
 8009b0e:	2b74      	cmp	r3, #116	; 0x74
 8009b10:	f040 8082 	bne.w	8009c18 <d_unqualified_name+0x13c>
 8009b14:	1c53      	adds	r3, r2, #1
 8009b16:	60c3      	str	r3, [r0, #12]
 8009b18:	7851      	ldrb	r1, [r2, #1]
 8009b1a:	2974      	cmp	r1, #116	; 0x74
 8009b1c:	f000 80c6 	beq.w	8009cac <d_unqualified_name+0x1d0>
 8009b20:	2942      	cmp	r1, #66	; 0x42
 8009b22:	f04f 0500 	mov.w	r5, #0
 8009b26:	d117      	bne.n	8009b58 <d_unqualified_name+0x7c>
 8009b28:	3301      	adds	r3, #1
 8009b2a:	60e3      	str	r3, [r4, #12]
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f7fa fd31 	bl	8004594 <d_source_name>
 8009b32:	462a      	mov	r2, r5
 8009b34:	4603      	mov	r3, r0
 8009b36:	214a      	movs	r1, #74	; 0x4a
 8009b38:	4620      	mov	r0, r4
 8009b3a:	f7fa faab 	bl	8004094 <d_make_comp>
 8009b3e:	68e3      	ldr	r3, [r4, #12]
 8009b40:	7819      	ldrb	r1, [r3, #0]
 8009b42:	2942      	cmp	r1, #66	; 0x42
 8009b44:	4605      	mov	r5, r0
 8009b46:	d0ef      	beq.n	8009b28 <d_unqualified_name+0x4c>
 8009b48:	e006      	b.n	8009b58 <d_unqualified_name+0x7c>
 8009b4a:	f7fa fd23 	bl	8004594 <d_source_name>
 8009b4e:	68e3      	ldr	r3, [r4, #12]
 8009b50:	7819      	ldrb	r1, [r3, #0]
 8009b52:	4605      	mov	r5, r0
 8009b54:	2942      	cmp	r1, #66	; 0x42
 8009b56:	d0e7      	beq.n	8009b28 <d_unqualified_name+0x4c>
 8009b58:	4628      	mov	r0, r5
 8009b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b5c:	f7ff ff3c 	bl	80099d8 <d_operator_name>
 8009b60:	4605      	mov	r5, r0
 8009b62:	b110      	cbz	r0, 8009b6a <d_unqualified_name+0x8e>
 8009b64:	7803      	ldrb	r3, [r0, #0]
 8009b66:	2b31      	cmp	r3, #49	; 0x31
 8009b68:	d065      	beq.n	8009c36 <d_unqualified_name+0x15a>
 8009b6a:	68e3      	ldr	r3, [r4, #12]
 8009b6c:	7819      	ldrb	r1, [r3, #0]
 8009b6e:	e7f1      	b.n	8009b54 <d_unqualified_name+0x78>
 8009b70:	1c53      	adds	r3, r2, #1
 8009b72:	60c3      	str	r3, [r0, #12]
 8009b74:	7851      	ldrb	r1, [r2, #1]
 8009b76:	296c      	cmp	r1, #108	; 0x6c
 8009b78:	d1d2      	bne.n	8009b20 <d_unqualified_name+0x44>
 8009b7a:	3202      	adds	r2, #2
 8009b7c:	60c2      	str	r2, [r0, #12]
 8009b7e:	f7ff feab 	bl	80098d8 <d_parmlist>
 8009b82:	68e3      	ldr	r3, [r4, #12]
 8009b84:	4606      	mov	r6, r0
 8009b86:	2800      	cmp	r0, #0
 8009b88:	f000 80e2 	beq.w	8009d50 <d_unqualified_name+0x274>
 8009b8c:	7819      	ldrb	r1, [r3, #0]
 8009b8e:	2945      	cmp	r1, #69	; 0x45
 8009b90:	d1c6      	bne.n	8009b20 <d_unqualified_name+0x44>
 8009b92:	3301      	adds	r3, #1
 8009b94:	60e3      	str	r3, [r4, #12]
 8009b96:	4620      	mov	r0, r4
 8009b98:	f7fa fcb2 	bl	8004500 <d_compact_number>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	f2c0 809f 	blt.w	8009ce0 <d_unqualified_name+0x204>
 8009ba2:	6963      	ldr	r3, [r4, #20]
 8009ba4:	69a2      	ldr	r2, [r4, #24]
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	f280 809a 	bge.w	8009ce0 <d_unqualified_name+0x204>
 8009bac:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8009bb0:	6921      	ldr	r1, [r4, #16]
 8009bb2:	0092      	lsls	r2, r2, #2
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	188d      	adds	r5, r1, r2
 8009bb8:	6163      	str	r3, [r4, #20]
 8009bba:	f000 8091 	beq.w	8009ce0 <d_unqualified_name+0x204>
 8009bbe:	2344      	movs	r3, #68	; 0x44
 8009bc0:	548b      	strb	r3, [r1, r2]
 8009bc2:	606e      	str	r6, [r5, #4]
 8009bc4:	60a8      	str	r0, [r5, #8]
 8009bc6:	6a23      	ldr	r3, [r4, #32]
 8009bc8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	f280 8088 	bge.w	8009ce0 <d_unqualified_name+0x204>
 8009bd0:	69e2      	ldr	r2, [r4, #28]
 8009bd2:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8009bd6:	1c5a      	adds	r2, r3, #1
 8009bd8:	68e3      	ldr	r3, [r4, #12]
 8009bda:	6222      	str	r2, [r4, #32]
 8009bdc:	7819      	ldrb	r1, [r3, #0]
 8009bde:	e7b9      	b.n	8009b54 <d_unqualified_name+0x78>
 8009be0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8009be2:	b1a8      	cbz	r0, 8009c10 <d_unqualified_name+0x134>
 8009be4:	7801      	ldrb	r1, [r0, #0]
 8009be6:	b989      	cbnz	r1, 8009c0c <d_unqualified_name+0x130>
 8009be8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009bea:	6883      	ldr	r3, [r0, #8]
 8009bec:	440b      	add	r3, r1
 8009bee:	6323      	str	r3, [r4, #48]	; 0x30
 8009bf0:	7811      	ldrb	r1, [r2, #0]
 8009bf2:	2943      	cmp	r1, #67	; 0x43
 8009bf4:	d07e      	beq.n	8009cf4 <d_unqualified_name+0x218>
 8009bf6:	2944      	cmp	r1, #68	; 0x44
 8009bf8:	d179      	bne.n	8009cee <d_unqualified_name+0x212>
 8009bfa:	7853      	ldrb	r3, [r2, #1]
 8009bfc:	3b30      	subs	r3, #48	; 0x30
 8009bfe:	2b05      	cmp	r3, #5
 8009c00:	d80a      	bhi.n	8009c18 <d_unqualified_name+0x13c>
 8009c02:	e8df f003 	tbb	[pc, r3]
 8009c06:	472f      	.short	0x472f
 8009c08:	4a4d0950 	.word	0x4a4d0950
 8009c0c:	2918      	cmp	r1, #24
 8009c0e:	d0eb      	beq.n	8009be8 <d_unqualified_name+0x10c>
 8009c10:	2b43      	cmp	r3, #67	; 0x43
 8009c12:	d06f      	beq.n	8009cf4 <d_unqualified_name+0x218>
 8009c14:	2b44      	cmp	r3, #68	; 0x44
 8009c16:	d0f0      	beq.n	8009bfa <d_unqualified_name+0x11e>
 8009c18:	2000      	movs	r0, #0
 8009c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c1c:	3201      	adds	r2, #1
 8009c1e:	60c2      	str	r2, [r0, #12]
 8009c20:	f7fa fcb8 	bl	8004594 <d_source_name>
 8009c24:	4605      	mov	r5, r0
 8009c26:	2800      	cmp	r0, #0
 8009c28:	d0f6      	beq.n	8009c18 <d_unqualified_name+0x13c>
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f7fa fca2 	bl	8004574 <d_discriminator>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d19a      	bne.n	8009b6a <d_unqualified_name+0x8e>
 8009c34:	e7f0      	b.n	8009c18 <d_unqualified_name+0x13c>
 8009c36:	6842      	ldr	r2, [r0, #4]
 8009c38:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8009c3a:	6893      	ldr	r3, [r2, #8]
 8009c3c:	6810      	ldr	r0, [r2, #0]
 8009c3e:	4946      	ldr	r1, [pc, #280]	; (8009d58 <d_unqualified_name+0x27c>)
 8009c40:	4433      	add	r3, r6
 8009c42:	3307      	adds	r3, #7
 8009c44:	6323      	str	r3, [r4, #48]	; 0x30
 8009c46:	f003 f86c 	bl	800cd22 <strcmp>
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	d18d      	bne.n	8009b6a <d_unqualified_name+0x8e>
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f7fa fca0 	bl	8004594 <d_source_name>
 8009c54:	462a      	mov	r2, r5
 8009c56:	4603      	mov	r3, r0
 8009c58:	2135      	movs	r1, #53	; 0x35
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f7fa fa1a 	bl	8004094 <d_make_comp>
 8009c60:	4605      	mov	r5, r0
 8009c62:	e782      	b.n	8009b6a <d_unqualified_name+0x8e>
 8009c64:	f04f 0e01 	mov.w	lr, #1
 8009c68:	6961      	ldr	r1, [r4, #20]
 8009c6a:	69a5      	ldr	r5, [r4, #24]
 8009c6c:	1c93      	adds	r3, r2, #2
 8009c6e:	42a9      	cmp	r1, r5
 8009c70:	60e3      	str	r3, [r4, #12]
 8009c72:	da39      	bge.n	8009ce8 <d_unqualified_name+0x20c>
 8009c74:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8009c78:	6927      	ldr	r7, [r4, #16]
 8009c7a:	00b6      	lsls	r6, r6, #2
 8009c7c:	3101      	adds	r1, #1
 8009c7e:	19bd      	adds	r5, r7, r6
 8009c80:	6161      	str	r1, [r4, #20]
 8009c82:	d031      	beq.n	8009ce8 <d_unqualified_name+0x20c>
 8009c84:	b380      	cbz	r0, 8009ce8 <d_unqualified_name+0x20c>
 8009c86:	2108      	movs	r1, #8
 8009c88:	55b9      	strb	r1, [r7, r6]
 8009c8a:	f885 e004 	strb.w	lr, [r5, #4]
 8009c8e:	60a8      	str	r0, [r5, #8]
 8009c90:	7891      	ldrb	r1, [r2, #2]
 8009c92:	e75f      	b.n	8009b54 <d_unqualified_name+0x78>
 8009c94:	f04f 0e02 	mov.w	lr, #2
 8009c98:	e7e6      	b.n	8009c68 <d_unqualified_name+0x18c>
 8009c9a:	f04f 0e05 	mov.w	lr, #5
 8009c9e:	e7e3      	b.n	8009c68 <d_unqualified_name+0x18c>
 8009ca0:	f04f 0e04 	mov.w	lr, #4
 8009ca4:	e7e0      	b.n	8009c68 <d_unqualified_name+0x18c>
 8009ca6:	f04f 0e03 	mov.w	lr, #3
 8009caa:	e7dd      	b.n	8009c68 <d_unqualified_name+0x18c>
 8009cac:	3202      	adds	r2, #2
 8009cae:	60c2      	str	r2, [r0, #12]
 8009cb0:	f7fa fc26 	bl	8004500 <d_compact_number>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	db13      	blt.n	8009ce0 <d_unqualified_name+0x204>
 8009cb8:	6963      	ldr	r3, [r4, #20]
 8009cba:	69a2      	ldr	r2, [r4, #24]
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	da0f      	bge.n	8009ce0 <d_unqualified_name+0x204>
 8009cc0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8009cc4:	6921      	ldr	r1, [r4, #16]
 8009cc6:	0092      	lsls	r2, r2, #2
 8009cc8:	3301      	adds	r3, #1
 8009cca:	188d      	adds	r5, r1, r2
 8009ccc:	6163      	str	r3, [r4, #20]
 8009cce:	d007      	beq.n	8009ce0 <d_unqualified_name+0x204>
 8009cd0:	2346      	movs	r3, #70	; 0x46
 8009cd2:	548b      	strb	r3, [r1, r2]
 8009cd4:	6068      	str	r0, [r5, #4]
 8009cd6:	6a23      	ldr	r3, [r4, #32]
 8009cd8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	f6ff af78 	blt.w	8009bd0 <d_unqualified_name+0xf4>
 8009ce0:	68e3      	ldr	r3, [r4, #12]
 8009ce2:	2500      	movs	r5, #0
 8009ce4:	7819      	ldrb	r1, [r3, #0]
 8009ce6:	e735      	b.n	8009b54 <d_unqualified_name+0x78>
 8009ce8:	7891      	ldrb	r1, [r2, #2]
 8009cea:	2500      	movs	r5, #0
 8009cec:	e732      	b.n	8009b54 <d_unqualified_name+0x78>
 8009cee:	4613      	mov	r3, r2
 8009cf0:	2500      	movs	r5, #0
 8009cf2:	e72f      	b.n	8009b54 <d_unqualified_name+0x78>
 8009cf4:	7853      	ldrb	r3, [r2, #1]
 8009cf6:	3b31      	subs	r3, #49	; 0x31
 8009cf8:	2b04      	cmp	r3, #4
 8009cfa:	d88d      	bhi.n	8009c18 <d_unqualified_name+0x13c>
 8009cfc:	e8df f003 	tbb	[pc, r3]
 8009d00:	1f222503 	.word	0x1f222503
 8009d04:	1c          	.byte	0x1c
 8009d05:	00          	.byte	0x00
 8009d06:	f04f 0e01 	mov.w	lr, #1
 8009d0a:	6961      	ldr	r1, [r4, #20]
 8009d0c:	69a5      	ldr	r5, [r4, #24]
 8009d0e:	1c93      	adds	r3, r2, #2
 8009d10:	42a9      	cmp	r1, r5
 8009d12:	60e3      	str	r3, [r4, #12]
 8009d14:	dae8      	bge.n	8009ce8 <d_unqualified_name+0x20c>
 8009d16:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8009d1a:	6927      	ldr	r7, [r4, #16]
 8009d1c:	00b6      	lsls	r6, r6, #2
 8009d1e:	3101      	adds	r1, #1
 8009d20:	19bd      	adds	r5, r7, r6
 8009d22:	6161      	str	r1, [r4, #20]
 8009d24:	d0e0      	beq.n	8009ce8 <d_unqualified_name+0x20c>
 8009d26:	2800      	cmp	r0, #0
 8009d28:	d0de      	beq.n	8009ce8 <d_unqualified_name+0x20c>
 8009d2a:	2107      	movs	r1, #7
 8009d2c:	55b9      	strb	r1, [r7, r6]
 8009d2e:	f885 e004 	strb.w	lr, [r5, #4]
 8009d32:	60a8      	str	r0, [r5, #8]
 8009d34:	7891      	ldrb	r1, [r2, #2]
 8009d36:	e70d      	b.n	8009b54 <d_unqualified_name+0x78>
 8009d38:	f04f 0e05 	mov.w	lr, #5
 8009d3c:	e7e5      	b.n	8009d0a <d_unqualified_name+0x22e>
 8009d3e:	f04f 0e04 	mov.w	lr, #4
 8009d42:	e7e2      	b.n	8009d0a <d_unqualified_name+0x22e>
 8009d44:	f04f 0e03 	mov.w	lr, #3
 8009d48:	e7df      	b.n	8009d0a <d_unqualified_name+0x22e>
 8009d4a:	f04f 0e02 	mov.w	lr, #2
 8009d4e:	e7dc      	b.n	8009d0a <d_unqualified_name+0x22e>
 8009d50:	4605      	mov	r5, r0
 8009d52:	7819      	ldrb	r1, [r3, #0]
 8009d54:	e6fe      	b.n	8009b54 <d_unqualified_name+0x78>
 8009d56:	bf00      	nop
 8009d58:	0800e820 	.word	0x0800e820

08009d5c <d_name>:
 8009d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d60:	68c2      	ldr	r2, [r0, #12]
 8009d62:	7813      	ldrb	r3, [r2, #0]
 8009d64:	3b4e      	subs	r3, #78	; 0x4e
 8009d66:	b084      	sub	sp, #16
 8009d68:	4605      	mov	r5, r0
 8009d6a:	2b0c      	cmp	r3, #12
 8009d6c:	d86c      	bhi.n	8009e48 <d_name+0xec>
 8009d6e:	e8df f003 	tbb	[pc, r3]
 8009d72:	6b1b      	.short	0x6b1b
 8009d74:	5c6b6b6b 	.word	0x5c6b6b6b
 8009d78:	6b6b166b 	.word	0x6b6b166b
 8009d7c:	6b6b      	.short	0x6b6b
 8009d7e:	07          	.byte	0x07
 8009d7f:	00          	.byte	0x00
 8009d80:	3201      	adds	r2, #1
 8009d82:	60c2      	str	r2, [r0, #12]
 8009d84:	2100      	movs	r1, #0
 8009d86:	f000 f969 	bl	800a05c <d_encoding>
 8009d8a:	68eb      	ldr	r3, [r5, #12]
 8009d8c:	781a      	ldrb	r2, [r3, #0]
 8009d8e:	2a45      	cmp	r2, #69	; 0x45
 8009d90:	4606      	mov	r6, r0
 8009d92:	f000 80e7 	beq.w	8009f64 <d_name+0x208>
 8009d96:	2000      	movs	r0, #0
 8009d98:	b004      	add	sp, #16
 8009d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d9e:	f7ff fe9d 	bl	8009adc <d_unqualified_name>
 8009da2:	b004      	add	sp, #16
 8009da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009da8:	3201      	adds	r2, #1
 8009daa:	60c2      	str	r2, [r0, #12]
 8009dac:	a903      	add	r1, sp, #12
 8009dae:	2201      	movs	r2, #1
 8009db0:	f7fa f9d6 	bl	8004160 <d_cv_qualifiers>
 8009db4:	4607      	mov	r7, r0
 8009db6:	2800      	cmp	r0, #0
 8009db8:	d0ed      	beq.n	8009d96 <d_name+0x3a>
 8009dba:	4628      	mov	r0, r5
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	f7fa fa27 	bl	8004210 <d_ref_qualifier>
 8009dc2:	68ea      	ldr	r2, [r5, #12]
 8009dc4:	7814      	ldrb	r4, [r2, #0]
 8009dc6:	4680      	mov	r8, r0
 8009dc8:	2600      	movs	r6, #0
 8009dca:	2c00      	cmp	r4, #0
 8009dcc:	f000 80b4 	beq.w	8009f38 <d_name+0x1dc>
 8009dd0:	2c44      	cmp	r4, #68	; 0x44
 8009dd2:	f000 809b 	beq.w	8009f0c <d_name+0x1b0>
 8009dd6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	2b09      	cmp	r3, #9
 8009dde:	d976      	bls.n	8009ece <d_name+0x172>
 8009de0:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	2b19      	cmp	r3, #25
 8009de8:	d971      	bls.n	8009ece <d_name+0x172>
 8009dea:	2c43      	cmp	r4, #67	; 0x43
 8009dec:	f000 809f 	beq.w	8009f2e <d_name+0x1d2>
 8009df0:	2c55      	cmp	r4, #85	; 0x55
 8009df2:	f000 809c 	beq.w	8009f2e <d_name+0x1d2>
 8009df6:	2c4c      	cmp	r4, #76	; 0x4c
 8009df8:	f000 8099 	beq.w	8009f2e <d_name+0x1d2>
 8009dfc:	2c53      	cmp	r4, #83	; 0x53
 8009dfe:	f000 80a7 	beq.w	8009f50 <d_name+0x1f4>
 8009e02:	2c49      	cmp	r4, #73	; 0x49
 8009e04:	f000 809d 	beq.w	8009f42 <d_name+0x1e6>
 8009e08:	2c54      	cmp	r4, #84	; 0x54
 8009e0a:	f000 80c2 	beq.w	8009f92 <d_name+0x236>
 8009e0e:	2c45      	cmp	r4, #69	; 0x45
 8009e10:	f000 810a 	beq.w	800a028 <d_name+0x2cc>
 8009e14:	2c4d      	cmp	r4, #77	; 0x4d
 8009e16:	f040 808f 	bne.w	8009f38 <d_name+0x1dc>
 8009e1a:	2e00      	cmp	r6, #0
 8009e1c:	f000 808c 	beq.w	8009f38 <d_name+0x1dc>
 8009e20:	1c53      	adds	r3, r2, #1
 8009e22:	60eb      	str	r3, [r5, #12]
 8009e24:	7854      	ldrb	r4, [r2, #1]
 8009e26:	461a      	mov	r2, r3
 8009e28:	e7cf      	b.n	8009dca <d_name+0x6e>
 8009e2a:	7853      	ldrb	r3, [r2, #1]
 8009e2c:	2b74      	cmp	r3, #116	; 0x74
 8009e2e:	d01f      	beq.n	8009e70 <d_name+0x114>
 8009e30:	2100      	movs	r1, #0
 8009e32:	f7fa fa07 	bl	8004244 <d_substitution>
 8009e36:	68eb      	ldr	r3, [r5, #12]
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	2b49      	cmp	r3, #73	; 0x49
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	d03c      	beq.n	8009eba <d_name+0x15e>
 8009e40:	4620      	mov	r0, r4
 8009e42:	b004      	add	sp, #16
 8009e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e48:	f7ff fe48 	bl	8009adc <d_unqualified_name>
 8009e4c:	68eb      	ldr	r3, [r5, #12]
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	2b49      	cmp	r3, #73	; 0x49
 8009e52:	4604      	mov	r4, r0
 8009e54:	d1f4      	bne.n	8009e40 <d_name+0xe4>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	d09d      	beq.n	8009d96 <d_name+0x3a>
 8009e5a:	6a2b      	ldr	r3, [r5, #32]
 8009e5c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	da99      	bge.n	8009d96 <d_name+0x3a>
 8009e62:	69e9      	ldr	r1, [r5, #28]
 8009e64:	1c5a      	adds	r2, r3, #1
 8009e66:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	622a      	str	r2, [r5, #32]
 8009e6e:	e025      	b.n	8009ebc <d_name+0x160>
 8009e70:	3202      	adds	r2, #2
 8009e72:	4978      	ldr	r1, [pc, #480]	; (800a054 <d_name+0x2f8>)
 8009e74:	60c2      	str	r2, [r0, #12]
 8009e76:	2203      	movs	r2, #3
 8009e78:	f7fa f958 	bl	800412c <d_make_name>
 8009e7c:	4604      	mov	r4, r0
 8009e7e:	4628      	mov	r0, r5
 8009e80:	f7ff fe2c 	bl	8009adc <d_unqualified_name>
 8009e84:	4622      	mov	r2, r4
 8009e86:	4603      	mov	r3, r0
 8009e88:	2101      	movs	r1, #1
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	f7fa f902 	bl	8004094 <d_make_comp>
 8009e90:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009e92:	68ea      	ldr	r2, [r5, #12]
 8009e94:	3303      	adds	r3, #3
 8009e96:	632b      	str	r3, [r5, #48]	; 0x30
 8009e98:	7813      	ldrb	r3, [r2, #0]
 8009e9a:	2b49      	cmp	r3, #73	; 0x49
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	d1cf      	bne.n	8009e40 <d_name+0xe4>
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	f43f af78 	beq.w	8009d96 <d_name+0x3a>
 8009ea6:	6a2b      	ldr	r3, [r5, #32]
 8009ea8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	f6bf af73 	bge.w	8009d96 <d_name+0x3a>
 8009eb0:	69e9      	ldr	r1, [r5, #28]
 8009eb2:	1c5a      	adds	r2, r3, #1
 8009eb4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8009eb8:	622a      	str	r2, [r5, #32]
 8009eba:	4628      	mov	r0, r5
 8009ebc:	f7fd fcaa 	bl	8007814 <d_template_args>
 8009ec0:	4622      	mov	r2, r4
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2104      	movs	r1, #4
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	f7fa f8e4 	bl	8004094 <d_make_comp>
 8009ecc:	e769      	b.n	8009da2 <d_name+0x46>
 8009ece:	4628      	mov	r0, r5
 8009ed0:	f7ff fe04 	bl	8009adc <d_unqualified_name>
 8009ed4:	b34e      	cbz	r6, 8009f2a <d_name+0x1ce>
 8009ed6:	2101      	movs	r1, #1
 8009ed8:	4632      	mov	r2, r6
 8009eda:	4603      	mov	r3, r0
 8009edc:	4628      	mov	r0, r5
 8009ede:	f7fa f8d9 	bl	8004094 <d_make_comp>
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	2c53      	cmp	r4, #83	; 0x53
 8009ee6:	d01d      	beq.n	8009f24 <d_name+0x1c8>
 8009ee8:	68ea      	ldr	r2, [r5, #12]
 8009eea:	7814      	ldrb	r4, [r2, #0]
 8009eec:	2c45      	cmp	r4, #69	; 0x45
 8009eee:	f43f af72 	beq.w	8009dd6 <d_name+0x7a>
 8009ef2:	b30e      	cbz	r6, 8009f38 <d_name+0x1dc>
 8009ef4:	6a2b      	ldr	r3, [r5, #32]
 8009ef6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	da1d      	bge.n	8009f38 <d_name+0x1dc>
 8009efc:	69ea      	ldr	r2, [r5, #28]
 8009efe:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
 8009f02:	3301      	adds	r3, #1
 8009f04:	68ea      	ldr	r2, [r5, #12]
 8009f06:	622b      	str	r3, [r5, #32]
 8009f08:	7814      	ldrb	r4, [r2, #0]
 8009f0a:	e75e      	b.n	8009dca <d_name+0x6e>
 8009f0c:	7853      	ldrb	r3, [r2, #1]
 8009f0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009f12:	2b54      	cmp	r3, #84	; 0x54
 8009f14:	4628      	mov	r0, r5
 8009f16:	d00c      	beq.n	8009f32 <d_name+0x1d6>
 8009f18:	f7ff fde0 	bl	8009adc <d_unqualified_name>
 8009f1c:	2e00      	cmp	r6, #0
 8009f1e:	d1da      	bne.n	8009ed6 <d_name+0x17a>
 8009f20:	4606      	mov	r6, r0
 8009f22:	e7e1      	b.n	8009ee8 <d_name+0x18c>
 8009f24:	68ea      	ldr	r2, [r5, #12]
 8009f26:	7814      	ldrb	r4, [r2, #0]
 8009f28:	e74f      	b.n	8009dca <d_name+0x6e>
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	e7da      	b.n	8009ee4 <d_name+0x188>
 8009f2e:	4628      	mov	r0, r5
 8009f30:	e7f2      	b.n	8009f18 <d_name+0x1bc>
 8009f32:	f7fe ff77 	bl	8008e24 <d_type>
 8009f36:	e7f1      	b.n	8009f1c <d_name+0x1c0>
 8009f38:	2000      	movs	r0, #0
 8009f3a:	6038      	str	r0, [r7, #0]
 8009f3c:	b004      	add	sp, #16
 8009f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f42:	2e00      	cmp	r6, #0
 8009f44:	d0f8      	beq.n	8009f38 <d_name+0x1dc>
 8009f46:	4628      	mov	r0, r5
 8009f48:	f7fd fc64 	bl	8007814 <d_template_args>
 8009f4c:	2104      	movs	r1, #4
 8009f4e:	e7c3      	b.n	8009ed8 <d_name+0x17c>
 8009f50:	4628      	mov	r0, r5
 8009f52:	2101      	movs	r1, #1
 8009f54:	f7fa f976 	bl	8004244 <d_substitution>
 8009f58:	2e00      	cmp	r6, #0
 8009f5a:	d1bc      	bne.n	8009ed6 <d_name+0x17a>
 8009f5c:	68ea      	ldr	r2, [r5, #12]
 8009f5e:	4606      	mov	r6, r0
 8009f60:	7814      	ldrb	r4, [r2, #0]
 8009f62:	e732      	b.n	8009dca <d_name+0x6e>
 8009f64:	1c5a      	adds	r2, r3, #1
 8009f66:	60ea      	str	r2, [r5, #12]
 8009f68:	785a      	ldrb	r2, [r3, #1]
 8009f6a:	2a73      	cmp	r2, #115	; 0x73
 8009f6c:	d048      	beq.n	800a000 <d_name+0x2a4>
 8009f6e:	2a64      	cmp	r2, #100	; 0x64
 8009f70:	d013      	beq.n	8009f9a <d_name+0x23e>
 8009f72:	4628      	mov	r0, r5
 8009f74:	f7ff fef2 	bl	8009d5c <d_name>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	b120      	cbz	r0, 8009f86 <d_name+0x22a>
 8009f7c:	7802      	ldrb	r2, [r0, #0]
 8009f7e:	2a44      	cmp	r2, #68	; 0x44
 8009f80:	d001      	beq.n	8009f86 <d_name+0x22a>
 8009f82:	2a46      	cmp	r2, #70	; 0x46
 8009f84:	d134      	bne.n	8009ff0 <d_name+0x294>
 8009f86:	4628      	mov	r0, r5
 8009f88:	4632      	mov	r2, r6
 8009f8a:	2102      	movs	r1, #2
 8009f8c:	f7fa f882 	bl	8004094 <d_make_comp>
 8009f90:	e707      	b.n	8009da2 <d_name+0x46>
 8009f92:	4628      	mov	r0, r5
 8009f94:	f7fa facc 	bl	8004530 <d_template_param>
 8009f98:	e7c0      	b.n	8009f1c <d_name+0x1c0>
 8009f9a:	3302      	adds	r3, #2
 8009f9c:	60eb      	str	r3, [r5, #12]
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f7fa faae 	bl	8004500 <d_compact_number>
 8009fa4:	1e07      	subs	r7, r0, #0
 8009fa6:	f6ff aef6 	blt.w	8009d96 <d_name+0x3a>
 8009faa:	4628      	mov	r0, r5
 8009fac:	f7ff fed6 	bl	8009d5c <d_name>
 8009fb0:	4604      	mov	r4, r0
 8009fb2:	b120      	cbz	r0, 8009fbe <d_name+0x262>
 8009fb4:	7803      	ldrb	r3, [r0, #0]
 8009fb6:	2b44      	cmp	r3, #68	; 0x44
 8009fb8:	d001      	beq.n	8009fbe <d_name+0x262>
 8009fba:	2b46      	cmp	r3, #70	; 0x46
 8009fbc:	d112      	bne.n	8009fe4 <d_name+0x288>
 8009fbe:	696b      	ldr	r3, [r5, #20]
 8009fc0:	69aa      	ldr	r2, [r5, #24]
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	da0c      	bge.n	8009fe0 <d_name+0x284>
 8009fc6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8009fca:	6929      	ldr	r1, [r5, #16]
 8009fcc:	3301      	adds	r3, #1
 8009fce:	0092      	lsls	r2, r2, #2
 8009fd0:	616b      	str	r3, [r5, #20]
 8009fd2:	188b      	adds	r3, r1, r2
 8009fd4:	d0d7      	beq.n	8009f86 <d_name+0x22a>
 8009fd6:	2045      	movs	r0, #69	; 0x45
 8009fd8:	5488      	strb	r0, [r1, r2]
 8009fda:	609f      	str	r7, [r3, #8]
 8009fdc:	605c      	str	r4, [r3, #4]
 8009fde:	e7d2      	b.n	8009f86 <d_name+0x22a>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	e7d0      	b.n	8009f86 <d_name+0x22a>
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	f7fa fac5 	bl	8004574 <d_discriminator>
 8009fea:	2800      	cmp	r0, #0
 8009fec:	d1e7      	bne.n	8009fbe <d_name+0x262>
 8009fee:	e6d2      	b.n	8009d96 <d_name+0x3a>
 8009ff0:	9001      	str	r0, [sp, #4]
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	f7fa fabe 	bl	8004574 <d_discriminator>
 8009ff8:	9b01      	ldr	r3, [sp, #4]
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	d1c3      	bne.n	8009f86 <d_name+0x22a>
 8009ffe:	e6ca      	b.n	8009d96 <d_name+0x3a>
 800a000:	3302      	adds	r3, #2
 800a002:	60eb      	str	r3, [r5, #12]
 800a004:	4628      	mov	r0, r5
 800a006:	f7fa fab5 	bl	8004574 <d_discriminator>
 800a00a:	2800      	cmp	r0, #0
 800a00c:	f43f aec3 	beq.w	8009d96 <d_name+0x3a>
 800a010:	4628      	mov	r0, r5
 800a012:	4911      	ldr	r1, [pc, #68]	; (800a058 <d_name+0x2fc>)
 800a014:	220e      	movs	r2, #14
 800a016:	f7fa f889 	bl	800412c <d_make_name>
 800a01a:	4632      	mov	r2, r6
 800a01c:	4603      	mov	r3, r0
 800a01e:	2102      	movs	r1, #2
 800a020:	4628      	mov	r0, r5
 800a022:	f7fa f837 	bl	8004094 <d_make_comp>
 800a026:	e6bc      	b.n	8009da2 <d_name+0x46>
 800a028:	603e      	str	r6, [r7, #0]
 800a02a:	2e00      	cmp	r6, #0
 800a02c:	f43f aeb3 	beq.w	8009d96 <d_name+0x3a>
 800a030:	f1b8 0f00 	cmp.w	r8, #0
 800a034:	d004      	beq.n	800a040 <d_name+0x2e4>
 800a036:	9b03      	ldr	r3, [sp, #12]
 800a038:	f8c8 3004 	str.w	r3, [r8, #4]
 800a03c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a040:	68eb      	ldr	r3, [r5, #12]
 800a042:	781a      	ldrb	r2, [r3, #0]
 800a044:	2a45      	cmp	r2, #69	; 0x45
 800a046:	f47f aea6 	bne.w	8009d96 <d_name+0x3a>
 800a04a:	3301      	adds	r3, #1
 800a04c:	60eb      	str	r3, [r5, #12]
 800a04e:	9803      	ldr	r0, [sp, #12]
 800a050:	e6a7      	b.n	8009da2 <d_name+0x46>
 800a052:	bf00      	nop
 800a054:	0800e834 	.word	0x0800e834
 800a058:	0800e824 	.word	0x0800e824

0800a05c <d_encoding>:
 800a05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a060:	68c3      	ldr	r3, [r0, #12]
 800a062:	781a      	ldrb	r2, [r3, #0]
 800a064:	2a47      	cmp	r2, #71	; 0x47
 800a066:	4605      	mov	r5, r0
 800a068:	d03b      	beq.n	800a0e2 <d_encoding+0x86>
 800a06a:	2a54      	cmp	r2, #84	; 0x54
 800a06c:	d039      	beq.n	800a0e2 <d_encoding+0x86>
 800a06e:	460e      	mov	r6, r1
 800a070:	f7ff fe74 	bl	8009d5c <d_name>
 800a074:	4604      	mov	r4, r0
 800a076:	b388      	cbz	r0, 800a0dc <d_encoding+0x80>
 800a078:	b116      	cbz	r6, 800a080 <d_encoding+0x24>
 800a07a:	68ab      	ldr	r3, [r5, #8]
 800a07c:	07db      	lsls	r3, r3, #31
 800a07e:	d51f      	bpl.n	800a0c0 <d_encoding+0x64>
 800a080:	68eb      	ldr	r3, [r5, #12]
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	b323      	cbz	r3, 800a0d0 <d_encoding+0x74>
 800a086:	2b45      	cmp	r3, #69	; 0x45
 800a088:	d022      	beq.n	800a0d0 <d_encoding+0x74>
 800a08a:	4621      	mov	r1, r4
 800a08c:	780b      	ldrb	r3, [r1, #0]
 800a08e:	2b04      	cmp	r3, #4
 800a090:	f1a3 021c 	sub.w	r2, r3, #28
 800a094:	f000 811a 	beq.w	800a2cc <d_encoding+0x270>
 800a098:	f0c0 8116 	bcc.w	800a2c8 <d_encoding+0x26c>
 800a09c:	2a04      	cmp	r2, #4
 800a09e:	f200 8113 	bhi.w	800a2c8 <d_encoding+0x26c>
 800a0a2:	6849      	ldr	r1, [r1, #4]
 800a0a4:	2900      	cmp	r1, #0
 800a0a6:	d1f1      	bne.n	800a08c <d_encoding+0x30>
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	f7ff fc57 	bl	800995c <d_bare_function_type>
 800a0ae:	4622      	mov	r2, r4
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2103      	movs	r1, #3
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0ba:	f7f9 bfeb 	b.w	8004094 <d_make_comp>
 800a0be:	6864      	ldr	r4, [r4, #4]
 800a0c0:	7823      	ldrb	r3, [r4, #0]
 800a0c2:	f1a3 021c 	sub.w	r2, r3, #28
 800a0c6:	2a04      	cmp	r2, #4
 800a0c8:	d9f9      	bls.n	800a0be <d_encoding+0x62>
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	f000 816e 	beq.w	800a3ac <d_encoding+0x350>
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0d6:	68eb      	ldr	r3, [r5, #12]
 800a0d8:	3302      	adds	r3, #2
 800a0da:	60eb      	str	r3, [r5, #12]
 800a0dc:	2000      	movs	r0, #0
 800a0de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800a0e4:	f101 0214 	add.w	r2, r1, #20
 800a0e8:	632a      	str	r2, [r5, #48]	; 0x30
 800a0ea:	781a      	ldrb	r2, [r3, #0]
 800a0ec:	2a54      	cmp	r2, #84	; 0x54
 800a0ee:	d073      	beq.n	800a1d8 <d_encoding+0x17c>
 800a0f0:	2a47      	cmp	r2, #71	; 0x47
 800a0f2:	d1f3      	bne.n	800a0dc <d_encoding+0x80>
 800a0f4:	1c5a      	adds	r2, r3, #1
 800a0f6:	60ea      	str	r2, [r5, #12]
 800a0f8:	785a      	ldrb	r2, [r3, #1]
 800a0fa:	2a00      	cmp	r2, #0
 800a0fc:	d0ee      	beq.n	800a0dc <d_encoding+0x80>
 800a0fe:	1c9a      	adds	r2, r3, #2
 800a100:	60ea      	str	r2, [r5, #12]
 800a102:	785a      	ldrb	r2, [r3, #1]
 800a104:	3a41      	subs	r2, #65	; 0x41
 800a106:	2a31      	cmp	r2, #49	; 0x31
 800a108:	d8e8      	bhi.n	800a0dc <d_encoding+0x80>
 800a10a:	a101      	add	r1, pc, #4	; (adr r1, 800a110 <d_encoding+0xb4>)
 800a10c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a110:	0800a49d 	.word	0x0800a49d
 800a114:	0800a0dd 	.word	0x0800a0dd
 800a118:	0800a0dd 	.word	0x0800a0dd
 800a11c:	0800a0dd 	.word	0x0800a0dd
 800a120:	0800a0dd 	.word	0x0800a0dd
 800a124:	0800a0dd 	.word	0x0800a0dd
 800a128:	0800a0dd 	.word	0x0800a0dd
 800a12c:	0800a0dd 	.word	0x0800a0dd
 800a130:	0800a0dd 	.word	0x0800a0dd
 800a134:	0800a0dd 	.word	0x0800a0dd
 800a138:	0800a0dd 	.word	0x0800a0dd
 800a13c:	0800a0dd 	.word	0x0800a0dd
 800a140:	0800a0dd 	.word	0x0800a0dd
 800a144:	0800a0dd 	.word	0x0800a0dd
 800a148:	0800a0dd 	.word	0x0800a0dd
 800a14c:	0800a0dd 	.word	0x0800a0dd
 800a150:	0800a0dd 	.word	0x0800a0dd
 800a154:	0800a47f 	.word	0x0800a47f
 800a158:	0800a0dd 	.word	0x0800a0dd
 800a15c:	0800a4b5 	.word	0x0800a4b5
 800a160:	0800a0dd 	.word	0x0800a0dd
 800a164:	0800a469 	.word	0x0800a469
 800a168:	0800a0dd 	.word	0x0800a0dd
 800a16c:	0800a0dd 	.word	0x0800a0dd
 800a170:	0800a0dd 	.word	0x0800a0dd
 800a174:	0800a0dd 	.word	0x0800a0dd
 800a178:	0800a0dd 	.word	0x0800a0dd
 800a17c:	0800a0dd 	.word	0x0800a0dd
 800a180:	0800a0dd 	.word	0x0800a0dd
 800a184:	0800a0dd 	.word	0x0800a0dd
 800a188:	0800a0dd 	.word	0x0800a0dd
 800a18c:	0800a0dd 	.word	0x0800a0dd
 800a190:	0800a0dd 	.word	0x0800a0dd
 800a194:	0800a0dd 	.word	0x0800a0dd
 800a198:	0800a0dd 	.word	0x0800a0dd
 800a19c:	0800a0dd 	.word	0x0800a0dd
 800a1a0:	0800a0dd 	.word	0x0800a0dd
 800a1a4:	0800a0dd 	.word	0x0800a0dd
 800a1a8:	0800a0dd 	.word	0x0800a0dd
 800a1ac:	0800a0dd 	.word	0x0800a0dd
 800a1b0:	0800a0dd 	.word	0x0800a0dd
 800a1b4:	0800a0dd 	.word	0x0800a0dd
 800a1b8:	0800a0dd 	.word	0x0800a0dd
 800a1bc:	0800a0dd 	.word	0x0800a0dd
 800a1c0:	0800a0dd 	.word	0x0800a0dd
 800a1c4:	0800a0dd 	.word	0x0800a0dd
 800a1c8:	0800a0dd 	.word	0x0800a0dd
 800a1cc:	0800a0dd 	.word	0x0800a0dd
 800a1d0:	0800a0dd 	.word	0x0800a0dd
 800a1d4:	0800a3cf 	.word	0x0800a3cf
 800a1d8:	1c5a      	adds	r2, r3, #1
 800a1da:	60ea      	str	r2, [r5, #12]
 800a1dc:	785a      	ldrb	r2, [r3, #1]
 800a1de:	2a00      	cmp	r2, #0
 800a1e0:	f43f af7c 	beq.w	800a0dc <d_encoding+0x80>
 800a1e4:	1c9a      	adds	r2, r3, #2
 800a1e6:	60ea      	str	r2, [r5, #12]
 800a1e8:	785b      	ldrb	r3, [r3, #1]
 800a1ea:	3b43      	subs	r3, #67	; 0x43
 800a1ec:	2b33      	cmp	r3, #51	; 0x33
 800a1ee:	f63f af75 	bhi.w	800a0dc <d_encoding+0x80>
 800a1f2:	a201      	add	r2, pc, #4	; (adr r2, 800a1f8 <d_encoding+0x19c>)
 800a1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f8:	0800a533 	.word	0x0800a533
 800a1fc:	0800a0dd 	.word	0x0800a0dd
 800a200:	0800a0dd 	.word	0x0800a0dd
 800a204:	0800a51d 	.word	0x0800a51d
 800a208:	0800a0dd 	.word	0x0800a0dd
 800a20c:	0800a507 	.word	0x0800a507
 800a210:	0800a643 	.word	0x0800a643
 800a214:	0800a62d 	.word	0x0800a62d
 800a218:	0800a0dd 	.word	0x0800a0dd
 800a21c:	0800a0dd 	.word	0x0800a0dd
 800a220:	0800a0dd 	.word	0x0800a0dd
 800a224:	0800a0dd 	.word	0x0800a0dd
 800a228:	0800a0dd 	.word	0x0800a0dd
 800a22c:	0800a0dd 	.word	0x0800a0dd
 800a230:	0800a0dd 	.word	0x0800a0dd
 800a234:	0800a0dd 	.word	0x0800a0dd
 800a238:	0800a617 	.word	0x0800a617
 800a23c:	0800a5fd 	.word	0x0800a5fd
 800a240:	0800a0dd 	.word	0x0800a0dd
 800a244:	0800a5e3 	.word	0x0800a5e3
 800a248:	0800a5cd 	.word	0x0800a5cd
 800a24c:	0800a0dd 	.word	0x0800a0dd
 800a250:	0800a0dd 	.word	0x0800a0dd
 800a254:	0800a0dd 	.word	0x0800a0dd
 800a258:	0800a0dd 	.word	0x0800a0dd
 800a25c:	0800a0dd 	.word	0x0800a0dd
 800a260:	0800a0dd 	.word	0x0800a0dd
 800a264:	0800a0dd 	.word	0x0800a0dd
 800a268:	0800a0dd 	.word	0x0800a0dd
 800a26c:	0800a0dd 	.word	0x0800a0dd
 800a270:	0800a0dd 	.word	0x0800a0dd
 800a274:	0800a0dd 	.word	0x0800a0dd
 800a278:	0800a599 	.word	0x0800a599
 800a27c:	0800a0dd 	.word	0x0800a0dd
 800a280:	0800a0dd 	.word	0x0800a0dd
 800a284:	0800a0dd 	.word	0x0800a0dd
 800a288:	0800a0dd 	.word	0x0800a0dd
 800a28c:	0800a573 	.word	0x0800a573
 800a290:	0800a0dd 	.word	0x0800a0dd
 800a294:	0800a0dd 	.word	0x0800a0dd
 800a298:	0800a0dd 	.word	0x0800a0dd
 800a29c:	0800a0dd 	.word	0x0800a0dd
 800a2a0:	0800a0dd 	.word	0x0800a0dd
 800a2a4:	0800a0dd 	.word	0x0800a0dd
 800a2a8:	0800a0dd 	.word	0x0800a0dd
 800a2ac:	0800a0dd 	.word	0x0800a0dd
 800a2b0:	0800a0dd 	.word	0x0800a0dd
 800a2b4:	0800a0dd 	.word	0x0800a0dd
 800a2b8:	0800a0dd 	.word	0x0800a0dd
 800a2bc:	0800a0dd 	.word	0x0800a0dd
 800a2c0:	0800a0dd 	.word	0x0800a0dd
 800a2c4:	0800a4e1 	.word	0x0800a4e1
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	e6ed      	b.n	800a0a8 <d_encoding+0x4c>
 800a2cc:	684a      	ldr	r2, [r1, #4]
 800a2ce:	2a00      	cmp	r2, #0
 800a2d0:	d07b      	beq.n	800a3ca <d_encoding+0x36e>
 800a2d2:	7813      	ldrb	r3, [r2, #0]
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	2b32      	cmp	r3, #50	; 0x32
 800a2d8:	d877      	bhi.n	800a3ca <d_encoding+0x36e>
 800a2da:	a101      	add	r1, pc, #4	; (adr r1, 800a2e0 <d_encoding+0x284>)
 800a2dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2e0:	0800a3c5 	.word	0x0800a3c5
 800a2e4:	0800a3c5 	.word	0x0800a3c5
 800a2e8:	0800a3cb 	.word	0x0800a3cb
 800a2ec:	0800a3cb 	.word	0x0800a3cb
 800a2f0:	0800a3cb 	.word	0x0800a3cb
 800a2f4:	0800a3cb 	.word	0x0800a3cb
 800a2f8:	0800a2c9 	.word	0x0800a2c9
 800a2fc:	0800a2c9 	.word	0x0800a2c9
 800a300:	0800a3cb 	.word	0x0800a3cb
 800a304:	0800a3cb 	.word	0x0800a3cb
 800a308:	0800a3cb 	.word	0x0800a3cb
 800a30c:	0800a3cb 	.word	0x0800a3cb
 800a310:	0800a3cb 	.word	0x0800a3cb
 800a314:	0800a3cb 	.word	0x0800a3cb
 800a318:	0800a3cb 	.word	0x0800a3cb
 800a31c:	0800a3cb 	.word	0x0800a3cb
 800a320:	0800a3cb 	.word	0x0800a3cb
 800a324:	0800a3cb 	.word	0x0800a3cb
 800a328:	0800a3cb 	.word	0x0800a3cb
 800a32c:	0800a3cb 	.word	0x0800a3cb
 800a330:	0800a3cb 	.word	0x0800a3cb
 800a334:	0800a3cb 	.word	0x0800a3cb
 800a338:	0800a3cb 	.word	0x0800a3cb
 800a33c:	0800a3cb 	.word	0x0800a3cb
 800a340:	0800a3cb 	.word	0x0800a3cb
 800a344:	0800a3cb 	.word	0x0800a3cb
 800a348:	0800a3cb 	.word	0x0800a3cb
 800a34c:	0800a3cb 	.word	0x0800a3cb
 800a350:	0800a3cb 	.word	0x0800a3cb
 800a354:	0800a3cb 	.word	0x0800a3cb
 800a358:	0800a3cb 	.word	0x0800a3cb
 800a35c:	0800a3cb 	.word	0x0800a3cb
 800a360:	0800a3cb 	.word	0x0800a3cb
 800a364:	0800a3cb 	.word	0x0800a3cb
 800a368:	0800a3cb 	.word	0x0800a3cb
 800a36c:	0800a3cb 	.word	0x0800a3cb
 800a370:	0800a3cb 	.word	0x0800a3cb
 800a374:	0800a3cb 	.word	0x0800a3cb
 800a378:	0800a3cb 	.word	0x0800a3cb
 800a37c:	0800a3cb 	.word	0x0800a3cb
 800a380:	0800a3cb 	.word	0x0800a3cb
 800a384:	0800a3cb 	.word	0x0800a3cb
 800a388:	0800a3cb 	.word	0x0800a3cb
 800a38c:	0800a3cb 	.word	0x0800a3cb
 800a390:	0800a3cb 	.word	0x0800a3cb
 800a394:	0800a3cb 	.word	0x0800a3cb
 800a398:	0800a3cb 	.word	0x0800a3cb
 800a39c:	0800a3cb 	.word	0x0800a3cb
 800a3a0:	0800a3cb 	.word	0x0800a3cb
 800a3a4:	0800a3cb 	.word	0x0800a3cb
 800a3a8:	0800a2c9 	.word	0x0800a2c9
 800a3ac:	68a2      	ldr	r2, [r4, #8]
 800a3ae:	7813      	ldrb	r3, [r2, #0]
 800a3b0:	3b1c      	subs	r3, #28
 800a3b2:	2b04      	cmp	r3, #4
 800a3b4:	d804      	bhi.n	800a3c0 <d_encoding+0x364>
 800a3b6:	6852      	ldr	r2, [r2, #4]
 800a3b8:	7813      	ldrb	r3, [r2, #0]
 800a3ba:	3b1c      	subs	r3, #28
 800a3bc:	2b04      	cmp	r3, #4
 800a3be:	d9fa      	bls.n	800a3b6 <d_encoding+0x35a>
 800a3c0:	60a2      	str	r2, [r4, #8]
 800a3c2:	e685      	b.n	800a0d0 <d_encoding+0x74>
 800a3c4:	6892      	ldr	r2, [r2, #8]
 800a3c6:	2a00      	cmp	r2, #0
 800a3c8:	d183      	bne.n	800a2d2 <d_encoding+0x276>
 800a3ca:	2101      	movs	r1, #1
 800a3cc:	e66c      	b.n	800a0a8 <d_encoding+0x4c>
 800a3ce:	f105 000c 	add.w	r0, r5, #12
 800a3d2:	f7fa f851 	bl	8004478 <d_number.isra.0>
 800a3d6:	2801      	cmp	r0, #1
 800a3d8:	f77f ae80 	ble.w	800a0dc <d_encoding+0x80>
 800a3dc:	68eb      	ldr	r3, [r5, #12]
 800a3de:	781a      	ldrb	r2, [r3, #0]
 800a3e0:	2a00      	cmp	r2, #0
 800a3e2:	f43f ae7b 	beq.w	800a0dc <d_encoding+0x80>
 800a3e6:	1c5f      	adds	r7, r3, #1
 800a3e8:	60ef      	str	r7, [r5, #12]
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	2b5f      	cmp	r3, #95	; 0x5f
 800a3ee:	f47f ae75 	bne.w	800a0dc <d_encoding+0x80>
 800a3f2:	1e46      	subs	r6, r0, #1
 800a3f4:	f04f 0800 	mov.w	r8, #0
 800a3f8:	f04f 093f 	mov.w	r9, #63	; 0x3f
 800a3fc:	783b      	ldrb	r3, [r7, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f43f ae6c 	beq.w	800a0dc <d_encoding+0x80>
 800a404:	2b24      	cmp	r3, #36	; 0x24
 800a406:	f000 8127 	beq.w	800a658 <d_encoding+0x5fc>
 800a40a:	463a      	mov	r2, r7
 800a40c:	2400      	movs	r4, #0
 800a40e:	e004      	b.n	800a41a <d_encoding+0x3be>
 800a410:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800a414:	b123      	cbz	r3, 800a420 <d_encoding+0x3c4>
 800a416:	2b24      	cmp	r3, #36	; 0x24
 800a418:	d002      	beq.n	800a420 <d_encoding+0x3c4>
 800a41a:	3401      	adds	r4, #1
 800a41c:	42b4      	cmp	r4, r6
 800a41e:	dbf7      	blt.n	800a410 <d_encoding+0x3b4>
 800a420:	4639      	mov	r1, r7
 800a422:	4628      	mov	r0, r5
 800a424:	4622      	mov	r2, r4
 800a426:	f7f9 fe81 	bl	800412c <d_make_name>
 800a42a:	68ef      	ldr	r7, [r5, #12]
 800a42c:	4427      	add	r7, r4
 800a42e:	1b36      	subs	r6, r6, r4
 800a430:	60ef      	str	r7, [r5, #12]
 800a432:	2800      	cmp	r0, #0
 800a434:	f43f ae52 	beq.w	800a0dc <d_encoding+0x80>
 800a438:	f1b8 0f00 	cmp.w	r8, #0
 800a43c:	f000 812b 	beq.w	800a696 <d_encoding+0x63a>
 800a440:	4642      	mov	r2, r8
 800a442:	4603      	mov	r3, r0
 800a444:	213e      	movs	r1, #62	; 0x3e
 800a446:	4628      	mov	r0, r5
 800a448:	f7f9 fe24 	bl	8004094 <d_make_comp>
 800a44c:	4680      	mov	r8, r0
 800a44e:	2800      	cmp	r0, #0
 800a450:	f43f ae44 	beq.w	800a0dc <d_encoding+0x80>
 800a454:	2e00      	cmp	r6, #0
 800a456:	dcd1      	bgt.n	800a3fc <d_encoding+0x3a0>
 800a458:	4628      	mov	r0, r5
 800a45a:	4642      	mov	r2, r8
 800a45c:	213d      	movs	r1, #61	; 0x3d
 800a45e:	2300      	movs	r3, #0
 800a460:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a464:	f7f9 be16 	b.w	8004094 <d_make_comp>
 800a468:	4628      	mov	r0, r5
 800a46a:	f7ff fc77 	bl	8009d5c <d_name>
 800a46e:	2113      	movs	r1, #19
 800a470:	4602      	mov	r2, r0
 800a472:	2300      	movs	r3, #0
 800a474:	4628      	mov	r0, r5
 800a476:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a47a:	f7f9 be0b 	b.w	8004094 <d_make_comp>
 800a47e:	4628      	mov	r0, r5
 800a480:	f7ff fc6c 	bl	8009d5c <d_name>
 800a484:	4604      	mov	r4, r0
 800a486:	4628      	mov	r0, r5
 800a488:	f7fa f81e 	bl	80044c8 <d_number_component>
 800a48c:	4622      	mov	r2, r4
 800a48e:	4603      	mov	r3, r0
 800a490:	2116      	movs	r1, #22
 800a492:	4628      	mov	r0, r5
 800a494:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a498:	f7f9 bdfc 	b.w	8004094 <d_make_comp>
 800a49c:	4628      	mov	r0, r5
 800a49e:	2100      	movs	r1, #0
 800a4a0:	f7ff fddc 	bl	800a05c <d_encoding>
 800a4a4:	2117      	movs	r1, #23
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	4628      	mov	r0, r5
 800a4ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4b0:	f7f9 bdf0 	b.w	8004094 <d_make_comp>
 800a4b4:	789a      	ldrb	r2, [r3, #2]
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	2a00      	cmp	r2, #0
 800a4bc:	f000 80ed 	beq.w	800a69a <d_encoding+0x63e>
 800a4c0:	1cda      	adds	r2, r3, #3
 800a4c2:	60ea      	str	r2, [r5, #12]
 800a4c4:	789b      	ldrb	r3, [r3, #2]
 800a4c6:	2b6e      	cmp	r3, #110	; 0x6e
 800a4c8:	f040 80e7 	bne.w	800a69a <d_encoding+0x63e>
 800a4cc:	f7ff fdc6 	bl	800a05c <d_encoding>
 800a4d0:	2148      	movs	r1, #72	; 0x48
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4dc:	f7f9 bdda 	b.w	8004094 <d_make_comp>
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	2176      	movs	r1, #118	; 0x76
 800a4e4:	f7fa f898 	bl	8004618 <d_call_offset>
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	f43f adf7 	beq.w	800a0dc <d_encoding+0x80>
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	f7ff fdb3 	bl	800a05c <d_encoding>
 800a4f6:	2110      	movs	r1, #16
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a502:	f7f9 bdc7 	b.w	8004094 <d_make_comp>
 800a506:	4628      	mov	r0, r5
 800a508:	f7ff fc28 	bl	8009d5c <d_name>
 800a50c:	2114      	movs	r1, #20
 800a50e:	4602      	mov	r2, r0
 800a510:	2300      	movs	r3, #0
 800a512:	4628      	mov	r0, r5
 800a514:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a518:	f7f9 bdbc 	b.w	8004094 <d_make_comp>
 800a51c:	4628      	mov	r0, r5
 800a51e:	f7fe fc81 	bl	8008e24 <d_type>
 800a522:	210e      	movs	r1, #14
 800a524:	4602      	mov	r2, r0
 800a526:	2300      	movs	r3, #0
 800a528:	4628      	mov	r0, r5
 800a52a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a52e:	f7f9 bdb1 	b.w	8004094 <d_make_comp>
 800a532:	4628      	mov	r0, r5
 800a534:	f7fe fc76 	bl	8008e24 <d_type>
 800a538:	4604      	mov	r4, r0
 800a53a:	f105 000c 	add.w	r0, r5, #12
 800a53e:	f7f9 ff9b 	bl	8004478 <d_number.isra.0>
 800a542:	2800      	cmp	r0, #0
 800a544:	f6ff adca 	blt.w	800a0dc <d_encoding+0x80>
 800a548:	68eb      	ldr	r3, [r5, #12]
 800a54a:	781a      	ldrb	r2, [r3, #0]
 800a54c:	2a5f      	cmp	r2, #95	; 0x5f
 800a54e:	f47f adc5 	bne.w	800a0dc <d_encoding+0x80>
 800a552:	3301      	adds	r3, #1
 800a554:	60eb      	str	r3, [r5, #12]
 800a556:	4628      	mov	r0, r5
 800a558:	f7fe fc64 	bl	8008e24 <d_type>
 800a55c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a55e:	1d59      	adds	r1, r3, #5
 800a560:	6329      	str	r1, [r5, #48]	; 0x30
 800a562:	4602      	mov	r2, r0
 800a564:	4623      	mov	r3, r4
 800a566:	4628      	mov	r0, r5
 800a568:	210b      	movs	r1, #11
 800a56a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a56e:	f7f9 bd91 	b.w	8004094 <d_make_comp>
 800a572:	4628      	mov	r0, r5
 800a574:	2168      	movs	r1, #104	; 0x68
 800a576:	f7fa f84f 	bl	8004618 <d_call_offset>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	f43f adae 	beq.w	800a0dc <d_encoding+0x80>
 800a580:	4628      	mov	r0, r5
 800a582:	2100      	movs	r1, #0
 800a584:	f7ff fd6a 	bl	800a05c <d_encoding>
 800a588:	210f      	movs	r1, #15
 800a58a:	4602      	mov	r2, r0
 800a58c:	2300      	movs	r3, #0
 800a58e:	4628      	mov	r0, r5
 800a590:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a594:	f7f9 bd7e 	b.w	8004094 <d_make_comp>
 800a598:	4628      	mov	r0, r5
 800a59a:	2100      	movs	r1, #0
 800a59c:	f7fa f83c 	bl	8004618 <d_call_offset>
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	f43f ad9b 	beq.w	800a0dc <d_encoding+0x80>
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	f7fa f835 	bl	8004618 <d_call_offset>
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	f43f ad94 	beq.w	800a0dc <d_encoding+0x80>
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	f7ff fd50 	bl	800a05c <d_encoding>
 800a5bc:	2111      	movs	r1, #17
 800a5be:	4602      	mov	r2, r0
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c8:	f7f9 bd64 	b.w	8004094 <d_make_comp>
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	f7ff fbc5 	bl	8009d5c <d_name>
 800a5d2:	2115      	movs	r1, #21
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	4628      	mov	r0, r5
 800a5da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5de:	f7f9 bd59 	b.w	8004094 <d_make_comp>
 800a5e2:	310f      	adds	r1, #15
 800a5e4:	6329      	str	r1, [r5, #48]	; 0x30
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	f7fe fc1c 	bl	8008e24 <d_type>
 800a5ec:	2109      	movs	r1, #9
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	4628      	mov	r0, r5
 800a5f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f8:	f7f9 bd4c 	b.w	8004094 <d_make_comp>
 800a5fc:	310a      	adds	r1, #10
 800a5fe:	6329      	str	r1, [r5, #48]	; 0x30
 800a600:	4628      	mov	r0, r5
 800a602:	f7fe fc0f 	bl	8008e24 <d_type>
 800a606:	210a      	movs	r1, #10
 800a608:	4602      	mov	r2, r0
 800a60a:	2300      	movs	r3, #0
 800a60c:	4628      	mov	r0, r5
 800a60e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a612:	f7f9 bd3f 	b.w	8004094 <d_make_comp>
 800a616:	4628      	mov	r0, r5
 800a618:	f7fe fc04 	bl	8008e24 <d_type>
 800a61c:	210d      	movs	r1, #13
 800a61e:	4602      	mov	r2, r0
 800a620:	2300      	movs	r3, #0
 800a622:	4628      	mov	r0, r5
 800a624:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a628:	f7f9 bd34 	b.w	8004094 <d_make_comp>
 800a62c:	4628      	mov	r0, r5
 800a62e:	f7fe fbf9 	bl	8008e24 <d_type>
 800a632:	2112      	movs	r1, #18
 800a634:	4602      	mov	r2, r0
 800a636:	2300      	movs	r3, #0
 800a638:	4628      	mov	r0, r5
 800a63a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a63e:	f7f9 bd29 	b.w	8004094 <d_make_comp>
 800a642:	4628      	mov	r0, r5
 800a644:	f7fe fbee 	bl	8008e24 <d_type>
 800a648:	210c      	movs	r1, #12
 800a64a:	4602      	mov	r2, r0
 800a64c:	2300      	movs	r3, #0
 800a64e:	4628      	mov	r0, r5
 800a650:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a654:	f7f9 bd1e 	b.w	8004094 <d_make_comp>
 800a658:	787b      	ldrb	r3, [r7, #1]
 800a65a:	2b53      	cmp	r3, #83	; 0x53
 800a65c:	d029      	beq.n	800a6b2 <d_encoding+0x656>
 800a65e:	2b5f      	cmp	r3, #95	; 0x5f
 800a660:	d025      	beq.n	800a6ae <d_encoding+0x652>
 800a662:	2b24      	cmp	r3, #36	; 0x24
 800a664:	f47f ad3a 	bne.w	800a0dc <d_encoding+0x80>
 800a668:	461a      	mov	r2, r3
 800a66a:	696b      	ldr	r3, [r5, #20]
 800a66c:	69a9      	ldr	r1, [r5, #24]
 800a66e:	428b      	cmp	r3, r1
 800a670:	f6bf ad31 	bge.w	800a0d6 <d_encoding+0x7a>
 800a674:	6929      	ldr	r1, [r5, #16]
 800a676:	1c58      	adds	r0, r3, #1
 800a678:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a67c:	6168      	str	r0, [r5, #20]
 800a67e:	eb11 0083 	adds.w	r0, r1, r3, lsl #2
 800a682:	f43f ad28 	beq.w	800a0d6 <d_encoding+0x7a>
 800a686:	f801 9023 	strb.w	r9, [r1, r3, lsl #2]
 800a68a:	6042      	str	r2, [r0, #4]
 800a68c:	68ef      	ldr	r7, [r5, #12]
 800a68e:	3702      	adds	r7, #2
 800a690:	3e02      	subs	r6, #2
 800a692:	60ef      	str	r7, [r5, #12]
 800a694:	e6d0      	b.n	800a438 <d_encoding+0x3dc>
 800a696:	4680      	mov	r8, r0
 800a698:	e6dc      	b.n	800a454 <d_encoding+0x3f8>
 800a69a:	f7ff fcdf 	bl	800a05c <d_encoding>
 800a69e:	2147      	movs	r1, #71	; 0x47
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	4628      	mov	r0, r5
 800a6a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6aa:	f7f9 bcf3 	b.w	8004094 <d_make_comp>
 800a6ae:	222e      	movs	r2, #46	; 0x2e
 800a6b0:	e7db      	b.n	800a66a <d_encoding+0x60e>
 800a6b2:	222f      	movs	r2, #47	; 0x2f
 800a6b4:	e7d9      	b.n	800a66a <d_encoding+0x60e>
 800a6b6:	bf00      	nop

0800a6b8 <d_expression_1>:
 800a6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6bc:	68c1      	ldr	r1, [r0, #12]
 800a6be:	780b      	ldrb	r3, [r1, #0]
 800a6c0:	2b4c      	cmp	r3, #76	; 0x4c
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	f000 8099 	beq.w	800a7fa <d_expression_1+0x142>
 800a6c8:	2b54      	cmp	r3, #84	; 0x54
 800a6ca:	f000 809a 	beq.w	800a802 <d_expression_1+0x14a>
 800a6ce:	2b73      	cmp	r3, #115	; 0x73
 800a6d0:	d058      	beq.n	800a784 <d_expression_1+0xcc>
 800a6d2:	2b66      	cmp	r3, #102	; 0x66
 800a6d4:	d037      	beq.n	800a746 <d_expression_1+0x8e>
 800a6d6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a6da:	2a09      	cmp	r2, #9
 800a6dc:	d80c      	bhi.n	800a6f8 <d_expression_1+0x40>
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f7ff f9fc 	bl	8009adc <d_unqualified_name>
 800a6e4:	4605      	mov	r5, r0
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	d07e      	beq.n	800a7e8 <d_expression_1+0x130>
 800a6ea:	68e3      	ldr	r3, [r4, #12]
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	2b49      	cmp	r3, #73	; 0x49
 800a6f0:	f000 80a0 	beq.w	800a834 <d_expression_1+0x17c>
 800a6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6f8:	2b6f      	cmp	r3, #111	; 0x6f
 800a6fa:	d078      	beq.n	800a7ee <d_expression_1+0x136>
 800a6fc:	2b69      	cmp	r3, #105	; 0x69
 800a6fe:	d052      	beq.n	800a7a6 <d_expression_1+0xee>
 800a700:	2b74      	cmp	r3, #116	; 0x74
 800a702:	d103      	bne.n	800a70c <d_expression_1+0x54>
 800a704:	784b      	ldrb	r3, [r1, #1]
 800a706:	2b6c      	cmp	r3, #108	; 0x6c
 800a708:	f000 812f 	beq.w	800a96a <d_expression_1+0x2b2>
 800a70c:	4620      	mov	r0, r4
 800a70e:	f7ff f963 	bl	80099d8 <d_operator_name>
 800a712:	4605      	mov	r5, r0
 800a714:	2800      	cmp	r0, #0
 800a716:	d067      	beq.n	800a7e8 <d_expression_1+0x130>
 800a718:	7803      	ldrb	r3, [r0, #0]
 800a71a:	2b31      	cmp	r3, #49	; 0x31
 800a71c:	d075      	beq.n	800a80a <d_expression_1+0x152>
 800a71e:	2b32      	cmp	r3, #50	; 0x32
 800a720:	d053      	beq.n	800a7ca <d_expression_1+0x112>
 800a722:	2b33      	cmp	r3, #51	; 0x33
 800a724:	d160      	bne.n	800a7e8 <d_expression_1+0x130>
 800a726:	68e3      	ldr	r3, [r4, #12]
 800a728:	781a      	ldrb	r2, [r3, #0]
 800a72a:	2a5f      	cmp	r2, #95	; 0x5f
 800a72c:	f000 8122 	beq.w	800a974 <d_expression_1+0x2bc>
 800a730:	4620      	mov	r0, r4
 800a732:	f7ff ffc1 	bl	800a6b8 <d_expression_1>
 800a736:	4603      	mov	r3, r0
 800a738:	4620      	mov	r0, r4
 800a73a:	462a      	mov	r2, r5
 800a73c:	2135      	movs	r1, #53	; 0x35
 800a73e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a742:	f7f9 bca7 	b.w	8004094 <d_make_comp>
 800a746:	784b      	ldrb	r3, [r1, #1]
 800a748:	2b70      	cmp	r3, #112	; 0x70
 800a74a:	d1df      	bne.n	800a70c <d_expression_1+0x54>
 800a74c:	1c8b      	adds	r3, r1, #2
 800a74e:	60c3      	str	r3, [r0, #12]
 800a750:	788b      	ldrb	r3, [r1, #2]
 800a752:	2b54      	cmp	r3, #84	; 0x54
 800a754:	f000 808f 	beq.w	800a876 <d_expression_1+0x1be>
 800a758:	f7f9 fed2 	bl	8004500 <d_compact_number>
 800a75c:	1c45      	adds	r5, r0, #1
 800a75e:	d043      	beq.n	800a7e8 <d_expression_1+0x130>
 800a760:	6963      	ldr	r3, [r4, #20]
 800a762:	69a2      	ldr	r2, [r4, #24]
 800a764:	4293      	cmp	r3, r2
 800a766:	da3f      	bge.n	800a7e8 <d_expression_1+0x130>
 800a768:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800a76c:	6921      	ldr	r1, [r4, #16]
 800a76e:	3301      	adds	r3, #1
 800a770:	0092      	lsls	r2, r2, #2
 800a772:	6163      	str	r3, [r4, #20]
 800a774:	188b      	adds	r3, r1, r2
 800a776:	d037      	beq.n	800a7e8 <d_expression_1+0x130>
 800a778:	2006      	movs	r0, #6
 800a77a:	5488      	strb	r0, [r1, r2]
 800a77c:	605d      	str	r5, [r3, #4]
 800a77e:	4618      	mov	r0, r3
 800a780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a784:	784b      	ldrb	r3, [r1, #1]
 800a786:	2b72      	cmp	r3, #114	; 0x72
 800a788:	d05f      	beq.n	800a84a <d_expression_1+0x192>
 800a78a:	2b70      	cmp	r3, #112	; 0x70
 800a78c:	d1be      	bne.n	800a70c <d_expression_1+0x54>
 800a78e:	3102      	adds	r1, #2
 800a790:	60c1      	str	r1, [r0, #12]
 800a792:	f7ff ff91 	bl	800a6b8 <d_expression_1>
 800a796:	2149      	movs	r1, #73	; 0x49
 800a798:	4602      	mov	r2, r0
 800a79a:	2300      	movs	r3, #0
 800a79c:	4620      	mov	r0, r4
 800a79e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a2:	f7f9 bc77 	b.w	8004094 <d_make_comp>
 800a7a6:	784b      	ldrb	r3, [r1, #1]
 800a7a8:	2b6c      	cmp	r3, #108	; 0x6c
 800a7aa:	d1af      	bne.n	800a70c <d_expression_1+0x54>
 800a7ac:	2500      	movs	r5, #0
 800a7ae:	3102      	adds	r1, #2
 800a7b0:	60e1      	str	r1, [r4, #12]
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	2145      	movs	r1, #69	; 0x45
 800a7b6:	f7fc fdef 	bl	8007398 <d_exprlist>
 800a7ba:	462a      	mov	r2, r5
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2130      	movs	r1, #48	; 0x30
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7c6:	f7f9 bc65 	b.w	8004094 <d_make_comp>
 800a7ca:	686b      	ldr	r3, [r5, #4]
 800a7cc:	2b03      	cmp	r3, #3
 800a7ce:	d80b      	bhi.n	800a7e8 <d_expression_1+0x130>
 800a7d0:	a201      	add	r2, pc, #4	; (adr r2, 800a7d8 <d_expression_1+0x120>)
 800a7d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d6:	bf00      	nop
 800a7d8:	0800a87f 	.word	0x0800a87f
 800a7dc:	0800a731 	.word	0x0800a731
 800a7e0:	0800a909 	.word	0x0800a909
 800a7e4:	0800a88f 	.word	0x0800a88f
 800a7e8:	2000      	movs	r0, #0
 800a7ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ee:	784b      	ldrb	r3, [r1, #1]
 800a7f0:	2b6e      	cmp	r3, #110	; 0x6e
 800a7f2:	d18b      	bne.n	800a70c <d_expression_1+0x54>
 800a7f4:	3102      	adds	r1, #2
 800a7f6:	60c1      	str	r1, [r0, #12]
 800a7f8:	e771      	b.n	800a6de <d_expression_1+0x26>
 800a7fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7fe:	f7fc bd6b 	b.w	80072d8 <d_expr_primary>
 800a802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a806:	f7f9 be93 	b.w	8004530 <d_template_param>
 800a80a:	6847      	ldr	r7, [r0, #4]
 800a80c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	683e      	ldr	r6, [r7, #0]
 800a812:	4995      	ldr	r1, [pc, #596]	; (800aa68 <d_expression_1+0x3b0>)
 800a814:	3b02      	subs	r3, #2
 800a816:	4413      	add	r3, r2
 800a818:	6323      	str	r3, [r4, #48]	; 0x30
 800a81a:	4630      	mov	r0, r6
 800a81c:	f002 fa81 	bl	800cd22 <strcmp>
 800a820:	2800      	cmp	r0, #0
 800a822:	f000 80c8 	beq.w	800a9b6 <d_expression_1+0x2fe>
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2b03      	cmp	r3, #3
 800a82a:	d8dd      	bhi.n	800a7e8 <d_expression_1+0x130>
 800a82c:	e8df f003 	tbb	[pc, r3]
 800a830:	306daa27 	.word	0x306daa27
 800a834:	4620      	mov	r0, r4
 800a836:	f7fc ffed 	bl	8007814 <d_template_args>
 800a83a:	462a      	mov	r2, r5
 800a83c:	4603      	mov	r3, r0
 800a83e:	2104      	movs	r1, #4
 800a840:	4620      	mov	r0, r4
 800a842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a846:	f7f9 bc25 	b.w	8004094 <d_make_comp>
 800a84a:	3102      	adds	r1, #2
 800a84c:	60c1      	str	r1, [r0, #12]
 800a84e:	f7fe fae9 	bl	8008e24 <d_type>
 800a852:	4605      	mov	r5, r0
 800a854:	4620      	mov	r0, r4
 800a856:	f7ff f941 	bl	8009adc <d_unqualified_name>
 800a85a:	68e3      	ldr	r3, [r4, #12]
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	2b49      	cmp	r3, #73	; 0x49
 800a860:	4606      	mov	r6, r0
 800a862:	4620      	mov	r0, r4
 800a864:	f000 80cc 	beq.w	800aa00 <d_expression_1+0x348>
 800a868:	462a      	mov	r2, r5
 800a86a:	4633      	mov	r3, r6
 800a86c:	2101      	movs	r1, #1
 800a86e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a872:	f7f9 bc0f 	b.w	8004094 <d_make_comp>
 800a876:	3103      	adds	r1, #3
 800a878:	60c1      	str	r1, [r0, #12]
 800a87a:	2500      	movs	r5, #0
 800a87c:	e770      	b.n	800a760 <d_expression_1+0xa8>
 800a87e:	4620      	mov	r0, r4
 800a880:	462a      	mov	r2, r5
 800a882:	2134      	movs	r1, #52	; 0x34
 800a884:	2300      	movs	r3, #0
 800a886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a88a:	f7f9 bc03 	b.w	8004094 <d_make_comp>
 800a88e:	2600      	movs	r6, #0
 800a890:	4630      	mov	r0, r6
 800a892:	4976      	ldr	r1, [pc, #472]	; (800aa6c <d_expression_1+0x3b4>)
 800a894:	f002 fa45 	bl	800cd22 <strcmp>
 800a898:	2800      	cmp	r0, #0
 800a89a:	f000 8097 	beq.w	800a9cc <d_expression_1+0x314>
 800a89e:	7833      	ldrb	r3, [r6, #0]
 800a8a0:	2b6e      	cmp	r3, #110	; 0x6e
 800a8a2:	d1a1      	bne.n	800a7e8 <d_expression_1+0x130>
 800a8a4:	7873      	ldrb	r3, [r6, #1]
 800a8a6:	2b77      	cmp	r3, #119	; 0x77
 800a8a8:	d001      	beq.n	800a8ae <d_expression_1+0x1f6>
 800a8aa:	2b61      	cmp	r3, #97	; 0x61
 800a8ac:	d19c      	bne.n	800a7e8 <d_expression_1+0x130>
 800a8ae:	215f      	movs	r1, #95	; 0x5f
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f7fc fd71 	bl	8007398 <d_exprlist>
 800a8b6:	4606      	mov	r6, r0
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	f7fe fab3 	bl	8008e24 <d_type>
 800a8be:	68e3      	ldr	r3, [r4, #12]
 800a8c0:	7819      	ldrb	r1, [r3, #0]
 800a8c2:	2945      	cmp	r1, #69	; 0x45
 800a8c4:	4607      	mov	r7, r0
 800a8c6:	f000 80b0 	beq.w	800aa2a <d_expression_1+0x372>
 800a8ca:	2970      	cmp	r1, #112	; 0x70
 800a8cc:	f000 80bc 	beq.w	800aa48 <d_expression_1+0x390>
 800a8d0:	2969      	cmp	r1, #105	; 0x69
 800a8d2:	d189      	bne.n	800a7e8 <d_expression_1+0x130>
 800a8d4:	785b      	ldrb	r3, [r3, #1]
 800a8d6:	2b6c      	cmp	r3, #108	; 0x6c
 800a8d8:	d186      	bne.n	800a7e8 <d_expression_1+0x130>
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f7ff feec 	bl	800a6b8 <d_expression_1>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	463a      	mov	r2, r7
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	213a      	movs	r1, #58	; 0x3a
 800a8e8:	f7f9 fbd4 	bl	8004094 <d_make_comp>
 800a8ec:	4632      	mov	r2, r6
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2139      	movs	r1, #57	; 0x39
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f7f9 fbce 	bl	8004094 <d_make_comp>
 800a8f8:	462a      	mov	r2, r5
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2138      	movs	r1, #56	; 0x38
 800a8fe:	4620      	mov	r0, r4
 800a900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a904:	f7f9 bbc6 	b.w	8004094 <d_make_comp>
 800a908:	2600      	movs	r6, #0
 800a90a:	686b      	ldr	r3, [r5, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	785a      	ldrb	r2, [r3, #1]
 800a910:	2a63      	cmp	r2, #99	; 0x63
 800a912:	d068      	beq.n	800a9e6 <d_expression_1+0x32e>
 800a914:	4620      	mov	r0, r4
 800a916:	f7ff fecf 	bl	800a6b8 <d_expression_1>
 800a91a:	4607      	mov	r7, r0
 800a91c:	4630      	mov	r0, r6
 800a91e:	4954      	ldr	r1, [pc, #336]	; (800aa70 <d_expression_1+0x3b8>)
 800a920:	f002 f9ff 	bl	800cd22 <strcmp>
 800a924:	2800      	cmp	r0, #0
 800a926:	d04b      	beq.n	800a9c0 <d_expression_1+0x308>
 800a928:	4630      	mov	r0, r6
 800a92a:	4952      	ldr	r1, [pc, #328]	; (800aa74 <d_expression_1+0x3bc>)
 800a92c:	f002 f9f9 	bl	800cd22 <strcmp>
 800a930:	b128      	cbz	r0, 800a93e <d_expression_1+0x286>
 800a932:	4630      	mov	r0, r6
 800a934:	4950      	ldr	r1, [pc, #320]	; (800aa78 <d_expression_1+0x3c0>)
 800a936:	f002 f9f4 	bl	800cd22 <strcmp>
 800a93a:	2800      	cmp	r0, #0
 800a93c:	d170      	bne.n	800aa20 <d_expression_1+0x368>
 800a93e:	4620      	mov	r0, r4
 800a940:	f7ff f8cc 	bl	8009adc <d_unqualified_name>
 800a944:	68e3      	ldr	r3, [r4, #12]
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	2b49      	cmp	r3, #73	; 0x49
 800a94a:	4606      	mov	r6, r0
 800a94c:	d071      	beq.n	800aa32 <d_expression_1+0x37a>
 800a94e:	463a      	mov	r2, r7
 800a950:	4633      	mov	r3, r6
 800a952:	4620      	mov	r0, r4
 800a954:	2137      	movs	r1, #55	; 0x37
 800a956:	f7f9 fb9d 	bl	8004094 <d_make_comp>
 800a95a:	462a      	mov	r2, r5
 800a95c:	4603      	mov	r3, r0
 800a95e:	2136      	movs	r1, #54	; 0x36
 800a960:	4620      	mov	r0, r4
 800a962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a966:	f7f9 bb95 	b.w	8004094 <d_make_comp>
 800a96a:	f7fe fa5b 	bl	8008e24 <d_type>
 800a96e:	68e1      	ldr	r1, [r4, #12]
 800a970:	4605      	mov	r5, r0
 800a972:	e71c      	b.n	800a7ae <d_expression_1+0xf6>
 800a974:	3301      	adds	r3, #1
 800a976:	60e3      	str	r3, [r4, #12]
 800a978:	4620      	mov	r0, r4
 800a97a:	2145      	movs	r1, #69	; 0x45
 800a97c:	f7fc fd0c 	bl	8007398 <d_exprlist>
 800a980:	4603      	mov	r3, r0
 800a982:	e6d9      	b.n	800a738 <d_expression_1+0x80>
 800a984:	7833      	ldrb	r3, [r6, #0]
 800a986:	2b70      	cmp	r3, #112	; 0x70
 800a988:	d002      	beq.n	800a990 <d_expression_1+0x2d8>
 800a98a:	2b6d      	cmp	r3, #109	; 0x6d
 800a98c:	f47f aed0 	bne.w	800a730 <d_expression_1+0x78>
 800a990:	7872      	ldrb	r2, [r6, #1]
 800a992:	429a      	cmp	r2, r3
 800a994:	f47f aecc 	bne.w	800a730 <d_expression_1+0x78>
 800a998:	68e3      	ldr	r3, [r4, #12]
 800a99a:	781a      	ldrb	r2, [r3, #0]
 800a99c:	2a5f      	cmp	r2, #95	; 0x5f
 800a99e:	d05f      	beq.n	800aa60 <d_expression_1+0x3a8>
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f7ff fe89 	bl	800a6b8 <d_expression_1>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	2137      	movs	r1, #55	; 0x37
 800a9ae:	f7f9 fb71 	bl	8004094 <d_make_comp>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	e6c0      	b.n	800a738 <d_expression_1+0x80>
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f7fe fa34 	bl	8008e24 <d_type>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	e6bb      	b.n	800a738 <d_expression_1+0x80>
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	2145      	movs	r1, #69	; 0x45
 800a9c4:	f7fc fce8 	bl	8007398 <d_exprlist>
 800a9c8:	4606      	mov	r6, r0
 800a9ca:	e7c0      	b.n	800a94e <d_expression_1+0x296>
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	f7ff fe73 	bl	800a6b8 <d_expression_1>
 800a9d2:	4606      	mov	r6, r0
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f7ff fe6f 	bl	800a6b8 <d_expression_1>
 800a9da:	4607      	mov	r7, r0
 800a9dc:	4620      	mov	r0, r4
 800a9de:	f7ff fe6b 	bl	800a6b8 <d_expression_1>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	e77d      	b.n	800a8e2 <d_expression_1+0x22a>
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800a9ec:	2a01      	cmp	r2, #1
 800a9ee:	d902      	bls.n	800a9f6 <d_expression_1+0x33e>
 800a9f0:	3b72      	subs	r3, #114	; 0x72
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d88e      	bhi.n	800a914 <d_expression_1+0x25c>
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f7fe fa14 	bl	8008e24 <d_type>
 800a9fc:	4607      	mov	r7, r0
 800a9fe:	e78d      	b.n	800a91c <d_expression_1+0x264>
 800aa00:	f7fc ff08 	bl	8007814 <d_template_args>
 800aa04:	4632      	mov	r2, r6
 800aa06:	4603      	mov	r3, r0
 800aa08:	2104      	movs	r1, #4
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	f7f9 fb42 	bl	8004094 <d_make_comp>
 800aa10:	462a      	mov	r2, r5
 800aa12:	4603      	mov	r3, r0
 800aa14:	2101      	movs	r1, #1
 800aa16:	4620      	mov	r0, r4
 800aa18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa1c:	f7f9 bb3a 	b.w	8004094 <d_make_comp>
 800aa20:	4620      	mov	r0, r4
 800aa22:	f7ff fe49 	bl	800a6b8 <d_expression_1>
 800aa26:	4606      	mov	r6, r0
 800aa28:	e791      	b.n	800a94e <d_expression_1+0x296>
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	60e3      	str	r3, [r4, #12]
 800aa2e:	2300      	movs	r3, #0
 800aa30:	e757      	b.n	800a8e2 <d_expression_1+0x22a>
 800aa32:	4620      	mov	r0, r4
 800aa34:	f7fc feee 	bl	8007814 <d_template_args>
 800aa38:	4632      	mov	r2, r6
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2104      	movs	r1, #4
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f7f9 fb28 	bl	8004094 <d_make_comp>
 800aa44:	4606      	mov	r6, r0
 800aa46:	e782      	b.n	800a94e <d_expression_1+0x296>
 800aa48:	785a      	ldrb	r2, [r3, #1]
 800aa4a:	2a69      	cmp	r2, #105	; 0x69
 800aa4c:	f47f aecc 	bne.w	800a7e8 <d_expression_1+0x130>
 800aa50:	3302      	adds	r3, #2
 800aa52:	60e3      	str	r3, [r4, #12]
 800aa54:	4620      	mov	r0, r4
 800aa56:	2145      	movs	r1, #69	; 0x45
 800aa58:	f7fc fc9e 	bl	8007398 <d_exprlist>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	e740      	b.n	800a8e2 <d_expression_1+0x22a>
 800aa60:	3301      	adds	r3, #1
 800aa62:	60e3      	str	r3, [r4, #12]
 800aa64:	e664      	b.n	800a730 <d_expression_1+0x78>
 800aa66:	bf00      	nop
 800aa68:	0800ea04 	.word	0x0800ea04
 800aa6c:	0800e6f8 	.word	0x0800e6f8
 800aa70:	0800e6f0 	.word	0x0800e6f0
 800aa74:	0800e810 	.word	0x0800e810
 800aa78:	0800e814 	.word	0x0800e814

0800aa7c <d_demangle_callback.constprop.16>:
 800aa7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa80:	b0e1      	sub	sp, #388	; 0x184
 800aa82:	f890 8000 	ldrb.w	r8, [r0]
 800aa86:	f1b8 0f5f 	cmp.w	r8, #95	; 0x5f
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	4606      	mov	r6, r0
 800aa8e:	460d      	mov	r5, r1
 800aa90:	4614      	mov	r4, r2
 800aa92:	f000 80d2 	beq.w	800ac3a <d_demangle_callback.constprop.16+0x1be>
 800aa96:	4630      	mov	r0, r6
 800aa98:	49a7      	ldr	r1, [pc, #668]	; (800ad38 <d_demangle_callback.constprop.16+0x2bc>)
 800aa9a:	2208      	movs	r2, #8
 800aa9c:	f002 f953 	bl	800cd46 <strncmp>
 800aaa0:	b978      	cbnz	r0, 800aac2 <d_demangle_callback.constprop.16+0x46>
 800aaa2:	7a33      	ldrb	r3, [r6, #8]
 800aaa4:	2b2e      	cmp	r3, #46	; 0x2e
 800aaa6:	d005      	beq.n	800aab4 <d_demangle_callback.constprop.16+0x38>
 800aaa8:	2b5f      	cmp	r3, #95	; 0x5f
 800aaaa:	d003      	beq.n	800aab4 <d_demangle_callback.constprop.16+0x38>
 800aaac:	2b24      	cmp	r3, #36	; 0x24
 800aaae:	d001      	beq.n	800aab4 <d_demangle_callback.constprop.16+0x38>
 800aab0:	4681      	mov	r9, r0
 800aab2:	e008      	b.n	800aac6 <d_demangle_callback.constprop.16+0x4a>
 800aab4:	7a73      	ldrb	r3, [r6, #9]
 800aab6:	2b44      	cmp	r3, #68	; 0x44
 800aab8:	f000 80cf 	beq.w	800ac5a <d_demangle_callback.constprop.16+0x1de>
 800aabc:	2b49      	cmp	r3, #73	; 0x49
 800aabe:	f000 80cc 	beq.w	800ac5a <d_demangle_callback.constprop.16+0x1de>
 800aac2:	f04f 0900 	mov.w	r9, #0
 800aac6:	4630      	mov	r0, r6
 800aac8:	f002 f935 	bl	800cd36 <strlen>
 800aacc:	0041      	lsls	r1, r0, #1
 800aace:	0083      	lsls	r3, r0, #2
 800aad0:	185a      	adds	r2, r3, r1
 800aad2:	0092      	lsls	r2, r2, #2
 800aad4:	3208      	adds	r2, #8
 800aad6:	330a      	adds	r3, #10
 800aad8:	ebad 0d02 	sub.w	sp, sp, r2
 800aadc:	f023 0307 	bic.w	r3, r3, #7
 800aae0:	46ec      	mov	ip, sp
 800aae2:	eb06 0e00 	add.w	lr, r6, r0
 800aae6:	ebad 0d03 	sub.w	sp, sp, r3
 800aaea:	2211      	movs	r2, #17
 800aaec:	2300      	movs	r3, #0
 800aaee:	f1b9 0f01 	cmp.w	r9, #1
 800aaf2:	f8c7 c014 	str.w	ip, [r7, #20]
 800aaf6:	f8c7 d020 	str.w	sp, [r7, #32]
 800aafa:	61f9      	str	r1, [r7, #28]
 800aafc:	607e      	str	r6, [r7, #4]
 800aafe:	613e      	str	r6, [r7, #16]
 800ab00:	62b8      	str	r0, [r7, #40]	; 0x28
 800ab02:	f8c7 e008 	str.w	lr, [r7, #8]
 800ab06:	60fa      	str	r2, [r7, #12]
 800ab08:	61bb      	str	r3, [r7, #24]
 800ab0a:	627b      	str	r3, [r7, #36]	; 0x24
 800ab0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab0e:	633b      	str	r3, [r7, #48]	; 0x30
 800ab10:	637b      	str	r3, [r7, #52]	; 0x34
 800ab12:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab16:	f000 8097 	beq.w	800ac48 <d_demangle_callback.constprop.16+0x1cc>
 800ab1a:	f0c0 80a9 	bcc.w	800ac70 <d_demangle_callback.constprop.16+0x1f4>
 800ab1e:	f1b9 0f03 	cmp.w	r9, #3
 800ab22:	f200 80a5 	bhi.w	800ac70 <d_demangle_callback.constprop.16+0x1f4>
 800ab26:	7af2      	ldrb	r2, [r6, #11]
 800ab28:	f1b9 0f02 	cmp.w	r9, #2
 800ab2c:	f106 080b 	add.w	r8, r6, #11
 800ab30:	bf0c      	ite	eq
 800ab32:	f04f 0942 	moveq.w	r9, #66	; 0x42
 800ab36:	f04f 0943 	movne.w	r9, #67	; 0x43
 800ab3a:	2a5f      	cmp	r2, #95	; 0x5f
 800ab3c:	f8c7 8010 	str.w	r8, [r7, #16]
 800ab40:	d103      	bne.n	800ab4a <d_demangle_callback.constprop.16+0xce>
 800ab42:	7b32      	ldrb	r2, [r6, #12]
 800ab44:	2a5a      	cmp	r2, #90	; 0x5a
 800ab46:	f000 80ee 	beq.w	800ad26 <d_demangle_callback.constprop.16+0x2aa>
 800ab4a:	4640      	mov	r0, r8
 800ab4c:	f002 f8f3 	bl	800cd36 <strlen>
 800ab50:	4641      	mov	r1, r8
 800ab52:	4602      	mov	r2, r0
 800ab54:	1d38      	adds	r0, r7, #4
 800ab56:	f7f9 fae9 	bl	800412c <d_make_name>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	4649      	mov	r1, r9
 800ab5e:	2300      	movs	r3, #0
 800ab60:	1d38      	adds	r0, r7, #4
 800ab62:	f7f9 fa97 	bl	8004094 <d_make_comp>
 800ab66:	f8d7 8010 	ldr.w	r8, [r7, #16]
 800ab6a:	4606      	mov	r6, r0
 800ab6c:	4640      	mov	r0, r8
 800ab6e:	f002 f8e2 	bl	800cd36 <strlen>
 800ab72:	eb08 0300 	add.w	r3, r8, r0
 800ab76:	613b      	str	r3, [r7, #16]
 800ab78:	f818 9000 	ldrb.w	r9, [r8, r0]
 800ab7c:	f1b9 0f00 	cmp.w	r9, #0
 800ab80:	d165      	bne.n	800ac4e <d_demangle_callback.constprop.16+0x1d2>
 800ab82:	2e00      	cmp	r6, #0
 800ab84:	f000 80cd 	beq.w	800ad22 <d_demangle_callback.constprop.16+0x2a6>
 800ab88:	f107 0840 	add.w	r8, r7, #64	; 0x40
 800ab8c:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 800ab90:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 800ab94:	4632      	mov	r2, r6
 800ab96:	f8c8 5108 	str.w	r5, [r8, #264]	; 0x108
 800ab9a:	f8c8 410c 	str.w	r4, [r8, #268]	; 0x10c
 800ab9e:	f8c8 9100 	str.w	r9, [r8, #256]	; 0x100
 800aba2:	f888 9104 	strb.w	r9, [r8, #260]	; 0x104
 800aba6:	f8c8 9110 	str.w	r9, [r8, #272]	; 0x110
 800abaa:	f8c8 9114 	str.w	r9, [r8, #276]	; 0x114
 800abae:	f8c8 911c 	str.w	r9, [r8, #284]	; 0x11c
 800abb2:	f8c8 9120 	str.w	r9, [r8, #288]	; 0x120
 800abb6:	f8c8 9118 	str.w	r9, [r8, #280]	; 0x118
 800abba:	f8c8 9124 	str.w	r9, [r8, #292]	; 0x124
 800abbe:	f8c8 9128 	str.w	r9, [r8, #296]	; 0x128
 800abc2:	f8c8 912c 	str.w	r9, [r8, #300]	; 0x12c
 800abc6:	f8c8 9130 	str.w	r9, [r8, #304]	; 0x130
 800abca:	f8c8 9134 	str.w	r9, [r8, #308]	; 0x134
 800abce:	f8c8 9138 	str.w	r9, [r8, #312]	; 0x138
 800abd2:	f7f9 fbdd 	bl	8004390 <d_count_templates_scopes>
 800abd6:	f8d8 112c 	ldr.w	r1, [r8, #300]	; 0x12c
 800abda:	f8d8 3138 	ldr.w	r3, [r8, #312]	; 0x138
 800abde:	f8c8 913c 	str.w	r9, [r8, #316]	; 0x13c
 800abe2:	fb03 f301 	mul.w	r3, r3, r1
 800abe6:	00ca      	lsls	r2, r1, #3
 800abe8:	3208      	adds	r2, #8
 800abea:	00d9      	lsls	r1, r3, #3
 800abec:	466c      	mov	r4, sp
 800abee:	3108      	adds	r1, #8
 800abf0:	ebad 0d02 	sub.w	sp, sp, r2
 800abf4:	466d      	mov	r5, sp
 800abf6:	4632      	mov	r2, r6
 800abf8:	ebad 0d01 	sub.w	sp, sp, r1
 800abfc:	4640      	mov	r0, r8
 800abfe:	2111      	movs	r1, #17
 800ac00:	f8c8 3138 	str.w	r3, [r8, #312]	; 0x138
 800ac04:	f8c8 d130 	str.w	sp, [r8, #304]	; 0x130
 800ac08:	f8c8 5124 	str.w	r5, [r8, #292]	; 0x124
 800ac0c:	f7f9 fe44 	bl	8004898 <d_print_comp>
 800ac10:	f8d8 1100 	ldr.w	r1, [r8, #256]	; 0x100
 800ac14:	f8d8 3108 	ldr.w	r3, [r8, #264]	; 0x108
 800ac18:	f808 9001 	strb.w	r9, [r8, r1]
 800ac1c:	4640      	mov	r0, r8
 800ac1e:	46a5      	mov	sp, r4
 800ac20:	f8d8 210c 	ldr.w	r2, [r8, #268]	; 0x10c
 800ac24:	4798      	blx	r3
 800ac26:	f8d8 0118 	ldr.w	r0, [r8, #280]	; 0x118
 800ac2a:	fab0 f080 	clz	r0, r0
 800ac2e:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 800ac32:	0940      	lsrs	r0, r0, #5
 800ac34:	46bd      	mov	sp, r7
 800ac36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac3a:	7843      	ldrb	r3, [r0, #1]
 800ac3c:	2b5a      	cmp	r3, #90	; 0x5a
 800ac3e:	f47f af2a 	bne.w	800aa96 <d_demangle_callback.constprop.16+0x1a>
 800ac42:	f04f 0901 	mov.w	r9, #1
 800ac46:	e73e      	b.n	800aac6 <d_demangle_callback.constprop.16+0x4a>
 800ac48:	f1b8 0f5f 	cmp.w	r8, #95	; 0x5f
 800ac4c:	d018      	beq.n	800ac80 <d_demangle_callback.constprop.16+0x204>
 800ac4e:	2000      	movs	r0, #0
 800ac50:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 800ac54:	46bd      	mov	sp, r7
 800ac56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac5a:	7ab2      	ldrb	r2, [r6, #10]
 800ac5c:	2a5f      	cmp	r2, #95	; 0x5f
 800ac5e:	f47f af30 	bne.w	800aac2 <d_demangle_callback.constprop.16+0x46>
 800ac62:	2b49      	cmp	r3, #73	; 0x49
 800ac64:	bf0c      	ite	eq
 800ac66:	f04f 0902 	moveq.w	r9, #2
 800ac6a:	f04f 0903 	movne.w	r9, #3
 800ac6e:	e72a      	b.n	800aac6 <d_demangle_callback.constprop.16+0x4a>
 800ac70:	1d38      	adds	r0, r7, #4
 800ac72:	f7fe f8d7 	bl	8008e24 <d_type>
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	4606      	mov	r6, r0
 800ac7a:	f893 9000 	ldrb.w	r9, [r3]
 800ac7e:	e77d      	b.n	800ab7c <d_demangle_callback.constprop.16+0x100>
 800ac80:	7873      	ldrb	r3, [r6, #1]
 800ac82:	2b5a      	cmp	r3, #90	; 0x5a
 800ac84:	d1e3      	bne.n	800ac4e <d_demangle_callback.constprop.16+0x1d2>
 800ac86:	3602      	adds	r6, #2
 800ac88:	4649      	mov	r1, r9
 800ac8a:	1d38      	adds	r0, r7, #4
 800ac8c:	613e      	str	r6, [r7, #16]
 800ac8e:	f7ff f9e5 	bl	800a05c <d_encoding>
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	07db      	lsls	r3, r3, #31
 800ac96:	4606      	mov	r6, r0
 800ac98:	d40f      	bmi.n	800acba <d_demangle_callback.constprop.16+0x23e>
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	f893 9000 	ldrb.w	r9, [r3]
 800aca0:	e76c      	b.n	800ab7c <d_demangle_callback.constprop.16+0x100>
 800aca2:	1a5a      	subs	r2, r3, r1
 800aca4:	1d38      	adds	r0, r7, #4
 800aca6:	613b      	str	r3, [r7, #16]
 800aca8:	f7f9 fa40 	bl	800412c <d_make_name>
 800acac:	4632      	mov	r2, r6
 800acae:	4603      	mov	r3, r0
 800acb0:	214b      	movs	r1, #75	; 0x4b
 800acb2:	1d38      	adds	r0, r7, #4
 800acb4:	f7f9 f9ee 	bl	8004094 <d_make_comp>
 800acb8:	4606      	mov	r6, r0
 800acba:	6939      	ldr	r1, [r7, #16]
 800acbc:	f891 9000 	ldrb.w	r9, [r1]
 800acc0:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 800acc4:	f47f af5a 	bne.w	800ab7c <d_demangle_callback.constprop.16+0x100>
 800acc8:	784b      	ldrb	r3, [r1, #1]
 800acca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800acce:	2a19      	cmp	r2, #25
 800acd0:	d91a      	bls.n	800ad08 <d_demangle_callback.constprop.16+0x28c>
 800acd2:	2b5f      	cmp	r3, #95	; 0x5f
 800acd4:	d018      	beq.n	800ad08 <d_demangle_callback.constprop.16+0x28c>
 800acd6:	3b30      	subs	r3, #48	; 0x30
 800acd8:	2b09      	cmp	r3, #9
 800acda:	d8de      	bhi.n	800ac9a <d_demangle_callback.constprop.16+0x21e>
 800acdc:	780a      	ldrb	r2, [r1, #0]
 800acde:	460b      	mov	r3, r1
 800ace0:	2a2e      	cmp	r2, #46	; 0x2e
 800ace2:	d1de      	bne.n	800aca2 <d_demangle_callback.constprop.16+0x226>
 800ace4:	785a      	ldrb	r2, [r3, #1]
 800ace6:	3a30      	subs	r2, #48	; 0x30
 800ace8:	2a09      	cmp	r2, #9
 800acea:	d8da      	bhi.n	800aca2 <d_demangle_callback.constprop.16+0x226>
 800acec:	789a      	ldrb	r2, [r3, #2]
 800acee:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 800acf2:	2809      	cmp	r0, #9
 800acf4:	f103 0302 	add.w	r3, r3, #2
 800acf8:	d8f2      	bhi.n	800ace0 <d_demangle_callback.constprop.16+0x264>
 800acfa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800acfe:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 800ad02:	2809      	cmp	r0, #9
 800ad04:	d9f9      	bls.n	800acfa <d_demangle_callback.constprop.16+0x27e>
 800ad06:	e7eb      	b.n	800ace0 <d_demangle_callback.constprop.16+0x264>
 800ad08:	1c88      	adds	r0, r1, #2
 800ad0a:	7802      	ldrb	r2, [r0, #0]
 800ad0c:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800ad10:	f1be 0f19 	cmp.w	lr, #25
 800ad14:	4603      	mov	r3, r0
 800ad16:	f100 0001 	add.w	r0, r0, #1
 800ad1a:	d9f6      	bls.n	800ad0a <d_demangle_callback.constprop.16+0x28e>
 800ad1c:	2a5f      	cmp	r2, #95	; 0x5f
 800ad1e:	d0f4      	beq.n	800ad0a <d_demangle_callback.constprop.16+0x28e>
 800ad20:	e7de      	b.n	800ace0 <d_demangle_callback.constprop.16+0x264>
 800ad22:	4630      	mov	r0, r6
 800ad24:	e794      	b.n	800ac50 <d_demangle_callback.constprop.16+0x1d4>
 800ad26:	360d      	adds	r6, #13
 800ad28:	4619      	mov	r1, r3
 800ad2a:	1d38      	adds	r0, r7, #4
 800ad2c:	613e      	str	r6, [r7, #16]
 800ad2e:	f7ff f995 	bl	800a05c <d_encoding>
 800ad32:	4602      	mov	r2, r0
 800ad34:	e712      	b.n	800ab5c <d_demangle_callback.constprop.16+0xe0>
 800ad36:	bf00      	nop
 800ad38:	0800e518 	.word	0x0800e518

0800ad3c <d_array_type>:
 800ad3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad40:	68c3      	ldr	r3, [r0, #12]
 800ad42:	781a      	ldrb	r2, [r3, #0]
 800ad44:	2a41      	cmp	r2, #65	; 0x41
 800ad46:	b081      	sub	sp, #4
 800ad48:	4604      	mov	r4, r0
 800ad4a:	d003      	beq.n	800ad54 <d_array_type+0x18>
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	b001      	add	sp, #4
 800ad50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad54:	1c59      	adds	r1, r3, #1
 800ad56:	60c1      	str	r1, [r0, #12]
 800ad58:	785a      	ldrb	r2, [r3, #1]
 800ad5a:	2a5f      	cmp	r2, #95	; 0x5f
 800ad5c:	f000 809f 	beq.w	800ae9e <d_array_type+0x162>
 800ad60:	3a30      	subs	r2, #48	; 0x30
 800ad62:	2a09      	cmp	r2, #9
 800ad64:	d81f      	bhi.n	800ada6 <d_array_type+0x6a>
 800ad66:	460a      	mov	r2, r1
 800ad68:	3201      	adds	r2, #1
 800ad6a:	60e2      	str	r2, [r4, #12]
 800ad6c:	7813      	ldrb	r3, [r2, #0]
 800ad6e:	3b30      	subs	r3, #48	; 0x30
 800ad70:	2b09      	cmp	r3, #9
 800ad72:	d9f9      	bls.n	800ad68 <d_array_type+0x2c>
 800ad74:	1a52      	subs	r2, r2, r1
 800ad76:	4620      	mov	r0, r4
 800ad78:	f7f9 f9d8 	bl	800412c <d_make_name>
 800ad7c:	4605      	mov	r5, r0
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	d0e4      	beq.n	800ad4c <d_array_type+0x10>
 800ad82:	68e1      	ldr	r1, [r4, #12]
 800ad84:	780b      	ldrb	r3, [r1, #0]
 800ad86:	2b5f      	cmp	r3, #95	; 0x5f
 800ad88:	d1e0      	bne.n	800ad4c <d_array_type+0x10>
 800ad8a:	3101      	adds	r1, #1
 800ad8c:	60e1      	str	r1, [r4, #12]
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f7fe f848 	bl	8008e24 <d_type>
 800ad94:	462a      	mov	r2, r5
 800ad96:	4603      	mov	r3, r0
 800ad98:	212a      	movs	r1, #42	; 0x2a
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	b001      	add	sp, #4
 800ad9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada2:	f7f9 b977 	b.w	8004094 <d_make_comp>
 800ada6:	2501      	movs	r5, #1
 800ada8:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800adaa:	6345      	str	r5, [r0, #52]	; 0x34
 800adac:	785a      	ldrb	r2, [r3, #1]
 800adae:	2a4c      	cmp	r2, #76	; 0x4c
 800adb0:	f000 80d5 	beq.w	800af5e <d_array_type+0x222>
 800adb4:	2a54      	cmp	r2, #84	; 0x54
 800adb6:	f000 80d6 	beq.w	800af66 <d_array_type+0x22a>
 800adba:	2a73      	cmp	r2, #115	; 0x73
 800adbc:	f000 8083 	beq.w	800aec6 <d_array_type+0x18a>
 800adc0:	2a66      	cmp	r2, #102	; 0x66
 800adc2:	f000 8096 	beq.w	800aef2 <d_array_type+0x1b6>
 800adc6:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 800adca:	2809      	cmp	r0, #9
 800adcc:	d96e      	bls.n	800aeac <d_array_type+0x170>
 800adce:	2a6f      	cmp	r2, #111	; 0x6f
 800add0:	d067      	beq.n	800aea2 <d_array_type+0x166>
 800add2:	2a69      	cmp	r2, #105	; 0x69
 800add4:	f000 80b0 	beq.w	800af38 <d_array_type+0x1fc>
 800add8:	2a74      	cmp	r2, #116	; 0x74
 800adda:	f000 8195 	beq.w	800b108 <d_array_type+0x3cc>
 800adde:	4620      	mov	r0, r4
 800ade0:	f7fe fdfa 	bl	80099d8 <d_operator_name>
 800ade4:	4680      	mov	r8, r0
 800ade6:	2800      	cmp	r0, #0
 800ade8:	f000 80a4 	beq.w	800af34 <d_array_type+0x1f8>
 800adec:	7803      	ldrb	r3, [r0, #0]
 800adee:	2b31      	cmp	r3, #49	; 0x31
 800adf0:	f000 80bd 	beq.w	800af6e <d_array_type+0x232>
 800adf4:	2b32      	cmp	r3, #50	; 0x32
 800adf6:	f000 8191 	beq.w	800b11c <d_array_type+0x3e0>
 800adfa:	2b33      	cmp	r3, #51	; 0x33
 800adfc:	f040 809a 	bne.w	800af34 <d_array_type+0x1f8>
 800ae00:	68e1      	ldr	r1, [r4, #12]
 800ae02:	780b      	ldrb	r3, [r1, #0]
 800ae04:	2b5f      	cmp	r3, #95	; 0x5f
 800ae06:	f000 81c3 	beq.w	800b190 <d_array_type+0x454>
 800ae0a:	2700      	movs	r7, #0
 800ae0c:	2b4c      	cmp	r3, #76	; 0x4c
 800ae0e:	f000 84b1 	beq.w	800b774 <d_array_type+0xa38>
 800ae12:	2b54      	cmp	r3, #84	; 0x54
 800ae14:	f000 83da 	beq.w	800b5cc <d_array_type+0x890>
 800ae18:	2b73      	cmp	r3, #115	; 0x73
 800ae1a:	f000 82f4 	beq.w	800b406 <d_array_type+0x6ca>
 800ae1e:	2b66      	cmp	r3, #102	; 0x66
 800ae20:	f000 8305 	beq.w	800b42e <d_array_type+0x6f2>
 800ae24:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800ae28:	2a09      	cmp	r2, #9
 800ae2a:	f240 81d4 	bls.w	800b1d6 <d_array_type+0x49a>
 800ae2e:	2b6f      	cmp	r3, #111	; 0x6f
 800ae30:	f000 81cb 	beq.w	800b1ca <d_array_type+0x48e>
 800ae34:	2b69      	cmp	r3, #105	; 0x69
 800ae36:	f000 84e9 	beq.w	800b80c <d_array_type+0xad0>
 800ae3a:	2b74      	cmp	r3, #116	; 0x74
 800ae3c:	f000 844c 	beq.w	800b6d8 <d_array_type+0x99c>
 800ae40:	4620      	mov	r0, r4
 800ae42:	f7fe fdc9 	bl	80099d8 <d_operator_name>
 800ae46:	4605      	mov	r5, r0
 800ae48:	b1c0      	cbz	r0, 800ae7c <d_array_type+0x140>
 800ae4a:	7803      	ldrb	r3, [r0, #0]
 800ae4c:	2b31      	cmp	r3, #49	; 0x31
 800ae4e:	f000 84ec 	beq.w	800b82a <d_array_type+0xaee>
 800ae52:	2b32      	cmp	r3, #50	; 0x32
 800ae54:	f000 84ca 	beq.w	800b7ec <d_array_type+0xab0>
 800ae58:	2b33      	cmp	r3, #51	; 0x33
 800ae5a:	f040 831b 	bne.w	800b494 <d_array_type+0x758>
 800ae5e:	68e3      	ldr	r3, [r4, #12]
 800ae60:	781a      	ldrb	r2, [r3, #0]
 800ae62:	2a5f      	cmp	r2, #95	; 0x5f
 800ae64:	f001 8158 	beq.w	800c118 <d_array_type+0x13dc>
 800ae68:	4620      	mov	r0, r4
 800ae6a:	f7ff fc25 	bl	800a6b8 <d_expression_1>
 800ae6e:	462a      	mov	r2, r5
 800ae70:	4603      	mov	r3, r0
 800ae72:	2135      	movs	r1, #53	; 0x35
 800ae74:	4620      	mov	r0, r4
 800ae76:	f7f9 f90d 	bl	8004094 <d_make_comp>
 800ae7a:	4605      	mov	r5, r0
 800ae7c:	2f00      	cmp	r7, #0
 800ae7e:	f000 818e 	beq.w	800b19e <d_array_type+0x462>
 800ae82:	4620      	mov	r0, r4
 800ae84:	2137      	movs	r1, #55	; 0x37
 800ae86:	462a      	mov	r2, r5
 800ae88:	462b      	mov	r3, r5
 800ae8a:	f7f9 f903 	bl	8004094 <d_make_comp>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	4642      	mov	r2, r8
 800ae92:	4620      	mov	r0, r4
 800ae94:	2135      	movs	r1, #53	; 0x35
 800ae96:	f7f9 f8fd 	bl	8004094 <d_make_comp>
 800ae9a:	4605      	mov	r5, r0
 800ae9c:	e024      	b.n	800aee8 <d_array_type+0x1ac>
 800ae9e:	2500      	movs	r5, #0
 800aea0:	e773      	b.n	800ad8a <d_array_type+0x4e>
 800aea2:	789a      	ldrb	r2, [r3, #2]
 800aea4:	2a6e      	cmp	r2, #110	; 0x6e
 800aea6:	d19a      	bne.n	800adde <d_array_type+0xa2>
 800aea8:	3303      	adds	r3, #3
 800aeaa:	60e3      	str	r3, [r4, #12]
 800aeac:	4620      	mov	r0, r4
 800aeae:	f7fe fe15 	bl	8009adc <d_unqualified_name>
 800aeb2:	4605      	mov	r5, r0
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	d03d      	beq.n	800af34 <d_array_type+0x1f8>
 800aeb8:	68e1      	ldr	r1, [r4, #12]
 800aeba:	780b      	ldrb	r3, [r1, #0]
 800aebc:	2b49      	cmp	r3, #73	; 0x49
 800aebe:	f000 813d 	beq.w	800b13c <d_array_type+0x400>
 800aec2:	6366      	str	r6, [r4, #52]	; 0x34
 800aec4:	e75e      	b.n	800ad84 <d_array_type+0x48>
 800aec6:	789a      	ldrb	r2, [r3, #2]
 800aec8:	2a72      	cmp	r2, #114	; 0x72
 800aeca:	f000 8142 	beq.w	800b152 <d_array_type+0x416>
 800aece:	2a70      	cmp	r2, #112	; 0x70
 800aed0:	d185      	bne.n	800adde <d_array_type+0xa2>
 800aed2:	3303      	adds	r3, #3
 800aed4:	60c3      	str	r3, [r0, #12]
 800aed6:	f7ff fbef 	bl	800a6b8 <d_expression_1>
 800aeda:	2149      	movs	r1, #73	; 0x49
 800aedc:	4602      	mov	r2, r0
 800aede:	2300      	movs	r3, #0
 800aee0:	4620      	mov	r0, r4
 800aee2:	f7f9 f8d7 	bl	8004094 <d_make_comp>
 800aee6:	4605      	mov	r5, r0
 800aee8:	6366      	str	r6, [r4, #52]	; 0x34
 800aeea:	2d00      	cmp	r5, #0
 800aeec:	f47f af49 	bne.w	800ad82 <d_array_type+0x46>
 800aef0:	e72c      	b.n	800ad4c <d_array_type+0x10>
 800aef2:	789a      	ldrb	r2, [r3, #2]
 800aef4:	2a70      	cmp	r2, #112	; 0x70
 800aef6:	f47f af72 	bne.w	800adde <d_array_type+0xa2>
 800aefa:	1cda      	adds	r2, r3, #3
 800aefc:	60c2      	str	r2, [r0, #12]
 800aefe:	78da      	ldrb	r2, [r3, #3]
 800af00:	2a54      	cmp	r2, #84	; 0x54
 800af02:	d113      	bne.n	800af2c <d_array_type+0x1f0>
 800af04:	3304      	adds	r3, #4
 800af06:	60c3      	str	r3, [r0, #12]
 800af08:	2000      	movs	r0, #0
 800af0a:	6963      	ldr	r3, [r4, #20]
 800af0c:	69a2      	ldr	r2, [r4, #24]
 800af0e:	4293      	cmp	r3, r2
 800af10:	da10      	bge.n	800af34 <d_array_type+0x1f8>
 800af12:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800af16:	6921      	ldr	r1, [r4, #16]
 800af18:	0092      	lsls	r2, r2, #2
 800af1a:	3301      	adds	r3, #1
 800af1c:	188d      	adds	r5, r1, r2
 800af1e:	6163      	str	r3, [r4, #20]
 800af20:	d008      	beq.n	800af34 <d_array_type+0x1f8>
 800af22:	2306      	movs	r3, #6
 800af24:	548b      	strb	r3, [r1, r2]
 800af26:	6068      	str	r0, [r5, #4]
 800af28:	68e1      	ldr	r1, [r4, #12]
 800af2a:	e7ca      	b.n	800aec2 <d_array_type+0x186>
 800af2c:	f7f9 fae8 	bl	8004500 <d_compact_number>
 800af30:	3001      	adds	r0, #1
 800af32:	d1ea      	bne.n	800af0a <d_array_type+0x1ce>
 800af34:	6366      	str	r6, [r4, #52]	; 0x34
 800af36:	e709      	b.n	800ad4c <d_array_type+0x10>
 800af38:	789b      	ldrb	r3, [r3, #2]
 800af3a:	2b6c      	cmp	r3, #108	; 0x6c
 800af3c:	f47f af4f 	bne.w	800adde <d_array_type+0xa2>
 800af40:	2500      	movs	r5, #0
 800af42:	3102      	adds	r1, #2
 800af44:	60e1      	str	r1, [r4, #12]
 800af46:	4620      	mov	r0, r4
 800af48:	2145      	movs	r1, #69	; 0x45
 800af4a:	f7fc fa25 	bl	8007398 <d_exprlist>
 800af4e:	462a      	mov	r2, r5
 800af50:	4603      	mov	r3, r0
 800af52:	2130      	movs	r1, #48	; 0x30
 800af54:	4620      	mov	r0, r4
 800af56:	f7f9 f89d 	bl	8004094 <d_make_comp>
 800af5a:	4605      	mov	r5, r0
 800af5c:	e7c4      	b.n	800aee8 <d_array_type+0x1ac>
 800af5e:	f7fc f9bb 	bl	80072d8 <d_expr_primary>
 800af62:	4605      	mov	r5, r0
 800af64:	e7c0      	b.n	800aee8 <d_array_type+0x1ac>
 800af66:	f7f9 fae3 	bl	8004530 <d_template_param>
 800af6a:	4605      	mov	r5, r0
 800af6c:	e7bc      	b.n	800aee8 <d_array_type+0x1ac>
 800af6e:	6845      	ldr	r5, [r0, #4]
 800af70:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800af72:	68ab      	ldr	r3, [r5, #8]
 800af74:	682f      	ldr	r7, [r5, #0]
 800af76:	49ad      	ldr	r1, [pc, #692]	; (800b22c <d_array_type+0x4f0>)
 800af78:	3b02      	subs	r3, #2
 800af7a:	4413      	add	r3, r2
 800af7c:	6323      	str	r3, [r4, #48]	; 0x30
 800af7e:	4638      	mov	r0, r7
 800af80:	f001 fecf 	bl	800cd22 <strcmp>
 800af84:	2800      	cmp	r0, #0
 800af86:	f000 8112 	beq.w	800b1ae <d_array_type+0x472>
 800af8a:	68eb      	ldr	r3, [r5, #12]
 800af8c:	2b03      	cmp	r3, #3
 800af8e:	d8d1      	bhi.n	800af34 <d_array_type+0x1f8>
 800af90:	e8df f013 	tbh	[pc, r3, lsl #1]
 800af94:	00f500b2 	.word	0x00f500b2
 800af98:	00050044 	.word	0x00050044
 800af9c:	2700      	movs	r7, #0
 800af9e:	4638      	mov	r0, r7
 800afa0:	49a3      	ldr	r1, [pc, #652]	; (800b230 <d_array_type+0x4f4>)
 800afa2:	f001 febe 	bl	800cd22 <strcmp>
 800afa6:	4605      	mov	r5, r0
 800afa8:	2800      	cmp	r0, #0
 800afaa:	f000 8149 	beq.w	800b240 <d_array_type+0x504>
 800afae:	783b      	ldrb	r3, [r7, #0]
 800afb0:	2b6e      	cmp	r3, #110	; 0x6e
 800afb2:	d1bf      	bne.n	800af34 <d_array_type+0x1f8>
 800afb4:	787b      	ldrb	r3, [r7, #1]
 800afb6:	2b77      	cmp	r3, #119	; 0x77
 800afb8:	d001      	beq.n	800afbe <d_array_type+0x282>
 800afba:	2b61      	cmp	r3, #97	; 0x61
 800afbc:	d1ba      	bne.n	800af34 <d_array_type+0x1f8>
 800afbe:	215f      	movs	r1, #95	; 0x5f
 800afc0:	4620      	mov	r0, r4
 800afc2:	f7fc f9e9 	bl	8007398 <d_exprlist>
 800afc6:	4607      	mov	r7, r0
 800afc8:	4620      	mov	r0, r4
 800afca:	f7fd ff2b 	bl	8008e24 <d_type>
 800afce:	68e3      	ldr	r3, [r4, #12]
 800afd0:	781a      	ldrb	r2, [r3, #0]
 800afd2:	2a45      	cmp	r2, #69	; 0x45
 800afd4:	4605      	mov	r5, r0
 800afd6:	f000 82e5 	beq.w	800b5a4 <d_array_type+0x868>
 800afda:	2a70      	cmp	r2, #112	; 0x70
 800afdc:	f000 833a 	beq.w	800b654 <d_array_type+0x918>
 800afe0:	2a69      	cmp	r2, #105	; 0x69
 800afe2:	d1a7      	bne.n	800af34 <d_array_type+0x1f8>
 800afe4:	785b      	ldrb	r3, [r3, #1]
 800afe6:	2b6c      	cmp	r3, #108	; 0x6c
 800afe8:	d1a4      	bne.n	800af34 <d_array_type+0x1f8>
 800afea:	4620      	mov	r0, r4
 800afec:	f7ff fb64 	bl	800a6b8 <d_expression_1>
 800aff0:	4681      	mov	r9, r0
 800aff2:	462a      	mov	r2, r5
 800aff4:	464b      	mov	r3, r9
 800aff6:	213a      	movs	r1, #58	; 0x3a
 800aff8:	4620      	mov	r0, r4
 800affa:	f7f9 f84b 	bl	8004094 <d_make_comp>
 800affe:	463a      	mov	r2, r7
 800b000:	4603      	mov	r3, r0
 800b002:	2139      	movs	r1, #57	; 0x39
 800b004:	4620      	mov	r0, r4
 800b006:	f7f9 f845 	bl	8004094 <d_make_comp>
 800b00a:	4642      	mov	r2, r8
 800b00c:	4603      	mov	r3, r0
 800b00e:	2138      	movs	r1, #56	; 0x38
 800b010:	4620      	mov	r0, r4
 800b012:	f7f9 f83f 	bl	8004094 <d_make_comp>
 800b016:	4605      	mov	r5, r0
 800b018:	e766      	b.n	800aee8 <d_array_type+0x1ac>
 800b01a:	2700      	movs	r7, #0
 800b01c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	785a      	ldrb	r2, [r3, #1]
 800b024:	2a63      	cmp	r2, #99	; 0x63
 800b026:	f000 80f3 	beq.w	800b210 <d_array_type+0x4d4>
 800b02a:	68e1      	ldr	r1, [r4, #12]
 800b02c:	780b      	ldrb	r3, [r1, #0]
 800b02e:	2b4c      	cmp	r3, #76	; 0x4c
 800b030:	f000 82c2 	beq.w	800b5b8 <d_array_type+0x87c>
 800b034:	2b54      	cmp	r3, #84	; 0x54
 800b036:	f000 82c4 	beq.w	800b5c2 <d_array_type+0x886>
 800b03a:	2b73      	cmp	r3, #115	; 0x73
 800b03c:	f000 8216 	beq.w	800b46c <d_array_type+0x730>
 800b040:	2b66      	cmp	r3, #102	; 0x66
 800b042:	f000 8284 	beq.w	800b54e <d_array_type+0x812>
 800b046:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b04a:	2a09      	cmp	r2, #9
 800b04c:	f240 81b3 	bls.w	800b3b6 <d_array_type+0x67a>
 800b050:	2b6f      	cmp	r3, #111	; 0x6f
 800b052:	f000 81aa 	beq.w	800b3aa <d_array_type+0x66e>
 800b056:	2b69      	cmp	r3, #105	; 0x69
 800b058:	f040 8392 	bne.w	800b780 <d_array_type+0xa44>
 800b05c:	784b      	ldrb	r3, [r1, #1]
 800b05e:	2b6c      	cmp	r3, #108	; 0x6c
 800b060:	f000 86c7 	beq.w	800bdf2 <d_array_type+0x10b6>
 800b064:	4620      	mov	r0, r4
 800b066:	f7fe fcb7 	bl	80099d8 <d_operator_name>
 800b06a:	4605      	mov	r5, r0
 800b06c:	2800      	cmp	r0, #0
 800b06e:	f000 86b4 	beq.w	800bdda <d_array_type+0x109e>
 800b072:	7803      	ldrb	r3, [r0, #0]
 800b074:	2b31      	cmp	r3, #49	; 0x31
 800b076:	f000 839d 	beq.w	800b7b4 <d_array_type+0xa78>
 800b07a:	2b32      	cmp	r3, #50	; 0x32
 800b07c:	f001 8117 	beq.w	800c2ae <d_array_type+0x1572>
 800b080:	2b33      	cmp	r3, #51	; 0x33
 800b082:	f040 86aa 	bne.w	800bdda <d_array_type+0x109e>
 800b086:	68e3      	ldr	r3, [r4, #12]
 800b088:	781a      	ldrb	r2, [r3, #0]
 800b08a:	2a5f      	cmp	r2, #95	; 0x5f
 800b08c:	f001 812e 	beq.w	800c2ec <d_array_type+0x15b0>
 800b090:	4620      	mov	r0, r4
 800b092:	f7ff fb11 	bl	800a6b8 <d_expression_1>
 800b096:	462a      	mov	r2, r5
 800b098:	4603      	mov	r3, r0
 800b09a:	2135      	movs	r1, #53	; 0x35
 800b09c:	4620      	mov	r0, r4
 800b09e:	f7f8 fff9 	bl	8004094 <d_make_comp>
 800b0a2:	4605      	mov	r5, r0
 800b0a4:	4638      	mov	r0, r7
 800b0a6:	4963      	ldr	r1, [pc, #396]	; (800b234 <d_array_type+0x4f8>)
 800b0a8:	f001 fe3b 	bl	800cd22 <strcmp>
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	f000 80a9 	beq.w	800b204 <d_array_type+0x4c8>
 800b0b2:	4638      	mov	r0, r7
 800b0b4:	4960      	ldr	r1, [pc, #384]	; (800b238 <d_array_type+0x4fc>)
 800b0b6:	f001 fe34 	bl	800cd22 <strcmp>
 800b0ba:	b130      	cbz	r0, 800b0ca <d_array_type+0x38e>
 800b0bc:	4638      	mov	r0, r7
 800b0be:	495f      	ldr	r1, [pc, #380]	; (800b23c <d_array_type+0x500>)
 800b0c0:	f001 fe2f 	bl	800cd22 <strcmp>
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	f040 8272 	bne.w	800b5ae <d_array_type+0x872>
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f7fe fd06 	bl	8009adc <d_unqualified_name>
 800b0d0:	68e3      	ldr	r3, [r4, #12]
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	2b49      	cmp	r3, #73	; 0x49
 800b0d6:	4607      	mov	r7, r0
 800b0d8:	f000 8259 	beq.w	800b58e <d_array_type+0x852>
 800b0dc:	462a      	mov	r2, r5
 800b0de:	463b      	mov	r3, r7
 800b0e0:	2137      	movs	r1, #55	; 0x37
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	f7f8 ffd6 	bl	8004094 <d_make_comp>
 800b0e8:	4642      	mov	r2, r8
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2136      	movs	r1, #54	; 0x36
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f7f8 ffd0 	bl	8004094 <d_make_comp>
 800b0f4:	4605      	mov	r5, r0
 800b0f6:	e6f7      	b.n	800aee8 <d_array_type+0x1ac>
 800b0f8:	4642      	mov	r2, r8
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	2134      	movs	r1, #52	; 0x34
 800b0fe:	2300      	movs	r3, #0
 800b100:	f7f8 ffc8 	bl	8004094 <d_make_comp>
 800b104:	4605      	mov	r5, r0
 800b106:	e6ef      	b.n	800aee8 <d_array_type+0x1ac>
 800b108:	789b      	ldrb	r3, [r3, #2]
 800b10a:	2b6c      	cmp	r3, #108	; 0x6c
 800b10c:	f47f ae67 	bne.w	800adde <d_array_type+0xa2>
 800b110:	4620      	mov	r0, r4
 800b112:	f7fd fe87 	bl	8008e24 <d_type>
 800b116:	68e1      	ldr	r1, [r4, #12]
 800b118:	4605      	mov	r5, r0
 800b11a:	e712      	b.n	800af42 <d_array_type+0x206>
 800b11c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b120:	2b03      	cmp	r3, #3
 800b122:	f63f af07 	bhi.w	800af34 <d_array_type+0x1f8>
 800b126:	a201      	add	r2, pc, #4	; (adr r2, 800b12c <d_array_type+0x3f0>)
 800b128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b12c:	0800b0f9 	.word	0x0800b0f9
 800b130:	0800b189 	.word	0x0800b189
 800b134:	0800b01b 	.word	0x0800b01b
 800b138:	0800af9d 	.word	0x0800af9d
 800b13c:	4620      	mov	r0, r4
 800b13e:	f7fc fb69 	bl	8007814 <d_template_args>
 800b142:	462a      	mov	r2, r5
 800b144:	4603      	mov	r3, r0
 800b146:	2104      	movs	r1, #4
 800b148:	4620      	mov	r0, r4
 800b14a:	f7f8 ffa3 	bl	8004094 <d_make_comp>
 800b14e:	4605      	mov	r5, r0
 800b150:	e6ca      	b.n	800aee8 <d_array_type+0x1ac>
 800b152:	3303      	adds	r3, #3
 800b154:	60c3      	str	r3, [r0, #12]
 800b156:	f7fd fe65 	bl	8008e24 <d_type>
 800b15a:	4607      	mov	r7, r0
 800b15c:	4620      	mov	r0, r4
 800b15e:	f7fe fcbd 	bl	8009adc <d_unqualified_name>
 800b162:	68e3      	ldr	r3, [r4, #12]
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	2b49      	cmp	r3, #73	; 0x49
 800b168:	4680      	mov	r8, r0
 800b16a:	f000 813b 	beq.w	800b3e4 <d_array_type+0x6a8>
 800b16e:	4629      	mov	r1, r5
 800b170:	4603      	mov	r3, r0
 800b172:	463a      	mov	r2, r7
 800b174:	4620      	mov	r0, r4
 800b176:	f7f8 ff8d 	bl	8004094 <d_make_comp>
 800b17a:	4605      	mov	r5, r0
 800b17c:	e6b4      	b.n	800aee8 <d_array_type+0x1ac>
 800b17e:	783b      	ldrb	r3, [r7, #0]
 800b180:	2b70      	cmp	r3, #112	; 0x70
 800b182:	d018      	beq.n	800b1b6 <d_array_type+0x47a>
 800b184:	2b6d      	cmp	r3, #109	; 0x6d
 800b186:	d016      	beq.n	800b1b6 <d_array_type+0x47a>
 800b188:	68e1      	ldr	r1, [r4, #12]
 800b18a:	2700      	movs	r7, #0
 800b18c:	780b      	ldrb	r3, [r1, #0]
 800b18e:	e63d      	b.n	800ae0c <d_array_type+0xd0>
 800b190:	3101      	adds	r1, #1
 800b192:	60e1      	str	r1, [r4, #12]
 800b194:	4620      	mov	r0, r4
 800b196:	2145      	movs	r1, #69	; 0x45
 800b198:	f7fc f8fe 	bl	8007398 <d_exprlist>
 800b19c:	4605      	mov	r5, r0
 800b19e:	462b      	mov	r3, r5
 800b1a0:	4642      	mov	r2, r8
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	2135      	movs	r1, #53	; 0x35
 800b1a6:	f7f8 ff75 	bl	8004094 <d_make_comp>
 800b1aa:	4605      	mov	r5, r0
 800b1ac:	e69c      	b.n	800aee8 <d_array_type+0x1ac>
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f7fd fe38 	bl	8008e24 <d_type>
 800b1b4:	e66b      	b.n	800ae8e <d_array_type+0x152>
 800b1b6:	787a      	ldrb	r2, [r7, #1]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d1e5      	bne.n	800b188 <d_array_type+0x44c>
 800b1bc:	68e1      	ldr	r1, [r4, #12]
 800b1be:	780b      	ldrb	r3, [r1, #0]
 800b1c0:	2b5f      	cmp	r3, #95	; 0x5f
 800b1c2:	f000 8459 	beq.w	800ba78 <d_array_type+0xd3c>
 800b1c6:	2701      	movs	r7, #1
 800b1c8:	e620      	b.n	800ae0c <d_array_type+0xd0>
 800b1ca:	784b      	ldrb	r3, [r1, #1]
 800b1cc:	2b6e      	cmp	r3, #110	; 0x6e
 800b1ce:	f47f ae37 	bne.w	800ae40 <d_array_type+0x104>
 800b1d2:	3102      	adds	r1, #2
 800b1d4:	60e1      	str	r1, [r4, #12]
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	f7fe fc80 	bl	8009adc <d_unqualified_name>
 800b1dc:	4605      	mov	r5, r0
 800b1de:	2800      	cmp	r0, #0
 800b1e0:	f43f ae4c 	beq.w	800ae7c <d_array_type+0x140>
 800b1e4:	68e3      	ldr	r3, [r4, #12]
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	2b49      	cmp	r3, #73	; 0x49
 800b1ea:	f47f ae47 	bne.w	800ae7c <d_array_type+0x140>
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f7fc fb10 	bl	8007814 <d_template_args>
 800b1f4:	462a      	mov	r2, r5
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2104      	movs	r1, #4
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	f7f8 ff4a 	bl	8004094 <d_make_comp>
 800b200:	4605      	mov	r5, r0
 800b202:	e63b      	b.n	800ae7c <d_array_type+0x140>
 800b204:	4620      	mov	r0, r4
 800b206:	2145      	movs	r1, #69	; 0x45
 800b208:	f7fc f8c6 	bl	8007398 <d_exprlist>
 800b20c:	4607      	mov	r7, r0
 800b20e:	e765      	b.n	800b0dc <d_array_type+0x3a0>
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800b216:	2a01      	cmp	r2, #1
 800b218:	d903      	bls.n	800b222 <d_array_type+0x4e6>
 800b21a:	3b72      	subs	r3, #114	; 0x72
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	f63f af04 	bhi.w	800b02a <d_array_type+0x2ee>
 800b222:	4620      	mov	r0, r4
 800b224:	f7fd fdfe 	bl	8008e24 <d_type>
 800b228:	4605      	mov	r5, r0
 800b22a:	e73b      	b.n	800b0a4 <d_array_type+0x368>
 800b22c:	0800ea04 	.word	0x0800ea04
 800b230:	0800e6f8 	.word	0x0800e6f8
 800b234:	0800e6f0 	.word	0x0800e6f0
 800b238:	0800e810 	.word	0x0800e810
 800b23c:	0800e814 	.word	0x0800e814
 800b240:	68e1      	ldr	r1, [r4, #12]
 800b242:	780b      	ldrb	r3, [r1, #0]
 800b244:	2b4c      	cmp	r3, #76	; 0x4c
 800b246:	f001 8049 	beq.w	800c2dc <d_array_type+0x15a0>
 800b24a:	2b54      	cmp	r3, #84	; 0x54
 800b24c:	f001 803e 	beq.w	800c2cc <d_array_type+0x1590>
 800b250:	2b73      	cmp	r3, #115	; 0x73
 800b252:	f000 8279 	beq.w	800b748 <d_array_type+0xa0c>
 800b256:	2b66      	cmp	r3, #102	; 0x66
 800b258:	f000 8256 	beq.w	800b708 <d_array_type+0x9cc>
 800b25c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b260:	2a09      	cmp	r2, #9
 800b262:	f240 815b 	bls.w	800b51c <d_array_type+0x7e0>
 800b266:	2b6f      	cmp	r3, #111	; 0x6f
 800b268:	f000 8152 	beq.w	800b510 <d_array_type+0x7d4>
 800b26c:	2b69      	cmp	r3, #105	; 0x69
 800b26e:	f001 81c3 	beq.w	800c5f8 <d_array_type+0x18bc>
 800b272:	2b74      	cmp	r3, #116	; 0x74
 800b274:	f001 81a6 	beq.w	800c5c4 <d_array_type+0x1888>
 800b278:	4620      	mov	r0, r4
 800b27a:	f7fe fbad 	bl	80099d8 <d_operator_name>
 800b27e:	4607      	mov	r7, r0
 800b280:	2800      	cmp	r0, #0
 800b282:	f000 857a 	beq.w	800bd7a <d_array_type+0x103e>
 800b286:	7803      	ldrb	r3, [r0, #0]
 800b288:	2b31      	cmp	r3, #49	; 0x31
 800b28a:	f000 8523 	beq.w	800bcd4 <d_array_type+0xf98>
 800b28e:	2b32      	cmp	r3, #50	; 0x32
 800b290:	f000 8650 	beq.w	800bf34 <d_array_type+0x11f8>
 800b294:	2b33      	cmp	r3, #51	; 0x33
 800b296:	f040 81d5 	bne.w	800b644 <d_array_type+0x908>
 800b29a:	68e3      	ldr	r3, [r4, #12]
 800b29c:	781a      	ldrb	r2, [r3, #0]
 800b29e:	2a5f      	cmp	r2, #95	; 0x5f
 800b2a0:	f000 84fd 	beq.w	800bc9e <d_array_type+0xf62>
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f7ff fa07 	bl	800a6b8 <d_expression_1>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	463a      	mov	r2, r7
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	2135      	movs	r1, #53	; 0x35
 800b2b2:	f7f8 feef 	bl	8004094 <d_make_comp>
 800b2b6:	68e1      	ldr	r1, [r4, #12]
 800b2b8:	780b      	ldrb	r3, [r1, #0]
 800b2ba:	4607      	mov	r7, r0
 800b2bc:	2b4c      	cmp	r3, #76	; 0x4c
 800b2be:	f000 84e6 	beq.w	800bc8e <d_array_type+0xf52>
 800b2c2:	2b54      	cmp	r3, #84	; 0x54
 800b2c4:	f000 84f3 	beq.w	800bcae <d_array_type+0xf72>
 800b2c8:	2b73      	cmp	r3, #115	; 0x73
 800b2ca:	f000 81a5 	beq.w	800b618 <d_array_type+0x8dc>
 800b2ce:	2b66      	cmp	r3, #102	; 0x66
 800b2d0:	f000 8181 	beq.w	800b5d6 <d_array_type+0x89a>
 800b2d4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b2d8:	2a09      	cmp	r2, #9
 800b2da:	f240 80e3 	bls.w	800b4a4 <d_array_type+0x768>
 800b2de:	2b6f      	cmp	r3, #111	; 0x6f
 800b2e0:	f000 80da 	beq.w	800b498 <d_array_type+0x75c>
 800b2e4:	2b69      	cmp	r3, #105	; 0x69
 800b2e6:	f000 8559 	beq.w	800bd9c <d_array_type+0x1060>
 800b2ea:	2b74      	cmp	r3, #116	; 0x74
 800b2ec:	f001 80a6 	beq.w	800c43c <d_array_type+0x1700>
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	f7fe fb71 	bl	80099d8 <d_operator_name>
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	f001 808e 	beq.w	800c41a <d_array_type+0x16de>
 800b2fe:	7803      	ldrb	r3, [r0, #0]
 800b300:	2b31      	cmp	r3, #49	; 0x31
 800b302:	f001 8033 	beq.w	800c36c <d_array_type+0x1630>
 800b306:	2b32      	cmp	r3, #50	; 0x32
 800b308:	f001 8021 	beq.w	800c34e <d_array_type+0x1612>
 800b30c:	2b33      	cmp	r3, #51	; 0x33
 800b30e:	f040 819d 	bne.w	800b64c <d_array_type+0x910>
 800b312:	68e3      	ldr	r3, [r4, #12]
 800b314:	781a      	ldrb	r2, [r3, #0]
 800b316:	2a5f      	cmp	r2, #95	; 0x5f
 800b318:	f001 8140 	beq.w	800c59c <d_array_type+0x1860>
 800b31c:	4620      	mov	r0, r4
 800b31e:	f7ff f9cb 	bl	800a6b8 <d_expression_1>
 800b322:	4603      	mov	r3, r0
 800b324:	462a      	mov	r2, r5
 800b326:	4620      	mov	r0, r4
 800b328:	2135      	movs	r1, #53	; 0x35
 800b32a:	f7f8 feb3 	bl	8004094 <d_make_comp>
 800b32e:	68e1      	ldr	r1, [r4, #12]
 800b330:	780b      	ldrb	r3, [r1, #0]
 800b332:	4605      	mov	r5, r0
 800b334:	2b4c      	cmp	r3, #76	; 0x4c
 800b336:	f001 813f 	beq.w	800c5b8 <d_array_type+0x187c>
 800b33a:	2b54      	cmp	r3, #84	; 0x54
 800b33c:	f001 8136 	beq.w	800c5ac <d_array_type+0x1870>
 800b340:	2b73      	cmp	r3, #115	; 0x73
 800b342:	f000 81b5 	beq.w	800b6b0 <d_array_type+0x974>
 800b346:	2b66      	cmp	r3, #102	; 0x66
 800b348:	f000 8190 	beq.w	800b66c <d_array_type+0x930>
 800b34c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b350:	2a09      	cmp	r2, #9
 800b352:	f240 80c6 	bls.w	800b4e2 <d_array_type+0x7a6>
 800b356:	2b6f      	cmp	r3, #111	; 0x6f
 800b358:	f000 80bd 	beq.w	800b4d6 <d_array_type+0x79a>
 800b35c:	2b69      	cmp	r3, #105	; 0x69
 800b35e:	f000 8641 	beq.w	800bfe4 <d_array_type+0x12a8>
 800b362:	2b74      	cmp	r3, #116	; 0x74
 800b364:	f000 8625 	beq.w	800bfb2 <d_array_type+0x1276>
 800b368:	4620      	mov	r0, r4
 800b36a:	f7fe fb35 	bl	80099d8 <d_operator_name>
 800b36e:	4681      	mov	r9, r0
 800b370:	2800      	cmp	r0, #0
 800b372:	f43f ae3e 	beq.w	800aff2 <d_array_type+0x2b6>
 800b376:	7803      	ldrb	r3, [r0, #0]
 800b378:	2b31      	cmp	r3, #49	; 0x31
 800b37a:	f000 83cf 	beq.w	800bb1c <d_array_type+0xde0>
 800b37e:	2b32      	cmp	r3, #50	; 0x32
 800b380:	f000 83b2 	beq.w	800bae8 <d_array_type+0xdac>
 800b384:	2b33      	cmp	r3, #51	; 0x33
 800b386:	f040 8399 	bne.w	800babc <d_array_type+0xd80>
 800b38a:	68e3      	ldr	r3, [r4, #12]
 800b38c:	781a      	ldrb	r2, [r3, #0]
 800b38e:	2a5f      	cmp	r2, #95	; 0x5f
 800b390:	f000 838d 	beq.w	800baae <d_array_type+0xd72>
 800b394:	4620      	mov	r0, r4
 800b396:	f7ff f98f 	bl	800a6b8 <d_expression_1>
 800b39a:	464a      	mov	r2, r9
 800b39c:	4603      	mov	r3, r0
 800b39e:	2135      	movs	r1, #53	; 0x35
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f7f8 fe77 	bl	8004094 <d_make_comp>
 800b3a6:	4681      	mov	r9, r0
 800b3a8:	e623      	b.n	800aff2 <d_array_type+0x2b6>
 800b3aa:	784b      	ldrb	r3, [r1, #1]
 800b3ac:	2b6e      	cmp	r3, #110	; 0x6e
 800b3ae:	f47f ae59 	bne.w	800b064 <d_array_type+0x328>
 800b3b2:	3102      	adds	r1, #2
 800b3b4:	60e1      	str	r1, [r4, #12]
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f7fe fb90 	bl	8009adc <d_unqualified_name>
 800b3bc:	4605      	mov	r5, r0
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	f000 850b 	beq.w	800bdda <d_array_type+0x109e>
 800b3c4:	68e3      	ldr	r3, [r4, #12]
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	2b49      	cmp	r3, #73	; 0x49
 800b3ca:	f47f ae6b 	bne.w	800b0a4 <d_array_type+0x368>
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f7fc fa20 	bl	8007814 <d_template_args>
 800b3d4:	462a      	mov	r2, r5
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2104      	movs	r1, #4
 800b3da:	4620      	mov	r0, r4
 800b3dc:	f7f8 fe5a 	bl	8004094 <d_make_comp>
 800b3e0:	4605      	mov	r5, r0
 800b3e2:	e65f      	b.n	800b0a4 <d_array_type+0x368>
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	f7fc fa15 	bl	8007814 <d_template_args>
 800b3ea:	4642      	mov	r2, r8
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	2104      	movs	r1, #4
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	f7f8 fe4f 	bl	8004094 <d_make_comp>
 800b3f6:	4629      	mov	r1, r5
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	463a      	mov	r2, r7
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	f7f8 fe49 	bl	8004094 <d_make_comp>
 800b402:	4605      	mov	r5, r0
 800b404:	e570      	b.n	800aee8 <d_array_type+0x1ac>
 800b406:	784b      	ldrb	r3, [r1, #1]
 800b408:	2b72      	cmp	r3, #114	; 0x72
 800b40a:	f000 8339 	beq.w	800ba80 <d_array_type+0xd44>
 800b40e:	2b70      	cmp	r3, #112	; 0x70
 800b410:	f47f ad16 	bne.w	800ae40 <d_array_type+0x104>
 800b414:	3102      	adds	r1, #2
 800b416:	60e1      	str	r1, [r4, #12]
 800b418:	4620      	mov	r0, r4
 800b41a:	f7ff f94d 	bl	800a6b8 <d_expression_1>
 800b41e:	2149      	movs	r1, #73	; 0x49
 800b420:	4602      	mov	r2, r0
 800b422:	2300      	movs	r3, #0
 800b424:	4620      	mov	r0, r4
 800b426:	f7f8 fe35 	bl	8004094 <d_make_comp>
 800b42a:	4605      	mov	r5, r0
 800b42c:	e526      	b.n	800ae7c <d_array_type+0x140>
 800b42e:	784b      	ldrb	r3, [r1, #1]
 800b430:	2b70      	cmp	r3, #112	; 0x70
 800b432:	f47f ad05 	bne.w	800ae40 <d_array_type+0x104>
 800b436:	1c8b      	adds	r3, r1, #2
 800b438:	60e3      	str	r3, [r4, #12]
 800b43a:	788b      	ldrb	r3, [r1, #2]
 800b43c:	2b54      	cmp	r3, #84	; 0x54
 800b43e:	f041 80a5 	bne.w	800c58c <d_array_type+0x1850>
 800b442:	3103      	adds	r1, #3
 800b444:	60e1      	str	r1, [r4, #12]
 800b446:	2000      	movs	r0, #0
 800b448:	6962      	ldr	r2, [r4, #20]
 800b44a:	69a3      	ldr	r3, [r4, #24]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	da21      	bge.n	800b494 <d_array_type+0x758>
 800b450:	230c      	movs	r3, #12
 800b452:	6921      	ldr	r1, [r4, #16]
 800b454:	fb03 f302 	mul.w	r3, r3, r2
 800b458:	18cd      	adds	r5, r1, r3
 800b45a:	f102 0201 	add.w	r2, r2, #1
 800b45e:	6162      	str	r2, [r4, #20]
 800b460:	f43f ad0c 	beq.w	800ae7c <d_array_type+0x140>
 800b464:	2206      	movs	r2, #6
 800b466:	54ca      	strb	r2, [r1, r3]
 800b468:	6068      	str	r0, [r5, #4]
 800b46a:	e507      	b.n	800ae7c <d_array_type+0x140>
 800b46c:	784b      	ldrb	r3, [r1, #1]
 800b46e:	2b72      	cmp	r3, #114	; 0x72
 800b470:	f000 865a 	beq.w	800c128 <d_array_type+0x13ec>
 800b474:	2b70      	cmp	r3, #112	; 0x70
 800b476:	f47f adf5 	bne.w	800b064 <d_array_type+0x328>
 800b47a:	3102      	adds	r1, #2
 800b47c:	60e1      	str	r1, [r4, #12]
 800b47e:	4620      	mov	r0, r4
 800b480:	f7ff f91a 	bl	800a6b8 <d_expression_1>
 800b484:	2149      	movs	r1, #73	; 0x49
 800b486:	4602      	mov	r2, r0
 800b488:	2300      	movs	r3, #0
 800b48a:	4620      	mov	r0, r4
 800b48c:	f7f8 fe02 	bl	8004094 <d_make_comp>
 800b490:	4605      	mov	r5, r0
 800b492:	e607      	b.n	800b0a4 <d_array_type+0x368>
 800b494:	2500      	movs	r5, #0
 800b496:	e4f1      	b.n	800ae7c <d_array_type+0x140>
 800b498:	784b      	ldrb	r3, [r1, #1]
 800b49a:	2b6e      	cmp	r3, #110	; 0x6e
 800b49c:	f47f af28 	bne.w	800b2f0 <d_array_type+0x5b4>
 800b4a0:	3102      	adds	r1, #2
 800b4a2:	60e1      	str	r1, [r4, #12]
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	f7fe fb19 	bl	8009adc <d_unqualified_name>
 800b4aa:	68e1      	ldr	r1, [r4, #12]
 800b4ac:	4605      	mov	r5, r0
 800b4ae:	780b      	ldrb	r3, [r1, #0]
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	f43f af3f 	beq.w	800b334 <d_array_type+0x5f8>
 800b4b6:	2b49      	cmp	r3, #73	; 0x49
 800b4b8:	f47f af3c 	bne.w	800b334 <d_array_type+0x5f8>
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f7fc f9a9 	bl	8007814 <d_template_args>
 800b4c2:	462a      	mov	r2, r5
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2104      	movs	r1, #4
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f7f8 fde3 	bl	8004094 <d_make_comp>
 800b4ce:	68e1      	ldr	r1, [r4, #12]
 800b4d0:	4605      	mov	r5, r0
 800b4d2:	780b      	ldrb	r3, [r1, #0]
 800b4d4:	e72e      	b.n	800b334 <d_array_type+0x5f8>
 800b4d6:	784b      	ldrb	r3, [r1, #1]
 800b4d8:	2b6e      	cmp	r3, #110	; 0x6e
 800b4da:	f47f af45 	bne.w	800b368 <d_array_type+0x62c>
 800b4de:	3102      	adds	r1, #2
 800b4e0:	60e1      	str	r1, [r4, #12]
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f7fe fafa 	bl	8009adc <d_unqualified_name>
 800b4e8:	4681      	mov	r9, r0
 800b4ea:	2800      	cmp	r0, #0
 800b4ec:	f43f ad81 	beq.w	800aff2 <d_array_type+0x2b6>
 800b4f0:	68e3      	ldr	r3, [r4, #12]
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	2b49      	cmp	r3, #73	; 0x49
 800b4f6:	f47f ad7c 	bne.w	800aff2 <d_array_type+0x2b6>
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	f7fc f98a 	bl	8007814 <d_template_args>
 800b500:	464a      	mov	r2, r9
 800b502:	4603      	mov	r3, r0
 800b504:	2104      	movs	r1, #4
 800b506:	4620      	mov	r0, r4
 800b508:	f7f8 fdc4 	bl	8004094 <d_make_comp>
 800b50c:	4681      	mov	r9, r0
 800b50e:	e570      	b.n	800aff2 <d_array_type+0x2b6>
 800b510:	784b      	ldrb	r3, [r1, #1]
 800b512:	2b6e      	cmp	r3, #110	; 0x6e
 800b514:	f47f aeb0 	bne.w	800b278 <d_array_type+0x53c>
 800b518:	3102      	adds	r1, #2
 800b51a:	60e1      	str	r1, [r4, #12]
 800b51c:	4620      	mov	r0, r4
 800b51e:	f7fe fadd 	bl	8009adc <d_unqualified_name>
 800b522:	68e1      	ldr	r1, [r4, #12]
 800b524:	4607      	mov	r7, r0
 800b526:	780b      	ldrb	r3, [r1, #0]
 800b528:	2800      	cmp	r0, #0
 800b52a:	f43f aec7 	beq.w	800b2bc <d_array_type+0x580>
 800b52e:	2b49      	cmp	r3, #73	; 0x49
 800b530:	f47f aec4 	bne.w	800b2bc <d_array_type+0x580>
 800b534:	4620      	mov	r0, r4
 800b536:	f7fc f96d 	bl	8007814 <d_template_args>
 800b53a:	463a      	mov	r2, r7
 800b53c:	4603      	mov	r3, r0
 800b53e:	2104      	movs	r1, #4
 800b540:	4620      	mov	r0, r4
 800b542:	f7f8 fda7 	bl	8004094 <d_make_comp>
 800b546:	68e1      	ldr	r1, [r4, #12]
 800b548:	4607      	mov	r7, r0
 800b54a:	780b      	ldrb	r3, [r1, #0]
 800b54c:	e6b6      	b.n	800b2bc <d_array_type+0x580>
 800b54e:	784b      	ldrb	r3, [r1, #1]
 800b550:	2b70      	cmp	r3, #112	; 0x70
 800b552:	f47f ad87 	bne.w	800b064 <d_array_type+0x328>
 800b556:	1c8b      	adds	r3, r1, #2
 800b558:	60e3      	str	r3, [r4, #12]
 800b55a:	788b      	ldrb	r3, [r1, #2]
 800b55c:	2b54      	cmp	r3, #84	; 0x54
 800b55e:	f040 8436 	bne.w	800bdce <d_array_type+0x1092>
 800b562:	3103      	adds	r1, #3
 800b564:	60e1      	str	r1, [r4, #12]
 800b566:	2000      	movs	r0, #0
 800b568:	6962      	ldr	r2, [r4, #20]
 800b56a:	69a3      	ldr	r3, [r4, #24]
 800b56c:	429a      	cmp	r2, r3
 800b56e:	f280 8434 	bge.w	800bdda <d_array_type+0x109e>
 800b572:	230c      	movs	r3, #12
 800b574:	6921      	ldr	r1, [r4, #16]
 800b576:	fb03 f302 	mul.w	r3, r3, r2
 800b57a:	18cd      	adds	r5, r1, r3
 800b57c:	f102 0201 	add.w	r2, r2, #1
 800b580:	6162      	str	r2, [r4, #20]
 800b582:	f43f ad8f 	beq.w	800b0a4 <d_array_type+0x368>
 800b586:	2206      	movs	r2, #6
 800b588:	54ca      	strb	r2, [r1, r3]
 800b58a:	6068      	str	r0, [r5, #4]
 800b58c:	e58a      	b.n	800b0a4 <d_array_type+0x368>
 800b58e:	4620      	mov	r0, r4
 800b590:	f7fc f940 	bl	8007814 <d_template_args>
 800b594:	463a      	mov	r2, r7
 800b596:	4603      	mov	r3, r0
 800b598:	2104      	movs	r1, #4
 800b59a:	4620      	mov	r0, r4
 800b59c:	f7f8 fd7a 	bl	8004094 <d_make_comp>
 800b5a0:	4607      	mov	r7, r0
 800b5a2:	e59b      	b.n	800b0dc <d_array_type+0x3a0>
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	60e3      	str	r3, [r4, #12]
 800b5a8:	f04f 0900 	mov.w	r9, #0
 800b5ac:	e521      	b.n	800aff2 <d_array_type+0x2b6>
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f7ff f882 	bl	800a6b8 <d_expression_1>
 800b5b4:	4607      	mov	r7, r0
 800b5b6:	e591      	b.n	800b0dc <d_array_type+0x3a0>
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f7fb fe8d 	bl	80072d8 <d_expr_primary>
 800b5be:	4605      	mov	r5, r0
 800b5c0:	e570      	b.n	800b0a4 <d_array_type+0x368>
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f7f8 ffb4 	bl	8004530 <d_template_param>
 800b5c8:	4605      	mov	r5, r0
 800b5ca:	e56b      	b.n	800b0a4 <d_array_type+0x368>
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	f7f8 ffaf 	bl	8004530 <d_template_param>
 800b5d2:	4605      	mov	r5, r0
 800b5d4:	e452      	b.n	800ae7c <d_array_type+0x140>
 800b5d6:	784b      	ldrb	r3, [r1, #1]
 800b5d8:	2b70      	cmp	r3, #112	; 0x70
 800b5da:	f47f ae89 	bne.w	800b2f0 <d_array_type+0x5b4>
 800b5de:	1c8b      	adds	r3, r1, #2
 800b5e0:	60e3      	str	r3, [r4, #12]
 800b5e2:	788b      	ldrb	r3, [r1, #2]
 800b5e4:	2b54      	cmp	r3, #84	; 0x54
 800b5e6:	f040 836a 	bne.w	800bcbe <d_array_type+0xf82>
 800b5ea:	3103      	adds	r1, #3
 800b5ec:	60e1      	str	r1, [r4, #12]
 800b5ee:	2000      	movs	r0, #0
 800b5f0:	6962      	ldr	r2, [r4, #20]
 800b5f2:	69a3      	ldr	r3, [r4, #24]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	da29      	bge.n	800b64c <d_array_type+0x910>
 800b5f8:	230c      	movs	r3, #12
 800b5fa:	6921      	ldr	r1, [r4, #16]
 800b5fc:	fb03 f302 	mul.w	r3, r3, r2
 800b600:	18cd      	adds	r5, r1, r3
 800b602:	f102 0201 	add.w	r2, r2, #1
 800b606:	6162      	str	r2, [r4, #20]
 800b608:	f000 8707 	beq.w	800c41a <d_array_type+0x16de>
 800b60c:	2206      	movs	r2, #6
 800b60e:	54ca      	strb	r2, [r1, r3]
 800b610:	6068      	str	r0, [r5, #4]
 800b612:	68e1      	ldr	r1, [r4, #12]
 800b614:	780b      	ldrb	r3, [r1, #0]
 800b616:	e68d      	b.n	800b334 <d_array_type+0x5f8>
 800b618:	784b      	ldrb	r3, [r1, #1]
 800b61a:	2b72      	cmp	r3, #114	; 0x72
 800b61c:	f000 849a 	beq.w	800bf54 <d_array_type+0x1218>
 800b620:	2b70      	cmp	r3, #112	; 0x70
 800b622:	f47f ae65 	bne.w	800b2f0 <d_array_type+0x5b4>
 800b626:	3102      	adds	r1, #2
 800b628:	60e1      	str	r1, [r4, #12]
 800b62a:	4620      	mov	r0, r4
 800b62c:	f7ff f844 	bl	800a6b8 <d_expression_1>
 800b630:	2149      	movs	r1, #73	; 0x49
 800b632:	4602      	mov	r2, r0
 800b634:	4620      	mov	r0, r4
 800b636:	2300      	movs	r3, #0
 800b638:	f7f8 fd2c 	bl	8004094 <d_make_comp>
 800b63c:	68e1      	ldr	r1, [r4, #12]
 800b63e:	4605      	mov	r5, r0
 800b640:	780b      	ldrb	r3, [r1, #0]
 800b642:	e677      	b.n	800b334 <d_array_type+0x5f8>
 800b644:	68e1      	ldr	r1, [r4, #12]
 800b646:	2700      	movs	r7, #0
 800b648:	780b      	ldrb	r3, [r1, #0]
 800b64a:	e637      	b.n	800b2bc <d_array_type+0x580>
 800b64c:	68e1      	ldr	r1, [r4, #12]
 800b64e:	2500      	movs	r5, #0
 800b650:	780b      	ldrb	r3, [r1, #0]
 800b652:	e66f      	b.n	800b334 <d_array_type+0x5f8>
 800b654:	785a      	ldrb	r2, [r3, #1]
 800b656:	2a69      	cmp	r2, #105	; 0x69
 800b658:	f47f ac6c 	bne.w	800af34 <d_array_type+0x1f8>
 800b65c:	3302      	adds	r3, #2
 800b65e:	60e3      	str	r3, [r4, #12]
 800b660:	4620      	mov	r0, r4
 800b662:	2145      	movs	r1, #69	; 0x45
 800b664:	f7fb fe98 	bl	8007398 <d_exprlist>
 800b668:	4681      	mov	r9, r0
 800b66a:	e4c2      	b.n	800aff2 <d_array_type+0x2b6>
 800b66c:	784b      	ldrb	r3, [r1, #1]
 800b66e:	2b70      	cmp	r3, #112	; 0x70
 800b670:	f47f ae7a 	bne.w	800b368 <d_array_type+0x62c>
 800b674:	1c8b      	adds	r3, r1, #2
 800b676:	60e3      	str	r3, [r4, #12]
 800b678:	788b      	ldrb	r3, [r1, #2]
 800b67a:	2b54      	cmp	r3, #84	; 0x54
 800b67c:	f040 83b0 	bne.w	800bde0 <d_array_type+0x10a4>
 800b680:	3103      	adds	r1, #3
 800b682:	60e1      	str	r1, [r4, #12]
 800b684:	2000      	movs	r0, #0
 800b686:	6962      	ldr	r2, [r4, #20]
 800b688:	69a3      	ldr	r3, [r4, #24]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	f280 8216 	bge.w	800babc <d_array_type+0xd80>
 800b690:	230c      	movs	r3, #12
 800b692:	6921      	ldr	r1, [r4, #16]
 800b694:	fb03 f302 	mul.w	r3, r3, r2
 800b698:	eb11 0903 	adds.w	r9, r1, r3
 800b69c:	f102 0201 	add.w	r2, r2, #1
 800b6a0:	6162      	str	r2, [r4, #20]
 800b6a2:	f43f aca6 	beq.w	800aff2 <d_array_type+0x2b6>
 800b6a6:	2206      	movs	r2, #6
 800b6a8:	54ca      	strb	r2, [r1, r3]
 800b6aa:	f8c9 0004 	str.w	r0, [r9, #4]
 800b6ae:	e4a0      	b.n	800aff2 <d_array_type+0x2b6>
 800b6b0:	784b      	ldrb	r3, [r1, #1]
 800b6b2:	2b72      	cmp	r3, #114	; 0x72
 800b6b4:	f000 8622 	beq.w	800c2fc <d_array_type+0x15c0>
 800b6b8:	2b70      	cmp	r3, #112	; 0x70
 800b6ba:	f47f ae55 	bne.w	800b368 <d_array_type+0x62c>
 800b6be:	3102      	adds	r1, #2
 800b6c0:	60e1      	str	r1, [r4, #12]
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f7fe fff8 	bl	800a6b8 <d_expression_1>
 800b6c8:	2149      	movs	r1, #73	; 0x49
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f7f8 fce0 	bl	8004094 <d_make_comp>
 800b6d4:	4681      	mov	r9, r0
 800b6d6:	e48c      	b.n	800aff2 <d_array_type+0x2b6>
 800b6d8:	784b      	ldrb	r3, [r1, #1]
 800b6da:	2b6c      	cmp	r3, #108	; 0x6c
 800b6dc:	f47f abb0 	bne.w	800ae40 <d_array_type+0x104>
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	f7fd fb9f 	bl	8008e24 <d_type>
 800b6e6:	68e1      	ldr	r1, [r4, #12]
 800b6e8:	4605      	mov	r5, r0
 800b6ea:	3102      	adds	r1, #2
 800b6ec:	60e1      	str	r1, [r4, #12]
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	2145      	movs	r1, #69	; 0x45
 800b6f2:	f7fb fe51 	bl	8007398 <d_exprlist>
 800b6f6:	462a      	mov	r2, r5
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2130      	movs	r1, #48	; 0x30
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	f7f8 fcc9 	bl	8004094 <d_make_comp>
 800b702:	4605      	mov	r5, r0
 800b704:	f7ff bbba 	b.w	800ae7c <d_array_type+0x140>
 800b708:	784b      	ldrb	r3, [r1, #1]
 800b70a:	2b70      	cmp	r3, #112	; 0x70
 800b70c:	f47f adb4 	bne.w	800b278 <d_array_type+0x53c>
 800b710:	1c8b      	adds	r3, r1, #2
 800b712:	60e3      	str	r3, [r4, #12]
 800b714:	788b      	ldrb	r3, [r1, #2]
 800b716:	2b54      	cmp	r3, #84	; 0x54
 800b718:	f040 85be 	bne.w	800c298 <d_array_type+0x155c>
 800b71c:	3103      	adds	r1, #3
 800b71e:	60e1      	str	r1, [r4, #12]
 800b720:	6962      	ldr	r2, [r4, #20]
 800b722:	69a3      	ldr	r3, [r4, #24]
 800b724:	429a      	cmp	r2, r3
 800b726:	da8d      	bge.n	800b644 <d_array_type+0x908>
 800b728:	230c      	movs	r3, #12
 800b72a:	6921      	ldr	r1, [r4, #16]
 800b72c:	fb03 f302 	mul.w	r3, r3, r2
 800b730:	18cf      	adds	r7, r1, r3
 800b732:	f102 0201 	add.w	r2, r2, #1
 800b736:	6162      	str	r2, [r4, #20]
 800b738:	f000 831f 	beq.w	800bd7a <d_array_type+0x103e>
 800b73c:	2206      	movs	r2, #6
 800b73e:	54ca      	strb	r2, [r1, r3]
 800b740:	6078      	str	r0, [r7, #4]
 800b742:	68e1      	ldr	r1, [r4, #12]
 800b744:	780b      	ldrb	r3, [r1, #0]
 800b746:	e5b9      	b.n	800b2bc <d_array_type+0x580>
 800b748:	784b      	ldrb	r3, [r1, #1]
 800b74a:	2b72      	cmp	r3, #114	; 0x72
 800b74c:	f000 8160 	beq.w	800ba10 <d_array_type+0xcd4>
 800b750:	2b70      	cmp	r3, #112	; 0x70
 800b752:	f47f ad91 	bne.w	800b278 <d_array_type+0x53c>
 800b756:	3102      	adds	r1, #2
 800b758:	60e1      	str	r1, [r4, #12]
 800b75a:	4620      	mov	r0, r4
 800b75c:	f7fe ffac 	bl	800a6b8 <d_expression_1>
 800b760:	462b      	mov	r3, r5
 800b762:	4602      	mov	r2, r0
 800b764:	2149      	movs	r1, #73	; 0x49
 800b766:	4620      	mov	r0, r4
 800b768:	f7f8 fc94 	bl	8004094 <d_make_comp>
 800b76c:	68e1      	ldr	r1, [r4, #12]
 800b76e:	4607      	mov	r7, r0
 800b770:	780b      	ldrb	r3, [r1, #0]
 800b772:	e5a3      	b.n	800b2bc <d_array_type+0x580>
 800b774:	4620      	mov	r0, r4
 800b776:	f7fb fdaf 	bl	80072d8 <d_expr_primary>
 800b77a:	4605      	mov	r5, r0
 800b77c:	f7ff bb7e 	b.w	800ae7c <d_array_type+0x140>
 800b780:	2b74      	cmp	r3, #116	; 0x74
 800b782:	f47f ac6f 	bne.w	800b064 <d_array_type+0x328>
 800b786:	784b      	ldrb	r3, [r1, #1]
 800b788:	2b6c      	cmp	r3, #108	; 0x6c
 800b78a:	f47f ac6b 	bne.w	800b064 <d_array_type+0x328>
 800b78e:	4620      	mov	r0, r4
 800b790:	f7fd fb48 	bl	8008e24 <d_type>
 800b794:	68e1      	ldr	r1, [r4, #12]
 800b796:	4605      	mov	r5, r0
 800b798:	3102      	adds	r1, #2
 800b79a:	60e1      	str	r1, [r4, #12]
 800b79c:	4620      	mov	r0, r4
 800b79e:	2145      	movs	r1, #69	; 0x45
 800b7a0:	f7fb fdfa 	bl	8007398 <d_exprlist>
 800b7a4:	462a      	mov	r2, r5
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2130      	movs	r1, #48	; 0x30
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	f7f8 fc72 	bl	8004094 <d_make_comp>
 800b7b0:	4605      	mov	r5, r0
 800b7b2:	e477      	b.n	800b0a4 <d_array_type+0x368>
 800b7b4:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800b7b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b7ba:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b7be:	f8da 9000 	ldr.w	r9, [sl]
 800b7c2:	49d1      	ldr	r1, [pc, #836]	; (800bb08 <d_array_type+0xdcc>)
 800b7c4:	3b02      	subs	r3, #2
 800b7c6:	4413      	add	r3, r2
 800b7c8:	6323      	str	r3, [r4, #48]	; 0x30
 800b7ca:	4648      	mov	r0, r9
 800b7cc:	f001 faa9 	bl	800cd22 <strcmp>
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	f000 8525 	beq.w	800c220 <d_array_type+0x14e4>
 800b7d6:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b7da:	2b03      	cmp	r3, #3
 800b7dc:	f200 82fd 	bhi.w	800bdda <d_array_type+0x109e>
 800b7e0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b7e4:	052a0515 	.word	0x052a0515
 800b7e8:	044004c4 	.word	0x044004c4
 800b7ec:	686b      	ldr	r3, [r5, #4]
 800b7ee:	2b03      	cmp	r3, #3
 800b7f0:	f63f ae50 	bhi.w	800b494 <d_array_type+0x758>
 800b7f4:	a201      	add	r2, pc, #4	; (adr r2, 800b7fc <d_array_type+0xac0>)
 800b7f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7fa:	bf00      	nop
 800b7fc:	0800b819 	.word	0x0800b819
 800b800:	0800ae69 	.word	0x0800ae69
 800b804:	0800b86d 	.word	0x0800b86d
 800b808:	0800b8ed 	.word	0x0800b8ed
 800b80c:	784b      	ldrb	r3, [r1, #1]
 800b80e:	2b6c      	cmp	r3, #108	; 0x6c
 800b810:	f47f ab16 	bne.w	800ae40 <d_array_type+0x104>
 800b814:	2500      	movs	r5, #0
 800b816:	e768      	b.n	800b6ea <d_array_type+0x9ae>
 800b818:	462a      	mov	r2, r5
 800b81a:	4620      	mov	r0, r4
 800b81c:	2134      	movs	r1, #52	; 0x34
 800b81e:	2300      	movs	r3, #0
 800b820:	f7f8 fc38 	bl	8004094 <d_make_comp>
 800b824:	4605      	mov	r5, r0
 800b826:	f7ff bb29 	b.w	800ae7c <d_array_type+0x140>
 800b82a:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800b82e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b830:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b834:	f8da 9000 	ldr.w	r9, [sl]
 800b838:	49b3      	ldr	r1, [pc, #716]	; (800bb08 <d_array_type+0xdcc>)
 800b83a:	3b02      	subs	r3, #2
 800b83c:	4413      	add	r3, r2
 800b83e:	6323      	str	r3, [r4, #48]	; 0x30
 800b840:	4648      	mov	r0, r9
 800b842:	f001 fa6e 	bl	800cd22 <strcmp>
 800b846:	2800      	cmp	r0, #0
 800b848:	f000 809f 	beq.w	800b98a <d_array_type+0xc4e>
 800b84c:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b850:	2b03      	cmp	r3, #3
 800b852:	f63f ae1f 	bhi.w	800b494 <d_array_type+0x758>
 800b856:	a201      	add	r2, pc, #4	; (adr r2, 800b85c <d_array_type+0xb20>)
 800b858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b85c:	0800b819 	.word	0x0800b819
 800b860:	0800b9cb 	.word	0x0800b9cb
 800b864:	0800b871 	.word	0x0800b871
 800b868:	0800b8f1 	.word	0x0800b8f1
 800b86c:	f04f 0900 	mov.w	r9, #0
 800b870:	686b      	ldr	r3, [r5, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	785a      	ldrb	r2, [r3, #1]
 800b876:	2a63      	cmp	r2, #99	; 0x63
 800b878:	f000 8099 	beq.w	800b9ae <d_array_type+0xc72>
 800b87c:	4620      	mov	r0, r4
 800b87e:	f7fe ff1b 	bl	800a6b8 <d_expression_1>
 800b882:	4682      	mov	sl, r0
 800b884:	4648      	mov	r0, r9
 800b886:	49a1      	ldr	r1, [pc, #644]	; (800bb0c <d_array_type+0xdd0>)
 800b888:	f001 fa4b 	bl	800cd22 <strcmp>
 800b88c:	2800      	cmp	r0, #0
 800b88e:	f000 8088 	beq.w	800b9a2 <d_array_type+0xc66>
 800b892:	4648      	mov	r0, r9
 800b894:	499e      	ldr	r1, [pc, #632]	; (800bb10 <d_array_type+0xdd4>)
 800b896:	f001 fa44 	bl	800cd22 <strcmp>
 800b89a:	b130      	cbz	r0, 800b8aa <d_array_type+0xb6e>
 800b89c:	4648      	mov	r0, r9
 800b89e:	499d      	ldr	r1, [pc, #628]	; (800bb14 <d_array_type+0xdd8>)
 800b8a0:	f001 fa3f 	bl	800cd22 <strcmp>
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	f040 80aa 	bne.w	800b9fe <d_array_type+0xcc2>
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f7fe f916 	bl	8009adc <d_unqualified_name>
 800b8b0:	68e3      	ldr	r3, [r4, #12]
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	2b49      	cmp	r3, #73	; 0x49
 800b8b6:	4681      	mov	r9, r0
 800b8b8:	d109      	bne.n	800b8ce <d_array_type+0xb92>
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	f7fb ffaa 	bl	8007814 <d_template_args>
 800b8c0:	464a      	mov	r2, r9
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2104      	movs	r1, #4
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f7f8 fbe4 	bl	8004094 <d_make_comp>
 800b8cc:	4681      	mov	r9, r0
 800b8ce:	4652      	mov	r2, sl
 800b8d0:	464b      	mov	r3, r9
 800b8d2:	2137      	movs	r1, #55	; 0x37
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f7f8 fbdd 	bl	8004094 <d_make_comp>
 800b8da:	462a      	mov	r2, r5
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2136      	movs	r1, #54	; 0x36
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	f7f8 fbd7 	bl	8004094 <d_make_comp>
 800b8e6:	4605      	mov	r5, r0
 800b8e8:	f7ff bac8 	b.w	800ae7c <d_array_type+0x140>
 800b8ec:	f04f 0900 	mov.w	r9, #0
 800b8f0:	4648      	mov	r0, r9
 800b8f2:	4989      	ldr	r1, [pc, #548]	; (800bb18 <d_array_type+0xddc>)
 800b8f4:	f001 fa15 	bl	800cd22 <strcmp>
 800b8f8:	b3d8      	cbz	r0, 800b972 <d_array_type+0xc36>
 800b8fa:	f899 3000 	ldrb.w	r3, [r9]
 800b8fe:	2b6e      	cmp	r3, #110	; 0x6e
 800b900:	f47f adc8 	bne.w	800b494 <d_array_type+0x758>
 800b904:	f899 3001 	ldrb.w	r3, [r9, #1]
 800b908:	2b77      	cmp	r3, #119	; 0x77
 800b90a:	d002      	beq.n	800b912 <d_array_type+0xbd6>
 800b90c:	2b61      	cmp	r3, #97	; 0x61
 800b90e:	f47f adc1 	bne.w	800b494 <d_array_type+0x758>
 800b912:	215f      	movs	r1, #95	; 0x5f
 800b914:	4620      	mov	r0, r4
 800b916:	f7fb fd3f 	bl	8007398 <d_exprlist>
 800b91a:	4681      	mov	r9, r0
 800b91c:	4620      	mov	r0, r4
 800b91e:	f7fd fa81 	bl	8008e24 <d_type>
 800b922:	68e3      	ldr	r3, [r4, #12]
 800b924:	781a      	ldrb	r2, [r3, #0]
 800b926:	2a45      	cmp	r2, #69	; 0x45
 800b928:	4682      	mov	sl, r0
 800b92a:	f000 80a1 	beq.w	800ba70 <d_array_type+0xd34>
 800b92e:	2a70      	cmp	r2, #112	; 0x70
 800b930:	f000 8093 	beq.w	800ba5a <d_array_type+0xd1e>
 800b934:	2a69      	cmp	r2, #105	; 0x69
 800b936:	f47f adad 	bne.w	800b494 <d_array_type+0x758>
 800b93a:	785b      	ldrb	r3, [r3, #1]
 800b93c:	2b6c      	cmp	r3, #108	; 0x6c
 800b93e:	f47f ada9 	bne.w	800b494 <d_array_type+0x758>
 800b942:	4620      	mov	r0, r4
 800b944:	f7fe feb8 	bl	800a6b8 <d_expression_1>
 800b948:	4603      	mov	r3, r0
 800b94a:	4652      	mov	r2, sl
 800b94c:	213a      	movs	r1, #58	; 0x3a
 800b94e:	4620      	mov	r0, r4
 800b950:	f7f8 fba0 	bl	8004094 <d_make_comp>
 800b954:	464a      	mov	r2, r9
 800b956:	4603      	mov	r3, r0
 800b958:	2139      	movs	r1, #57	; 0x39
 800b95a:	4620      	mov	r0, r4
 800b95c:	f7f8 fb9a 	bl	8004094 <d_make_comp>
 800b960:	462a      	mov	r2, r5
 800b962:	4603      	mov	r3, r0
 800b964:	2138      	movs	r1, #56	; 0x38
 800b966:	4620      	mov	r0, r4
 800b968:	f7f8 fb94 	bl	8004094 <d_make_comp>
 800b96c:	4605      	mov	r5, r0
 800b96e:	f7ff ba85 	b.w	800ae7c <d_array_type+0x140>
 800b972:	4620      	mov	r0, r4
 800b974:	f7fe fea0 	bl	800a6b8 <d_expression_1>
 800b978:	4681      	mov	r9, r0
 800b97a:	4620      	mov	r0, r4
 800b97c:	f7fe fe9c 	bl	800a6b8 <d_expression_1>
 800b980:	4682      	mov	sl, r0
 800b982:	4620      	mov	r0, r4
 800b984:	f7fe fe98 	bl	800a6b8 <d_expression_1>
 800b988:	e7de      	b.n	800b948 <d_array_type+0xc0c>
 800b98a:	4620      	mov	r0, r4
 800b98c:	f7fd fa4a 	bl	8008e24 <d_type>
 800b990:	4603      	mov	r3, r0
 800b992:	462a      	mov	r2, r5
 800b994:	4620      	mov	r0, r4
 800b996:	2135      	movs	r1, #53	; 0x35
 800b998:	f7f8 fb7c 	bl	8004094 <d_make_comp>
 800b99c:	4605      	mov	r5, r0
 800b99e:	f7ff ba6d 	b.w	800ae7c <d_array_type+0x140>
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	2145      	movs	r1, #69	; 0x45
 800b9a6:	f7fb fcf7 	bl	8007398 <d_exprlist>
 800b9aa:	4681      	mov	r9, r0
 800b9ac:	e78f      	b.n	800b8ce <d_array_type+0xb92>
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800b9b4:	2a01      	cmp	r2, #1
 800b9b6:	d903      	bls.n	800b9c0 <d_array_type+0xc84>
 800b9b8:	3b72      	subs	r3, #114	; 0x72
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	f63f af5e 	bhi.w	800b87c <d_array_type+0xb40>
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	f7fd fa2f 	bl	8008e24 <d_type>
 800b9c6:	4682      	mov	sl, r0
 800b9c8:	e75c      	b.n	800b884 <d_array_type+0xb48>
 800b9ca:	f899 3000 	ldrb.w	r3, [r9]
 800b9ce:	2b70      	cmp	r3, #112	; 0x70
 800b9d0:	d002      	beq.n	800b9d8 <d_array_type+0xc9c>
 800b9d2:	2b6d      	cmp	r3, #109	; 0x6d
 800b9d4:	f47f aa48 	bne.w	800ae68 <d_array_type+0x12c>
 800b9d8:	f899 2001 	ldrb.w	r2, [r9, #1]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	f47f aa43 	bne.w	800ae68 <d_array_type+0x12c>
 800b9e2:	68e3      	ldr	r3, [r4, #12]
 800b9e4:	781a      	ldrb	r2, [r3, #0]
 800b9e6:	2a5f      	cmp	r2, #95	; 0x5f
 800b9e8:	d00e      	beq.n	800ba08 <d_array_type+0xccc>
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	f7fe fe64 	bl	800a6b8 <d_expression_1>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	2137      	movs	r1, #55	; 0x37
 800b9f8:	f7f8 fb4c 	bl	8004094 <d_make_comp>
 800b9fc:	e7c8      	b.n	800b990 <d_array_type+0xc54>
 800b9fe:	4620      	mov	r0, r4
 800ba00:	f7fe fe5a 	bl	800a6b8 <d_expression_1>
 800ba04:	4681      	mov	r9, r0
 800ba06:	e762      	b.n	800b8ce <d_array_type+0xb92>
 800ba08:	3301      	adds	r3, #1
 800ba0a:	60e3      	str	r3, [r4, #12]
 800ba0c:	f7ff ba2c 	b.w	800ae68 <d_array_type+0x12c>
 800ba10:	3102      	adds	r1, #2
 800ba12:	60e1      	str	r1, [r4, #12]
 800ba14:	4620      	mov	r0, r4
 800ba16:	f7fd fa05 	bl	8008e24 <d_type>
 800ba1a:	4605      	mov	r5, r0
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	f7fe f85d 	bl	8009adc <d_unqualified_name>
 800ba22:	68e3      	ldr	r3, [r4, #12]
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	2b49      	cmp	r3, #73	; 0x49
 800ba28:	4607      	mov	r7, r0
 800ba2a:	d009      	beq.n	800ba40 <d_array_type+0xd04>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	462a      	mov	r2, r5
 800ba30:	4620      	mov	r0, r4
 800ba32:	2101      	movs	r1, #1
 800ba34:	f7f8 fb2e 	bl	8004094 <d_make_comp>
 800ba38:	68e1      	ldr	r1, [r4, #12]
 800ba3a:	4607      	mov	r7, r0
 800ba3c:	780b      	ldrb	r3, [r1, #0]
 800ba3e:	e43d      	b.n	800b2bc <d_array_type+0x580>
 800ba40:	4620      	mov	r0, r4
 800ba42:	f7fb fee7 	bl	8007814 <d_template_args>
 800ba46:	463a      	mov	r2, r7
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2104      	movs	r1, #4
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	f7f8 fb21 	bl	8004094 <d_make_comp>
 800ba52:	462a      	mov	r2, r5
 800ba54:	4603      	mov	r3, r0
 800ba56:	4620      	mov	r0, r4
 800ba58:	e7eb      	b.n	800ba32 <d_array_type+0xcf6>
 800ba5a:	785a      	ldrb	r2, [r3, #1]
 800ba5c:	2a69      	cmp	r2, #105	; 0x69
 800ba5e:	f47f ad19 	bne.w	800b494 <d_array_type+0x758>
 800ba62:	3302      	adds	r3, #2
 800ba64:	60e3      	str	r3, [r4, #12]
 800ba66:	4620      	mov	r0, r4
 800ba68:	2145      	movs	r1, #69	; 0x45
 800ba6a:	f7fb fc95 	bl	8007398 <d_exprlist>
 800ba6e:	e76b      	b.n	800b948 <d_array_type+0xc0c>
 800ba70:	3301      	adds	r3, #1
 800ba72:	60e3      	str	r3, [r4, #12]
 800ba74:	2000      	movs	r0, #0
 800ba76:	e767      	b.n	800b948 <d_array_type+0xc0c>
 800ba78:	3101      	adds	r1, #1
 800ba7a:	60e1      	str	r1, [r4, #12]
 800ba7c:	f7ff bb84 	b.w	800b188 <d_array_type+0x44c>
 800ba80:	3102      	adds	r1, #2
 800ba82:	60e1      	str	r1, [r4, #12]
 800ba84:	4620      	mov	r0, r4
 800ba86:	f7fd f9cd 	bl	8008e24 <d_type>
 800ba8a:	4605      	mov	r5, r0
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f7fe f825 	bl	8009adc <d_unqualified_name>
 800ba92:	68e3      	ldr	r3, [r4, #12]
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	2b49      	cmp	r3, #73	; 0x49
 800ba98:	4681      	mov	r9, r0
 800ba9a:	d013      	beq.n	800bac4 <d_array_type+0xd88>
 800ba9c:	462a      	mov	r2, r5
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2101      	movs	r1, #1
 800baa2:	4620      	mov	r0, r4
 800baa4:	f7f8 faf6 	bl	8004094 <d_make_comp>
 800baa8:	4605      	mov	r5, r0
 800baaa:	f7ff b9e7 	b.w	800ae7c <d_array_type+0x140>
 800baae:	3301      	adds	r3, #1
 800bab0:	60e3      	str	r3, [r4, #12]
 800bab2:	4620      	mov	r0, r4
 800bab4:	2145      	movs	r1, #69	; 0x45
 800bab6:	f7fb fc6f 	bl	8007398 <d_exprlist>
 800baba:	e46e      	b.n	800b39a <d_array_type+0x65e>
 800babc:	f04f 0900 	mov.w	r9, #0
 800bac0:	f7ff ba97 	b.w	800aff2 <d_array_type+0x2b6>
 800bac4:	4620      	mov	r0, r4
 800bac6:	f7fb fea5 	bl	8007814 <d_template_args>
 800baca:	464a      	mov	r2, r9
 800bacc:	4603      	mov	r3, r0
 800bace:	2104      	movs	r1, #4
 800bad0:	4620      	mov	r0, r4
 800bad2:	f7f8 fadf 	bl	8004094 <d_make_comp>
 800bad6:	462a      	mov	r2, r5
 800bad8:	4603      	mov	r3, r0
 800bada:	2101      	movs	r1, #1
 800badc:	4620      	mov	r0, r4
 800bade:	f7f8 fad9 	bl	8004094 <d_make_comp>
 800bae2:	4605      	mov	r5, r0
 800bae4:	f7ff b9ca 	b.w	800ae7c <d_array_type+0x140>
 800bae8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800baec:	2b03      	cmp	r3, #3
 800baee:	d8e5      	bhi.n	800babc <d_array_type+0xd80>
 800baf0:	a201      	add	r2, pc, #4	; (adr r2, 800baf8 <d_array_type+0xdbc>)
 800baf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf6:	bf00      	nop
 800baf8:	0800bfa1 	.word	0x0800bfa1
 800bafc:	0800b395 	.word	0x0800b395
 800bb00:	0800bbe7 	.word	0x0800bbe7
 800bb04:	0800bb51 	.word	0x0800bb51
 800bb08:	0800ea04 	.word	0x0800ea04
 800bb0c:	0800e6f0 	.word	0x0800e6f0
 800bb10:	0800e810 	.word	0x0800e810
 800bb14:	0800e814 	.word	0x0800e814
 800bb18:	0800e6f8 	.word	0x0800e6f8
 800bb1c:	6841      	ldr	r1, [r0, #4]
 800bb1e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bb20:	688b      	ldr	r3, [r1, #8]
 800bb22:	f8d1 a000 	ldr.w	sl, [r1]
 800bb26:	49bc      	ldr	r1, [pc, #752]	; (800be18 <d_array_type+0x10dc>)
 800bb28:	3b02      	subs	r3, #2
 800bb2a:	4413      	add	r3, r2
 800bb2c:	6323      	str	r3, [r4, #48]	; 0x30
 800bb2e:	4650      	mov	r0, sl
 800bb30:	f001 f8f7 	bl	800cd22 <strcmp>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	f000 827c 	beq.w	800c032 <d_array_type+0x12f6>
 800bb3a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	2b03      	cmp	r3, #3
 800bb42:	d8bb      	bhi.n	800babc <d_array_type+0xd80>
 800bb44:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bb48:	0255022c 	.word	0x0255022c
 800bb4c:	00060051 	.word	0x00060051
 800bb50:	f04f 0a00 	mov.w	sl, #0
 800bb54:	4650      	mov	r0, sl
 800bb56:	49b1      	ldr	r1, [pc, #708]	; (800be1c <d_array_type+0x10e0>)
 800bb58:	f001 f8e3 	bl	800cd22 <strcmp>
 800bb5c:	b3b8      	cbz	r0, 800bbce <d_array_type+0xe92>
 800bb5e:	f89a 3000 	ldrb.w	r3, [sl]
 800bb62:	2b6e      	cmp	r3, #110	; 0x6e
 800bb64:	d1aa      	bne.n	800babc <d_array_type+0xd80>
 800bb66:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800bb6a:	2b77      	cmp	r3, #119	; 0x77
 800bb6c:	d001      	beq.n	800bb72 <d_array_type+0xe36>
 800bb6e:	2b61      	cmp	r3, #97	; 0x61
 800bb70:	d1a4      	bne.n	800babc <d_array_type+0xd80>
 800bb72:	215f      	movs	r1, #95	; 0x5f
 800bb74:	4620      	mov	r0, r4
 800bb76:	f7fb fc0f 	bl	8007398 <d_exprlist>
 800bb7a:	4682      	mov	sl, r0
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f7fd f951 	bl	8008e24 <d_type>
 800bb82:	68e3      	ldr	r3, [r4, #12]
 800bb84:	781a      	ldrb	r2, [r3, #0]
 800bb86:	2a45      	cmp	r2, #69	; 0x45
 800bb88:	4683      	mov	fp, r0
 800bb8a:	f000 8265 	beq.w	800c058 <d_array_type+0x131c>
 800bb8e:	2a70      	cmp	r2, #112	; 0x70
 800bb90:	f000 8257 	beq.w	800c042 <d_array_type+0x1306>
 800bb94:	2a69      	cmp	r2, #105	; 0x69
 800bb96:	d191      	bne.n	800babc <d_array_type+0xd80>
 800bb98:	785b      	ldrb	r3, [r3, #1]
 800bb9a:	2b6c      	cmp	r3, #108	; 0x6c
 800bb9c:	d18e      	bne.n	800babc <d_array_type+0xd80>
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f7fe fd8a 	bl	800a6b8 <d_expression_1>
 800bba4:	4603      	mov	r3, r0
 800bba6:	465a      	mov	r2, fp
 800bba8:	213a      	movs	r1, #58	; 0x3a
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f7f8 fa72 	bl	8004094 <d_make_comp>
 800bbb0:	4652      	mov	r2, sl
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2139      	movs	r1, #57	; 0x39
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	f7f8 fa6c 	bl	8004094 <d_make_comp>
 800bbbc:	464a      	mov	r2, r9
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2138      	movs	r1, #56	; 0x38
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	f7f8 fa66 	bl	8004094 <d_make_comp>
 800bbc8:	4681      	mov	r9, r0
 800bbca:	f7ff ba12 	b.w	800aff2 <d_array_type+0x2b6>
 800bbce:	4620      	mov	r0, r4
 800bbd0:	f7fe fd72 	bl	800a6b8 <d_expression_1>
 800bbd4:	4682      	mov	sl, r0
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	f7fe fd6e 	bl	800a6b8 <d_expression_1>
 800bbdc:	4683      	mov	fp, r0
 800bbde:	4620      	mov	r0, r4
 800bbe0:	f7fe fd6a 	bl	800a6b8 <d_expression_1>
 800bbe4:	e7de      	b.n	800bba4 <d_array_type+0xe68>
 800bbe6:	f04f 0a00 	mov.w	sl, #0
 800bbea:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	785a      	ldrb	r2, [r3, #1]
 800bbf2:	2a63      	cmp	r2, #99	; 0x63
 800bbf4:	d039      	beq.n	800bc6a <d_array_type+0xf2e>
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	f7fe fd5e 	bl	800a6b8 <d_expression_1>
 800bbfc:	4683      	mov	fp, r0
 800bbfe:	4650      	mov	r0, sl
 800bc00:	4987      	ldr	r1, [pc, #540]	; (800be20 <d_array_type+0x10e4>)
 800bc02:	f001 f88e 	bl	800cd22 <strcmp>
 800bc06:	b350      	cbz	r0, 800bc5e <d_array_type+0xf22>
 800bc08:	4650      	mov	r0, sl
 800bc0a:	4986      	ldr	r1, [pc, #536]	; (800be24 <d_array_type+0x10e8>)
 800bc0c:	f001 f889 	bl	800cd22 <strcmp>
 800bc10:	b120      	cbz	r0, 800bc1c <d_array_type+0xee0>
 800bc12:	4650      	mov	r0, sl
 800bc14:	4984      	ldr	r1, [pc, #528]	; (800be28 <d_array_type+0x10ec>)
 800bc16:	f001 f884 	bl	800cd22 <strcmp>
 800bc1a:	bb98      	cbnz	r0, 800bc84 <d_array_type+0xf48>
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	f7fd ff5d 	bl	8009adc <d_unqualified_name>
 800bc22:	68e3      	ldr	r3, [r4, #12]
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	2b49      	cmp	r3, #73	; 0x49
 800bc28:	4682      	mov	sl, r0
 800bc2a:	d109      	bne.n	800bc40 <d_array_type+0xf04>
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	f7fb fdf1 	bl	8007814 <d_template_args>
 800bc32:	4652      	mov	r2, sl
 800bc34:	4603      	mov	r3, r0
 800bc36:	2104      	movs	r1, #4
 800bc38:	4620      	mov	r0, r4
 800bc3a:	f7f8 fa2b 	bl	8004094 <d_make_comp>
 800bc3e:	4682      	mov	sl, r0
 800bc40:	465a      	mov	r2, fp
 800bc42:	4653      	mov	r3, sl
 800bc44:	2137      	movs	r1, #55	; 0x37
 800bc46:	4620      	mov	r0, r4
 800bc48:	f7f8 fa24 	bl	8004094 <d_make_comp>
 800bc4c:	464a      	mov	r2, r9
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2136      	movs	r1, #54	; 0x36
 800bc52:	4620      	mov	r0, r4
 800bc54:	f7f8 fa1e 	bl	8004094 <d_make_comp>
 800bc58:	4681      	mov	r9, r0
 800bc5a:	f7ff b9ca 	b.w	800aff2 <d_array_type+0x2b6>
 800bc5e:	4620      	mov	r0, r4
 800bc60:	2145      	movs	r1, #69	; 0x45
 800bc62:	f7fb fb99 	bl	8007398 <d_exprlist>
 800bc66:	4682      	mov	sl, r0
 800bc68:	e7ea      	b.n	800bc40 <d_array_type+0xf04>
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800bc70:	2a01      	cmp	r2, #1
 800bc72:	d902      	bls.n	800bc7a <d_array_type+0xf3e>
 800bc74:	3b72      	subs	r3, #114	; 0x72
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d8bd      	bhi.n	800bbf6 <d_array_type+0xeba>
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f7fd f8d2 	bl	8008e24 <d_type>
 800bc80:	4683      	mov	fp, r0
 800bc82:	e7bc      	b.n	800bbfe <d_array_type+0xec2>
 800bc84:	4620      	mov	r0, r4
 800bc86:	f7fe fd17 	bl	800a6b8 <d_expression_1>
 800bc8a:	4682      	mov	sl, r0
 800bc8c:	e7d8      	b.n	800bc40 <d_array_type+0xf04>
 800bc8e:	4620      	mov	r0, r4
 800bc90:	f7fb fb22 	bl	80072d8 <d_expr_primary>
 800bc94:	68e1      	ldr	r1, [r4, #12]
 800bc96:	4605      	mov	r5, r0
 800bc98:	780b      	ldrb	r3, [r1, #0]
 800bc9a:	f7ff bb4b 	b.w	800b334 <d_array_type+0x5f8>
 800bc9e:	3301      	adds	r3, #1
 800bca0:	60e3      	str	r3, [r4, #12]
 800bca2:	4620      	mov	r0, r4
 800bca4:	2145      	movs	r1, #69	; 0x45
 800bca6:	f7fb fb77 	bl	8007398 <d_exprlist>
 800bcaa:	f7ff bafe 	b.w	800b2aa <d_array_type+0x56e>
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f7f8 fc3e 	bl	8004530 <d_template_param>
 800bcb4:	68e1      	ldr	r1, [r4, #12]
 800bcb6:	4605      	mov	r5, r0
 800bcb8:	780b      	ldrb	r3, [r1, #0]
 800bcba:	f7ff bb3b 	b.w	800b334 <d_array_type+0x5f8>
 800bcbe:	4620      	mov	r0, r4
 800bcc0:	f7f8 fc1e 	bl	8004500 <d_compact_number>
 800bcc4:	3001      	adds	r0, #1
 800bcc6:	f47f ac93 	bne.w	800b5f0 <d_array_type+0x8b4>
 800bcca:	68e1      	ldr	r1, [r4, #12]
 800bccc:	4605      	mov	r5, r0
 800bcce:	780b      	ldrb	r3, [r1, #0]
 800bcd0:	f7ff bb30 	b.w	800b334 <d_array_type+0x5f8>
 800bcd4:	6841      	ldr	r1, [r0, #4]
 800bcd6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bcd8:	688b      	ldr	r3, [r1, #8]
 800bcda:	680d      	ldr	r5, [r1, #0]
 800bcdc:	494e      	ldr	r1, [pc, #312]	; (800be18 <d_array_type+0x10dc>)
 800bcde:	3b02      	subs	r3, #2
 800bce0:	4413      	add	r3, r2
 800bce2:	6323      	str	r3, [r4, #48]	; 0x30
 800bce4:	4628      	mov	r0, r5
 800bce6:	f001 f81c 	bl	800cd22 <strcmp>
 800bcea:	2800      	cmp	r0, #0
 800bcec:	f000 811e 	beq.w	800bf2c <d_array_type+0x11f0>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	68db      	ldr	r3, [r3, #12]
 800bcf4:	2b03      	cmp	r3, #3
 800bcf6:	f63f aca5 	bhi.w	800b644 <d_array_type+0x908>
 800bcfa:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bcfe:	010c      	.short	0x010c
 800bd00:	009800e7 	.word	0x009800e7
 800bd04:	0005      	.short	0x0005
 800bd06:	2500      	movs	r5, #0
 800bd08:	4628      	mov	r0, r5
 800bd0a:	4944      	ldr	r1, [pc, #272]	; (800be1c <d_array_type+0x10e0>)
 800bd0c:	f001 f809 	bl	800cd22 <strcmp>
 800bd10:	b3b8      	cbz	r0, 800bd82 <d_array_type+0x1046>
 800bd12:	782b      	ldrb	r3, [r5, #0]
 800bd14:	2b6e      	cmp	r3, #110	; 0x6e
 800bd16:	f47f ac95 	bne.w	800b644 <d_array_type+0x908>
 800bd1a:	786b      	ldrb	r3, [r5, #1]
 800bd1c:	2b77      	cmp	r3, #119	; 0x77
 800bd1e:	d002      	beq.n	800bd26 <d_array_type+0xfea>
 800bd20:	2b61      	cmp	r3, #97	; 0x61
 800bd22:	f47f ac8f 	bne.w	800b644 <d_array_type+0x908>
 800bd26:	215f      	movs	r1, #95	; 0x5f
 800bd28:	4620      	mov	r0, r4
 800bd2a:	f7fb fb35 	bl	8007398 <d_exprlist>
 800bd2e:	4605      	mov	r5, r0
 800bd30:	4620      	mov	r0, r4
 800bd32:	f7fd f877 	bl	8008e24 <d_type>
 800bd36:	68e1      	ldr	r1, [r4, #12]
 800bd38:	780b      	ldrb	r3, [r1, #0]
 800bd3a:	2b45      	cmp	r3, #69	; 0x45
 800bd3c:	4681      	mov	r9, r0
 800bd3e:	d060      	beq.n	800be02 <d_array_type+0x10c6>
 800bd40:	2b70      	cmp	r3, #112	; 0x70
 800bd42:	d058      	beq.n	800bdf6 <d_array_type+0x10ba>
 800bd44:	2b69      	cmp	r3, #105	; 0x69
 800bd46:	d13f      	bne.n	800bdc8 <d_array_type+0x108c>
 800bd48:	784b      	ldrb	r3, [r1, #1]
 800bd4a:	2b6c      	cmp	r3, #108	; 0x6c
 800bd4c:	d125      	bne.n	800bd9a <d_array_type+0x105e>
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f7fe fcb2 	bl	800a6b8 <d_expression_1>
 800bd54:	4603      	mov	r3, r0
 800bd56:	464a      	mov	r2, r9
 800bd58:	213a      	movs	r1, #58	; 0x3a
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	f7f8 f99a 	bl	8004094 <d_make_comp>
 800bd60:	462a      	mov	r2, r5
 800bd62:	4603      	mov	r3, r0
 800bd64:	2139      	movs	r1, #57	; 0x39
 800bd66:	4620      	mov	r0, r4
 800bd68:	f7f8 f994 	bl	8004094 <d_make_comp>
 800bd6c:	463a      	mov	r2, r7
 800bd6e:	4603      	mov	r3, r0
 800bd70:	2138      	movs	r1, #56	; 0x38
 800bd72:	4620      	mov	r0, r4
 800bd74:	f7f8 f98e 	bl	8004094 <d_make_comp>
 800bd78:	4607      	mov	r7, r0
 800bd7a:	68e1      	ldr	r1, [r4, #12]
 800bd7c:	780b      	ldrb	r3, [r1, #0]
 800bd7e:	f7ff ba9d 	b.w	800b2bc <d_array_type+0x580>
 800bd82:	4620      	mov	r0, r4
 800bd84:	f7fe fc98 	bl	800a6b8 <d_expression_1>
 800bd88:	4605      	mov	r5, r0
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f7fe fc94 	bl	800a6b8 <d_expression_1>
 800bd90:	4681      	mov	r9, r0
 800bd92:	4620      	mov	r0, r4
 800bd94:	f7fe fc90 	bl	800a6b8 <d_expression_1>
 800bd98:	e7dc      	b.n	800bd54 <d_array_type+0x1018>
 800bd9a:	2700      	movs	r7, #0
 800bd9c:	784b      	ldrb	r3, [r1, #1]
 800bd9e:	2b6c      	cmp	r3, #108	; 0x6c
 800bda0:	f47f aaa6 	bne.w	800b2f0 <d_array_type+0x5b4>
 800bda4:	2500      	movs	r5, #0
 800bda6:	3102      	adds	r1, #2
 800bda8:	60e1      	str	r1, [r4, #12]
 800bdaa:	4620      	mov	r0, r4
 800bdac:	2145      	movs	r1, #69	; 0x45
 800bdae:	f7fb faf3 	bl	8007398 <d_exprlist>
 800bdb2:	462a      	mov	r2, r5
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2130      	movs	r1, #48	; 0x30
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f7f8 f96b 	bl	8004094 <d_make_comp>
 800bdbe:	68e1      	ldr	r1, [r4, #12]
 800bdc0:	4605      	mov	r5, r0
 800bdc2:	780b      	ldrb	r3, [r1, #0]
 800bdc4:	f7ff bab6 	b.w	800b334 <d_array_type+0x5f8>
 800bdc8:	2700      	movs	r7, #0
 800bdca:	f7ff ba77 	b.w	800b2bc <d_array_type+0x580>
 800bdce:	4620      	mov	r0, r4
 800bdd0:	f7f8 fb96 	bl	8004500 <d_compact_number>
 800bdd4:	3001      	adds	r0, #1
 800bdd6:	f47f abc7 	bne.w	800b568 <d_array_type+0x82c>
 800bdda:	2500      	movs	r5, #0
 800bddc:	f7ff b962 	b.w	800b0a4 <d_array_type+0x368>
 800bde0:	4620      	mov	r0, r4
 800bde2:	f7f8 fb8d 	bl	8004500 <d_compact_number>
 800bde6:	3001      	adds	r0, #1
 800bde8:	f47f ac4d 	bne.w	800b686 <d_array_type+0x94a>
 800bdec:	4681      	mov	r9, r0
 800bdee:	f7ff b900 	b.w	800aff2 <d_array_type+0x2b6>
 800bdf2:	2500      	movs	r5, #0
 800bdf4:	e4d0      	b.n	800b798 <d_array_type+0xa5c>
 800bdf6:	784b      	ldrb	r3, [r1, #1]
 800bdf8:	2b69      	cmp	r3, #105	; 0x69
 800bdfa:	d006      	beq.n	800be0a <d_array_type+0x10ce>
 800bdfc:	2700      	movs	r7, #0
 800bdfe:	f7ff ba77 	b.w	800b2f0 <d_array_type+0x5b4>
 800be02:	3101      	adds	r1, #1
 800be04:	60e1      	str	r1, [r4, #12]
 800be06:	2000      	movs	r0, #0
 800be08:	e7a4      	b.n	800bd54 <d_array_type+0x1018>
 800be0a:	3102      	adds	r1, #2
 800be0c:	60e1      	str	r1, [r4, #12]
 800be0e:	4620      	mov	r0, r4
 800be10:	2145      	movs	r1, #69	; 0x45
 800be12:	f7fb fac1 	bl	8007398 <d_exprlist>
 800be16:	e79d      	b.n	800bd54 <d_array_type+0x1018>
 800be18:	0800ea04 	.word	0x0800ea04
 800be1c:	0800e6f8 	.word	0x0800e6f8
 800be20:	0800e6f0 	.word	0x0800e6f0
 800be24:	0800e810 	.word	0x0800e810
 800be28:	0800e814 	.word	0x0800e814
 800be2c:	2500      	movs	r5, #0
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	785a      	ldrb	r2, [r3, #1]
 800be34:	2a63      	cmp	r2, #99	; 0x63
 800be36:	d03c      	beq.n	800beb2 <d_array_type+0x1176>
 800be38:	4620      	mov	r0, r4
 800be3a:	f7fe fc3d 	bl	800a6b8 <d_expression_1>
 800be3e:	4681      	mov	r9, r0
 800be40:	4628      	mov	r0, r5
 800be42:	49c5      	ldr	r1, [pc, #788]	; (800c158 <d_array_type+0x141c>)
 800be44:	f000 ff6d 	bl	800cd22 <strcmp>
 800be48:	b368      	cbz	r0, 800bea6 <d_array_type+0x116a>
 800be4a:	4628      	mov	r0, r5
 800be4c:	49c3      	ldr	r1, [pc, #780]	; (800c15c <d_array_type+0x1420>)
 800be4e:	f000 ff68 	bl	800cd22 <strcmp>
 800be52:	b128      	cbz	r0, 800be60 <d_array_type+0x1124>
 800be54:	4628      	mov	r0, r5
 800be56:	49c2      	ldr	r1, [pc, #776]	; (800c160 <d_array_type+0x1424>)
 800be58:	f000 ff63 	bl	800cd22 <strcmp>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d151      	bne.n	800bf04 <d_array_type+0x11c8>
 800be60:	4620      	mov	r0, r4
 800be62:	f7fd fe3b 	bl	8009adc <d_unqualified_name>
 800be66:	68e3      	ldr	r3, [r4, #12]
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	2b49      	cmp	r3, #73	; 0x49
 800be6c:	4605      	mov	r5, r0
 800be6e:	d109      	bne.n	800be84 <d_array_type+0x1148>
 800be70:	4620      	mov	r0, r4
 800be72:	f7fb fccf 	bl	8007814 <d_template_args>
 800be76:	462a      	mov	r2, r5
 800be78:	4603      	mov	r3, r0
 800be7a:	2104      	movs	r1, #4
 800be7c:	4620      	mov	r0, r4
 800be7e:	f7f8 f909 	bl	8004094 <d_make_comp>
 800be82:	4605      	mov	r5, r0
 800be84:	464a      	mov	r2, r9
 800be86:	462b      	mov	r3, r5
 800be88:	2137      	movs	r1, #55	; 0x37
 800be8a:	4620      	mov	r0, r4
 800be8c:	f7f8 f902 	bl	8004094 <d_make_comp>
 800be90:	463a      	mov	r2, r7
 800be92:	4603      	mov	r3, r0
 800be94:	2136      	movs	r1, #54	; 0x36
 800be96:	4620      	mov	r0, r4
 800be98:	f7f8 f8fc 	bl	8004094 <d_make_comp>
 800be9c:	68e1      	ldr	r1, [r4, #12]
 800be9e:	4607      	mov	r7, r0
 800bea0:	780b      	ldrb	r3, [r1, #0]
 800bea2:	f7ff ba0b 	b.w	800b2bc <d_array_type+0x580>
 800bea6:	4620      	mov	r0, r4
 800bea8:	2145      	movs	r1, #69	; 0x45
 800beaa:	f7fb fa75 	bl	8007398 <d_exprlist>
 800beae:	4605      	mov	r5, r0
 800beb0:	e7e8      	b.n	800be84 <d_array_type+0x1148>
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800beb8:	2a01      	cmp	r2, #1
 800beba:	d902      	bls.n	800bec2 <d_array_type+0x1186>
 800bebc:	3b72      	subs	r3, #114	; 0x72
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d8ba      	bhi.n	800be38 <d_array_type+0x10fc>
 800bec2:	4620      	mov	r0, r4
 800bec4:	f7fc ffae 	bl	8008e24 <d_type>
 800bec8:	4681      	mov	r9, r0
 800beca:	e7b9      	b.n	800be40 <d_array_type+0x1104>
 800becc:	782b      	ldrb	r3, [r5, #0]
 800bece:	2b70      	cmp	r3, #112	; 0x70
 800bed0:	d002      	beq.n	800bed8 <d_array_type+0x119c>
 800bed2:	2b6d      	cmp	r3, #109	; 0x6d
 800bed4:	f47f a9e6 	bne.w	800b2a4 <d_array_type+0x568>
 800bed8:	786a      	ldrb	r2, [r5, #1]
 800beda:	429a      	cmp	r2, r3
 800bedc:	f47f a9e2 	bne.w	800b2a4 <d_array_type+0x568>
 800bee0:	68e3      	ldr	r3, [r4, #12]
 800bee2:	781a      	ldrb	r2, [r3, #0]
 800bee4:	2a5f      	cmp	r2, #95	; 0x5f
 800bee6:	d012      	beq.n	800bf0e <d_array_type+0x11d2>
 800bee8:	4620      	mov	r0, r4
 800beea:	f7fe fbe5 	bl	800a6b8 <d_expression_1>
 800beee:	4602      	mov	r2, r0
 800bef0:	4613      	mov	r3, r2
 800bef2:	4620      	mov	r0, r4
 800bef4:	2137      	movs	r1, #55	; 0x37
 800bef6:	f7f8 f8cd 	bl	8004094 <d_make_comp>
 800befa:	4603      	mov	r3, r0
 800befc:	463a      	mov	r2, r7
 800befe:	4620      	mov	r0, r4
 800bf00:	f7ff b9d6 	b.w	800b2b0 <d_array_type+0x574>
 800bf04:	4620      	mov	r0, r4
 800bf06:	f7fe fbd7 	bl	800a6b8 <d_expression_1>
 800bf0a:	4605      	mov	r5, r0
 800bf0c:	e7ba      	b.n	800be84 <d_array_type+0x1148>
 800bf0e:	3301      	adds	r3, #1
 800bf10:	60e3      	str	r3, [r4, #12]
 800bf12:	f7ff b9c7 	b.w	800b2a4 <d_array_type+0x568>
 800bf16:	463a      	mov	r2, r7
 800bf18:	2134      	movs	r1, #52	; 0x34
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	f7f8 f8b9 	bl	8004094 <d_make_comp>
 800bf22:	68e1      	ldr	r1, [r4, #12]
 800bf24:	4607      	mov	r7, r0
 800bf26:	780b      	ldrb	r3, [r1, #0]
 800bf28:	f7ff b9c8 	b.w	800b2bc <d_array_type+0x580>
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f7fc ff79 	bl	8008e24 <d_type>
 800bf32:	e7e2      	b.n	800befa <d_array_type+0x11be>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2b03      	cmp	r3, #3
 800bf38:	f63f ab84 	bhi.w	800b644 <d_array_type+0x908>
 800bf3c:	a201      	add	r2, pc, #4	; (adr r2, 800bf44 <d_array_type+0x1208>)
 800bf3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf42:	bf00      	nop
 800bf44:	0800bf17 	.word	0x0800bf17
 800bf48:	0800b2a5 	.word	0x0800b2a5
 800bf4c:	0800be2d 	.word	0x0800be2d
 800bf50:	0800bd07 	.word	0x0800bd07
 800bf54:	3102      	adds	r1, #2
 800bf56:	60e1      	str	r1, [r4, #12]
 800bf58:	4620      	mov	r0, r4
 800bf5a:	f7fc ff63 	bl	8008e24 <d_type>
 800bf5e:	4681      	mov	r9, r0
 800bf60:	4620      	mov	r0, r4
 800bf62:	f7fd fdbb 	bl	8009adc <d_unqualified_name>
 800bf66:	68e3      	ldr	r3, [r4, #12]
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	2b49      	cmp	r3, #73	; 0x49
 800bf6c:	4605      	mov	r5, r0
 800bf6e:	d00a      	beq.n	800bf86 <d_array_type+0x124a>
 800bf70:	4603      	mov	r3, r0
 800bf72:	464a      	mov	r2, r9
 800bf74:	4620      	mov	r0, r4
 800bf76:	2101      	movs	r1, #1
 800bf78:	f7f8 f88c 	bl	8004094 <d_make_comp>
 800bf7c:	68e1      	ldr	r1, [r4, #12]
 800bf7e:	4605      	mov	r5, r0
 800bf80:	780b      	ldrb	r3, [r1, #0]
 800bf82:	f7ff b9d7 	b.w	800b334 <d_array_type+0x5f8>
 800bf86:	4620      	mov	r0, r4
 800bf88:	f7fb fc44 	bl	8007814 <d_template_args>
 800bf8c:	462a      	mov	r2, r5
 800bf8e:	4603      	mov	r3, r0
 800bf90:	2104      	movs	r1, #4
 800bf92:	4620      	mov	r0, r4
 800bf94:	f7f8 f87e 	bl	8004094 <d_make_comp>
 800bf98:	464a      	mov	r2, r9
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	e7ea      	b.n	800bf76 <d_array_type+0x123a>
 800bfa0:	464a      	mov	r2, r9
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	2134      	movs	r1, #52	; 0x34
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	f7f8 f874 	bl	8004094 <d_make_comp>
 800bfac:	4681      	mov	r9, r0
 800bfae:	f7ff b820 	b.w	800aff2 <d_array_type+0x2b6>
 800bfb2:	784b      	ldrb	r3, [r1, #1]
 800bfb4:	2b6c      	cmp	r3, #108	; 0x6c
 800bfb6:	f47f a9d7 	bne.w	800b368 <d_array_type+0x62c>
 800bfba:	4620      	mov	r0, r4
 800bfbc:	f7fc ff32 	bl	8008e24 <d_type>
 800bfc0:	68e1      	ldr	r1, [r4, #12]
 800bfc2:	4681      	mov	r9, r0
 800bfc4:	3102      	adds	r1, #2
 800bfc6:	60e1      	str	r1, [r4, #12]
 800bfc8:	4620      	mov	r0, r4
 800bfca:	2145      	movs	r1, #69	; 0x45
 800bfcc:	f7fb f9e4 	bl	8007398 <d_exprlist>
 800bfd0:	464a      	mov	r2, r9
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	2130      	movs	r1, #48	; 0x30
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	f7f8 f85c 	bl	8004094 <d_make_comp>
 800bfdc:	4681      	mov	r9, r0
 800bfde:	f7ff b808 	b.w	800aff2 <d_array_type+0x2b6>
 800bfe2:	2500      	movs	r5, #0
 800bfe4:	784b      	ldrb	r3, [r1, #1]
 800bfe6:	2b6c      	cmp	r3, #108	; 0x6c
 800bfe8:	f47f a9be 	bne.w	800b368 <d_array_type+0x62c>
 800bfec:	f04f 0900 	mov.w	r9, #0
 800bff0:	e7e8      	b.n	800bfc4 <d_array_type+0x1288>
 800bff2:	f89a 3000 	ldrb.w	r3, [sl]
 800bff6:	2b70      	cmp	r3, #112	; 0x70
 800bff8:	d002      	beq.n	800c000 <d_array_type+0x12c4>
 800bffa:	2b6d      	cmp	r3, #109	; 0x6d
 800bffc:	f47f a9ca 	bne.w	800b394 <d_array_type+0x658>
 800c000:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800c004:	429a      	cmp	r2, r3
 800c006:	f47f a9c5 	bne.w	800b394 <d_array_type+0x658>
 800c00a:	68e3      	ldr	r3, [r4, #12]
 800c00c:	781a      	ldrb	r2, [r3, #0]
 800c00e:	2a5f      	cmp	r2, #95	; 0x5f
 800c010:	d013      	beq.n	800c03a <d_array_type+0x12fe>
 800c012:	4620      	mov	r0, r4
 800c014:	f7fe fb50 	bl	800a6b8 <d_expression_1>
 800c018:	4602      	mov	r2, r0
 800c01a:	4613      	mov	r3, r2
 800c01c:	4620      	mov	r0, r4
 800c01e:	2137      	movs	r1, #55	; 0x37
 800c020:	f7f8 f838 	bl	8004094 <d_make_comp>
 800c024:	4603      	mov	r3, r0
 800c026:	464a      	mov	r2, r9
 800c028:	4620      	mov	r0, r4
 800c02a:	2135      	movs	r1, #53	; 0x35
 800c02c:	f7f8 f832 	bl	8004094 <d_make_comp>
 800c030:	e6dc      	b.n	800bdec <d_array_type+0x10b0>
 800c032:	4620      	mov	r0, r4
 800c034:	f7fc fef6 	bl	8008e24 <d_type>
 800c038:	e7f4      	b.n	800c024 <d_array_type+0x12e8>
 800c03a:	3301      	adds	r3, #1
 800c03c:	60e3      	str	r3, [r4, #12]
 800c03e:	f7ff b9a9 	b.w	800b394 <d_array_type+0x658>
 800c042:	785a      	ldrb	r2, [r3, #1]
 800c044:	2a69      	cmp	r2, #105	; 0x69
 800c046:	f47f ad39 	bne.w	800babc <d_array_type+0xd80>
 800c04a:	3302      	adds	r3, #2
 800c04c:	60e3      	str	r3, [r4, #12]
 800c04e:	4620      	mov	r0, r4
 800c050:	2145      	movs	r1, #69	; 0x45
 800c052:	f7fb f9a1 	bl	8007398 <d_exprlist>
 800c056:	e5a5      	b.n	800bba4 <d_array_type+0xe68>
 800c058:	3301      	adds	r3, #1
 800c05a:	60e3      	str	r3, [r4, #12]
 800c05c:	2000      	movs	r0, #0
 800c05e:	e5a1      	b.n	800bba4 <d_array_type+0xe68>
 800c060:	f04f 0900 	mov.w	r9, #0
 800c064:	4648      	mov	r0, r9
 800c066:	493f      	ldr	r1, [pc, #252]	; (800c164 <d_array_type+0x1428>)
 800c068:	f000 fe5b 	bl	800cd22 <strcmp>
 800c06c:	b3c8      	cbz	r0, 800c0e2 <d_array_type+0x13a6>
 800c06e:	f899 3000 	ldrb.w	r3, [r9]
 800c072:	2b6e      	cmp	r3, #110	; 0x6e
 800c074:	f47f aeb1 	bne.w	800bdda <d_array_type+0x109e>
 800c078:	f899 3001 	ldrb.w	r3, [r9, #1]
 800c07c:	2b77      	cmp	r3, #119	; 0x77
 800c07e:	d002      	beq.n	800c086 <d_array_type+0x134a>
 800c080:	2b61      	cmp	r3, #97	; 0x61
 800c082:	f47f aeaa 	bne.w	800bdda <d_array_type+0x109e>
 800c086:	215f      	movs	r1, #95	; 0x5f
 800c088:	4620      	mov	r0, r4
 800c08a:	f7fb f985 	bl	8007398 <d_exprlist>
 800c08e:	4681      	mov	r9, r0
 800c090:	4620      	mov	r0, r4
 800c092:	f7fc fec7 	bl	8008e24 <d_type>
 800c096:	68e3      	ldr	r3, [r4, #12]
 800c098:	781a      	ldrb	r2, [r3, #0]
 800c09a:	2a45      	cmp	r2, #69	; 0x45
 800c09c:	4682      	mov	sl, r0
 800c09e:	d037      	beq.n	800c110 <d_array_type+0x13d4>
 800c0a0:	2a70      	cmp	r2, #112	; 0x70
 800c0a2:	d02a      	beq.n	800c0fa <d_array_type+0x13be>
 800c0a4:	2a69      	cmp	r2, #105	; 0x69
 800c0a6:	f47f ae98 	bne.w	800bdda <d_array_type+0x109e>
 800c0aa:	785b      	ldrb	r3, [r3, #1]
 800c0ac:	2b6c      	cmp	r3, #108	; 0x6c
 800c0ae:	f47f ae94 	bne.w	800bdda <d_array_type+0x109e>
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	f7fe fb00 	bl	800a6b8 <d_expression_1>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	4652      	mov	r2, sl
 800c0bc:	213a      	movs	r1, #58	; 0x3a
 800c0be:	4620      	mov	r0, r4
 800c0c0:	f7f7 ffe8 	bl	8004094 <d_make_comp>
 800c0c4:	464a      	mov	r2, r9
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2139      	movs	r1, #57	; 0x39
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	f7f7 ffe2 	bl	8004094 <d_make_comp>
 800c0d0:	462a      	mov	r2, r5
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	2138      	movs	r1, #56	; 0x38
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	f7f7 ffdc 	bl	8004094 <d_make_comp>
 800c0dc:	4605      	mov	r5, r0
 800c0de:	f7fe bfe1 	b.w	800b0a4 <d_array_type+0x368>
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	f7fe fae8 	bl	800a6b8 <d_expression_1>
 800c0e8:	4681      	mov	r9, r0
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	f7fe fae4 	bl	800a6b8 <d_expression_1>
 800c0f0:	4682      	mov	sl, r0
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f7fe fae0 	bl	800a6b8 <d_expression_1>
 800c0f8:	e7de      	b.n	800c0b8 <d_array_type+0x137c>
 800c0fa:	785a      	ldrb	r2, [r3, #1]
 800c0fc:	2a69      	cmp	r2, #105	; 0x69
 800c0fe:	f47f ae6c 	bne.w	800bdda <d_array_type+0x109e>
 800c102:	3302      	adds	r3, #2
 800c104:	60e3      	str	r3, [r4, #12]
 800c106:	4620      	mov	r0, r4
 800c108:	2145      	movs	r1, #69	; 0x45
 800c10a:	f7fb f945 	bl	8007398 <d_exprlist>
 800c10e:	e7d3      	b.n	800c0b8 <d_array_type+0x137c>
 800c110:	3301      	adds	r3, #1
 800c112:	60e3      	str	r3, [r4, #12]
 800c114:	2000      	movs	r0, #0
 800c116:	e7cf      	b.n	800c0b8 <d_array_type+0x137c>
 800c118:	3301      	adds	r3, #1
 800c11a:	60e3      	str	r3, [r4, #12]
 800c11c:	4620      	mov	r0, r4
 800c11e:	2145      	movs	r1, #69	; 0x45
 800c120:	f7fb f93a 	bl	8007398 <d_exprlist>
 800c124:	f7fe bea3 	b.w	800ae6e <d_array_type+0x132>
 800c128:	3102      	adds	r1, #2
 800c12a:	60e1      	str	r1, [r4, #12]
 800c12c:	4620      	mov	r0, r4
 800c12e:	f7fc fe79 	bl	8008e24 <d_type>
 800c132:	4605      	mov	r5, r0
 800c134:	4620      	mov	r0, r4
 800c136:	f7fd fcd1 	bl	8009adc <d_unqualified_name>
 800c13a:	68e3      	ldr	r3, [r4, #12]
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	2b49      	cmp	r3, #73	; 0x49
 800c140:	4681      	mov	r9, r0
 800c142:	f000 8093 	beq.w	800c26c <d_array_type+0x1530>
 800c146:	462a      	mov	r2, r5
 800c148:	4603      	mov	r3, r0
 800c14a:	2101      	movs	r1, #1
 800c14c:	4620      	mov	r0, r4
 800c14e:	f7f7 ffa1 	bl	8004094 <d_make_comp>
 800c152:	4605      	mov	r5, r0
 800c154:	f7fe bfa6 	b.w	800b0a4 <d_array_type+0x368>
 800c158:	0800e6f0 	.word	0x0800e6f0
 800c15c:	0800e810 	.word	0x0800e810
 800c160:	0800e814 	.word	0x0800e814
 800c164:	0800e6f8 	.word	0x0800e6f8
 800c168:	f04f 0900 	mov.w	r9, #0
 800c16c:	686b      	ldr	r3, [r5, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	785a      	ldrb	r2, [r3, #1]
 800c172:	2a63      	cmp	r2, #99	; 0x63
 800c174:	d039      	beq.n	800c1ea <d_array_type+0x14ae>
 800c176:	4620      	mov	r0, r4
 800c178:	f7fe fa9e 	bl	800a6b8 <d_expression_1>
 800c17c:	4682      	mov	sl, r0
 800c17e:	4648      	mov	r0, r9
 800c180:	49bd      	ldr	r1, [pc, #756]	; (800c478 <d_array_type+0x173c>)
 800c182:	f000 fdce 	bl	800cd22 <strcmp>
 800c186:	b350      	cbz	r0, 800c1de <d_array_type+0x14a2>
 800c188:	4648      	mov	r0, r9
 800c18a:	49bc      	ldr	r1, [pc, #752]	; (800c47c <d_array_type+0x1740>)
 800c18c:	f000 fdc9 	bl	800cd22 <strcmp>
 800c190:	b120      	cbz	r0, 800c19c <d_array_type+0x1460>
 800c192:	4648      	mov	r0, r9
 800c194:	49ba      	ldr	r1, [pc, #744]	; (800c480 <d_array_type+0x1744>)
 800c196:	f000 fdc4 	bl	800cd22 <strcmp>
 800c19a:	bb98      	cbnz	r0, 800c204 <d_array_type+0x14c8>
 800c19c:	4620      	mov	r0, r4
 800c19e:	f7fd fc9d 	bl	8009adc <d_unqualified_name>
 800c1a2:	68e3      	ldr	r3, [r4, #12]
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	2b49      	cmp	r3, #73	; 0x49
 800c1a8:	4681      	mov	r9, r0
 800c1aa:	d109      	bne.n	800c1c0 <d_array_type+0x1484>
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	f7fb fb31 	bl	8007814 <d_template_args>
 800c1b2:	464a      	mov	r2, r9
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	2104      	movs	r1, #4
 800c1b8:	4620      	mov	r0, r4
 800c1ba:	f7f7 ff6b 	bl	8004094 <d_make_comp>
 800c1be:	4681      	mov	r9, r0
 800c1c0:	4652      	mov	r2, sl
 800c1c2:	464b      	mov	r3, r9
 800c1c4:	2137      	movs	r1, #55	; 0x37
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f7f7 ff64 	bl	8004094 <d_make_comp>
 800c1cc:	462a      	mov	r2, r5
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2136      	movs	r1, #54	; 0x36
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	f7f7 ff5e 	bl	8004094 <d_make_comp>
 800c1d8:	4605      	mov	r5, r0
 800c1da:	f7fe bf63 	b.w	800b0a4 <d_array_type+0x368>
 800c1de:	4620      	mov	r0, r4
 800c1e0:	2145      	movs	r1, #69	; 0x45
 800c1e2:	f7fb f8d9 	bl	8007398 <d_exprlist>
 800c1e6:	4681      	mov	r9, r0
 800c1e8:	e7ea      	b.n	800c1c0 <d_array_type+0x1484>
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800c1f0:	2a01      	cmp	r2, #1
 800c1f2:	d902      	bls.n	800c1fa <d_array_type+0x14be>
 800c1f4:	3b72      	subs	r3, #114	; 0x72
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d8bd      	bhi.n	800c176 <d_array_type+0x143a>
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	f7fc fe12 	bl	8008e24 <d_type>
 800c200:	4682      	mov	sl, r0
 800c202:	e7bc      	b.n	800c17e <d_array_type+0x1442>
 800c204:	4620      	mov	r0, r4
 800c206:	f7fe fa57 	bl	800a6b8 <d_expression_1>
 800c20a:	4681      	mov	r9, r0
 800c20c:	e7d8      	b.n	800c1c0 <d_array_type+0x1484>
 800c20e:	462a      	mov	r2, r5
 800c210:	4620      	mov	r0, r4
 800c212:	2134      	movs	r1, #52	; 0x34
 800c214:	2300      	movs	r3, #0
 800c216:	f7f7 ff3d 	bl	8004094 <d_make_comp>
 800c21a:	4605      	mov	r5, r0
 800c21c:	f7fe bf42 	b.w	800b0a4 <d_array_type+0x368>
 800c220:	4620      	mov	r0, r4
 800c222:	f7fc fdff 	bl	8008e24 <d_type>
 800c226:	4603      	mov	r3, r0
 800c228:	462a      	mov	r2, r5
 800c22a:	4620      	mov	r0, r4
 800c22c:	2135      	movs	r1, #53	; 0x35
 800c22e:	f7f7 ff31 	bl	8004094 <d_make_comp>
 800c232:	4605      	mov	r5, r0
 800c234:	f7fe bf36 	b.w	800b0a4 <d_array_type+0x368>
 800c238:	f899 3000 	ldrb.w	r3, [r9]
 800c23c:	2b70      	cmp	r3, #112	; 0x70
 800c23e:	d002      	beq.n	800c246 <d_array_type+0x150a>
 800c240:	2b6d      	cmp	r3, #109	; 0x6d
 800c242:	f47e af25 	bne.w	800b090 <d_array_type+0x354>
 800c246:	f899 2001 	ldrb.w	r2, [r9, #1]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	f47e af20 	bne.w	800b090 <d_array_type+0x354>
 800c250:	68e3      	ldr	r3, [r4, #12]
 800c252:	781a      	ldrb	r2, [r3, #0]
 800c254:	2a5f      	cmp	r2, #95	; 0x5f
 800c256:	d01b      	beq.n	800c290 <d_array_type+0x1554>
 800c258:	4620      	mov	r0, r4
 800c25a:	f7fe fa2d 	bl	800a6b8 <d_expression_1>
 800c25e:	4602      	mov	r2, r0
 800c260:	4613      	mov	r3, r2
 800c262:	4620      	mov	r0, r4
 800c264:	2137      	movs	r1, #55	; 0x37
 800c266:	f7f7 ff15 	bl	8004094 <d_make_comp>
 800c26a:	e7dc      	b.n	800c226 <d_array_type+0x14ea>
 800c26c:	4620      	mov	r0, r4
 800c26e:	f7fb fad1 	bl	8007814 <d_template_args>
 800c272:	464a      	mov	r2, r9
 800c274:	4603      	mov	r3, r0
 800c276:	2104      	movs	r1, #4
 800c278:	4620      	mov	r0, r4
 800c27a:	f7f7 ff0b 	bl	8004094 <d_make_comp>
 800c27e:	462a      	mov	r2, r5
 800c280:	4603      	mov	r3, r0
 800c282:	2101      	movs	r1, #1
 800c284:	4620      	mov	r0, r4
 800c286:	f7f7 ff05 	bl	8004094 <d_make_comp>
 800c28a:	4605      	mov	r5, r0
 800c28c:	f7fe bf0a 	b.w	800b0a4 <d_array_type+0x368>
 800c290:	3301      	adds	r3, #1
 800c292:	60e3      	str	r3, [r4, #12]
 800c294:	f7fe befc 	b.w	800b090 <d_array_type+0x354>
 800c298:	4620      	mov	r0, r4
 800c29a:	f7f8 f931 	bl	8004500 <d_compact_number>
 800c29e:	3001      	adds	r0, #1
 800c2a0:	f47f aa3e 	bne.w	800b720 <d_array_type+0x9e4>
 800c2a4:	68e1      	ldr	r1, [r4, #12]
 800c2a6:	4607      	mov	r7, r0
 800c2a8:	780b      	ldrb	r3, [r1, #0]
 800c2aa:	f7ff b807 	b.w	800b2bc <d_array_type+0x580>
 800c2ae:	686b      	ldr	r3, [r5, #4]
 800c2b0:	2b03      	cmp	r3, #3
 800c2b2:	f63f ad92 	bhi.w	800bdda <d_array_type+0x109e>
 800c2b6:	a201      	add	r2, pc, #4	; (adr r2, 800c2bc <d_array_type+0x1580>)
 800c2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2bc:	0800c20f 	.word	0x0800c20f
 800c2c0:	0800b091 	.word	0x0800b091
 800c2c4:	0800c169 	.word	0x0800c169
 800c2c8:	0800c061 	.word	0x0800c061
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	f7f8 f92f 	bl	8004530 <d_template_param>
 800c2d2:	68e1      	ldr	r1, [r4, #12]
 800c2d4:	4607      	mov	r7, r0
 800c2d6:	780b      	ldrb	r3, [r1, #0]
 800c2d8:	f7fe bff0 	b.w	800b2bc <d_array_type+0x580>
 800c2dc:	4620      	mov	r0, r4
 800c2de:	f7fa fffb 	bl	80072d8 <d_expr_primary>
 800c2e2:	68e1      	ldr	r1, [r4, #12]
 800c2e4:	4607      	mov	r7, r0
 800c2e6:	780b      	ldrb	r3, [r1, #0]
 800c2e8:	f7fe bfe8 	b.w	800b2bc <d_array_type+0x580>
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	60e3      	str	r3, [r4, #12]
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	2145      	movs	r1, #69	; 0x45
 800c2f4:	f7fb f850 	bl	8007398 <d_exprlist>
 800c2f8:	f7fe becd 	b.w	800b096 <d_array_type+0x35a>
 800c2fc:	3102      	adds	r1, #2
 800c2fe:	60e1      	str	r1, [r4, #12]
 800c300:	4620      	mov	r0, r4
 800c302:	f7fc fd8f 	bl	8008e24 <d_type>
 800c306:	4682      	mov	sl, r0
 800c308:	4620      	mov	r0, r4
 800c30a:	f7fd fbe7 	bl	8009adc <d_unqualified_name>
 800c30e:	68e3      	ldr	r3, [r4, #12]
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	2b49      	cmp	r3, #73	; 0x49
 800c314:	4681      	mov	r9, r0
 800c316:	d008      	beq.n	800c32a <d_array_type+0x15ee>
 800c318:	4603      	mov	r3, r0
 800c31a:	4652      	mov	r2, sl
 800c31c:	4620      	mov	r0, r4
 800c31e:	2101      	movs	r1, #1
 800c320:	f7f7 feb8 	bl	8004094 <d_make_comp>
 800c324:	4681      	mov	r9, r0
 800c326:	f7fe be64 	b.w	800aff2 <d_array_type+0x2b6>
 800c32a:	4620      	mov	r0, r4
 800c32c:	f7fb fa72 	bl	8007814 <d_template_args>
 800c330:	464a      	mov	r2, r9
 800c332:	4603      	mov	r3, r0
 800c334:	2104      	movs	r1, #4
 800c336:	4620      	mov	r0, r4
 800c338:	f7f7 feac 	bl	8004094 <d_make_comp>
 800c33c:	4652      	mov	r2, sl
 800c33e:	4603      	mov	r3, r0
 800c340:	2101      	movs	r1, #1
 800c342:	4620      	mov	r0, r4
 800c344:	f7f7 fea6 	bl	8004094 <d_make_comp>
 800c348:	4681      	mov	r9, r0
 800c34a:	f7fe be52 	b.w	800aff2 <d_array_type+0x2b6>
 800c34e:	686b      	ldr	r3, [r5, #4]
 800c350:	2b03      	cmp	r3, #3
 800c352:	f63f a97b 	bhi.w	800b64c <d_array_type+0x910>
 800c356:	a201      	add	r2, pc, #4	; (adr r2, 800c35c <d_array_type+0x1620>)
 800c358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c35c:	0800c537 	.word	0x0800c537
 800c360:	0800b31d 	.word	0x0800b31d
 800c364:	0800c48d 	.word	0x0800c48d
 800c368:	0800c39d 	.word	0x0800c39d
 800c36c:	6841      	ldr	r1, [r0, #4]
 800c36e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c370:	688b      	ldr	r3, [r1, #8]
 800c372:	f8d1 9000 	ldr.w	r9, [r1]
 800c376:	4943      	ldr	r1, [pc, #268]	; (800c484 <d_array_type+0x1748>)
 800c378:	3b02      	subs	r3, #2
 800c37a:	4413      	add	r3, r2
 800c37c:	6323      	str	r3, [r4, #48]	; 0x30
 800c37e:	4648      	mov	r0, r9
 800c380:	f000 fccf 	bl	800cd22 <strcmp>
 800c384:	2800      	cmp	r0, #0
 800c386:	f000 80f9 	beq.w	800c57c <d_array_type+0x1840>
 800c38a:	686b      	ldr	r3, [r5, #4]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	2b03      	cmp	r3, #3
 800c390:	f63f a95c 	bhi.w	800b64c <d_array_type+0x910>
 800c394:	e8df f003 	tbb	[pc, r3]
 800c398:	047cd4cf 	.word	0x047cd4cf
 800c39c:	f04f 0900 	mov.w	r9, #0
 800c3a0:	4648      	mov	r0, r9
 800c3a2:	4939      	ldr	r1, [pc, #228]	; (800c488 <d_array_type+0x174c>)
 800c3a4:	f000 fcbd 	bl	800cd22 <strcmp>
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	d058      	beq.n	800c45e <d_array_type+0x1722>
 800c3ac:	f899 3000 	ldrb.w	r3, [r9]
 800c3b0:	2b6e      	cmp	r3, #110	; 0x6e
 800c3b2:	f47f a94b 	bne.w	800b64c <d_array_type+0x910>
 800c3b6:	f899 3001 	ldrb.w	r3, [r9, #1]
 800c3ba:	2b77      	cmp	r3, #119	; 0x77
 800c3bc:	d002      	beq.n	800c3c4 <d_array_type+0x1688>
 800c3be:	2b61      	cmp	r3, #97	; 0x61
 800c3c0:	f47f a944 	bne.w	800b64c <d_array_type+0x910>
 800c3c4:	215f      	movs	r1, #95	; 0x5f
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	f7fa ffe6 	bl	8007398 <d_exprlist>
 800c3cc:	4681      	mov	r9, r0
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	f7fc fd28 	bl	8008e24 <d_type>
 800c3d4:	68e1      	ldr	r1, [r4, #12]
 800c3d6:	780b      	ldrb	r3, [r1, #0]
 800c3d8:	2b45      	cmp	r3, #69	; 0x45
 800c3da:	4682      	mov	sl, r0
 800c3dc:	d02a      	beq.n	800c434 <d_array_type+0x16f8>
 800c3de:	2b70      	cmp	r3, #112	; 0x70
 800c3e0:	d022      	beq.n	800c428 <d_array_type+0x16ec>
 800c3e2:	2b69      	cmp	r3, #105	; 0x69
 800c3e4:	d11d      	bne.n	800c422 <d_array_type+0x16e6>
 800c3e6:	784b      	ldrb	r3, [r1, #1]
 800c3e8:	2b6c      	cmp	r3, #108	; 0x6c
 800c3ea:	f47f adfa 	bne.w	800bfe2 <d_array_type+0x12a6>
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	f7fe f962 	bl	800a6b8 <d_expression_1>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	4652      	mov	r2, sl
 800c3f8:	213a      	movs	r1, #58	; 0x3a
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	f7f7 fe4a 	bl	8004094 <d_make_comp>
 800c400:	464a      	mov	r2, r9
 800c402:	4603      	mov	r3, r0
 800c404:	2139      	movs	r1, #57	; 0x39
 800c406:	4620      	mov	r0, r4
 800c408:	f7f7 fe44 	bl	8004094 <d_make_comp>
 800c40c:	462a      	mov	r2, r5
 800c40e:	4603      	mov	r3, r0
 800c410:	2138      	movs	r1, #56	; 0x38
 800c412:	4620      	mov	r0, r4
 800c414:	f7f7 fe3e 	bl	8004094 <d_make_comp>
 800c418:	4605      	mov	r5, r0
 800c41a:	68e1      	ldr	r1, [r4, #12]
 800c41c:	780b      	ldrb	r3, [r1, #0]
 800c41e:	f7fe bf89 	b.w	800b334 <d_array_type+0x5f8>
 800c422:	2500      	movs	r5, #0
 800c424:	f7fe bf86 	b.w	800b334 <d_array_type+0x5f8>
 800c428:	784b      	ldrb	r3, [r1, #1]
 800c42a:	2b69      	cmp	r3, #105	; 0x69
 800c42c:	d010      	beq.n	800c450 <d_array_type+0x1714>
 800c42e:	2500      	movs	r5, #0
 800c430:	f7fe bf9a 	b.w	800b368 <d_array_type+0x62c>
 800c434:	3101      	adds	r1, #1
 800c436:	60e1      	str	r1, [r4, #12]
 800c438:	2000      	movs	r0, #0
 800c43a:	e7db      	b.n	800c3f4 <d_array_type+0x16b8>
 800c43c:	784b      	ldrb	r3, [r1, #1]
 800c43e:	2b6c      	cmp	r3, #108	; 0x6c
 800c440:	f47e af56 	bne.w	800b2f0 <d_array_type+0x5b4>
 800c444:	4620      	mov	r0, r4
 800c446:	f7fc fced 	bl	8008e24 <d_type>
 800c44a:	68e1      	ldr	r1, [r4, #12]
 800c44c:	4605      	mov	r5, r0
 800c44e:	e4aa      	b.n	800bda6 <d_array_type+0x106a>
 800c450:	3102      	adds	r1, #2
 800c452:	60e1      	str	r1, [r4, #12]
 800c454:	4620      	mov	r0, r4
 800c456:	2145      	movs	r1, #69	; 0x45
 800c458:	f7fa ff9e 	bl	8007398 <d_exprlist>
 800c45c:	e7ca      	b.n	800c3f4 <d_array_type+0x16b8>
 800c45e:	4620      	mov	r0, r4
 800c460:	f7fe f92a 	bl	800a6b8 <d_expression_1>
 800c464:	4681      	mov	r9, r0
 800c466:	4620      	mov	r0, r4
 800c468:	f7fe f926 	bl	800a6b8 <d_expression_1>
 800c46c:	4682      	mov	sl, r0
 800c46e:	4620      	mov	r0, r4
 800c470:	f7fe f922 	bl	800a6b8 <d_expression_1>
 800c474:	e7be      	b.n	800c3f4 <d_array_type+0x16b8>
 800c476:	bf00      	nop
 800c478:	0800e6f0 	.word	0x0800e6f0
 800c47c:	0800e810 	.word	0x0800e810
 800c480:	0800e814 	.word	0x0800e814
 800c484:	0800ea04 	.word	0x0800ea04
 800c488:	0800e6f8 	.word	0x0800e6f8
 800c48c:	f04f 0900 	mov.w	r9, #0
 800c490:	686b      	ldr	r3, [r5, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	785a      	ldrb	r2, [r3, #1]
 800c496:	2a63      	cmp	r2, #99	; 0x63
 800c498:	d03b      	beq.n	800c512 <d_array_type+0x17d6>
 800c49a:	4620      	mov	r0, r4
 800c49c:	f7fe f90c 	bl	800a6b8 <d_expression_1>
 800c4a0:	4682      	mov	sl, r0
 800c4a2:	4648      	mov	r0, r9
 800c4a4:	4957      	ldr	r1, [pc, #348]	; (800c604 <d_array_type+0x18c8>)
 800c4a6:	f000 fc3c 	bl	800cd22 <strcmp>
 800c4aa:	b360      	cbz	r0, 800c506 <d_array_type+0x17ca>
 800c4ac:	4648      	mov	r0, r9
 800c4ae:	4956      	ldr	r1, [pc, #344]	; (800c608 <d_array_type+0x18cc>)
 800c4b0:	f000 fc37 	bl	800cd22 <strcmp>
 800c4b4:	b120      	cbz	r0, 800c4c0 <d_array_type+0x1784>
 800c4b6:	4648      	mov	r0, r9
 800c4b8:	4954      	ldr	r1, [pc, #336]	; (800c60c <d_array_type+0x18d0>)
 800c4ba:	f000 fc32 	bl	800cd22 <strcmp>
 800c4be:	bba8      	cbnz	r0, 800c52c <d_array_type+0x17f0>
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f7fd fb0b 	bl	8009adc <d_unqualified_name>
 800c4c6:	68e3      	ldr	r3, [r4, #12]
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	2b49      	cmp	r3, #73	; 0x49
 800c4cc:	4681      	mov	r9, r0
 800c4ce:	d109      	bne.n	800c4e4 <d_array_type+0x17a8>
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	f7fb f99f 	bl	8007814 <d_template_args>
 800c4d6:	464a      	mov	r2, r9
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2104      	movs	r1, #4
 800c4dc:	4620      	mov	r0, r4
 800c4de:	f7f7 fdd9 	bl	8004094 <d_make_comp>
 800c4e2:	4681      	mov	r9, r0
 800c4e4:	4652      	mov	r2, sl
 800c4e6:	464b      	mov	r3, r9
 800c4e8:	2137      	movs	r1, #55	; 0x37
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	f7f7 fdd2 	bl	8004094 <d_make_comp>
 800c4f0:	462a      	mov	r2, r5
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	2136      	movs	r1, #54	; 0x36
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f7f7 fdcc 	bl	8004094 <d_make_comp>
 800c4fc:	68e1      	ldr	r1, [r4, #12]
 800c4fe:	4605      	mov	r5, r0
 800c500:	780b      	ldrb	r3, [r1, #0]
 800c502:	f7fe bf17 	b.w	800b334 <d_array_type+0x5f8>
 800c506:	4620      	mov	r0, r4
 800c508:	2145      	movs	r1, #69	; 0x45
 800c50a:	f7fa ff45 	bl	8007398 <d_exprlist>
 800c50e:	4681      	mov	r9, r0
 800c510:	e7e8      	b.n	800c4e4 <d_array_type+0x17a8>
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800c518:	2a01      	cmp	r2, #1
 800c51a:	d902      	bls.n	800c522 <d_array_type+0x17e6>
 800c51c:	3b72      	subs	r3, #114	; 0x72
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d8bb      	bhi.n	800c49a <d_array_type+0x175e>
 800c522:	4620      	mov	r0, r4
 800c524:	f7fc fc7e 	bl	8008e24 <d_type>
 800c528:	4682      	mov	sl, r0
 800c52a:	e7ba      	b.n	800c4a2 <d_array_type+0x1766>
 800c52c:	4620      	mov	r0, r4
 800c52e:	f7fe f8c3 	bl	800a6b8 <d_expression_1>
 800c532:	4681      	mov	r9, r0
 800c534:	e7d6      	b.n	800c4e4 <d_array_type+0x17a8>
 800c536:	462a      	mov	r2, r5
 800c538:	4620      	mov	r0, r4
 800c53a:	2134      	movs	r1, #52	; 0x34
 800c53c:	f7ff b87b 	b.w	800b636 <d_array_type+0x8fa>
 800c540:	f899 3000 	ldrb.w	r3, [r9]
 800c544:	2b70      	cmp	r3, #112	; 0x70
 800c546:	d002      	beq.n	800c54e <d_array_type+0x1812>
 800c548:	2b6d      	cmp	r3, #109	; 0x6d
 800c54a:	f47e aee7 	bne.w	800b31c <d_array_type+0x5e0>
 800c54e:	f899 2001 	ldrb.w	r2, [r9, #1]
 800c552:	429a      	cmp	r2, r3
 800c554:	f47e aee2 	bne.w	800b31c <d_array_type+0x5e0>
 800c558:	68e3      	ldr	r3, [r4, #12]
 800c55a:	781a      	ldrb	r2, [r3, #0]
 800c55c:	2a5f      	cmp	r2, #95	; 0x5f
 800c55e:	d011      	beq.n	800c584 <d_array_type+0x1848>
 800c560:	4620      	mov	r0, r4
 800c562:	f7fe f8a9 	bl	800a6b8 <d_expression_1>
 800c566:	4602      	mov	r2, r0
 800c568:	4613      	mov	r3, r2
 800c56a:	4620      	mov	r0, r4
 800c56c:	2137      	movs	r1, #55	; 0x37
 800c56e:	f7f7 fd91 	bl	8004094 <d_make_comp>
 800c572:	4603      	mov	r3, r0
 800c574:	462a      	mov	r2, r5
 800c576:	4620      	mov	r0, r4
 800c578:	f7fe bed6 	b.w	800b328 <d_array_type+0x5ec>
 800c57c:	4620      	mov	r0, r4
 800c57e:	f7fc fc51 	bl	8008e24 <d_type>
 800c582:	e7f6      	b.n	800c572 <d_array_type+0x1836>
 800c584:	3301      	adds	r3, #1
 800c586:	60e3      	str	r3, [r4, #12]
 800c588:	f7fe bec8 	b.w	800b31c <d_array_type+0x5e0>
 800c58c:	4620      	mov	r0, r4
 800c58e:	f7f7 ffb7 	bl	8004500 <d_compact_number>
 800c592:	3001      	adds	r0, #1
 800c594:	f47e af58 	bne.w	800b448 <d_array_type+0x70c>
 800c598:	f7ff ba00 	b.w	800b99c <d_array_type+0xc60>
 800c59c:	3301      	adds	r3, #1
 800c59e:	60e3      	str	r3, [r4, #12]
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	2145      	movs	r1, #69	; 0x45
 800c5a4:	f7fa fef8 	bl	8007398 <d_exprlist>
 800c5a8:	f7fe bebb 	b.w	800b322 <d_array_type+0x5e6>
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	f7f7 ffbf 	bl	8004530 <d_template_param>
 800c5b2:	4681      	mov	r9, r0
 800c5b4:	f7fe bd1d 	b.w	800aff2 <d_array_type+0x2b6>
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	f7fa fe8d 	bl	80072d8 <d_expr_primary>
 800c5be:	4681      	mov	r9, r0
 800c5c0:	f7fe bd17 	b.w	800aff2 <d_array_type+0x2b6>
 800c5c4:	784b      	ldrb	r3, [r1, #1]
 800c5c6:	2b6c      	cmp	r3, #108	; 0x6c
 800c5c8:	f47e ae56 	bne.w	800b278 <d_array_type+0x53c>
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f7fc fc29 	bl	8008e24 <d_type>
 800c5d2:	68e1      	ldr	r1, [r4, #12]
 800c5d4:	4605      	mov	r5, r0
 800c5d6:	3102      	adds	r1, #2
 800c5d8:	60e1      	str	r1, [r4, #12]
 800c5da:	4620      	mov	r0, r4
 800c5dc:	2145      	movs	r1, #69	; 0x45
 800c5de:	f7fa fedb 	bl	8007398 <d_exprlist>
 800c5e2:	2130      	movs	r1, #48	; 0x30
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	462a      	mov	r2, r5
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	f7f7 fd53 	bl	8004094 <d_make_comp>
 800c5ee:	68e1      	ldr	r1, [r4, #12]
 800c5f0:	4607      	mov	r7, r0
 800c5f2:	780b      	ldrb	r3, [r1, #0]
 800c5f4:	f7fe be62 	b.w	800b2bc <d_array_type+0x580>
 800c5f8:	784b      	ldrb	r3, [r1, #1]
 800c5fa:	2b6c      	cmp	r3, #108	; 0x6c
 800c5fc:	f47e ae3c 	bne.w	800b278 <d_array_type+0x53c>
 800c600:	e7e9      	b.n	800c5d6 <d_array_type+0x189a>
 800c602:	bf00      	nop
 800c604:	0800e6f0 	.word	0x0800e6f0
 800c608:	0800e810 	.word	0x0800e810
 800c60c:	0800e814 	.word	0x0800e814

0800c610 <__cxa_demangle>:
 800c610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c614:	b084      	sub	sp, #16
 800c616:	b378      	cbz	r0, 800c678 <__cxa_demangle+0x68>
 800c618:	b101      	cbz	r1, 800c61c <__cxa_demangle+0xc>
 800c61a:	b36a      	cbz	r2, 800c678 <__cxa_demangle+0x68>
 800c61c:	2400      	movs	r4, #0
 800c61e:	4617      	mov	r7, r2
 800c620:	460d      	mov	r5, r1
 800c622:	466a      	mov	r2, sp
 800c624:	4929      	ldr	r1, [pc, #164]	; (800c6cc <__cxa_demangle+0xbc>)
 800c626:	9400      	str	r4, [sp, #0]
 800c628:	461e      	mov	r6, r3
 800c62a:	9401      	str	r4, [sp, #4]
 800c62c:	9402      	str	r4, [sp, #8]
 800c62e:	9403      	str	r4, [sp, #12]
 800c630:	f7fe fa24 	bl	800aa7c <d_demangle_callback.constprop.16>
 800c634:	2800      	cmp	r0, #0
 800c636:	d03d      	beq.n	800c6b4 <__cxa_demangle+0xa4>
 800c638:	9b03      	ldr	r3, [sp, #12]
 800c63a:	b1d3      	cbz	r3, 800c672 <__cxa_demangle+0x62>
 800c63c:	f04f 0801 	mov.w	r8, #1
 800c640:	9c00      	ldr	r4, [sp, #0]
 800c642:	b33c      	cbz	r4, 800c694 <__cxa_demangle+0x84>
 800c644:	b39d      	cbz	r5, 800c6ae <__cxa_demangle+0x9e>
 800c646:	4620      	mov	r0, r4
 800c648:	f000 fb75 	bl	800cd36 <strlen>
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	4298      	cmp	r0, r3
 800c650:	d21a      	bcs.n	800c688 <__cxa_demangle+0x78>
 800c652:	1c42      	adds	r2, r0, #1
 800c654:	4621      	mov	r1, r4
 800c656:	4628      	mov	r0, r5
 800c658:	f000 f9d5 	bl	800ca06 <memcpy>
 800c65c:	4620      	mov	r0, r4
 800c65e:	f000 f9ab 	bl	800c9b8 <free>
 800c662:	462c      	mov	r4, r5
 800c664:	b30e      	cbz	r6, 800c6aa <__cxa_demangle+0x9a>
 800c666:	2300      	movs	r3, #0
 800c668:	4620      	mov	r0, r4
 800c66a:	6033      	str	r3, [r6, #0]
 800c66c:	b004      	add	sp, #16
 800c66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c672:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c676:	e7e3      	b.n	800c640 <__cxa_demangle+0x30>
 800c678:	b19b      	cbz	r3, 800c6a2 <__cxa_demangle+0x92>
 800c67a:	f06f 0202 	mvn.w	r2, #2
 800c67e:	2000      	movs	r0, #0
 800c680:	601a      	str	r2, [r3, #0]
 800c682:	b004      	add	sp, #16
 800c684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c688:	4628      	mov	r0, r5
 800c68a:	f000 f995 	bl	800c9b8 <free>
 800c68e:	f8c7 8000 	str.w	r8, [r7]
 800c692:	e7e7      	b.n	800c664 <__cxa_demangle+0x54>
 800c694:	b12e      	cbz	r6, 800c6a2 <__cxa_demangle+0x92>
 800c696:	f1b8 0f01 	cmp.w	r8, #1
 800c69a:	d011      	beq.n	800c6c0 <__cxa_demangle+0xb0>
 800c69c:	f06f 0301 	mvn.w	r3, #1
 800c6a0:	6033      	str	r3, [r6, #0]
 800c6a2:	2000      	movs	r0, #0
 800c6a4:	b004      	add	sp, #16
 800c6a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	e7de      	b.n	800c66c <__cxa_demangle+0x5c>
 800c6ae:	2f00      	cmp	r7, #0
 800c6b0:	d1ed      	bne.n	800c68e <__cxa_demangle+0x7e>
 800c6b2:	e7d7      	b.n	800c664 <__cxa_demangle+0x54>
 800c6b4:	9800      	ldr	r0, [sp, #0]
 800c6b6:	f000 f97f 	bl	800c9b8 <free>
 800c6ba:	2e00      	cmp	r6, #0
 800c6bc:	d1ee      	bne.n	800c69c <__cxa_demangle+0x8c>
 800c6be:	e7f0      	b.n	800c6a2 <__cxa_demangle+0x92>
 800c6c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	6033      	str	r3, [r6, #0]
 800c6c8:	e7d0      	b.n	800c66c <__cxa_demangle+0x5c>
 800c6ca:	bf00      	nop
 800c6cc:	08004739 	.word	0x08004739

0800c6d0 <__gcclibcxx_demangle_callback>:
 800c6d0:	b160      	cbz	r0, 800c6ec <__gcclibcxx_demangle_callback+0x1c>
 800c6d2:	b508      	push	{r3, lr}
 800c6d4:	b139      	cbz	r1, 800c6e6 <__gcclibcxx_demangle_callback+0x16>
 800c6d6:	f7fe f9d1 	bl	800aa7c <d_demangle_callback.constprop.16>
 800c6da:	2800      	cmp	r0, #0
 800c6dc:	bf0c      	ite	eq
 800c6de:	f06f 0001 	mvneq.w	r0, #1
 800c6e2:	2000      	movne	r0, #0
 800c6e4:	bd08      	pop	{r3, pc}
 800c6e6:	f06f 0002 	mvn.w	r0, #2
 800c6ea:	bd08      	pop	{r3, pc}
 800c6ec:	f06f 0002 	mvn.w	r0, #2
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop

0800c6f4 <__cxa_get_globals>:
 800c6f4:	4800      	ldr	r0, [pc, #0]	; (800c6f8 <__cxa_get_globals+0x4>)
 800c6f6:	4770      	bx	lr
 800c6f8:	20000250 	.word	0x20000250

0800c6fc <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE>:
 800c6fc:	4b24      	ldr	r3, [pc, #144]	; (800c790 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0x94>)
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	07d0      	lsls	r0, r2, #31
 800c702:	bf5c      	itt	pl
 800c704:	2201      	movpl	r2, #1
 800c706:	601a      	strpl	r2, [r3, #0]
 800c708:	4b22      	ldr	r3, [pc, #136]	; (800c794 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0x98>)
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	07d1      	lsls	r1, r2, #31
 800c70e:	bf5c      	itt	pl
 800c710:	2201      	movpl	r2, #1
 800c712:	601a      	strpl	r2, [r3, #0]
 800c714:	4b20      	ldr	r3, [pc, #128]	; (800c798 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0x9c>)
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	07d2      	lsls	r2, r2, #31
 800c71a:	bf5c      	itt	pl
 800c71c:	2201      	movpl	r2, #1
 800c71e:	601a      	strpl	r2, [r3, #0]
 800c720:	4b1e      	ldr	r3, [pc, #120]	; (800c79c <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xa0>)
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	07d0      	lsls	r0, r2, #31
 800c726:	bf5c      	itt	pl
 800c728:	2201      	movpl	r2, #1
 800c72a:	601a      	strpl	r2, [r3, #0]
 800c72c:	4b1c      	ldr	r3, [pc, #112]	; (800c7a0 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xa4>)
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	07d1      	lsls	r1, r2, #31
 800c732:	bf5c      	itt	pl
 800c734:	2201      	movpl	r2, #1
 800c736:	601a      	strpl	r2, [r3, #0]
 800c738:	4b1a      	ldr	r3, [pc, #104]	; (800c7a4 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xa8>)
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	07d2      	lsls	r2, r2, #31
 800c73e:	bf5c      	itt	pl
 800c740:	2201      	movpl	r2, #1
 800c742:	601a      	strpl	r2, [r3, #0]
 800c744:	4b18      	ldr	r3, [pc, #96]	; (800c7a8 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xac>)
 800c746:	681a      	ldr	r2, [r3, #0]
 800c748:	07d0      	lsls	r0, r2, #31
 800c74a:	bf5c      	itt	pl
 800c74c:	2201      	movpl	r2, #1
 800c74e:	601a      	strpl	r2, [r3, #0]
 800c750:	4b16      	ldr	r3, [pc, #88]	; (800c7ac <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xb0>)
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	07d1      	lsls	r1, r2, #31
 800c756:	bf5c      	itt	pl
 800c758:	2201      	movpl	r2, #1
 800c75a:	601a      	strpl	r2, [r3, #0]
 800c75c:	4b14      	ldr	r3, [pc, #80]	; (800c7b0 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xb4>)
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	07d2      	lsls	r2, r2, #31
 800c762:	bf5c      	itt	pl
 800c764:	2201      	movpl	r2, #1
 800c766:	601a      	strpl	r2, [r3, #0]
 800c768:	4b12      	ldr	r3, [pc, #72]	; (800c7b4 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xb8>)
 800c76a:	681a      	ldr	r2, [r3, #0]
 800c76c:	07d0      	lsls	r0, r2, #31
 800c76e:	bf5c      	itt	pl
 800c770:	2201      	movpl	r2, #1
 800c772:	601a      	strpl	r2, [r3, #0]
 800c774:	4b10      	ldr	r3, [pc, #64]	; (800c7b8 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xbc>)
 800c776:	681a      	ldr	r2, [r3, #0]
 800c778:	07d1      	lsls	r1, r2, #31
 800c77a:	bf5c      	itt	pl
 800c77c:	2201      	movpl	r2, #1
 800c77e:	601a      	strpl	r2, [r3, #0]
 800c780:	4b0e      	ldr	r3, [pc, #56]	; (800c7bc <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xc0>)
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	07d2      	lsls	r2, r2, #31
 800c786:	bf5c      	itt	pl
 800c788:	2201      	movpl	r2, #1
 800c78a:	601a      	strpl	r2, [r3, #0]
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop
 800c790:	20000288 	.word	0x20000288
 800c794:	20000284 	.word	0x20000284
 800c798:	20000280 	.word	0x20000280
 800c79c:	2000027c 	.word	0x2000027c
 800c7a0:	20000278 	.word	0x20000278
 800c7a4:	20000274 	.word	0x20000274
 800c7a8:	20000270 	.word	0x20000270
 800c7ac:	2000026c 	.word	0x2000026c
 800c7b0:	20000268 	.word	0x20000268
 800c7b4:	20000264 	.word	0x20000264
 800c7b8:	20000260 	.word	0x20000260
 800c7bc:	2000025c 	.word	0x2000025c

0800c7c0 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE>:
 800c7c0:	4b24      	ldr	r3, [pc, #144]	; (800c854 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0x94>)
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	07d0      	lsls	r0, r2, #31
 800c7c6:	bf5c      	itt	pl
 800c7c8:	2201      	movpl	r2, #1
 800c7ca:	601a      	strpl	r2, [r3, #0]
 800c7cc:	4b22      	ldr	r3, [pc, #136]	; (800c858 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0x98>)
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	07d1      	lsls	r1, r2, #31
 800c7d2:	bf5c      	itt	pl
 800c7d4:	2201      	movpl	r2, #1
 800c7d6:	601a      	strpl	r2, [r3, #0]
 800c7d8:	4b20      	ldr	r3, [pc, #128]	; (800c85c <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0x9c>)
 800c7da:	681a      	ldr	r2, [r3, #0]
 800c7dc:	07d2      	lsls	r2, r2, #31
 800c7de:	bf5c      	itt	pl
 800c7e0:	2201      	movpl	r2, #1
 800c7e2:	601a      	strpl	r2, [r3, #0]
 800c7e4:	4b1e      	ldr	r3, [pc, #120]	; (800c860 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xa0>)
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	07d0      	lsls	r0, r2, #31
 800c7ea:	bf5c      	itt	pl
 800c7ec:	2201      	movpl	r2, #1
 800c7ee:	601a      	strpl	r2, [r3, #0]
 800c7f0:	4b1c      	ldr	r3, [pc, #112]	; (800c864 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xa4>)
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	07d1      	lsls	r1, r2, #31
 800c7f6:	bf5c      	itt	pl
 800c7f8:	2201      	movpl	r2, #1
 800c7fa:	601a      	strpl	r2, [r3, #0]
 800c7fc:	4b1a      	ldr	r3, [pc, #104]	; (800c868 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xa8>)
 800c7fe:	681a      	ldr	r2, [r3, #0]
 800c800:	07d2      	lsls	r2, r2, #31
 800c802:	bf5c      	itt	pl
 800c804:	2201      	movpl	r2, #1
 800c806:	601a      	strpl	r2, [r3, #0]
 800c808:	4b18      	ldr	r3, [pc, #96]	; (800c86c <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xac>)
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	07d0      	lsls	r0, r2, #31
 800c80e:	bf5c      	itt	pl
 800c810:	2201      	movpl	r2, #1
 800c812:	601a      	strpl	r2, [r3, #0]
 800c814:	4b16      	ldr	r3, [pc, #88]	; (800c870 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xb0>)
 800c816:	681a      	ldr	r2, [r3, #0]
 800c818:	07d1      	lsls	r1, r2, #31
 800c81a:	bf5c      	itt	pl
 800c81c:	2201      	movpl	r2, #1
 800c81e:	601a      	strpl	r2, [r3, #0]
 800c820:	4b14      	ldr	r3, [pc, #80]	; (800c874 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xb4>)
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	07d2      	lsls	r2, r2, #31
 800c826:	bf5c      	itt	pl
 800c828:	2201      	movpl	r2, #1
 800c82a:	601a      	strpl	r2, [r3, #0]
 800c82c:	4b12      	ldr	r3, [pc, #72]	; (800c878 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xb8>)
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	07d0      	lsls	r0, r2, #31
 800c832:	bf5c      	itt	pl
 800c834:	2201      	movpl	r2, #1
 800c836:	601a      	strpl	r2, [r3, #0]
 800c838:	4b10      	ldr	r3, [pc, #64]	; (800c87c <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xbc>)
 800c83a:	681a      	ldr	r2, [r3, #0]
 800c83c:	07d1      	lsls	r1, r2, #31
 800c83e:	bf5c      	itt	pl
 800c840:	2201      	movpl	r2, #1
 800c842:	601a      	strpl	r2, [r3, #0]
 800c844:	4b0e      	ldr	r3, [pc, #56]	; (800c880 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xc0>)
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	07d2      	lsls	r2, r2, #31
 800c84a:	bf5c      	itt	pl
 800c84c:	2201      	movpl	r2, #1
 800c84e:	601a      	strpl	r2, [r3, #0]
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop
 800c854:	200002b8 	.word	0x200002b8
 800c858:	200002b4 	.word	0x200002b4
 800c85c:	200002b0 	.word	0x200002b0
 800c860:	200002ac 	.word	0x200002ac
 800c864:	200002a8 	.word	0x200002a8
 800c868:	200002a4 	.word	0x200002a4
 800c86c:	200002a0 	.word	0x200002a0
 800c870:	2000029c 	.word	0x2000029c
 800c874:	20000298 	.word	0x20000298
 800c878:	20000294 	.word	0x20000294
 800c87c:	20000290 	.word	0x20000290
 800c880:	2000028c 	.word	0x2000028c

0800c884 <abort>:
 800c884:	b508      	push	{r3, lr}
 800c886:	2006      	movs	r0, #6
 800c888:	f000 f9c8 	bl	800cc1c <raise>
 800c88c:	2001      	movs	r0, #1
 800c88e:	f001 f8bb 	bl	800da08 <_exit>
	...

0800c894 <__errno>:
 800c894:	4b01      	ldr	r3, [pc, #4]	; (800c89c <__errno+0x8>)
 800c896:	6818      	ldr	r0, [r3, #0]
 800c898:	4770      	bx	lr
 800c89a:	bf00      	nop
 800c89c:	200000ac 	.word	0x200000ac

0800c8a0 <_fputs_r>:
 800c8a0:	b570      	push	{r4, r5, r6, lr}
 800c8a2:	460d      	mov	r5, r1
 800c8a4:	4614      	mov	r4, r2
 800c8a6:	4606      	mov	r6, r0
 800c8a8:	b118      	cbz	r0, 800c8b2 <_fputs_r+0x12>
 800c8aa:	6983      	ldr	r3, [r0, #24]
 800c8ac:	b90b      	cbnz	r3, 800c8b2 <_fputs_r+0x12>
 800c8ae:	f000 fc43 	bl	800d138 <__sinit>
 800c8b2:	4b22      	ldr	r3, [pc, #136]	; (800c93c <_fputs_r+0x9c>)
 800c8b4:	429c      	cmp	r4, r3
 800c8b6:	d101      	bne.n	800c8bc <_fputs_r+0x1c>
 800c8b8:	6874      	ldr	r4, [r6, #4]
 800c8ba:	e008      	b.n	800c8ce <_fputs_r+0x2e>
 800c8bc:	4b20      	ldr	r3, [pc, #128]	; (800c940 <_fputs_r+0xa0>)
 800c8be:	429c      	cmp	r4, r3
 800c8c0:	d101      	bne.n	800c8c6 <_fputs_r+0x26>
 800c8c2:	68b4      	ldr	r4, [r6, #8]
 800c8c4:	e003      	b.n	800c8ce <_fputs_r+0x2e>
 800c8c6:	4b1f      	ldr	r3, [pc, #124]	; (800c944 <_fputs_r+0xa4>)
 800c8c8:	429c      	cmp	r4, r3
 800c8ca:	bf08      	it	eq
 800c8cc:	68f4      	ldreq	r4, [r6, #12]
 800c8ce:	89a3      	ldrh	r3, [r4, #12]
 800c8d0:	071a      	lsls	r2, r3, #28
 800c8d2:	d501      	bpl.n	800c8d8 <_fputs_r+0x38>
 800c8d4:	6923      	ldr	r3, [r4, #16]
 800c8d6:	b99b      	cbnz	r3, 800c900 <_fputs_r+0x60>
 800c8d8:	4630      	mov	r0, r6
 800c8da:	4621      	mov	r1, r4
 800c8dc:	f000 fac2 	bl	800ce64 <__swsetup_r>
 800c8e0:	b170      	cbz	r0, 800c900 <_fputs_r+0x60>
 800c8e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e6:	bd70      	pop	{r4, r5, r6, pc}
 800c8e8:	68a3      	ldr	r3, [r4, #8]
 800c8ea:	3b01      	subs	r3, #1
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	60a3      	str	r3, [r4, #8]
 800c8f0:	db0b      	blt.n	800c90a <_fputs_r+0x6a>
 800c8f2:	6823      	ldr	r3, [r4, #0]
 800c8f4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c8f8:	701a      	strb	r2, [r3, #0]
 800c8fa:	6823      	ldr	r3, [r4, #0]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	6023      	str	r3, [r4, #0]
 800c900:	f815 0b01 	ldrb.w	r0, [r5], #1
 800c904:	2800      	cmp	r0, #0
 800c906:	d1ef      	bne.n	800c8e8 <_fputs_r+0x48>
 800c908:	e016      	b.n	800c938 <_fputs_r+0x98>
 800c90a:	69a2      	ldr	r2, [r4, #24]
 800c90c:	4293      	cmp	r3, r2
 800c90e:	db09      	blt.n	800c924 <_fputs_r+0x84>
 800c910:	6823      	ldr	r3, [r4, #0]
 800c912:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c916:	701a      	strb	r2, [r3, #0]
 800c918:	6823      	ldr	r3, [r4, #0]
 800c91a:	7819      	ldrb	r1, [r3, #0]
 800c91c:	290a      	cmp	r1, #10
 800c91e:	d1ed      	bne.n	800c8fc <_fputs_r+0x5c>
 800c920:	4630      	mov	r0, r6
 800c922:	e002      	b.n	800c92a <_fputs_r+0x8a>
 800c924:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c928:	4630      	mov	r0, r6
 800c92a:	4622      	mov	r2, r4
 800c92c:	f000 fa34 	bl	800cd98 <__swbuf_r>
 800c930:	1c43      	adds	r3, r0, #1
 800c932:	4258      	negs	r0, r3
 800c934:	4158      	adcs	r0, r3
 800c936:	e7d3      	b.n	800c8e0 <_fputs_r+0x40>
 800c938:	bd70      	pop	{r4, r5, r6, pc}
 800c93a:	bf00      	nop
 800c93c:	0800ed14 	.word	0x0800ed14
 800c940:	0800ed34 	.word	0x0800ed34
 800c944:	0800ed54 	.word	0x0800ed54

0800c948 <fputs>:
 800c948:	460a      	mov	r2, r1
 800c94a:	4903      	ldr	r1, [pc, #12]	; (800c958 <fputs+0x10>)
 800c94c:	4603      	mov	r3, r0
 800c94e:	6808      	ldr	r0, [r1, #0]
 800c950:	4619      	mov	r1, r3
 800c952:	f7ff bfa5 	b.w	800c8a0 <_fputs_r>
 800c956:	bf00      	nop
 800c958:	200000ac 	.word	0x200000ac

0800c95c <__libc_init_array>:
 800c95c:	b570      	push	{r4, r5, r6, lr}
 800c95e:	4b0e      	ldr	r3, [pc, #56]	; (800c998 <__libc_init_array+0x3c>)
 800c960:	4c0e      	ldr	r4, [pc, #56]	; (800c99c <__libc_init_array+0x40>)
 800c962:	1ae4      	subs	r4, r4, r3
 800c964:	10a4      	asrs	r4, r4, #2
 800c966:	2500      	movs	r5, #0
 800c968:	461e      	mov	r6, r3
 800c96a:	42a5      	cmp	r5, r4
 800c96c:	d004      	beq.n	800c978 <__libc_init_array+0x1c>
 800c96e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c972:	4798      	blx	r3
 800c974:	3501      	adds	r5, #1
 800c976:	e7f8      	b.n	800c96a <__libc_init_array+0xe>
 800c978:	f7f4 fc9c 	bl	80012b4 <_init>
 800c97c:	4c08      	ldr	r4, [pc, #32]	; (800c9a0 <__libc_init_array+0x44>)
 800c97e:	4b09      	ldr	r3, [pc, #36]	; (800c9a4 <__libc_init_array+0x48>)
 800c980:	1ae4      	subs	r4, r4, r3
 800c982:	10a4      	asrs	r4, r4, #2
 800c984:	2500      	movs	r5, #0
 800c986:	461e      	mov	r6, r3
 800c988:	42a5      	cmp	r5, r4
 800c98a:	d004      	beq.n	800c996 <__libc_init_array+0x3a>
 800c98c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c990:	4798      	blx	r3
 800c992:	3501      	adds	r5, #1
 800c994:	e7f8      	b.n	800c988 <__libc_init_array+0x2c>
 800c996:	bd70      	pop	{r4, r5, r6, pc}
 800c998:	200000b0 	.word	0x200000b0
 800c99c:	200000b0 	.word	0x200000b0
 800c9a0:	200000bc 	.word	0x200000bc
 800c9a4:	200000b0 	.word	0x200000b0

0800c9a8 <malloc>:
 800c9a8:	4b02      	ldr	r3, [pc, #8]	; (800c9b4 <malloc+0xc>)
 800c9aa:	4601      	mov	r1, r0
 800c9ac:	6818      	ldr	r0, [r3, #0]
 800c9ae:	f000 b89d 	b.w	800caec <_malloc_r>
 800c9b2:	bf00      	nop
 800c9b4:	200000ac 	.word	0x200000ac

0800c9b8 <free>:
 800c9b8:	4b02      	ldr	r3, [pc, #8]	; (800c9c4 <free+0xc>)
 800c9ba:	4601      	mov	r1, r0
 800c9bc:	6818      	ldr	r0, [r3, #0]
 800c9be:	f000 b851 	b.w	800ca64 <_free_r>
 800c9c2:	bf00      	nop
 800c9c4:	200000ac 	.word	0x200000ac

0800c9c8 <memchr>:
 800c9c8:	b510      	push	{r4, lr}
 800c9ca:	b2c9      	uxtb	r1, r1
 800c9cc:	4402      	add	r2, r0
 800c9ce:	4290      	cmp	r0, r2
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	d006      	beq.n	800c9e2 <memchr+0x1a>
 800c9d4:	781c      	ldrb	r4, [r3, #0]
 800c9d6:	428c      	cmp	r4, r1
 800c9d8:	f100 0001 	add.w	r0, r0, #1
 800c9dc:	d1f7      	bne.n	800c9ce <memchr+0x6>
 800c9de:	4618      	mov	r0, r3
 800c9e0:	bd10      	pop	{r4, pc}
 800c9e2:	2000      	movs	r0, #0
 800c9e4:	bd10      	pop	{r4, pc}

0800c9e6 <memcmp>:
 800c9e6:	b510      	push	{r4, lr}
 800c9e8:	440a      	add	r2, r1
 800c9ea:	1e44      	subs	r4, r0, #1
 800c9ec:	4291      	cmp	r1, r2
 800c9ee:	d008      	beq.n	800ca02 <memcmp+0x1c>
 800c9f0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c9f4:	7808      	ldrb	r0, [r1, #0]
 800c9f6:	4283      	cmp	r3, r0
 800c9f8:	d001      	beq.n	800c9fe <memcmp+0x18>
 800c9fa:	1a18      	subs	r0, r3, r0
 800c9fc:	bd10      	pop	{r4, pc}
 800c9fe:	3101      	adds	r1, #1
 800ca00:	e7f4      	b.n	800c9ec <memcmp+0x6>
 800ca02:	2000      	movs	r0, #0
 800ca04:	bd10      	pop	{r4, pc}

0800ca06 <memcpy>:
 800ca06:	b510      	push	{r4, lr}
 800ca08:	1e43      	subs	r3, r0, #1
 800ca0a:	440a      	add	r2, r1
 800ca0c:	4291      	cmp	r1, r2
 800ca0e:	d004      	beq.n	800ca1a <memcpy+0x14>
 800ca10:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca14:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca18:	e7f8      	b.n	800ca0c <memcpy+0x6>
 800ca1a:	bd10      	pop	{r4, pc}

0800ca1c <memmove>:
 800ca1c:	4281      	cmp	r1, r0
 800ca1e:	b510      	push	{r4, lr}
 800ca20:	eb01 0302 	add.w	r3, r1, r2
 800ca24:	d301      	bcc.n	800ca2a <memmove+0xe>
 800ca26:	1e42      	subs	r2, r0, #1
 800ca28:	e00b      	b.n	800ca42 <memmove+0x26>
 800ca2a:	4298      	cmp	r0, r3
 800ca2c:	d2fb      	bcs.n	800ca26 <memmove+0xa>
 800ca2e:	1881      	adds	r1, r0, r2
 800ca30:	1ad2      	subs	r2, r2, r3
 800ca32:	42d3      	cmn	r3, r2
 800ca34:	d004      	beq.n	800ca40 <memmove+0x24>
 800ca36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca3a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ca3e:	e7f8      	b.n	800ca32 <memmove+0x16>
 800ca40:	bd10      	pop	{r4, pc}
 800ca42:	4299      	cmp	r1, r3
 800ca44:	d004      	beq.n	800ca50 <memmove+0x34>
 800ca46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca4a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ca4e:	e7f8      	b.n	800ca42 <memmove+0x26>
 800ca50:	bd10      	pop	{r4, pc}

0800ca52 <memset>:
 800ca52:	4402      	add	r2, r0
 800ca54:	4603      	mov	r3, r0
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d002      	beq.n	800ca60 <memset+0xe>
 800ca5a:	f803 1b01 	strb.w	r1, [r3], #1
 800ca5e:	e7fa      	b.n	800ca56 <memset+0x4>
 800ca60:	4770      	bx	lr
	...

0800ca64 <_free_r>:
 800ca64:	b530      	push	{r4, r5, lr}
 800ca66:	2900      	cmp	r1, #0
 800ca68:	d03d      	beq.n	800cae6 <_free_r+0x82>
 800ca6a:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800ca6e:	1f0b      	subs	r3, r1, #4
 800ca70:	491d      	ldr	r1, [pc, #116]	; (800cae8 <_free_r+0x84>)
 800ca72:	2a00      	cmp	r2, #0
 800ca74:	bfb8      	it	lt
 800ca76:	189b      	addlt	r3, r3, r2
 800ca78:	680a      	ldr	r2, [r1, #0]
 800ca7a:	460c      	mov	r4, r1
 800ca7c:	b912      	cbnz	r2, 800ca84 <_free_r+0x20>
 800ca7e:	605a      	str	r2, [r3, #4]
 800ca80:	600b      	str	r3, [r1, #0]
 800ca82:	bd30      	pop	{r4, r5, pc}
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d20d      	bcs.n	800caa4 <_free_r+0x40>
 800ca88:	6819      	ldr	r1, [r3, #0]
 800ca8a:	1858      	adds	r0, r3, r1
 800ca8c:	4290      	cmp	r0, r2
 800ca8e:	bf01      	itttt	eq
 800ca90:	585a      	ldreq	r2, [r3, r1]
 800ca92:	1852      	addeq	r2, r2, r1
 800ca94:	601a      	streq	r2, [r3, #0]
 800ca96:	6842      	ldreq	r2, [r0, #4]
 800ca98:	605a      	str	r2, [r3, #4]
 800ca9a:	6023      	str	r3, [r4, #0]
 800ca9c:	bd30      	pop	{r4, r5, pc}
 800ca9e:	4299      	cmp	r1, r3
 800caa0:	d803      	bhi.n	800caaa <_free_r+0x46>
 800caa2:	460a      	mov	r2, r1
 800caa4:	6851      	ldr	r1, [r2, #4]
 800caa6:	2900      	cmp	r1, #0
 800caa8:	d1f9      	bne.n	800ca9e <_free_r+0x3a>
 800caaa:	6814      	ldr	r4, [r2, #0]
 800caac:	1915      	adds	r5, r2, r4
 800caae:	429d      	cmp	r5, r3
 800cab0:	d10a      	bne.n	800cac8 <_free_r+0x64>
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4423      	add	r3, r4
 800cab6:	18d0      	adds	r0, r2, r3
 800cab8:	4288      	cmp	r0, r1
 800caba:	6013      	str	r3, [r2, #0]
 800cabc:	d113      	bne.n	800cae6 <_free_r+0x82>
 800cabe:	6808      	ldr	r0, [r1, #0]
 800cac0:	4403      	add	r3, r0
 800cac2:	6013      	str	r3, [r2, #0]
 800cac4:	684b      	ldr	r3, [r1, #4]
 800cac6:	e00d      	b.n	800cae4 <_free_r+0x80>
 800cac8:	d902      	bls.n	800cad0 <_free_r+0x6c>
 800caca:	230c      	movs	r3, #12
 800cacc:	6003      	str	r3, [r0, #0]
 800cace:	bd30      	pop	{r4, r5, pc}
 800cad0:	681c      	ldr	r4, [r3, #0]
 800cad2:	1918      	adds	r0, r3, r4
 800cad4:	4288      	cmp	r0, r1
 800cad6:	bf04      	itt	eq
 800cad8:	6808      	ldreq	r0, [r1, #0]
 800cada:	6849      	ldreq	r1, [r1, #4]
 800cadc:	6059      	str	r1, [r3, #4]
 800cade:	bf04      	itt	eq
 800cae0:	1900      	addeq	r0, r0, r4
 800cae2:	6018      	streq	r0, [r3, #0]
 800cae4:	6053      	str	r3, [r2, #4]
 800cae6:	bd30      	pop	{r4, r5, pc}
 800cae8:	200002c0 	.word	0x200002c0

0800caec <_malloc_r>:
 800caec:	b570      	push	{r4, r5, r6, lr}
 800caee:	1ccc      	adds	r4, r1, #3
 800caf0:	f024 0403 	bic.w	r4, r4, #3
 800caf4:	3408      	adds	r4, #8
 800caf6:	2c0c      	cmp	r4, #12
 800caf8:	bf38      	it	cc
 800cafa:	240c      	movcc	r4, #12
 800cafc:	2c00      	cmp	r4, #0
 800cafe:	4606      	mov	r6, r0
 800cb00:	da03      	bge.n	800cb0a <_malloc_r+0x1e>
 800cb02:	230c      	movs	r3, #12
 800cb04:	6033      	str	r3, [r6, #0]
 800cb06:	2000      	movs	r0, #0
 800cb08:	bd70      	pop	{r4, r5, r6, pc}
 800cb0a:	428c      	cmp	r4, r1
 800cb0c:	d3f9      	bcc.n	800cb02 <_malloc_r+0x16>
 800cb0e:	4a20      	ldr	r2, [pc, #128]	; (800cb90 <_malloc_r+0xa4>)
 800cb10:	6813      	ldr	r3, [r2, #0]
 800cb12:	4610      	mov	r0, r2
 800cb14:	4619      	mov	r1, r3
 800cb16:	b1a1      	cbz	r1, 800cb42 <_malloc_r+0x56>
 800cb18:	680a      	ldr	r2, [r1, #0]
 800cb1a:	1b12      	subs	r2, r2, r4
 800cb1c:	d40e      	bmi.n	800cb3c <_malloc_r+0x50>
 800cb1e:	2a0b      	cmp	r2, #11
 800cb20:	d903      	bls.n	800cb2a <_malloc_r+0x3e>
 800cb22:	600a      	str	r2, [r1, #0]
 800cb24:	188b      	adds	r3, r1, r2
 800cb26:	508c      	str	r4, [r1, r2]
 800cb28:	e01f      	b.n	800cb6a <_malloc_r+0x7e>
 800cb2a:	428b      	cmp	r3, r1
 800cb2c:	bf0d      	iteet	eq
 800cb2e:	685a      	ldreq	r2, [r3, #4]
 800cb30:	684a      	ldrne	r2, [r1, #4]
 800cb32:	605a      	strne	r2, [r3, #4]
 800cb34:	6002      	streq	r2, [r0, #0]
 800cb36:	bf18      	it	ne
 800cb38:	460b      	movne	r3, r1
 800cb3a:	e016      	b.n	800cb6a <_malloc_r+0x7e>
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	6849      	ldr	r1, [r1, #4]
 800cb40:	e7e9      	b.n	800cb16 <_malloc_r+0x2a>
 800cb42:	4d14      	ldr	r5, [pc, #80]	; (800cb94 <_malloc_r+0xa8>)
 800cb44:	682b      	ldr	r3, [r5, #0]
 800cb46:	b91b      	cbnz	r3, 800cb50 <_malloc_r+0x64>
 800cb48:	4630      	mov	r0, r6
 800cb4a:	f000 f82f 	bl	800cbac <_sbrk_r>
 800cb4e:	6028      	str	r0, [r5, #0]
 800cb50:	4630      	mov	r0, r6
 800cb52:	4621      	mov	r1, r4
 800cb54:	f000 f82a 	bl	800cbac <_sbrk_r>
 800cb58:	1c42      	adds	r2, r0, #1
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	d0d1      	beq.n	800cb02 <_malloc_r+0x16>
 800cb5e:	1cc5      	adds	r5, r0, #3
 800cb60:	f025 0503 	bic.w	r5, r5, #3
 800cb64:	4285      	cmp	r5, r0
 800cb66:	d10a      	bne.n	800cb7e <_malloc_r+0x92>
 800cb68:	601c      	str	r4, [r3, #0]
 800cb6a:	f103 000b 	add.w	r0, r3, #11
 800cb6e:	1d1a      	adds	r2, r3, #4
 800cb70:	f020 0007 	bic.w	r0, r0, #7
 800cb74:	1a82      	subs	r2, r0, r2
 800cb76:	d00a      	beq.n	800cb8e <_malloc_r+0xa2>
 800cb78:	4251      	negs	r1, r2
 800cb7a:	5099      	str	r1, [r3, r2]
 800cb7c:	bd70      	pop	{r4, r5, r6, pc}
 800cb7e:	4630      	mov	r0, r6
 800cb80:	1ae9      	subs	r1, r5, r3
 800cb82:	f000 f813 	bl	800cbac <_sbrk_r>
 800cb86:	3001      	adds	r0, #1
 800cb88:	d0bb      	beq.n	800cb02 <_malloc_r+0x16>
 800cb8a:	462b      	mov	r3, r5
 800cb8c:	e7ec      	b.n	800cb68 <_malloc_r+0x7c>
 800cb8e:	bd70      	pop	{r4, r5, r6, pc}
 800cb90:	200002c0 	.word	0x200002c0
 800cb94:	200002bc 	.word	0x200002bc

0800cb98 <realloc>:
 800cb98:	460a      	mov	r2, r1
 800cb9a:	4903      	ldr	r1, [pc, #12]	; (800cba8 <realloc+0x10>)
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	6808      	ldr	r0, [r1, #0]
 800cba0:	4619      	mov	r1, r3
 800cba2:	f000 bbb1 	b.w	800d308 <_realloc_r>
 800cba6:	bf00      	nop
 800cba8:	200000ac 	.word	0x200000ac

0800cbac <_sbrk_r>:
 800cbac:	b538      	push	{r3, r4, r5, lr}
 800cbae:	4c06      	ldr	r4, [pc, #24]	; (800cbc8 <_sbrk_r+0x1c>)
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	4605      	mov	r5, r0
 800cbb4:	4608      	mov	r0, r1
 800cbb6:	6023      	str	r3, [r4, #0]
 800cbb8:	f7f4 fb48 	bl	800124c <_sbrk>
 800cbbc:	1c43      	adds	r3, r0, #1
 800cbbe:	d102      	bne.n	800cbc6 <_sbrk_r+0x1a>
 800cbc0:	6823      	ldr	r3, [r4, #0]
 800cbc2:	b103      	cbz	r3, 800cbc6 <_sbrk_r+0x1a>
 800cbc4:	602b      	str	r3, [r5, #0]
 800cbc6:	bd38      	pop	{r3, r4, r5, pc}
 800cbc8:	20000304 	.word	0x20000304

0800cbcc <_raise_r>:
 800cbcc:	291f      	cmp	r1, #31
 800cbce:	b538      	push	{r3, r4, r5, lr}
 800cbd0:	4604      	mov	r4, r0
 800cbd2:	460d      	mov	r5, r1
 800cbd4:	d904      	bls.n	800cbe0 <_raise_r+0x14>
 800cbd6:	2316      	movs	r3, #22
 800cbd8:	6003      	str	r3, [r0, #0]
 800cbda:	f04f 30ff 	mov.w	r0, #4294967295
 800cbde:	bd38      	pop	{r3, r4, r5, pc}
 800cbe0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cbe2:	b112      	cbz	r2, 800cbea <_raise_r+0x1e>
 800cbe4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cbe8:	b94b      	cbnz	r3, 800cbfe <_raise_r+0x32>
 800cbea:	4620      	mov	r0, r4
 800cbec:	f000 f830 	bl	800cc50 <_getpid_r>
 800cbf0:	462a      	mov	r2, r5
 800cbf2:	4601      	mov	r1, r0
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbfa:	f000 b817 	b.w	800cc2c <_kill_r>
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	d00a      	beq.n	800cc18 <_raise_r+0x4c>
 800cc02:	1c59      	adds	r1, r3, #1
 800cc04:	d103      	bne.n	800cc0e <_raise_r+0x42>
 800cc06:	2316      	movs	r3, #22
 800cc08:	6003      	str	r3, [r0, #0]
 800cc0a:	2001      	movs	r0, #1
 800cc0c:	bd38      	pop	{r3, r4, r5, pc}
 800cc0e:	2400      	movs	r4, #0
 800cc10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cc14:	4628      	mov	r0, r5
 800cc16:	4798      	blx	r3
 800cc18:	2000      	movs	r0, #0
 800cc1a:	bd38      	pop	{r3, r4, r5, pc}

0800cc1c <raise>:
 800cc1c:	4b02      	ldr	r3, [pc, #8]	; (800cc28 <raise+0xc>)
 800cc1e:	4601      	mov	r1, r0
 800cc20:	6818      	ldr	r0, [r3, #0]
 800cc22:	f7ff bfd3 	b.w	800cbcc <_raise_r>
 800cc26:	bf00      	nop
 800cc28:	200000ac 	.word	0x200000ac

0800cc2c <_kill_r>:
 800cc2c:	b538      	push	{r3, r4, r5, lr}
 800cc2e:	4c07      	ldr	r4, [pc, #28]	; (800cc4c <_kill_r+0x20>)
 800cc30:	2300      	movs	r3, #0
 800cc32:	4605      	mov	r5, r0
 800cc34:	4608      	mov	r0, r1
 800cc36:	4611      	mov	r1, r2
 800cc38:	6023      	str	r3, [r4, #0]
 800cc3a:	f000 fec5 	bl	800d9c8 <_kill>
 800cc3e:	1c43      	adds	r3, r0, #1
 800cc40:	d102      	bne.n	800cc48 <_kill_r+0x1c>
 800cc42:	6823      	ldr	r3, [r4, #0]
 800cc44:	b103      	cbz	r3, 800cc48 <_kill_r+0x1c>
 800cc46:	602b      	str	r3, [r5, #0]
 800cc48:	bd38      	pop	{r3, r4, r5, pc}
 800cc4a:	bf00      	nop
 800cc4c:	20000304 	.word	0x20000304

0800cc50 <_getpid_r>:
 800cc50:	f000 beaa 	b.w	800d9a8 <_getpid>

0800cc54 <siprintf>:
 800cc54:	b40e      	push	{r1, r2, r3}
 800cc56:	b500      	push	{lr}
 800cc58:	b09c      	sub	sp, #112	; 0x70
 800cc5a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800cc5e:	f8ad 1014 	strh.w	r1, [sp, #20]
 800cc62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cc66:	9104      	str	r1, [sp, #16]
 800cc68:	9107      	str	r1, [sp, #28]
 800cc6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cc6e:	ab1d      	add	r3, sp, #116	; 0x74
 800cc70:	f8ad 1016 	strh.w	r1, [sp, #22]
 800cc74:	4908      	ldr	r1, [pc, #32]	; (800cc98 <siprintf+0x44>)
 800cc76:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc7a:	9002      	str	r0, [sp, #8]
 800cc7c:	9006      	str	r0, [sp, #24]
 800cc7e:	6808      	ldr	r0, [r1, #0]
 800cc80:	9301      	str	r3, [sp, #4]
 800cc82:	a902      	add	r1, sp, #8
 800cc84:	f000 fbc0 	bl	800d408 <_svfiprintf_r>
 800cc88:	9b02      	ldr	r3, [sp, #8]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	701a      	strb	r2, [r3, #0]
 800cc8e:	b01c      	add	sp, #112	; 0x70
 800cc90:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc94:	b003      	add	sp, #12
 800cc96:	4770      	bx	lr
 800cc98:	200000ac 	.word	0x200000ac

0800cc9c <__sread>:
 800cc9c:	b510      	push	{r4, lr}
 800cc9e:	460c      	mov	r4, r1
 800cca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cca4:	f000 fe32 	bl	800d90c <_read_r>
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	bfab      	itete	ge
 800ccac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ccae:	89a3      	ldrhlt	r3, [r4, #12]
 800ccb0:	181b      	addge	r3, r3, r0
 800ccb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ccb6:	bfac      	ite	ge
 800ccb8:	6563      	strge	r3, [r4, #84]	; 0x54
 800ccba:	81a3      	strhlt	r3, [r4, #12]
 800ccbc:	bd10      	pop	{r4, pc}

0800ccbe <__swrite>:
 800ccbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccc2:	461d      	mov	r5, r3
 800ccc4:	898b      	ldrh	r3, [r1, #12]
 800ccc6:	05db      	lsls	r3, r3, #23
 800ccc8:	4607      	mov	r7, r0
 800ccca:	460c      	mov	r4, r1
 800cccc:	4616      	mov	r6, r2
 800ccce:	d505      	bpl.n	800ccdc <__swrite+0x1e>
 800ccd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	2302      	movs	r3, #2
 800ccd8:	f000 fab6 	bl	800d248 <_lseek_r>
 800ccdc:	89a3      	ldrh	r3, [r4, #12]
 800ccde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cce6:	81a3      	strh	r3, [r4, #12]
 800cce8:	4638      	mov	r0, r7
 800ccea:	4632      	mov	r2, r6
 800ccec:	462b      	mov	r3, r5
 800ccee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccf2:	f000 b8a5 	b.w	800ce40 <_write_r>

0800ccf6 <__sseek>:
 800ccf6:	b510      	push	{r4, lr}
 800ccf8:	460c      	mov	r4, r1
 800ccfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccfe:	f000 faa3 	bl	800d248 <_lseek_r>
 800cd02:	1c43      	adds	r3, r0, #1
 800cd04:	89a3      	ldrh	r3, [r4, #12]
 800cd06:	bf15      	itete	ne
 800cd08:	6560      	strne	r0, [r4, #84]	; 0x54
 800cd0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cd0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cd12:	81a3      	strheq	r3, [r4, #12]
 800cd14:	bf18      	it	ne
 800cd16:	81a3      	strhne	r3, [r4, #12]
 800cd18:	bd10      	pop	{r4, pc}

0800cd1a <__sclose>:
 800cd1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd1e:	f000 b90d 	b.w	800cf3c <_close_r>

0800cd22 <strcmp>:
 800cd22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd2a:	2a01      	cmp	r2, #1
 800cd2c:	bf28      	it	cs
 800cd2e:	429a      	cmpcs	r2, r3
 800cd30:	d0f7      	beq.n	800cd22 <strcmp>
 800cd32:	1ad0      	subs	r0, r2, r3
 800cd34:	4770      	bx	lr

0800cd36 <strlen>:
 800cd36:	4603      	mov	r3, r0
 800cd38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd3c:	2a00      	cmp	r2, #0
 800cd3e:	d1fb      	bne.n	800cd38 <strlen+0x2>
 800cd40:	1a18      	subs	r0, r3, r0
 800cd42:	3801      	subs	r0, #1
 800cd44:	4770      	bx	lr

0800cd46 <strncmp>:
 800cd46:	b570      	push	{r4, r5, r6, lr}
 800cd48:	b1aa      	cbz	r2, 800cd76 <strncmp+0x30>
 800cd4a:	1e45      	subs	r5, r0, #1
 800cd4c:	3901      	subs	r1, #1
 800cd4e:	786b      	ldrb	r3, [r5, #1]
 800cd50:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cd54:	42a3      	cmp	r3, r4
 800cd56:	f105 0601 	add.w	r6, r5, #1
 800cd5a:	d106      	bne.n	800cd6a <strncmp+0x24>
 800cd5c:	f06f 0401 	mvn.w	r4, #1
 800cd60:	1b64      	subs	r4, r4, r5
 800cd62:	4414      	add	r4, r2
 800cd64:	42e0      	cmn	r0, r4
 800cd66:	d102      	bne.n	800cd6e <strncmp+0x28>
 800cd68:	461c      	mov	r4, r3
 800cd6a:	1b18      	subs	r0, r3, r4
 800cd6c:	bd70      	pop	{r4, r5, r6, pc}
 800cd6e:	4635      	mov	r5, r6
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d1ec      	bne.n	800cd4e <strncmp+0x8>
 800cd74:	e7f8      	b.n	800cd68 <strncmp+0x22>
 800cd76:	4610      	mov	r0, r2
 800cd78:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cd7c <write>:
 800cd7c:	b530      	push	{r4, r5, lr}
 800cd7e:	4613      	mov	r3, r2
 800cd80:	4a04      	ldr	r2, [pc, #16]	; (800cd94 <write+0x18>)
 800cd82:	4605      	mov	r5, r0
 800cd84:	460c      	mov	r4, r1
 800cd86:	6810      	ldr	r0, [r2, #0]
 800cd88:	4629      	mov	r1, r5
 800cd8a:	4622      	mov	r2, r4
 800cd8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd90:	f000 b856 	b.w	800ce40 <_write_r>
 800cd94:	200000ac 	.word	0x200000ac

0800cd98 <__swbuf_r>:
 800cd98:	b570      	push	{r4, r5, r6, lr}
 800cd9a:	460d      	mov	r5, r1
 800cd9c:	4614      	mov	r4, r2
 800cd9e:	4606      	mov	r6, r0
 800cda0:	b118      	cbz	r0, 800cdaa <__swbuf_r+0x12>
 800cda2:	6983      	ldr	r3, [r0, #24]
 800cda4:	b90b      	cbnz	r3, 800cdaa <__swbuf_r+0x12>
 800cda6:	f000 f9c7 	bl	800d138 <__sinit>
 800cdaa:	4b22      	ldr	r3, [pc, #136]	; (800ce34 <__swbuf_r+0x9c>)
 800cdac:	429c      	cmp	r4, r3
 800cdae:	d101      	bne.n	800cdb4 <__swbuf_r+0x1c>
 800cdb0:	6874      	ldr	r4, [r6, #4]
 800cdb2:	e008      	b.n	800cdc6 <__swbuf_r+0x2e>
 800cdb4:	4b20      	ldr	r3, [pc, #128]	; (800ce38 <__swbuf_r+0xa0>)
 800cdb6:	429c      	cmp	r4, r3
 800cdb8:	d101      	bne.n	800cdbe <__swbuf_r+0x26>
 800cdba:	68b4      	ldr	r4, [r6, #8]
 800cdbc:	e003      	b.n	800cdc6 <__swbuf_r+0x2e>
 800cdbe:	4b1f      	ldr	r3, [pc, #124]	; (800ce3c <__swbuf_r+0xa4>)
 800cdc0:	429c      	cmp	r4, r3
 800cdc2:	bf08      	it	eq
 800cdc4:	68f4      	ldreq	r4, [r6, #12]
 800cdc6:	69a3      	ldr	r3, [r4, #24]
 800cdc8:	60a3      	str	r3, [r4, #8]
 800cdca:	89a3      	ldrh	r3, [r4, #12]
 800cdcc:	071a      	lsls	r2, r3, #28
 800cdce:	d509      	bpl.n	800cde4 <__swbuf_r+0x4c>
 800cdd0:	6923      	ldr	r3, [r4, #16]
 800cdd2:	b13b      	cbz	r3, 800cde4 <__swbuf_r+0x4c>
 800cdd4:	6823      	ldr	r3, [r4, #0]
 800cdd6:	6920      	ldr	r0, [r4, #16]
 800cdd8:	1a18      	subs	r0, r3, r0
 800cdda:	6963      	ldr	r3, [r4, #20]
 800cddc:	4298      	cmp	r0, r3
 800cdde:	b2ed      	uxtb	r5, r5
 800cde0:	db0f      	blt.n	800ce02 <__swbuf_r+0x6a>
 800cde2:	e008      	b.n	800cdf6 <__swbuf_r+0x5e>
 800cde4:	4630      	mov	r0, r6
 800cde6:	4621      	mov	r1, r4
 800cde8:	f000 f83c 	bl	800ce64 <__swsetup_r>
 800cdec:	2800      	cmp	r0, #0
 800cdee:	d0f1      	beq.n	800cdd4 <__swbuf_r+0x3c>
 800cdf0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf4:	bd70      	pop	{r4, r5, r6, pc}
 800cdf6:	4630      	mov	r0, r6
 800cdf8:	4621      	mov	r1, r4
 800cdfa:	f000 f933 	bl	800d064 <_fflush_r>
 800cdfe:	2800      	cmp	r0, #0
 800ce00:	d1f6      	bne.n	800cdf0 <__swbuf_r+0x58>
 800ce02:	68a3      	ldr	r3, [r4, #8]
 800ce04:	3b01      	subs	r3, #1
 800ce06:	60a3      	str	r3, [r4, #8]
 800ce08:	6823      	ldr	r3, [r4, #0]
 800ce0a:	1c5a      	adds	r2, r3, #1
 800ce0c:	6022      	str	r2, [r4, #0]
 800ce0e:	701d      	strb	r5, [r3, #0]
 800ce10:	6963      	ldr	r3, [r4, #20]
 800ce12:	3001      	adds	r0, #1
 800ce14:	4298      	cmp	r0, r3
 800ce16:	d004      	beq.n	800ce22 <__swbuf_r+0x8a>
 800ce18:	89a3      	ldrh	r3, [r4, #12]
 800ce1a:	07db      	lsls	r3, r3, #31
 800ce1c:	d507      	bpl.n	800ce2e <__swbuf_r+0x96>
 800ce1e:	2d0a      	cmp	r5, #10
 800ce20:	d105      	bne.n	800ce2e <__swbuf_r+0x96>
 800ce22:	4630      	mov	r0, r6
 800ce24:	4621      	mov	r1, r4
 800ce26:	f000 f91d 	bl	800d064 <_fflush_r>
 800ce2a:	2800      	cmp	r0, #0
 800ce2c:	d1e0      	bne.n	800cdf0 <__swbuf_r+0x58>
 800ce2e:	4628      	mov	r0, r5
 800ce30:	bd70      	pop	{r4, r5, r6, pc}
 800ce32:	bf00      	nop
 800ce34:	0800ed14 	.word	0x0800ed14
 800ce38:	0800ed34 	.word	0x0800ed34
 800ce3c:	0800ed54 	.word	0x0800ed54

0800ce40 <_write_r>:
 800ce40:	b538      	push	{r3, r4, r5, lr}
 800ce42:	4c07      	ldr	r4, [pc, #28]	; (800ce60 <_write_r+0x20>)
 800ce44:	4605      	mov	r5, r0
 800ce46:	2000      	movs	r0, #0
 800ce48:	6020      	str	r0, [r4, #0]
 800ce4a:	4608      	mov	r0, r1
 800ce4c:	4611      	mov	r1, r2
 800ce4e:	461a      	mov	r2, r3
 800ce50:	f000 fdd2 	bl	800d9f8 <_write>
 800ce54:	1c43      	adds	r3, r0, #1
 800ce56:	d102      	bne.n	800ce5e <_write_r+0x1e>
 800ce58:	6823      	ldr	r3, [r4, #0]
 800ce5a:	b103      	cbz	r3, 800ce5e <_write_r+0x1e>
 800ce5c:	602b      	str	r3, [r5, #0]
 800ce5e:	bd38      	pop	{r3, r4, r5, pc}
 800ce60:	20000304 	.word	0x20000304

0800ce64 <__swsetup_r>:
 800ce64:	4b31      	ldr	r3, [pc, #196]	; (800cf2c <__swsetup_r+0xc8>)
 800ce66:	b570      	push	{r4, r5, r6, lr}
 800ce68:	681d      	ldr	r5, [r3, #0]
 800ce6a:	4606      	mov	r6, r0
 800ce6c:	460c      	mov	r4, r1
 800ce6e:	b125      	cbz	r5, 800ce7a <__swsetup_r+0x16>
 800ce70:	69ab      	ldr	r3, [r5, #24]
 800ce72:	b913      	cbnz	r3, 800ce7a <__swsetup_r+0x16>
 800ce74:	4628      	mov	r0, r5
 800ce76:	f000 f95f 	bl	800d138 <__sinit>
 800ce7a:	4b2d      	ldr	r3, [pc, #180]	; (800cf30 <__swsetup_r+0xcc>)
 800ce7c:	429c      	cmp	r4, r3
 800ce7e:	d101      	bne.n	800ce84 <__swsetup_r+0x20>
 800ce80:	686c      	ldr	r4, [r5, #4]
 800ce82:	e008      	b.n	800ce96 <__swsetup_r+0x32>
 800ce84:	4b2b      	ldr	r3, [pc, #172]	; (800cf34 <__swsetup_r+0xd0>)
 800ce86:	429c      	cmp	r4, r3
 800ce88:	d101      	bne.n	800ce8e <__swsetup_r+0x2a>
 800ce8a:	68ac      	ldr	r4, [r5, #8]
 800ce8c:	e003      	b.n	800ce96 <__swsetup_r+0x32>
 800ce8e:	4b2a      	ldr	r3, [pc, #168]	; (800cf38 <__swsetup_r+0xd4>)
 800ce90:	429c      	cmp	r4, r3
 800ce92:	bf08      	it	eq
 800ce94:	68ec      	ldreq	r4, [r5, #12]
 800ce96:	89a3      	ldrh	r3, [r4, #12]
 800ce98:	b29a      	uxth	r2, r3
 800ce9a:	0711      	lsls	r1, r2, #28
 800ce9c:	d41d      	bmi.n	800ceda <__swsetup_r+0x76>
 800ce9e:	06d5      	lsls	r5, r2, #27
 800cea0:	d402      	bmi.n	800cea8 <__swsetup_r+0x44>
 800cea2:	2209      	movs	r2, #9
 800cea4:	6032      	str	r2, [r6, #0]
 800cea6:	e038      	b.n	800cf1a <__swsetup_r+0xb6>
 800cea8:	0750      	lsls	r0, r2, #29
 800ceaa:	d512      	bpl.n	800ced2 <__swsetup_r+0x6e>
 800ceac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ceae:	b141      	cbz	r1, 800cec2 <__swsetup_r+0x5e>
 800ceb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ceb4:	4299      	cmp	r1, r3
 800ceb6:	d002      	beq.n	800cebe <__swsetup_r+0x5a>
 800ceb8:	4630      	mov	r0, r6
 800ceba:	f7ff fdd3 	bl	800ca64 <_free_r>
 800cebe:	2300      	movs	r3, #0
 800cec0:	6363      	str	r3, [r4, #52]	; 0x34
 800cec2:	89a3      	ldrh	r3, [r4, #12]
 800cec4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cec8:	81a3      	strh	r3, [r4, #12]
 800ceca:	2300      	movs	r3, #0
 800cecc:	6063      	str	r3, [r4, #4]
 800cece:	6923      	ldr	r3, [r4, #16]
 800ced0:	6023      	str	r3, [r4, #0]
 800ced2:	89a3      	ldrh	r3, [r4, #12]
 800ced4:	f043 0308 	orr.w	r3, r3, #8
 800ced8:	81a3      	strh	r3, [r4, #12]
 800ceda:	6923      	ldr	r3, [r4, #16]
 800cedc:	b94b      	cbnz	r3, 800cef2 <__swsetup_r+0x8e>
 800cede:	89a3      	ldrh	r3, [r4, #12]
 800cee0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cee8:	d003      	beq.n	800cef2 <__swsetup_r+0x8e>
 800ceea:	4630      	mov	r0, r6
 800ceec:	4621      	mov	r1, r4
 800ceee:	f000 f9bd 	bl	800d26c <__smakebuf_r>
 800cef2:	89a3      	ldrh	r3, [r4, #12]
 800cef4:	f013 0201 	ands.w	r2, r3, #1
 800cef8:	d005      	beq.n	800cf06 <__swsetup_r+0xa2>
 800cefa:	2200      	movs	r2, #0
 800cefc:	60a2      	str	r2, [r4, #8]
 800cefe:	6962      	ldr	r2, [r4, #20]
 800cf00:	4252      	negs	r2, r2
 800cf02:	61a2      	str	r2, [r4, #24]
 800cf04:	e003      	b.n	800cf0e <__swsetup_r+0xaa>
 800cf06:	0799      	lsls	r1, r3, #30
 800cf08:	bf58      	it	pl
 800cf0a:	6962      	ldrpl	r2, [r4, #20]
 800cf0c:	60a2      	str	r2, [r4, #8]
 800cf0e:	6922      	ldr	r2, [r4, #16]
 800cf10:	b94a      	cbnz	r2, 800cf26 <__swsetup_r+0xc2>
 800cf12:	f003 0080 	and.w	r0, r3, #128	; 0x80
 800cf16:	b280      	uxth	r0, r0
 800cf18:	b130      	cbz	r0, 800cf28 <__swsetup_r+0xc4>
 800cf1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf1e:	81a3      	strh	r3, [r4, #12]
 800cf20:	f04f 30ff 	mov.w	r0, #4294967295
 800cf24:	bd70      	pop	{r4, r5, r6, pc}
 800cf26:	2000      	movs	r0, #0
 800cf28:	bd70      	pop	{r4, r5, r6, pc}
 800cf2a:	bf00      	nop
 800cf2c:	200000ac 	.word	0x200000ac
 800cf30:	0800ed14 	.word	0x0800ed14
 800cf34:	0800ed34 	.word	0x0800ed34
 800cf38:	0800ed54 	.word	0x0800ed54

0800cf3c <_close_r>:
 800cf3c:	b538      	push	{r3, r4, r5, lr}
 800cf3e:	4c06      	ldr	r4, [pc, #24]	; (800cf58 <_close_r+0x1c>)
 800cf40:	2300      	movs	r3, #0
 800cf42:	4605      	mov	r5, r0
 800cf44:	4608      	mov	r0, r1
 800cf46:	6023      	str	r3, [r4, #0]
 800cf48:	f000 fd1e 	bl	800d988 <_close>
 800cf4c:	1c43      	adds	r3, r0, #1
 800cf4e:	d102      	bne.n	800cf56 <_close_r+0x1a>
 800cf50:	6823      	ldr	r3, [r4, #0]
 800cf52:	b103      	cbz	r3, 800cf56 <_close_r+0x1a>
 800cf54:	602b      	str	r3, [r5, #0]
 800cf56:	bd38      	pop	{r3, r4, r5, pc}
 800cf58:	20000304 	.word	0x20000304

0800cf5c <__sflush_r>:
 800cf5c:	898a      	ldrh	r2, [r1, #12]
 800cf5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf62:	4605      	mov	r5, r0
 800cf64:	0710      	lsls	r0, r2, #28
 800cf66:	460c      	mov	r4, r1
 800cf68:	d457      	bmi.n	800d01a <__sflush_r+0xbe>
 800cf6a:	684b      	ldr	r3, [r1, #4]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	dc02      	bgt.n	800cf76 <__sflush_r+0x1a>
 800cf70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	dd18      	ble.n	800cfa8 <__sflush_r+0x4c>
 800cf76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf78:	b1b6      	cbz	r6, 800cfa8 <__sflush_r+0x4c>
 800cf7a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800cf7e:	2300      	movs	r3, #0
 800cf80:	b292      	uxth	r2, r2
 800cf82:	682f      	ldr	r7, [r5, #0]
 800cf84:	602b      	str	r3, [r5, #0]
 800cf86:	b10a      	cbz	r2, 800cf8c <__sflush_r+0x30>
 800cf88:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800cf8a:	e010      	b.n	800cfae <__sflush_r+0x52>
 800cf8c:	6a21      	ldr	r1, [r4, #32]
 800cf8e:	4628      	mov	r0, r5
 800cf90:	2301      	movs	r3, #1
 800cf92:	47b0      	blx	r6
 800cf94:	1c41      	adds	r1, r0, #1
 800cf96:	4602      	mov	r2, r0
 800cf98:	d109      	bne.n	800cfae <__sflush_r+0x52>
 800cf9a:	682b      	ldr	r3, [r5, #0]
 800cf9c:	b13b      	cbz	r3, 800cfae <__sflush_r+0x52>
 800cf9e:	2b1d      	cmp	r3, #29
 800cfa0:	d001      	beq.n	800cfa6 <__sflush_r+0x4a>
 800cfa2:	2b16      	cmp	r3, #22
 800cfa4:	d147      	bne.n	800d036 <__sflush_r+0xda>
 800cfa6:	602f      	str	r7, [r5, #0]
 800cfa8:	2000      	movs	r0, #0
 800cfaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfae:	89a3      	ldrh	r3, [r4, #12]
 800cfb0:	075b      	lsls	r3, r3, #29
 800cfb2:	d505      	bpl.n	800cfc0 <__sflush_r+0x64>
 800cfb4:	6863      	ldr	r3, [r4, #4]
 800cfb6:	1ad2      	subs	r2, r2, r3
 800cfb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cfba:	b10b      	cbz	r3, 800cfc0 <__sflush_r+0x64>
 800cfbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cfbe:	1ad2      	subs	r2, r2, r3
 800cfc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cfc2:	6a21      	ldr	r1, [r4, #32]
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	4628      	mov	r0, r5
 800cfc8:	47b0      	blx	r6
 800cfca:	1c46      	adds	r6, r0, #1
 800cfcc:	89a3      	ldrh	r3, [r4, #12]
 800cfce:	d105      	bne.n	800cfdc <__sflush_r+0x80>
 800cfd0:	682a      	ldr	r2, [r5, #0]
 800cfd2:	b11a      	cbz	r2, 800cfdc <__sflush_r+0x80>
 800cfd4:	2a1d      	cmp	r2, #29
 800cfd6:	d001      	beq.n	800cfdc <__sflush_r+0x80>
 800cfd8:	2a16      	cmp	r2, #22
 800cfda:	d119      	bne.n	800d010 <__sflush_r+0xb4>
 800cfdc:	2200      	movs	r2, #0
 800cfde:	6062      	str	r2, [r4, #4]
 800cfe0:	04d9      	lsls	r1, r3, #19
 800cfe2:	6922      	ldr	r2, [r4, #16]
 800cfe4:	6022      	str	r2, [r4, #0]
 800cfe6:	d504      	bpl.n	800cff2 <__sflush_r+0x96>
 800cfe8:	1c42      	adds	r2, r0, #1
 800cfea:	d101      	bne.n	800cff0 <__sflush_r+0x94>
 800cfec:	682b      	ldr	r3, [r5, #0]
 800cfee:	b903      	cbnz	r3, 800cff2 <__sflush_r+0x96>
 800cff0:	6560      	str	r0, [r4, #84]	; 0x54
 800cff2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cff4:	602f      	str	r7, [r5, #0]
 800cff6:	2900      	cmp	r1, #0
 800cff8:	d0d6      	beq.n	800cfa8 <__sflush_r+0x4c>
 800cffa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cffe:	4299      	cmp	r1, r3
 800d000:	d002      	beq.n	800d008 <__sflush_r+0xac>
 800d002:	4628      	mov	r0, r5
 800d004:	f7ff fd2e 	bl	800ca64 <_free_r>
 800d008:	2000      	movs	r0, #0
 800d00a:	6360      	str	r0, [r4, #52]	; 0x34
 800d00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d014:	81a3      	strh	r3, [r4, #12]
 800d016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d01a:	690f      	ldr	r7, [r1, #16]
 800d01c:	2f00      	cmp	r7, #0
 800d01e:	d0c3      	beq.n	800cfa8 <__sflush_r+0x4c>
 800d020:	0793      	lsls	r3, r2, #30
 800d022:	680e      	ldr	r6, [r1, #0]
 800d024:	bf08      	it	eq
 800d026:	694b      	ldreq	r3, [r1, #20]
 800d028:	600f      	str	r7, [r1, #0]
 800d02a:	bf18      	it	ne
 800d02c:	2300      	movne	r3, #0
 800d02e:	ebc7 0806 	rsb	r8, r7, r6
 800d032:	608b      	str	r3, [r1, #8]
 800d034:	e012      	b.n	800d05c <__sflush_r+0x100>
 800d036:	89a3      	ldrh	r3, [r4, #12]
 800d038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d03c:	81a3      	strh	r3, [r4, #12]
 800d03e:	f04f 30ff 	mov.w	r0, #4294967295
 800d042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d046:	4628      	mov	r0, r5
 800d048:	6a21      	ldr	r1, [r4, #32]
 800d04a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d04c:	463a      	mov	r2, r7
 800d04e:	4643      	mov	r3, r8
 800d050:	47b0      	blx	r6
 800d052:	2800      	cmp	r0, #0
 800d054:	ddef      	ble.n	800d036 <__sflush_r+0xda>
 800d056:	4407      	add	r7, r0
 800d058:	ebc0 0808 	rsb	r8, r0, r8
 800d05c:	f1b8 0f00 	cmp.w	r8, #0
 800d060:	dcf1      	bgt.n	800d046 <__sflush_r+0xea>
 800d062:	e7a1      	b.n	800cfa8 <__sflush_r+0x4c>

0800d064 <_fflush_r>:
 800d064:	b538      	push	{r3, r4, r5, lr}
 800d066:	690b      	ldr	r3, [r1, #16]
 800d068:	4605      	mov	r5, r0
 800d06a:	460c      	mov	r4, r1
 800d06c:	b1db      	cbz	r3, 800d0a6 <_fflush_r+0x42>
 800d06e:	b118      	cbz	r0, 800d078 <_fflush_r+0x14>
 800d070:	6983      	ldr	r3, [r0, #24]
 800d072:	b90b      	cbnz	r3, 800d078 <_fflush_r+0x14>
 800d074:	f000 f860 	bl	800d138 <__sinit>
 800d078:	4b0c      	ldr	r3, [pc, #48]	; (800d0ac <_fflush_r+0x48>)
 800d07a:	429c      	cmp	r4, r3
 800d07c:	d101      	bne.n	800d082 <_fflush_r+0x1e>
 800d07e:	686c      	ldr	r4, [r5, #4]
 800d080:	e008      	b.n	800d094 <_fflush_r+0x30>
 800d082:	4b0b      	ldr	r3, [pc, #44]	; (800d0b0 <_fflush_r+0x4c>)
 800d084:	429c      	cmp	r4, r3
 800d086:	d101      	bne.n	800d08c <_fflush_r+0x28>
 800d088:	68ac      	ldr	r4, [r5, #8]
 800d08a:	e003      	b.n	800d094 <_fflush_r+0x30>
 800d08c:	4b09      	ldr	r3, [pc, #36]	; (800d0b4 <_fflush_r+0x50>)
 800d08e:	429c      	cmp	r4, r3
 800d090:	bf08      	it	eq
 800d092:	68ec      	ldreq	r4, [r5, #12]
 800d094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d098:	b12b      	cbz	r3, 800d0a6 <_fflush_r+0x42>
 800d09a:	4628      	mov	r0, r5
 800d09c:	4621      	mov	r1, r4
 800d09e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0a2:	f7ff bf5b 	b.w	800cf5c <__sflush_r>
 800d0a6:	2000      	movs	r0, #0
 800d0a8:	bd38      	pop	{r3, r4, r5, pc}
 800d0aa:	bf00      	nop
 800d0ac:	0800ed14 	.word	0x0800ed14
 800d0b0:	0800ed34 	.word	0x0800ed34
 800d0b4:	0800ed54 	.word	0x0800ed54

0800d0b8 <_cleanup_r>:
 800d0b8:	4901      	ldr	r1, [pc, #4]	; (800d0c0 <_cleanup_r+0x8>)
 800d0ba:	f000 b8a7 	b.w	800d20c <_fwalk_reent>
 800d0be:	bf00      	nop
 800d0c0:	0800d065 	.word	0x0800d065

0800d0c4 <std.isra.0>:
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	b510      	push	{r4, lr}
 800d0c8:	4604      	mov	r4, r0
 800d0ca:	6003      	str	r3, [r0, #0]
 800d0cc:	6043      	str	r3, [r0, #4]
 800d0ce:	6083      	str	r3, [r0, #8]
 800d0d0:	8181      	strh	r1, [r0, #12]
 800d0d2:	6643      	str	r3, [r0, #100]	; 0x64
 800d0d4:	81c2      	strh	r2, [r0, #14]
 800d0d6:	6103      	str	r3, [r0, #16]
 800d0d8:	6143      	str	r3, [r0, #20]
 800d0da:	6183      	str	r3, [r0, #24]
 800d0dc:	4619      	mov	r1, r3
 800d0de:	305c      	adds	r0, #92	; 0x5c
 800d0e0:	2208      	movs	r2, #8
 800d0e2:	f7ff fcb6 	bl	800ca52 <memset>
 800d0e6:	4b05      	ldr	r3, [pc, #20]	; (800d0fc <std.isra.0+0x38>)
 800d0e8:	6263      	str	r3, [r4, #36]	; 0x24
 800d0ea:	4b05      	ldr	r3, [pc, #20]	; (800d100 <std.isra.0+0x3c>)
 800d0ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800d0ee:	4b05      	ldr	r3, [pc, #20]	; (800d104 <std.isra.0+0x40>)
 800d0f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d0f2:	4b05      	ldr	r3, [pc, #20]	; (800d108 <std.isra.0+0x44>)
 800d0f4:	6224      	str	r4, [r4, #32]
 800d0f6:	6323      	str	r3, [r4, #48]	; 0x30
 800d0f8:	bd10      	pop	{r4, pc}
 800d0fa:	bf00      	nop
 800d0fc:	0800cc9d 	.word	0x0800cc9d
 800d100:	0800ccbf 	.word	0x0800ccbf
 800d104:	0800ccf7 	.word	0x0800ccf7
 800d108:	0800cd1b 	.word	0x0800cd1b

0800d10c <__sfmoreglue>:
 800d10c:	b570      	push	{r4, r5, r6, lr}
 800d10e:	2368      	movs	r3, #104	; 0x68
 800d110:	1e4d      	subs	r5, r1, #1
 800d112:	435d      	muls	r5, r3
 800d114:	460e      	mov	r6, r1
 800d116:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d11a:	f7ff fce7 	bl	800caec <_malloc_r>
 800d11e:	4604      	mov	r4, r0
 800d120:	b140      	cbz	r0, 800d134 <__sfmoreglue+0x28>
 800d122:	2100      	movs	r1, #0
 800d124:	e880 0042 	stmia.w	r0, {r1, r6}
 800d128:	300c      	adds	r0, #12
 800d12a:	60a0      	str	r0, [r4, #8]
 800d12c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d130:	f7ff fc8f 	bl	800ca52 <memset>
 800d134:	4620      	mov	r0, r4
 800d136:	bd70      	pop	{r4, r5, r6, pc}

0800d138 <__sinit>:
 800d138:	6983      	ldr	r3, [r0, #24]
 800d13a:	b510      	push	{r4, lr}
 800d13c:	4604      	mov	r4, r0
 800d13e:	bb33      	cbnz	r3, 800d18e <__sinit+0x56>
 800d140:	6483      	str	r3, [r0, #72]	; 0x48
 800d142:	64c3      	str	r3, [r0, #76]	; 0x4c
 800d144:	6503      	str	r3, [r0, #80]	; 0x50
 800d146:	4b12      	ldr	r3, [pc, #72]	; (800d190 <__sinit+0x58>)
 800d148:	4a12      	ldr	r2, [pc, #72]	; (800d194 <__sinit+0x5c>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	6282      	str	r2, [r0, #40]	; 0x28
 800d14e:	4298      	cmp	r0, r3
 800d150:	bf04      	itt	eq
 800d152:	2301      	moveq	r3, #1
 800d154:	6183      	streq	r3, [r0, #24]
 800d156:	f000 f81f 	bl	800d198 <__sfp>
 800d15a:	6060      	str	r0, [r4, #4]
 800d15c:	4620      	mov	r0, r4
 800d15e:	f000 f81b 	bl	800d198 <__sfp>
 800d162:	60a0      	str	r0, [r4, #8]
 800d164:	4620      	mov	r0, r4
 800d166:	f000 f817 	bl	800d198 <__sfp>
 800d16a:	2104      	movs	r1, #4
 800d16c:	60e0      	str	r0, [r4, #12]
 800d16e:	2200      	movs	r2, #0
 800d170:	6860      	ldr	r0, [r4, #4]
 800d172:	f7ff ffa7 	bl	800d0c4 <std.isra.0>
 800d176:	68a0      	ldr	r0, [r4, #8]
 800d178:	2109      	movs	r1, #9
 800d17a:	2201      	movs	r2, #1
 800d17c:	f7ff ffa2 	bl	800d0c4 <std.isra.0>
 800d180:	68e0      	ldr	r0, [r4, #12]
 800d182:	2112      	movs	r1, #18
 800d184:	2202      	movs	r2, #2
 800d186:	f7ff ff9d 	bl	800d0c4 <std.isra.0>
 800d18a:	2301      	movs	r3, #1
 800d18c:	61a3      	str	r3, [r4, #24]
 800d18e:	bd10      	pop	{r4, pc}
 800d190:	0800ed10 	.word	0x0800ed10
 800d194:	0800d0b9 	.word	0x0800d0b9

0800d198 <__sfp>:
 800d198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d19a:	4b1b      	ldr	r3, [pc, #108]	; (800d208 <__sfp+0x70>)
 800d19c:	681e      	ldr	r6, [r3, #0]
 800d19e:	69b3      	ldr	r3, [r6, #24]
 800d1a0:	4607      	mov	r7, r0
 800d1a2:	b913      	cbnz	r3, 800d1aa <__sfp+0x12>
 800d1a4:	4630      	mov	r0, r6
 800d1a6:	f7ff ffc7 	bl	800d138 <__sinit>
 800d1aa:	3648      	adds	r6, #72	; 0x48
 800d1ac:	68b4      	ldr	r4, [r6, #8]
 800d1ae:	6873      	ldr	r3, [r6, #4]
 800d1b0:	3b01      	subs	r3, #1
 800d1b2:	d404      	bmi.n	800d1be <__sfp+0x26>
 800d1b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d1b8:	b175      	cbz	r5, 800d1d8 <__sfp+0x40>
 800d1ba:	3468      	adds	r4, #104	; 0x68
 800d1bc:	e7f8      	b.n	800d1b0 <__sfp+0x18>
 800d1be:	6833      	ldr	r3, [r6, #0]
 800d1c0:	b92b      	cbnz	r3, 800d1ce <__sfp+0x36>
 800d1c2:	4638      	mov	r0, r7
 800d1c4:	2104      	movs	r1, #4
 800d1c6:	f7ff ffa1 	bl	800d10c <__sfmoreglue>
 800d1ca:	6030      	str	r0, [r6, #0]
 800d1cc:	b108      	cbz	r0, 800d1d2 <__sfp+0x3a>
 800d1ce:	6836      	ldr	r6, [r6, #0]
 800d1d0:	e7ec      	b.n	800d1ac <__sfp+0x14>
 800d1d2:	230c      	movs	r3, #12
 800d1d4:	603b      	str	r3, [r7, #0]
 800d1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d1dc:	81e3      	strh	r3, [r4, #14]
 800d1de:	2301      	movs	r3, #1
 800d1e0:	81a3      	strh	r3, [r4, #12]
 800d1e2:	6665      	str	r5, [r4, #100]	; 0x64
 800d1e4:	6025      	str	r5, [r4, #0]
 800d1e6:	60a5      	str	r5, [r4, #8]
 800d1e8:	6065      	str	r5, [r4, #4]
 800d1ea:	6125      	str	r5, [r4, #16]
 800d1ec:	6165      	str	r5, [r4, #20]
 800d1ee:	61a5      	str	r5, [r4, #24]
 800d1f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d1f4:	4629      	mov	r1, r5
 800d1f6:	2208      	movs	r2, #8
 800d1f8:	f7ff fc2b 	bl	800ca52 <memset>
 800d1fc:	6365      	str	r5, [r4, #52]	; 0x34
 800d1fe:	63a5      	str	r5, [r4, #56]	; 0x38
 800d200:	64a5      	str	r5, [r4, #72]	; 0x48
 800d202:	64e5      	str	r5, [r4, #76]	; 0x4c
 800d204:	4620      	mov	r0, r4
 800d206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d208:	0800ed10 	.word	0x0800ed10

0800d20c <_fwalk_reent>:
 800d20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d210:	4680      	mov	r8, r0
 800d212:	4689      	mov	r9, r1
 800d214:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d218:	2600      	movs	r6, #0
 800d21a:	b194      	cbz	r4, 800d242 <_fwalk_reent+0x36>
 800d21c:	68a5      	ldr	r5, [r4, #8]
 800d21e:	6867      	ldr	r7, [r4, #4]
 800d220:	3f01      	subs	r7, #1
 800d222:	d40c      	bmi.n	800d23e <_fwalk_reent+0x32>
 800d224:	89ab      	ldrh	r3, [r5, #12]
 800d226:	2b01      	cmp	r3, #1
 800d228:	d907      	bls.n	800d23a <_fwalk_reent+0x2e>
 800d22a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d22e:	3301      	adds	r3, #1
 800d230:	d003      	beq.n	800d23a <_fwalk_reent+0x2e>
 800d232:	4640      	mov	r0, r8
 800d234:	4629      	mov	r1, r5
 800d236:	47c8      	blx	r9
 800d238:	4306      	orrs	r6, r0
 800d23a:	3568      	adds	r5, #104	; 0x68
 800d23c:	e7f0      	b.n	800d220 <_fwalk_reent+0x14>
 800d23e:	6824      	ldr	r4, [r4, #0]
 800d240:	e7eb      	b.n	800d21a <_fwalk_reent+0xe>
 800d242:	4630      	mov	r0, r6
 800d244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d248 <_lseek_r>:
 800d248:	b538      	push	{r3, r4, r5, lr}
 800d24a:	4c07      	ldr	r4, [pc, #28]	; (800d268 <_lseek_r+0x20>)
 800d24c:	4605      	mov	r5, r0
 800d24e:	2000      	movs	r0, #0
 800d250:	6020      	str	r0, [r4, #0]
 800d252:	4608      	mov	r0, r1
 800d254:	4611      	mov	r1, r2
 800d256:	461a      	mov	r2, r3
 800d258:	f000 fbbe 	bl	800d9d8 <_lseek>
 800d25c:	1c43      	adds	r3, r0, #1
 800d25e:	d102      	bne.n	800d266 <_lseek_r+0x1e>
 800d260:	6823      	ldr	r3, [r4, #0]
 800d262:	b103      	cbz	r3, 800d266 <_lseek_r+0x1e>
 800d264:	602b      	str	r3, [r5, #0]
 800d266:	bd38      	pop	{r3, r4, r5, pc}
 800d268:	20000304 	.word	0x20000304

0800d26c <__smakebuf_r>:
 800d26c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d26e:	898b      	ldrh	r3, [r1, #12]
 800d270:	079d      	lsls	r5, r3, #30
 800d272:	b091      	sub	sp, #68	; 0x44
 800d274:	4606      	mov	r6, r0
 800d276:	460c      	mov	r4, r1
 800d278:	d426      	bmi.n	800d2c8 <__smakebuf_r+0x5c>
 800d27a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d27e:	2900      	cmp	r1, #0
 800d280:	da09      	bge.n	800d296 <__smakebuf_r+0x2a>
 800d282:	89a3      	ldrh	r3, [r4, #12]
 800d284:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d288:	f04f 0500 	mov.w	r5, #0
 800d28c:	bf14      	ite	ne
 800d28e:	2740      	movne	r7, #64	; 0x40
 800d290:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 800d294:	e00d      	b.n	800d2b2 <__smakebuf_r+0x46>
 800d296:	aa01      	add	r2, sp, #4
 800d298:	f000 fb4a 	bl	800d930 <_fstat_r>
 800d29c:	2800      	cmp	r0, #0
 800d29e:	dbf0      	blt.n	800d282 <__smakebuf_r+0x16>
 800d2a0:	9d02      	ldr	r5, [sp, #8]
 800d2a2:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 800d2a6:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
 800d2aa:	424d      	negs	r5, r1
 800d2ac:	414d      	adcs	r5, r1
 800d2ae:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800d2b2:	4630      	mov	r0, r6
 800d2b4:	4639      	mov	r1, r7
 800d2b6:	f7ff fc19 	bl	800caec <_malloc_r>
 800d2ba:	b960      	cbnz	r0, 800d2d6 <__smakebuf_r+0x6a>
 800d2bc:	89a3      	ldrh	r3, [r4, #12]
 800d2be:	059a      	lsls	r2, r3, #22
 800d2c0:	d41d      	bmi.n	800d2fe <__smakebuf_r+0x92>
 800d2c2:	f043 0302 	orr.w	r3, r3, #2
 800d2c6:	81a3      	strh	r3, [r4, #12]
 800d2c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d2cc:	6023      	str	r3, [r4, #0]
 800d2ce:	6123      	str	r3, [r4, #16]
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	6163      	str	r3, [r4, #20]
 800d2d4:	e013      	b.n	800d2fe <__smakebuf_r+0x92>
 800d2d6:	4b0b      	ldr	r3, [pc, #44]	; (800d304 <__smakebuf_r+0x98>)
 800d2d8:	62b3      	str	r3, [r6, #40]	; 0x28
 800d2da:	89a3      	ldrh	r3, [r4, #12]
 800d2dc:	6020      	str	r0, [r4, #0]
 800d2de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2e2:	81a3      	strh	r3, [r4, #12]
 800d2e4:	6120      	str	r0, [r4, #16]
 800d2e6:	6167      	str	r7, [r4, #20]
 800d2e8:	b14d      	cbz	r5, 800d2fe <__smakebuf_r+0x92>
 800d2ea:	4630      	mov	r0, r6
 800d2ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2f0:	f000 fb30 	bl	800d954 <_isatty_r>
 800d2f4:	b118      	cbz	r0, 800d2fe <__smakebuf_r+0x92>
 800d2f6:	89a3      	ldrh	r3, [r4, #12]
 800d2f8:	f043 0301 	orr.w	r3, r3, #1
 800d2fc:	81a3      	strh	r3, [r4, #12]
 800d2fe:	b011      	add	sp, #68	; 0x44
 800d300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d302:	bf00      	nop
 800d304:	0800d0b9 	.word	0x0800d0b9

0800d308 <_realloc_r>:
 800d308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d30a:	4607      	mov	r7, r0
 800d30c:	4615      	mov	r5, r2
 800d30e:	460e      	mov	r6, r1
 800d310:	b921      	cbnz	r1, 800d31c <_realloc_r+0x14>
 800d312:	4611      	mov	r1, r2
 800d314:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d318:	f7ff bbe8 	b.w	800caec <_malloc_r>
 800d31c:	b91a      	cbnz	r2, 800d326 <_realloc_r+0x1e>
 800d31e:	f7ff fba1 	bl	800ca64 <_free_r>
 800d322:	4628      	mov	r0, r5
 800d324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d326:	f000 fb25 	bl	800d974 <_malloc_usable_size_r>
 800d32a:	42a8      	cmp	r0, r5
 800d32c:	d20e      	bcs.n	800d34c <_realloc_r+0x44>
 800d32e:	4638      	mov	r0, r7
 800d330:	4629      	mov	r1, r5
 800d332:	f7ff fbdb 	bl	800caec <_malloc_r>
 800d336:	4604      	mov	r4, r0
 800d338:	b150      	cbz	r0, 800d350 <_realloc_r+0x48>
 800d33a:	4631      	mov	r1, r6
 800d33c:	462a      	mov	r2, r5
 800d33e:	f7ff fb62 	bl	800ca06 <memcpy>
 800d342:	4638      	mov	r0, r7
 800d344:	4631      	mov	r1, r6
 800d346:	f7ff fb8d 	bl	800ca64 <_free_r>
 800d34a:	e001      	b.n	800d350 <_realloc_r+0x48>
 800d34c:	4630      	mov	r0, r6
 800d34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d350:	4620      	mov	r0, r4
 800d352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d354 <__ssputs_r>:
 800d354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d358:	688e      	ldr	r6, [r1, #8]
 800d35a:	42b3      	cmp	r3, r6
 800d35c:	4682      	mov	sl, r0
 800d35e:	460c      	mov	r4, r1
 800d360:	4690      	mov	r8, r2
 800d362:	4699      	mov	r9, r3
 800d364:	d340      	bcc.n	800d3e8 <__ssputs_r+0x94>
 800d366:	898a      	ldrh	r2, [r1, #12]
 800d368:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d36c:	d03a      	beq.n	800d3e4 <__ssputs_r+0x90>
 800d36e:	6825      	ldr	r5, [r4, #0]
 800d370:	6909      	ldr	r1, [r1, #16]
 800d372:	1a6f      	subs	r7, r5, r1
 800d374:	6965      	ldr	r5, [r4, #20]
 800d376:	2302      	movs	r3, #2
 800d378:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d37c:	fb95 f5f3 	sdiv	r5, r5, r3
 800d380:	1c7b      	adds	r3, r7, #1
 800d382:	444b      	add	r3, r9
 800d384:	429d      	cmp	r5, r3
 800d386:	bf38      	it	cc
 800d388:	461d      	movcc	r5, r3
 800d38a:	0553      	lsls	r3, r2, #21
 800d38c:	d50f      	bpl.n	800d3ae <__ssputs_r+0x5a>
 800d38e:	4629      	mov	r1, r5
 800d390:	f7ff fbac 	bl	800caec <_malloc_r>
 800d394:	4606      	mov	r6, r0
 800d396:	b198      	cbz	r0, 800d3c0 <__ssputs_r+0x6c>
 800d398:	6921      	ldr	r1, [r4, #16]
 800d39a:	463a      	mov	r2, r7
 800d39c:	f7ff fb33 	bl	800ca06 <memcpy>
 800d3a0:	89a3      	ldrh	r3, [r4, #12]
 800d3a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d3a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3aa:	81a3      	strh	r3, [r4, #12]
 800d3ac:	e013      	b.n	800d3d6 <__ssputs_r+0x82>
 800d3ae:	462a      	mov	r2, r5
 800d3b0:	f7ff ffaa 	bl	800d308 <_realloc_r>
 800d3b4:	4606      	mov	r6, r0
 800d3b6:	b970      	cbnz	r0, 800d3d6 <__ssputs_r+0x82>
 800d3b8:	4650      	mov	r0, sl
 800d3ba:	6921      	ldr	r1, [r4, #16]
 800d3bc:	f7ff fb52 	bl	800ca64 <_free_r>
 800d3c0:	230c      	movs	r3, #12
 800d3c2:	f8ca 3000 	str.w	r3, [sl]
 800d3c6:	89a3      	ldrh	r3, [r4, #12]
 800d3c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3cc:	81a3      	strh	r3, [r4, #12]
 800d3ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3d6:	6126      	str	r6, [r4, #16]
 800d3d8:	6165      	str	r5, [r4, #20]
 800d3da:	443e      	add	r6, r7
 800d3dc:	1bed      	subs	r5, r5, r7
 800d3de:	6026      	str	r6, [r4, #0]
 800d3e0:	60a5      	str	r5, [r4, #8]
 800d3e2:	464e      	mov	r6, r9
 800d3e4:	45b1      	cmp	r9, r6
 800d3e6:	d200      	bcs.n	800d3ea <__ssputs_r+0x96>
 800d3e8:	464e      	mov	r6, r9
 800d3ea:	4632      	mov	r2, r6
 800d3ec:	6820      	ldr	r0, [r4, #0]
 800d3ee:	4641      	mov	r1, r8
 800d3f0:	f7ff fb14 	bl	800ca1c <memmove>
 800d3f4:	68a3      	ldr	r3, [r4, #8]
 800d3f6:	1b9b      	subs	r3, r3, r6
 800d3f8:	60a3      	str	r3, [r4, #8]
 800d3fa:	6823      	ldr	r3, [r4, #0]
 800d3fc:	441e      	add	r6, r3
 800d3fe:	6026      	str	r6, [r4, #0]
 800d400:	2000      	movs	r0, #0
 800d402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800d408 <_svfiprintf_r>:
 800d408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d40c:	b09d      	sub	sp, #116	; 0x74
 800d40e:	4606      	mov	r6, r0
 800d410:	9303      	str	r3, [sp, #12]
 800d412:	898b      	ldrh	r3, [r1, #12]
 800d414:	061c      	lsls	r4, r3, #24
 800d416:	460d      	mov	r5, r1
 800d418:	4690      	mov	r8, r2
 800d41a:	d50c      	bpl.n	800d436 <_svfiprintf_r+0x2e>
 800d41c:	690b      	ldr	r3, [r1, #16]
 800d41e:	b953      	cbnz	r3, 800d436 <_svfiprintf_r+0x2e>
 800d420:	2140      	movs	r1, #64	; 0x40
 800d422:	f7ff fb63 	bl	800caec <_malloc_r>
 800d426:	6028      	str	r0, [r5, #0]
 800d428:	6128      	str	r0, [r5, #16]
 800d42a:	b910      	cbnz	r0, 800d432 <_svfiprintf_r+0x2a>
 800d42c:	230c      	movs	r3, #12
 800d42e:	6033      	str	r3, [r6, #0]
 800d430:	e0cc      	b.n	800d5cc <_svfiprintf_r+0x1c4>
 800d432:	2340      	movs	r3, #64	; 0x40
 800d434:	616b      	str	r3, [r5, #20]
 800d436:	2300      	movs	r3, #0
 800d438:	9309      	str	r3, [sp, #36]	; 0x24
 800d43a:	2320      	movs	r3, #32
 800d43c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d440:	2330      	movs	r3, #48	; 0x30
 800d442:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d446:	4643      	mov	r3, r8
 800d448:	461c      	mov	r4, r3
 800d44a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d44e:	b91a      	cbnz	r2, 800d458 <_svfiprintf_r+0x50>
 800d450:	ebb4 0908 	subs.w	r9, r4, r8
 800d454:	d00f      	beq.n	800d476 <_svfiprintf_r+0x6e>
 800d456:	e002      	b.n	800d45e <_svfiprintf_r+0x56>
 800d458:	2a25      	cmp	r2, #37	; 0x25
 800d45a:	d1f5      	bne.n	800d448 <_svfiprintf_r+0x40>
 800d45c:	e7f8      	b.n	800d450 <_svfiprintf_r+0x48>
 800d45e:	4630      	mov	r0, r6
 800d460:	4629      	mov	r1, r5
 800d462:	4642      	mov	r2, r8
 800d464:	464b      	mov	r3, r9
 800d466:	f7ff ff75 	bl	800d354 <__ssputs_r>
 800d46a:	3001      	adds	r0, #1
 800d46c:	f000 80a9 	beq.w	800d5c2 <_svfiprintf_r+0x1ba>
 800d470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d472:	444b      	add	r3, r9
 800d474:	9309      	str	r3, [sp, #36]	; 0x24
 800d476:	7823      	ldrb	r3, [r4, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f000 80a2 	beq.w	800d5c2 <_svfiprintf_r+0x1ba>
 800d47e:	2300      	movs	r3, #0
 800d480:	f04f 32ff 	mov.w	r2, #4294967295
 800d484:	9304      	str	r3, [sp, #16]
 800d486:	9307      	str	r3, [sp, #28]
 800d488:	9205      	str	r2, [sp, #20]
 800d48a:	9306      	str	r3, [sp, #24]
 800d48c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d490:	931a      	str	r3, [sp, #104]	; 0x68
 800d492:	f104 0801 	add.w	r8, r4, #1
 800d496:	4644      	mov	r4, r8
 800d498:	f8df 9148 	ldr.w	r9, [pc, #328]	; 800d5e4 <_svfiprintf_r+0x1dc>
 800d49c:	7821      	ldrb	r1, [r4, #0]
 800d49e:	4648      	mov	r0, r9
 800d4a0:	2205      	movs	r2, #5
 800d4a2:	f7ff fa91 	bl	800c9c8 <memchr>
 800d4a6:	f108 0801 	add.w	r8, r8, #1
 800d4aa:	9b04      	ldr	r3, [sp, #16]
 800d4ac:	b130      	cbz	r0, 800d4bc <_svfiprintf_r+0xb4>
 800d4ae:	ebc9 0000 	rsb	r0, r9, r0
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	4082      	lsls	r2, r0
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	9304      	str	r3, [sp, #16]
 800d4ba:	e7ec      	b.n	800d496 <_svfiprintf_r+0x8e>
 800d4bc:	06d8      	lsls	r0, r3, #27
 800d4be:	bf44      	itt	mi
 800d4c0:	2220      	movmi	r2, #32
 800d4c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d4c6:	0719      	lsls	r1, r3, #28
 800d4c8:	bf44      	itt	mi
 800d4ca:	222b      	movmi	r2, #43	; 0x2b
 800d4cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d4d0:	7822      	ldrb	r2, [r4, #0]
 800d4d2:	2a2a      	cmp	r2, #42	; 0x2a
 800d4d4:	d002      	beq.n	800d4dc <_svfiprintf_r+0xd4>
 800d4d6:	9907      	ldr	r1, [sp, #28]
 800d4d8:	4623      	mov	r3, r4
 800d4da:	e00e      	b.n	800d4fa <_svfiprintf_r+0xf2>
 800d4dc:	9a03      	ldr	r2, [sp, #12]
 800d4de:	1d11      	adds	r1, r2, #4
 800d4e0:	6812      	ldr	r2, [r2, #0]
 800d4e2:	9103      	str	r1, [sp, #12]
 800d4e4:	2a00      	cmp	r2, #0
 800d4e6:	bfbb      	ittet	lt
 800d4e8:	4252      	neglt	r2, r2
 800d4ea:	f043 0302 	orrlt.w	r3, r3, #2
 800d4ee:	9207      	strge	r2, [sp, #28]
 800d4f0:	9207      	strlt	r2, [sp, #28]
 800d4f2:	bfb8      	it	lt
 800d4f4:	9304      	strlt	r3, [sp, #16]
 800d4f6:	3401      	adds	r4, #1
 800d4f8:	e00a      	b.n	800d510 <_svfiprintf_r+0x108>
 800d4fa:	461c      	mov	r4, r3
 800d4fc:	3301      	adds	r3, #1
 800d4fe:	7822      	ldrb	r2, [r4, #0]
 800d500:	3a30      	subs	r2, #48	; 0x30
 800d502:	2a09      	cmp	r2, #9
 800d504:	d803      	bhi.n	800d50e <_svfiprintf_r+0x106>
 800d506:	200a      	movs	r0, #10
 800d508:	fb00 2101 	mla	r1, r0, r1, r2
 800d50c:	e7f5      	b.n	800d4fa <_svfiprintf_r+0xf2>
 800d50e:	9107      	str	r1, [sp, #28]
 800d510:	7823      	ldrb	r3, [r4, #0]
 800d512:	2b2e      	cmp	r3, #46	; 0x2e
 800d514:	d11a      	bne.n	800d54c <_svfiprintf_r+0x144>
 800d516:	7863      	ldrb	r3, [r4, #1]
 800d518:	2b2a      	cmp	r3, #42	; 0x2a
 800d51a:	d10a      	bne.n	800d532 <_svfiprintf_r+0x12a>
 800d51c:	9b03      	ldr	r3, [sp, #12]
 800d51e:	1d1a      	adds	r2, r3, #4
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	9203      	str	r2, [sp, #12]
 800d524:	2b00      	cmp	r3, #0
 800d526:	bfb8      	it	lt
 800d528:	f04f 33ff 	movlt.w	r3, #4294967295
 800d52c:	3402      	adds	r4, #2
 800d52e:	9305      	str	r3, [sp, #20]
 800d530:	e00c      	b.n	800d54c <_svfiprintf_r+0x144>
 800d532:	1c61      	adds	r1, r4, #1
 800d534:	2200      	movs	r2, #0
 800d536:	460c      	mov	r4, r1
 800d538:	3101      	adds	r1, #1
 800d53a:	7823      	ldrb	r3, [r4, #0]
 800d53c:	3b30      	subs	r3, #48	; 0x30
 800d53e:	2b09      	cmp	r3, #9
 800d540:	d803      	bhi.n	800d54a <_svfiprintf_r+0x142>
 800d542:	200a      	movs	r0, #10
 800d544:	fb00 3202 	mla	r2, r0, r2, r3
 800d548:	e7f5      	b.n	800d536 <_svfiprintf_r+0x12e>
 800d54a:	9205      	str	r2, [sp, #20]
 800d54c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800d5e8 <_svfiprintf_r+0x1e0>
 800d550:	7821      	ldrb	r1, [r4, #0]
 800d552:	4640      	mov	r0, r8
 800d554:	2203      	movs	r2, #3
 800d556:	f7ff fa37 	bl	800c9c8 <memchr>
 800d55a:	b138      	cbz	r0, 800d56c <_svfiprintf_r+0x164>
 800d55c:	9a04      	ldr	r2, [sp, #16]
 800d55e:	ebc8 0000 	rsb	r0, r8, r0
 800d562:	2340      	movs	r3, #64	; 0x40
 800d564:	4083      	lsls	r3, r0
 800d566:	4313      	orrs	r3, r2
 800d568:	9304      	str	r3, [sp, #16]
 800d56a:	3401      	adds	r4, #1
 800d56c:	7821      	ldrb	r1, [r4, #0]
 800d56e:	481a      	ldr	r0, [pc, #104]	; (800d5d8 <_svfiprintf_r+0x1d0>)
 800d570:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d574:	2206      	movs	r2, #6
 800d576:	f104 0801 	add.w	r8, r4, #1
 800d57a:	f7ff fa25 	bl	800c9c8 <memchr>
 800d57e:	b188      	cbz	r0, 800d5a4 <_svfiprintf_r+0x19c>
 800d580:	4b16      	ldr	r3, [pc, #88]	; (800d5dc <_svfiprintf_r+0x1d4>)
 800d582:	b933      	cbnz	r3, 800d592 <_svfiprintf_r+0x18a>
 800d584:	9b03      	ldr	r3, [sp, #12]
 800d586:	3307      	adds	r3, #7
 800d588:	f023 0307 	bic.w	r3, r3, #7
 800d58c:	3308      	adds	r3, #8
 800d58e:	9303      	str	r3, [sp, #12]
 800d590:	e013      	b.n	800d5ba <_svfiprintf_r+0x1b2>
 800d592:	ab03      	add	r3, sp, #12
 800d594:	9300      	str	r3, [sp, #0]
 800d596:	4630      	mov	r0, r6
 800d598:	a904      	add	r1, sp, #16
 800d59a:	462a      	mov	r2, r5
 800d59c:	4b10      	ldr	r3, [pc, #64]	; (800d5e0 <_svfiprintf_r+0x1d8>)
 800d59e:	f3af 8000 	nop.w
 800d5a2:	e007      	b.n	800d5b4 <_svfiprintf_r+0x1ac>
 800d5a4:	ab03      	add	r3, sp, #12
 800d5a6:	9300      	str	r3, [sp, #0]
 800d5a8:	4630      	mov	r0, r6
 800d5aa:	a904      	add	r1, sp, #16
 800d5ac:	462a      	mov	r2, r5
 800d5ae:	4b0c      	ldr	r3, [pc, #48]	; (800d5e0 <_svfiprintf_r+0x1d8>)
 800d5b0:	f000 f892 	bl	800d6d8 <_printf_i>
 800d5b4:	1c42      	adds	r2, r0, #1
 800d5b6:	4607      	mov	r7, r0
 800d5b8:	d003      	beq.n	800d5c2 <_svfiprintf_r+0x1ba>
 800d5ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5bc:	443b      	add	r3, r7
 800d5be:	9309      	str	r3, [sp, #36]	; 0x24
 800d5c0:	e741      	b.n	800d446 <_svfiprintf_r+0x3e>
 800d5c2:	89ab      	ldrh	r3, [r5, #12]
 800d5c4:	065b      	lsls	r3, r3, #25
 800d5c6:	d401      	bmi.n	800d5cc <_svfiprintf_r+0x1c4>
 800d5c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5ca:	e001      	b.n	800d5d0 <_svfiprintf_r+0x1c8>
 800d5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d5d0:	b01d      	add	sp, #116	; 0x74
 800d5d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5d6:	bf00      	nop
 800d5d8:	0800ed7e 	.word	0x0800ed7e
 800d5dc:	00000000 	.word	0x00000000
 800d5e0:	0800d355 	.word	0x0800d355
 800d5e4:	0800ed74 	.word	0x0800ed74
 800d5e8:	0800ed7a 	.word	0x0800ed7a

0800d5ec <_printf_common>:
 800d5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5f0:	4691      	mov	r9, r2
 800d5f2:	461f      	mov	r7, r3
 800d5f4:	688a      	ldr	r2, [r1, #8]
 800d5f6:	690b      	ldr	r3, [r1, #16]
 800d5f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	bfb8      	it	lt
 800d600:	4613      	movlt	r3, r2
 800d602:	f8c9 3000 	str.w	r3, [r9]
 800d606:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d60a:	4606      	mov	r6, r0
 800d60c:	460c      	mov	r4, r1
 800d60e:	b112      	cbz	r2, 800d616 <_printf_common+0x2a>
 800d610:	3301      	adds	r3, #1
 800d612:	f8c9 3000 	str.w	r3, [r9]
 800d616:	6823      	ldr	r3, [r4, #0]
 800d618:	0699      	lsls	r1, r3, #26
 800d61a:	bf42      	ittt	mi
 800d61c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d620:	3302      	addmi	r3, #2
 800d622:	f8c9 3000 	strmi.w	r3, [r9]
 800d626:	6825      	ldr	r5, [r4, #0]
 800d628:	f015 0506 	ands.w	r5, r5, #6
 800d62c:	d01c      	beq.n	800d668 <_printf_common+0x7c>
 800d62e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d632:	6822      	ldr	r2, [r4, #0]
 800d634:	3300      	adds	r3, #0
 800d636:	bf18      	it	ne
 800d638:	2301      	movne	r3, #1
 800d63a:	0692      	lsls	r2, r2, #26
 800d63c:	d51f      	bpl.n	800d67e <_printf_common+0x92>
 800d63e:	18e1      	adds	r1, r4, r3
 800d640:	1c5a      	adds	r2, r3, #1
 800d642:	2030      	movs	r0, #48	; 0x30
 800d644:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d648:	4422      	add	r2, r4
 800d64a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d64e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d652:	3302      	adds	r3, #2
 800d654:	e013      	b.n	800d67e <_printf_common+0x92>
 800d656:	4630      	mov	r0, r6
 800d658:	4639      	mov	r1, r7
 800d65a:	f104 0219 	add.w	r2, r4, #25
 800d65e:	2301      	movs	r3, #1
 800d660:	47c0      	blx	r8
 800d662:	3001      	adds	r0, #1
 800d664:	d007      	beq.n	800d676 <_printf_common+0x8a>
 800d666:	3501      	adds	r5, #1
 800d668:	68e3      	ldr	r3, [r4, #12]
 800d66a:	f8d9 2000 	ldr.w	r2, [r9]
 800d66e:	1a9b      	subs	r3, r3, r2
 800d670:	429d      	cmp	r5, r3
 800d672:	dbf0      	blt.n	800d656 <_printf_common+0x6a>
 800d674:	e7db      	b.n	800d62e <_printf_common+0x42>
 800d676:	f04f 30ff 	mov.w	r0, #4294967295
 800d67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d67e:	4630      	mov	r0, r6
 800d680:	4639      	mov	r1, r7
 800d682:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d686:	47c0      	blx	r8
 800d688:	3001      	adds	r0, #1
 800d68a:	d0f4      	beq.n	800d676 <_printf_common+0x8a>
 800d68c:	6822      	ldr	r2, [r4, #0]
 800d68e:	f8d9 5000 	ldr.w	r5, [r9]
 800d692:	68e3      	ldr	r3, [r4, #12]
 800d694:	f002 0206 	and.w	r2, r2, #6
 800d698:	2a04      	cmp	r2, #4
 800d69a:	bf08      	it	eq
 800d69c:	1b5d      	subeq	r5, r3, r5
 800d69e:	6922      	ldr	r2, [r4, #16]
 800d6a0:	68a3      	ldr	r3, [r4, #8]
 800d6a2:	bf0c      	ite	eq
 800d6a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6a8:	2500      	movne	r5, #0
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	bfc4      	itt	gt
 800d6ae:	1a9b      	subgt	r3, r3, r2
 800d6b0:	18ed      	addgt	r5, r5, r3
 800d6b2:	f04f 0900 	mov.w	r9, #0
 800d6b6:	45a9      	cmp	r9, r5
 800d6b8:	da0a      	bge.n	800d6d0 <_printf_common+0xe4>
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	4639      	mov	r1, r7
 800d6be:	f104 021a 	add.w	r2, r4, #26
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	47c0      	blx	r8
 800d6c6:	3001      	adds	r0, #1
 800d6c8:	d0d5      	beq.n	800d676 <_printf_common+0x8a>
 800d6ca:	f109 0901 	add.w	r9, r9, #1
 800d6ce:	e7f2      	b.n	800d6b6 <_printf_common+0xca>
 800d6d0:	2000      	movs	r0, #0
 800d6d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800d6d8 <_printf_i>:
 800d6d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d6dc:	460c      	mov	r4, r1
 800d6de:	4617      	mov	r7, r2
 800d6e0:	7e22      	ldrb	r2, [r4, #24]
 800d6e2:	2a6e      	cmp	r2, #110	; 0x6e
 800d6e4:	4698      	mov	r8, r3
 800d6e6:	4606      	mov	r6, r0
 800d6e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6ea:	f101 0143 	add.w	r1, r1, #67	; 0x43
 800d6ee:	f000 80a9 	beq.w	800d844 <_printf_i+0x16c>
 800d6f2:	d812      	bhi.n	800d71a <_printf_i+0x42>
 800d6f4:	2a63      	cmp	r2, #99	; 0x63
 800d6f6:	d023      	beq.n	800d740 <_printf_i+0x68>
 800d6f8:	d80a      	bhi.n	800d710 <_printf_i+0x38>
 800d6fa:	2a00      	cmp	r2, #0
 800d6fc:	f000 80b6 	beq.w	800d86c <_printf_i+0x194>
 800d700:	2a58      	cmp	r2, #88	; 0x58
 800d702:	f040 80c5 	bne.w	800d890 <_printf_i+0x1b8>
 800d706:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800d70a:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 800d904 <_printf_i+0x22c>
 800d70e:	e051      	b.n	800d7b4 <_printf_i+0xdc>
 800d710:	2a64      	cmp	r2, #100	; 0x64
 800d712:	d01e      	beq.n	800d752 <_printf_i+0x7a>
 800d714:	2a69      	cmp	r2, #105	; 0x69
 800d716:	d01c      	beq.n	800d752 <_printf_i+0x7a>
 800d718:	e0ba      	b.n	800d890 <_printf_i+0x1b8>
 800d71a:	2a73      	cmp	r2, #115	; 0x73
 800d71c:	f000 80aa 	beq.w	800d874 <_printf_i+0x19c>
 800d720:	d809      	bhi.n	800d736 <_printf_i+0x5e>
 800d722:	2a6f      	cmp	r2, #111	; 0x6f
 800d724:	d02b      	beq.n	800d77e <_printf_i+0xa6>
 800d726:	2a70      	cmp	r2, #112	; 0x70
 800d728:	f040 80b2 	bne.w	800d890 <_printf_i+0x1b8>
 800d72c:	6822      	ldr	r2, [r4, #0]
 800d72e:	f042 0220 	orr.w	r2, r2, #32
 800d732:	6022      	str	r2, [r4, #0]
 800d734:	e039      	b.n	800d7aa <_printf_i+0xd2>
 800d736:	2a75      	cmp	r2, #117	; 0x75
 800d738:	d021      	beq.n	800d77e <_printf_i+0xa6>
 800d73a:	2a78      	cmp	r2, #120	; 0x78
 800d73c:	d035      	beq.n	800d7aa <_printf_i+0xd2>
 800d73e:	e0a7      	b.n	800d890 <_printf_i+0x1b8>
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	1d11      	adds	r1, r2, #4
 800d744:	6019      	str	r1, [r3, #0]
 800d746:	6813      	ldr	r3, [r2, #0]
 800d748:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d74c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d750:	e0a2      	b.n	800d898 <_printf_i+0x1c0>
 800d752:	6820      	ldr	r0, [r4, #0]
 800d754:	681a      	ldr	r2, [r3, #0]
 800d756:	f010 0f80 	tst.w	r0, #128	; 0x80
 800d75a:	d003      	beq.n	800d764 <_printf_i+0x8c>
 800d75c:	1d10      	adds	r0, r2, #4
 800d75e:	6018      	str	r0, [r3, #0]
 800d760:	6813      	ldr	r3, [r2, #0]
 800d762:	e005      	b.n	800d770 <_printf_i+0x98>
 800d764:	0645      	lsls	r5, r0, #25
 800d766:	d5f9      	bpl.n	800d75c <_printf_i+0x84>
 800d768:	1d10      	adds	r0, r2, #4
 800d76a:	6018      	str	r0, [r3, #0]
 800d76c:	f9b2 3000 	ldrsh.w	r3, [r2]
 800d770:	2b00      	cmp	r3, #0
 800d772:	da3b      	bge.n	800d7ec <_printf_i+0x114>
 800d774:	222d      	movs	r2, #45	; 0x2d
 800d776:	425b      	negs	r3, r3
 800d778:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d77c:	e036      	b.n	800d7ec <_printf_i+0x114>
 800d77e:	6820      	ldr	r0, [r4, #0]
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	f010 0f80 	tst.w	r0, #128	; 0x80
 800d786:	d003      	beq.n	800d790 <_printf_i+0xb8>
 800d788:	1d10      	adds	r0, r2, #4
 800d78a:	6018      	str	r0, [r3, #0]
 800d78c:	6813      	ldr	r3, [r2, #0]
 800d78e:	e004      	b.n	800d79a <_printf_i+0xc2>
 800d790:	0640      	lsls	r0, r0, #25
 800d792:	d5f9      	bpl.n	800d788 <_printf_i+0xb0>
 800d794:	1d10      	adds	r0, r2, #4
 800d796:	6018      	str	r0, [r3, #0]
 800d798:	8813      	ldrh	r3, [r2, #0]
 800d79a:	7e22      	ldrb	r2, [r4, #24]
 800d79c:	f8df e164 	ldr.w	lr, [pc, #356]	; 800d904 <_printf_i+0x22c>
 800d7a0:	2a6f      	cmp	r2, #111	; 0x6f
 800d7a2:	bf0c      	ite	eq
 800d7a4:	2208      	moveq	r2, #8
 800d7a6:	220a      	movne	r2, #10
 800d7a8:	e01c      	b.n	800d7e4 <_printf_i+0x10c>
 800d7aa:	2278      	movs	r2, #120	; 0x78
 800d7ac:	f8df e158 	ldr.w	lr, [pc, #344]	; 800d908 <_printf_i+0x230>
 800d7b0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800d7b4:	6822      	ldr	r2, [r4, #0]
 800d7b6:	6818      	ldr	r0, [r3, #0]
 800d7b8:	f012 0f80 	tst.w	r2, #128	; 0x80
 800d7bc:	f100 0504 	add.w	r5, r0, #4
 800d7c0:	601d      	str	r5, [r3, #0]
 800d7c2:	d001      	beq.n	800d7c8 <_printf_i+0xf0>
 800d7c4:	6803      	ldr	r3, [r0, #0]
 800d7c6:	e002      	b.n	800d7ce <_printf_i+0xf6>
 800d7c8:	0655      	lsls	r5, r2, #25
 800d7ca:	d5fb      	bpl.n	800d7c4 <_printf_i+0xec>
 800d7cc:	8803      	ldrh	r3, [r0, #0]
 800d7ce:	07d0      	lsls	r0, r2, #31
 800d7d0:	bf44      	itt	mi
 800d7d2:	f042 0220 	orrmi.w	r2, r2, #32
 800d7d6:	6022      	strmi	r2, [r4, #0]
 800d7d8:	b91b      	cbnz	r3, 800d7e2 <_printf_i+0x10a>
 800d7da:	6822      	ldr	r2, [r4, #0]
 800d7dc:	f022 0220 	bic.w	r2, r2, #32
 800d7e0:	6022      	str	r2, [r4, #0]
 800d7e2:	2210      	movs	r2, #16
 800d7e4:	2000      	movs	r0, #0
 800d7e6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800d7ea:	e002      	b.n	800d7f2 <_printf_i+0x11a>
 800d7ec:	f8df e114 	ldr.w	lr, [pc, #276]	; 800d904 <_printf_i+0x22c>
 800d7f0:	220a      	movs	r2, #10
 800d7f2:	6865      	ldr	r5, [r4, #4]
 800d7f4:	60a5      	str	r5, [r4, #8]
 800d7f6:	2d00      	cmp	r5, #0
 800d7f8:	bfa2      	ittt	ge
 800d7fa:	6820      	ldrge	r0, [r4, #0]
 800d7fc:	f020 0004 	bicge.w	r0, r0, #4
 800d800:	6020      	strge	r0, [r4, #0]
 800d802:	b903      	cbnz	r3, 800d806 <_printf_i+0x12e>
 800d804:	b165      	cbz	r5, 800d820 <_printf_i+0x148>
 800d806:	460d      	mov	r5, r1
 800d808:	fbb3 f0f2 	udiv	r0, r3, r2
 800d80c:	fb02 3310 	mls	r3, r2, r0, r3
 800d810:	f81e 3003 	ldrb.w	r3, [lr, r3]
 800d814:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d818:	4603      	mov	r3, r0
 800d81a:	2800      	cmp	r0, #0
 800d81c:	d1f4      	bne.n	800d808 <_printf_i+0x130>
 800d81e:	e000      	b.n	800d822 <_printf_i+0x14a>
 800d820:	460d      	mov	r5, r1
 800d822:	2a08      	cmp	r2, #8
 800d824:	d10b      	bne.n	800d83e <_printf_i+0x166>
 800d826:	6823      	ldr	r3, [r4, #0]
 800d828:	07da      	lsls	r2, r3, #31
 800d82a:	d508      	bpl.n	800d83e <_printf_i+0x166>
 800d82c:	6923      	ldr	r3, [r4, #16]
 800d82e:	6862      	ldr	r2, [r4, #4]
 800d830:	429a      	cmp	r2, r3
 800d832:	bfde      	ittt	le
 800d834:	2330      	movle	r3, #48	; 0x30
 800d836:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d83a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d83e:	1b49      	subs	r1, r1, r5
 800d840:	6121      	str	r1, [r4, #16]
 800d842:	e02e      	b.n	800d8a2 <_printf_i+0x1ca>
 800d844:	6825      	ldr	r5, [r4, #0]
 800d846:	681a      	ldr	r2, [r3, #0]
 800d848:	6960      	ldr	r0, [r4, #20]
 800d84a:	f015 0f80 	tst.w	r5, #128	; 0x80
 800d84e:	d003      	beq.n	800d858 <_printf_i+0x180>
 800d850:	1d15      	adds	r5, r2, #4
 800d852:	601d      	str	r5, [r3, #0]
 800d854:	6813      	ldr	r3, [r2, #0]
 800d856:	e008      	b.n	800d86a <_printf_i+0x192>
 800d858:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d85c:	f102 0504 	add.w	r5, r2, #4
 800d860:	601d      	str	r5, [r3, #0]
 800d862:	6813      	ldr	r3, [r2, #0]
 800d864:	d001      	beq.n	800d86a <_printf_i+0x192>
 800d866:	8018      	strh	r0, [r3, #0]
 800d868:	e000      	b.n	800d86c <_printf_i+0x194>
 800d86a:	6018      	str	r0, [r3, #0]
 800d86c:	2300      	movs	r3, #0
 800d86e:	6123      	str	r3, [r4, #16]
 800d870:	460d      	mov	r5, r1
 800d872:	e016      	b.n	800d8a2 <_printf_i+0x1ca>
 800d874:	681a      	ldr	r2, [r3, #0]
 800d876:	1d11      	adds	r1, r2, #4
 800d878:	6019      	str	r1, [r3, #0]
 800d87a:	6815      	ldr	r5, [r2, #0]
 800d87c:	6862      	ldr	r2, [r4, #4]
 800d87e:	4628      	mov	r0, r5
 800d880:	2100      	movs	r1, #0
 800d882:	f7ff f8a1 	bl	800c9c8 <memchr>
 800d886:	b108      	cbz	r0, 800d88c <_printf_i+0x1b4>
 800d888:	1b40      	subs	r0, r0, r5
 800d88a:	6060      	str	r0, [r4, #4]
 800d88c:	6863      	ldr	r3, [r4, #4]
 800d88e:	e004      	b.n	800d89a <_printf_i+0x1c2>
 800d890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d894:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800d898:	2301      	movs	r3, #1
 800d89a:	6123      	str	r3, [r4, #16]
 800d89c:	2300      	movs	r3, #0
 800d89e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8a2:	f8cd 8000 	str.w	r8, [sp]
 800d8a6:	4630      	mov	r0, r6
 800d8a8:	4621      	mov	r1, r4
 800d8aa:	aa03      	add	r2, sp, #12
 800d8ac:	463b      	mov	r3, r7
 800d8ae:	f7ff fe9d 	bl	800d5ec <_printf_common>
 800d8b2:	3001      	adds	r0, #1
 800d8b4:	d102      	bne.n	800d8bc <_printf_i+0x1e4>
 800d8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ba:	e01f      	b.n	800d8fc <_printf_i+0x224>
 800d8bc:	4630      	mov	r0, r6
 800d8be:	4639      	mov	r1, r7
 800d8c0:	462a      	mov	r2, r5
 800d8c2:	6923      	ldr	r3, [r4, #16]
 800d8c4:	47c0      	blx	r8
 800d8c6:	3001      	adds	r0, #1
 800d8c8:	d0f5      	beq.n	800d8b6 <_printf_i+0x1de>
 800d8ca:	6823      	ldr	r3, [r4, #0]
 800d8cc:	079b      	lsls	r3, r3, #30
 800d8ce:	d405      	bmi.n	800d8dc <_printf_i+0x204>
 800d8d0:	68e0      	ldr	r0, [r4, #12]
 800d8d2:	9b03      	ldr	r3, [sp, #12]
 800d8d4:	4298      	cmp	r0, r3
 800d8d6:	bfb8      	it	lt
 800d8d8:	4618      	movlt	r0, r3
 800d8da:	e00f      	b.n	800d8fc <_printf_i+0x224>
 800d8dc:	2500      	movs	r5, #0
 800d8de:	68e3      	ldr	r3, [r4, #12]
 800d8e0:	9a03      	ldr	r2, [sp, #12]
 800d8e2:	1a9b      	subs	r3, r3, r2
 800d8e4:	429d      	cmp	r5, r3
 800d8e6:	daf3      	bge.n	800d8d0 <_printf_i+0x1f8>
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	4639      	mov	r1, r7
 800d8ec:	f104 0219 	add.w	r2, r4, #25
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	47c0      	blx	r8
 800d8f4:	3001      	adds	r0, #1
 800d8f6:	d0de      	beq.n	800d8b6 <_printf_i+0x1de>
 800d8f8:	3501      	adds	r5, #1
 800d8fa:	e7f0      	b.n	800d8de <_printf_i+0x206>
 800d8fc:	b004      	add	sp, #16
 800d8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d902:	bf00      	nop
 800d904:	0800ed85 	.word	0x0800ed85
 800d908:	0800ed96 	.word	0x0800ed96

0800d90c <_read_r>:
 800d90c:	b538      	push	{r3, r4, r5, lr}
 800d90e:	4c07      	ldr	r4, [pc, #28]	; (800d92c <_read_r+0x20>)
 800d910:	4605      	mov	r5, r0
 800d912:	2000      	movs	r0, #0
 800d914:	6020      	str	r0, [r4, #0]
 800d916:	4608      	mov	r0, r1
 800d918:	4611      	mov	r1, r2
 800d91a:	461a      	mov	r2, r3
 800d91c:	f000 f864 	bl	800d9e8 <_read>
 800d920:	1c43      	adds	r3, r0, #1
 800d922:	d102      	bne.n	800d92a <_read_r+0x1e>
 800d924:	6823      	ldr	r3, [r4, #0]
 800d926:	b103      	cbz	r3, 800d92a <_read_r+0x1e>
 800d928:	602b      	str	r3, [r5, #0]
 800d92a:	bd38      	pop	{r3, r4, r5, pc}
 800d92c:	20000304 	.word	0x20000304

0800d930 <_fstat_r>:
 800d930:	b538      	push	{r3, r4, r5, lr}
 800d932:	4c07      	ldr	r4, [pc, #28]	; (800d950 <_fstat_r+0x20>)
 800d934:	2300      	movs	r3, #0
 800d936:	4605      	mov	r5, r0
 800d938:	4608      	mov	r0, r1
 800d93a:	4611      	mov	r1, r2
 800d93c:	6023      	str	r3, [r4, #0]
 800d93e:	f000 f82b 	bl	800d998 <_fstat>
 800d942:	1c43      	adds	r3, r0, #1
 800d944:	d102      	bne.n	800d94c <_fstat_r+0x1c>
 800d946:	6823      	ldr	r3, [r4, #0]
 800d948:	b103      	cbz	r3, 800d94c <_fstat_r+0x1c>
 800d94a:	602b      	str	r3, [r5, #0]
 800d94c:	bd38      	pop	{r3, r4, r5, pc}
 800d94e:	bf00      	nop
 800d950:	20000304 	.word	0x20000304

0800d954 <_isatty_r>:
 800d954:	b538      	push	{r3, r4, r5, lr}
 800d956:	4c06      	ldr	r4, [pc, #24]	; (800d970 <_isatty_r+0x1c>)
 800d958:	2300      	movs	r3, #0
 800d95a:	4605      	mov	r5, r0
 800d95c:	4608      	mov	r0, r1
 800d95e:	6023      	str	r3, [r4, #0]
 800d960:	f000 f82a 	bl	800d9b8 <_isatty>
 800d964:	1c43      	adds	r3, r0, #1
 800d966:	d102      	bne.n	800d96e <_isatty_r+0x1a>
 800d968:	6823      	ldr	r3, [r4, #0]
 800d96a:	b103      	cbz	r3, 800d96e <_isatty_r+0x1a>
 800d96c:	602b      	str	r3, [r5, #0]
 800d96e:	bd38      	pop	{r3, r4, r5, pc}
 800d970:	20000304 	.word	0x20000304

0800d974 <_malloc_usable_size_r>:
 800d974:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800d978:	2800      	cmp	r0, #0
 800d97a:	bfbe      	ittt	lt
 800d97c:	1809      	addlt	r1, r1, r0
 800d97e:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 800d982:	18c0      	addlt	r0, r0, r3
 800d984:	3804      	subs	r0, #4
 800d986:	4770      	bx	lr

0800d988 <_close>:
 800d988:	4b02      	ldr	r3, [pc, #8]	; (800d994 <_close+0xc>)
 800d98a:	2258      	movs	r2, #88	; 0x58
 800d98c:	601a      	str	r2, [r3, #0]
 800d98e:	f04f 30ff 	mov.w	r0, #4294967295
 800d992:	4770      	bx	lr
 800d994:	20000304 	.word	0x20000304

0800d998 <_fstat>:
 800d998:	4b02      	ldr	r3, [pc, #8]	; (800d9a4 <_fstat+0xc>)
 800d99a:	2258      	movs	r2, #88	; 0x58
 800d99c:	601a      	str	r2, [r3, #0]
 800d99e:	f04f 30ff 	mov.w	r0, #4294967295
 800d9a2:	4770      	bx	lr
 800d9a4:	20000304 	.word	0x20000304

0800d9a8 <_getpid>:
 800d9a8:	4b02      	ldr	r3, [pc, #8]	; (800d9b4 <_getpid+0xc>)
 800d9aa:	2258      	movs	r2, #88	; 0x58
 800d9ac:	601a      	str	r2, [r3, #0]
 800d9ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d9b2:	4770      	bx	lr
 800d9b4:	20000304 	.word	0x20000304

0800d9b8 <_isatty>:
 800d9b8:	4b02      	ldr	r3, [pc, #8]	; (800d9c4 <_isatty+0xc>)
 800d9ba:	2258      	movs	r2, #88	; 0x58
 800d9bc:	601a      	str	r2, [r3, #0]
 800d9be:	2000      	movs	r0, #0
 800d9c0:	4770      	bx	lr
 800d9c2:	bf00      	nop
 800d9c4:	20000304 	.word	0x20000304

0800d9c8 <_kill>:
 800d9c8:	4b02      	ldr	r3, [pc, #8]	; (800d9d4 <_kill+0xc>)
 800d9ca:	2258      	movs	r2, #88	; 0x58
 800d9cc:	601a      	str	r2, [r3, #0]
 800d9ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d9d2:	4770      	bx	lr
 800d9d4:	20000304 	.word	0x20000304

0800d9d8 <_lseek>:
 800d9d8:	4b02      	ldr	r3, [pc, #8]	; (800d9e4 <_lseek+0xc>)
 800d9da:	2258      	movs	r2, #88	; 0x58
 800d9dc:	601a      	str	r2, [r3, #0]
 800d9de:	f04f 30ff 	mov.w	r0, #4294967295
 800d9e2:	4770      	bx	lr
 800d9e4:	20000304 	.word	0x20000304

0800d9e8 <_read>:
 800d9e8:	4b02      	ldr	r3, [pc, #8]	; (800d9f4 <_read+0xc>)
 800d9ea:	2258      	movs	r2, #88	; 0x58
 800d9ec:	601a      	str	r2, [r3, #0]
 800d9ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d9f2:	4770      	bx	lr
 800d9f4:	20000304 	.word	0x20000304

0800d9f8 <_write>:
 800d9f8:	4b02      	ldr	r3, [pc, #8]	; (800da04 <_write+0xc>)
 800d9fa:	2258      	movs	r2, #88	; 0x58
 800d9fc:	601a      	str	r2, [r3, #0]
 800d9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800da02:	4770      	bx	lr
 800da04:	20000304 	.word	0x20000304

0800da08 <_exit>:
 800da08:	e7fe      	b.n	800da08 <_exit>
 800da0a:	bf00      	nop

0800da0c <_ZN14led_controller13LedController27ON_CHANGE_LIGHT_TRANSITIONSE>:
 800da0c:	0001 0000 0002 0000 0002 0000 ffff 0000     ................
 800da1c:	0000 0000                                   ....

0800da20 <_ZTVN14led_controller13LedControllerE>:
	...
 800da28:	050d 0800 0000 0000                         ........

0800da30 <_ZTVN13state_machine12state_action11StateActionIN14led_controller13LedControllerEXadL_ZNS3_4stopEiEEEE>:
	...
 800da38:	05e1 0800 0000 0000                         ........

0800da40 <_ZTVN13state_machine12state_action11StateActionIN14led_controller13LedControllerEXadL_ZNS3_11changeLightEiEEEE>:
	...
 800da48:	0601 0800 0000 0000                         ........

0800da50 <_ZTVN13state_machine12state_action11StateActionIN14led_controller13LedControllerEXadL_ZNS3_5startEiEEEE>:
	...
 800da58:	0621 0800 0000 0000                         !.......

0800da60 <_ZTVN13state_machine12state_action11StateActionIN14led_controller13LedControllerEXadL_ZNS3_4idleEiEEEE>:
	...
 800da68:	0641 0800 0000 0000                         A.......

0800da70 <_ZTVN13state_machine12StateMachineE>:
	...
 800da78:	3e2d 0800 0000 0000                         ->......

0800da80 <LED_compare_config>:
 800da80:	0000 0000 0001 0000                         ........

0800da88 <LED_gpio_out_config>:
 800da88:	0098 0000 0000 0001 0004 0000 4449 454c     ............IDLE
 800da98:	0000 0000 2509 0963 7525 2509 0975 7525     .....%c.%u.%u.%u
 800daa8:	0a0d 0000 6d54 2072 7653 0063 6d54 5172     ....Tmr Svc.TmrQ
 800dab8:	0000 0000                                   ....

0800dabc <LightUpButton>:
 800dabc:	8100 4802 0000 0000 0000 0000 0000 0000     ...H............
 800dacc:	000e 0000                                   ....

0800dad0 <LightDownButton>:
 800dad0:	8100 4802 0000 0000 0000 0000 0000 0000     ...H............
 800dae0:	000f 0000 0250 0104 0000 0001 0000 0000     ....P...........
 800daf0:	0000 0001 0101 0101 4144 4556 4120 5050     ........DAVE APP
 800db00:	2073 6e69 7469 6169 696c 617a 6974 6e6f     s initialization
 800db10:	6620 6961 656c 0a64 0000 0000 694c 6867      failed.....Ligh
 800db20:	2074 7055 0000 0000 7245 6f72 2072 7263     t Up....Error cr
 800db30:	6165 6974 676e 4c20 6769 7468 5520 2070     eating Light Up 
 800db40:	6174 6b73 000a 0000 694c 6867 2074 6f44     task....Light Do
 800db50:	6e77 0000 7245 6f72 2072 7263 6165 6974     wn..Error creati
 800db60:	676e 4c20 6769 7468 4420 776f 206e 6174     ng Light Down ta
 800db70:	6b73 000a 7570 6572 7620 7269 7574 6c61     sk..pure virtual
 800db80:	6d20 7465 6f68 2064 6163 6c6c 6465 000a      method called..
 800db90:	6564 656c 6574 2064 6976 7472 6175 206c     deleted virtual 
 800dba0:	656d 6874 646f 6320 6c61 656c 0a64 2500     method called..%
 800dbb0:	3a73 5f20 705f 736f 2820 6877 6369 2068     s: __pos (which 
 800dbc0:	7369 2520 757a 2029 203e 6874 7369 3e2d     is %zu) > this->
 800dbd0:	6973 657a 2928 2820 6877 6369 2068 7369     size() (which is
 800dbe0:	2520 757a 0029 6162 6973 5f63 7473 6972      %zu).basic_stri
 800dbf0:	676e 3a3a 7461 203a 5f5f 206e 7728 6968     ng::at: __n (whi
 800dc00:	6863 6920 2073 7a25 2975 3e20 203d 6874     ch is %zu) >= th
 800dc10:	7369 3e2d 6973 657a 2928 2820 6877 6369     is->size() (whic
 800dc20:	2068 7369 2520 757a 0029 6162 6973 5f63     h is %zu).basic_
 800dc30:	7473 6972 676e 3a3a 6f63 7970 6200 7361     string::copy.bas
 800dc40:	6369 735f 7274 6e69 3a67 633a 6d6f 6170     ic_string::compa
 800dc50:	6572 6200 7361 6369 735f 7274 6e69 3a67     re.basic_string:
 800dc60:	5f3a 5f53 7263 6165 6574 6200 7361 6369     :_S_create.basic
 800dc70:	735f 7274 6e69 3a67 653a 6172 6573 6200     _string::erase.b
 800dc80:	7361 6369 735f 7274 6e69 3a67 5f3a 5f4d     asic_string::_M_
 800dc90:	6572 6c70 6361 5f65 7561 0078 6162 6973     replace_aux.basi
 800dca0:	5f63 7473 6972 676e 3a3a 6e69 6573 7472     c_string::insert
 800dcb0:	6200 7361 6369 735f 7274 6e69 3a67 723a     .basic_string::r
 800dcc0:	7065 616c 6563 6200 7361 6369 735f 7274     eplace.basic_str
 800dcd0:	6e69 3a67 613a 7373 6769 006e 6162 6973     ing::assign.basi
 800dce0:	5f63 7473 6972 676e 3a3a 7061 6570 646e     c_string::append
 800dcf0:	6200 7361 6369 735f 7274 6e69 3a67 723a     .basic_string::r
 800dd00:	7365 7a69 0065 6162 6973 5f63 7473 6972     esize.basic_stri
 800dd10:	676e 3a3a 535f 635f 6e6f 7473 7572 7463     ng::_S_construct
 800dd20:	6e20 6c75 206c 6f6e 2074 6176 696c 0064      null not valid.
 800dd30:	6162 6973 5f63 7473 6972 676e 3a3a 6162     basic_string::ba
 800dd40:	6973 5f63 7473 6972 676e 6200 7361 6369     sic_string.basic
 800dd50:	735f 7274 6e69 3a67 733a 6275 7473 0072     _string::substr.
 800dd60:	6574 6d72 6e69 7461 2065 6163 6c6c 6465     terminate called
 800dd70:	7220 6365 7275 6973 6576 796c 000a 6574      recursively..te
 800dd80:	6d72 6e69 7461 2065 6163 6c6c 6465 6120     rminate called a
 800dd90:	7466 7265 7420 7268 776f 6e69 2067 6e61     fter throwing an
 800dda0:	6920 736e 6174 636e 2065 666f 2720 2700      instance of '.'
 800ddb0:	000a 6574 6d72 6e69 7461 2065 6163 6c6c     ..terminate call
 800ddc0:	6465 7720 7469 6f68 7475 6120 206e 6361     ed without an ac
 800ddd0:	6974 6576 6520 6378 7065 6974 6e6f 000a     tive exception..

0800dde0 <standard_subs>:
 800dde0:	0074 0000 e834 0800 0003 0000 e834 0800     t...4.......4...
 800ddf0:	0003 0000 0000 0000 0000 0000 0061 0000     ............a...
 800de00:	e838 0800 000e 0000 e838 0800 000e 0000     8.......8.......
 800de10:	e848 0800 0009 0000 0062 0000 e854 0800     H.......b...T...
 800de20:	0011 0000 e854 0800 0011 0000 e868 0800     ....T.......h...
 800de30:	000c 0000 0073 0000 e878 0800 000b 0000     ....s...x.......
 800de40:	e884 0800 0046 0000 e868 0800 000c 0000     ....F...h.......
 800de50:	0069 0000 e8cc 0800 000c 0000 e8dc 0800     i...............
 800de60:	0031 0000 e910 0800 000d 0000 006f 0000     1...........o...
 800de70:	e920 0800 000c 0000 e930 0800 0031 0000      .......0...1...
 800de80:	e964 0800 000d 0000 0064 0000 e974 0800     d.......d...t...
 800de90:	000d 0000 e984 0800 0032 0000 e9b8 0800     ........2.......
 800dea0:	000e 0000                                   ....

0800dea4 <cplus_demangle_builtin_types>:
 800dea4:	ebb0 0800 000b 0000 ebb0 0800 000b 0000     ................
 800deb4:	0000 0000 ebbc 0800 0004 0000 ebc4 0800     ................
 800dec4:	0007 0000 0007 0000 ebcc 0800 0004 0000     ................
 800ded4:	ebd4 0800 0004 0000 0000 0000 ebdc 0800     ................
 800dee4:	0006 0000 ebdc 0800 0006 0000 0008 0000     ................
 800def4:	ebe4 0800 000b 0000 ebe4 0800 000b 0000     ................
 800df04:	0008 0000 ebf0 0800 0005 0000 ebf0 0800     ................
 800df14:	0005 0000 0008 0000 ebf8 0800 000a 0000     ................
 800df24:	ebf8 0800 000a 0000 0008 0000 ec04 0800     ................
 800df34:	000d 0000 ec04 0800 000d 0000 0000 0000     ................
 800df44:	ec14 0800 0003 0000 ec14 0800 0003 0000     ................
 800df54:	0001 0000 ec18 0800 000c 0000 ec28 0800     ............(...
 800df64:	0008 0000 0002 0000 0000 0000 0000 0000     ................
	...
 800df80:	ec34 0800 0004 0000 ec34 0800 0004 0000     4.......4.......
 800df90:	0003 0000 ec3c 0800 000d 0000 ec3c 0800     ....<.......<...
 800dfa0:	000d 0000 0004 0000 ec4c 0800 0008 0000     ........L.......
 800dfb0:	ec4c 0800 0008 0000 0000 0000 ec58 0800     L...........X...
 800dfc0:	0011 0000 ec58 0800 0011 0000 0000 0000     ....X...........
	...
 800e00c:	ec6c 0800 0005 0000 ec6c 0800 0005 0000     l.......l.......
 800e01c:	0000 0000 ec74 0800 000e 0000 ec74 0800     ....t.......t...
 800e02c:	000e 0000 0000 0000 0000 0000 0000 0000     ................
	...
 800e048:	ec84 0800 0004 0000 ec84 0800 0004 0000     ................
 800e058:	0009 0000 ec8c 0800 0007 0000 ebcc 0800     ................
 800e068:	0004 0000 0000 0000 ec94 0800 0009 0000     ................
 800e078:	ec34 0800 0004 0000 0005 0000 eca0 0800     4...............
 800e088:	0012 0000 eca0 0800 0012 0000 0006 0000     ................
 800e098:	e740 0800 0003 0000 e740 0800 0003 0000     @.......@.......
 800e0a8:	0000 0000 ecb4 0800 0009 0000 ecb4 0800     ................
 800e0b8:	0009 0000 0000 0000 ecc0 0800 0009 0000     ................
 800e0c8:	ecc0 0800 0009 0000 0000 0000 eccc 0800     ................
 800e0d8:	000a 0000 eccc 0800 000a 0000 0000 0000     ................
 800e0e8:	ecd8 0800 0004 0000 ecd8 0800 0004 0000     ................
 800e0f8:	0008 0000 ece0 0800 0008 0000 ece0 0800     ................
 800e108:	0008 0000 0000 0000 ecec 0800 0008 0000     ................
 800e118:	ecec 0800 0008 0000 0000 0000 ecf8 0800     ................
 800e128:	0011 0000 ecf8 0800 0011 0000 0000 0000     ................

0800e138 <cplus_demangle_operators>:
 800e138:	e9c8 0800 e9cc 0800 0002 0000 0002 0000     ................
 800e148:	e9d0 0800 e9d4 0800 0001 0000 0002 0000     ................
 800e158:	e9d8 0800 e7e4 0800 0002 0000 0002 0000     ................
 800e168:	e6e8 0800 e9dc 0800 0001 0000 0001 0000     ................
 800e178:	e9e0 0800 e9dc 0800 0001 0000 0002 0000     ................
 800e188:	e9e4 0800 e9e8 0800 0008 0000 0001 0000     ................
 800e198:	e9f4 0800 e9e8 0800 0008 0000 0001 0000     ................
 800e1a8:	e9f8 0800 e9fc 0800 000a 0000 0002 0000     ................
 800e1b8:	e6f0 0800 ea08 0800 0002 0000 0002 0000     ................
 800e1c8:	ea0c 0800 ea10 0800 0001 0000 0002 0000     ................
 800e1d8:	ea14 0800 ea18 0800 0001 0000 0001 0000     ................
 800e1e8:	ea1c 0800 ea20 0800 0002 0000 0002 0000     .... ...........
 800e1f8:	ea24 0800 ea28 0800 0009 0000 0001 0000     $...(...........
 800e208:	ea34 0800 ea38 0800 000c 0000 0002 0000     4...8...........
 800e218:	ea48 0800 ea4c 0800 0001 0000 0001 0000     H...L...........
 800e228:	ea50 0800 ea54 0800 0007 0000 0001 0000     P...T...........
 800e238:	ea5c 0800 ea60 0800 0002 0000 0002 0000     \...`...........
 800e248:	e810 0800 ea64 0800 0001 0000 0002 0000     ....d...........
 800e258:	ea68 0800 ea6c 0800 0001 0000 0002 0000     h...l...........
 800e268:	ea70 0800 ea74 0800 0002 0000 0002 0000     p...t...........
 800e278:	ea78 0800 ea7c 0800 0001 0000 0002 0000     x...|...........
 800e288:	ea80 0800 ea84 0800 0002 0000 0002 0000     ................
 800e298:	ea88 0800 ea8c 0800 0002 0000 0002 0000     ................
 800e2a8:	e6ec 0800 e548 0800 0002 0000 0001 0000     ....H...........
 800e2b8:	ea90 0800 e90c 0800 0001 0000 0002 0000     ................
 800e2c8:	e6f4 0800 e568 0800 0002 0000 0002 0000     ....h...........
 800e2d8:	ea94 0800 ea98 0800 0003 0000 0002 0000     ................
 800e2e8:	ebe0 0800 ea9c 0800 0002 0000 0002 0000     ................
 800e2f8:	e820 0800 eaa0 0800 000b 0000 0001 0000      ...............
 800e308:	eaac 0800 eab0 0800 0002 0000 0002 0000     ................
 800e318:	eab4 0800 eab8 0800 0001 0000 0002 0000     ................
 800e328:	eabc 0800 eac0 0800 0002 0000 0002 0000     ................
 800e338:	eac4 0800 eac8 0800 0002 0000 0002 0000     ................
 800e348:	eacc 0800 ead0 0800 0001 0000 0002 0000     ................
 800e358:	ead4 0800 ea4c 0800 0001 0000 0002 0000     ....L...........
 800e368:	ead8 0800 eadc 0800 0002 0000 0001 0000     ................
 800e378:	eae0 0800 eae4 0800 0005 0000 0003 0000     ................
 800e388:	eaec 0800 eaf0 0800 0002 0000 0002 0000     ................
 800e398:	ecb0 0800 ead0 0800 0001 0000 0001 0000     ................
 800e3a8:	eaf4 0800 eaf8 0800 0001 0000 0001 0000     ................
 800e3b8:	eafc 0800 eb00 0800 0003 0000 0003 0000     ................
 800e3c8:	eb04 0800 eb08 0800 0002 0000 0002 0000     ................
 800e3d8:	eb0c 0800 eb10 0800 0002 0000 0002 0000     ................
 800e3e8:	e844 0800 eb14 0800 0001 0000 0002 0000     D...............
 800e3f8:	eb18 0800 eb1c 0800 0002 0000 0002 0000     ................
 800e408:	eb20 0800 eb24 0800 0001 0000 0002 0000      ...$...........
 800e418:	eb28 0800 eb2c 0800 0003 0000 0002 0000     (...,...........
 800e428:	eb30 0800 eb34 0800 0002 0000 0001 0000     0...4...........
 800e438:	eb38 0800 eb24 0800 0001 0000 0001 0000     8...$...........
 800e448:	e814 0800 eb3c 0800 0002 0000 0002 0000     ....<...........
 800e458:	e6f8 0800 eb40 0800 0001 0000 0003 0000     ....@...........
 800e468:	eb44 0800 eb48 0800 0002 0000 0002 0000     D...H...........
 800e478:	eb4c 0800 eb50 0800 0003 0000 0002 0000     L...P...........
 800e488:	eb54 0800 eb58 0800 0010 0000 0002 0000     T...X...........
 800e498:	eb6c 0800 eb70 0800 0001 0000 0002 0000     l...p...........
 800e4a8:	eb74 0800 eb78 0800 0002 0000 0002 0000     t...x...........
 800e4b8:	eb7c 0800 eb80 0800 000b 0000 0002 0000     |...............
 800e4c8:	ea04 0800 eb8c 0800 0007 0000 0001 0000     ................
 800e4d8:	eb94 0800 eb8c 0800 0007 0000 0001 0000     ................
 800e4e8:	eb98 0800 eb9c 0800 0005 0000 0000 0000     ................
 800e4f8:	eba4 0800 eba8 0800 0006 0000 0001 0000     ................
	...
 800e518:	475f 4f4c 4142 5f4c 0000 0000 6128 6f6e     _GLOBAL_....(ano
 800e528:	796e 6f6d 7375 6e20 6d61 7365 6170 6563     nymous namespace
 800e538:	0029 0000 6c25 0064 615b 6962 003a 0000     )...%ld.[abi:...
 800e548:	3a3a 0000 647b 6665 7561 746c 6120 6772     ::..{default arg
 800e558:	0023 0000 3a7d 003a 414a 7272 7961 0000     #...}::.JArray..
 800e568:	5d5b 0000 7476 6261 656c 6620 726f 0020     []..vtable for .
 800e578:	5456 2054 6f66 2072 0000 0000 6f63 736e     VTT for ....cons
 800e588:	7274 6375 6974 6e6f 7620 6174 6c62 2065     truction vtable 
 800e598:	6f66 2072 0000 0000 692d 2d6e 0000 0000     for ....-in-....
 800e5a8:	7974 6570 6e69 6f66 6620 726f 0020 0000     typeinfo for ...
 800e5b8:	7974 6570 6e69 6f66 6e20 6d61 2065 6f66     typeinfo name fo
 800e5c8:	2072 0000 7974 6570 6e69 6f66 6620 206e     r ..typeinfo fn 
 800e5d8:	6f66 2072 0000 0000 6f6e 2d6e 6976 7472     for ....non-virt
 800e5e8:	6175 206c 6874 6e75 206b 6f74 0020 0000     ual thunk to ...
 800e5f8:	6f63 6176 6972 6e61 2074 6572 7574 6e72     covariant return
 800e608:	7420 7568 6b6e 7420 206f 0000 616a 6176      thunk to ..java
 800e618:	4320 616c 7373 6620 726f 0020 7567 7261      Class for .guar
 800e628:	2064 6176 6972 6261 656c 6620 726f 0020     d variable for .
 800e638:	4c54 2053 6e69 7469 6620 6e75 7463 6f69     TLS init functio
 800e648:	206e 6f66 2072 0000 4c54 2053 7277 7061     n for ..TLS wrap
 800e658:	6570 2072 7566 636e 6974 6e6f 6620 726f     per function for
 800e668:	0020 0000 6572 6566 6572 636e 2065 6574      ...reference te
 800e678:	706d 726f 7261 2079 0023 0000 6968 6464     mporary #...hidd
 800e688:	6e65 6120 696c 7361 6620 726f 0020 0000     en alias for ...
 800e698:	6f6e 2d6e 7274 6e61 6173 7463 6f69 206e     non-transaction 
 800e6a8:	6c63 6e6f 2065 6f66 2072 0000 535f 7461     clone for .._Sat
 800e6b8:	0020 0000 415f 6363 6d75 0000 465f 6172      ..._Accum.._Fra
 800e6c8:	7463 0000 202c 0000 706f 7265 7461 726f     ct.., ..operator
 800e6d8:	0000 0000 706f 7265 7461 726f 0020 0000     ....operator ...
 800e6e8:	6461 0000 7367 0000 6c63 0000 7869 0000     ad..gs..cl..ix..
 800e6f8:	7571 0000 3a20 0020 656e 2077 0000 0000     qu.. : .new ....
 800e708:	6c75 0000 6c6c 0000 6c75 006c 6166 736c     ul..ll..ull.fals
 800e718:	0065 0000 7274 6575 0000 0000 616a 6176     e...true....java
 800e728:	7220 7365 756f 6372 2065 0000 6564 6c63      resource ..decl
 800e738:	7974 6570 2820 0000 2e2e 002e 6874 7369     type (......this
 800e748:	0000 0000 707b 7261 236d 0000 6c67 626f     ....{parm#..glob
 800e758:	6c61 6320 6e6f 7473 7572 7463 726f 2073     al constructors 
 800e768:	656b 6579 2064 6f74 0020 0000 6c67 626f     keyed to ...glob
 800e778:	6c61 6420 7365 7274 6375 6f74 7372 6b20     al destructors k
 800e788:	7965 6465 7420 206f 0000 0000 6c7b 6d61     eyed to ....{lam
 800e798:	6462 2861 0000 0000 2329 0000 757b 6e6e     bda(....)#..{unn
 800e7a8:	6d61 6465 7420 7079 2365 0000 5b20 6c63     amed type#.. [cl
 800e7b8:	6e6f 2065 0000 0000 283e 0000 7220 7365     one ....>(.. res
 800e7c8:	7274 6369 0074 0000 7620 6c6f 7461 6c69     trict... volatil
 800e7d8:	0065 0000 6320 6e6f 7473 0000 2626 0000     e... const..&&..
 800e7e8:	6f63 706d 656c 2078 0000 0000 6d69 6761     complex ....imag
 800e7f8:	6e69 7261 2079 0000 3a3a 002a 5f20 765f     inary ..::*. __v
 800e808:	6365 6f74 2872 0000 7464 0000 7470 0000     ector(..dt..pt..
 800e818:	7561 6f74 0000 0000 696c 0000 7473 6972     auto....li..stri
 800e828:	676e 6c20 7469 7265 6c61 0000 7473 0064     ng literal..std.
 800e838:	7473 3a64 613a 6c6c 636f 7461 726f 0000     std::allocator..
 800e848:	6c61 6f6c 6163 6f74 0072 0000 7473 3a64     allocator...std:
 800e858:	623a 7361 6369 735f 7274 6e69 0067 0000     :basic_string...
 800e868:	6162 6973 5f63 7473 6972 676e 0000 0000     basic_string....
 800e878:	7473 3a64 733a 7274 6e69 0067 7473 3a64     std::string.std:
 800e888:	623a 7361 6369 735f 7274 6e69 3c67 6863     :basic_string<ch
 800e898:	7261 202c 7473 3a64 633a 6168 5f72 7274     ar, std::char_tr
 800e8a8:	6961 7374 633c 6168 3e72 202c 7473 3a64     aits<char>, std:
 800e8b8:	613a 6c6c 636f 7461 726f 633c 6168 3e72     :allocator<char>
 800e8c8:	3e20 0000 7473 3a64 693a 7473 6572 6d61      >..std::istream
 800e8d8:	0000 0000 7473 3a64 623a 7361 6369 695f     ....std::basic_i
 800e8e8:	7473 6572 6d61 633c 6168 2c72 7320 6474     stream<char, std
 800e8f8:	3a3a 6863 7261 745f 6172 7469 3c73 6863     ::char_traits<ch
 800e908:	7261 203e 003e 0000 6162 6973 5f63 7369     ar> >...basic_is
 800e918:	7274 6165 006d 0000 7473 3a64 6f3a 7473     tream...std::ost
 800e928:	6572 6d61 0000 0000 7473 3a64 623a 7361     ream....std::bas
 800e938:	6369 6f5f 7473 6572 6d61 633c 6168 2c72     ic_ostream<char,
 800e948:	7320 6474 3a3a 6863 7261 745f 6172 7469      std::char_trait
 800e958:	3c73 6863 7261 203e 003e 0000 6162 6973     s<char> >...basi
 800e968:	5f63 736f 7274 6165 006d 0000 7473 3a64     c_ostream...std:
 800e978:	693a 736f 7274 6165 006d 0000 7473 3a64     :iostream...std:
 800e988:	623a 7361 6369 695f 736f 7274 6165 3c6d     :basic_iostream<
 800e998:	6863 7261 202c 7473 3a64 633a 6168 5f72     char, std::char_
 800e9a8:	7274 6961 7374 633c 6168 3e72 3e20 0000     traits<char> >..
 800e9b8:	6162 6973 5f63 6f69 7473 6572 6d61 0000     basic_iostream..
 800e9c8:	4e61 0000 3d26 0000 5361 0000 003d 0000     aN..&=..aS..=...
 800e9d8:	6161 0000 0026 0000 6e61 0000 7461 0000     aa..&...an..at..
 800e9e8:	6c61 6769 6f6e 2066 0000 0000 7a61 0000     alignof ....az..
 800e9f8:	6363 0000 6f63 736e 5f74 6163 7473 0000     cc..const_cast..
 800ea08:	2928 0000 6d63 0000 002c 0000 6f63 0000     ()..cm..,...co..
 800ea18:	007e 0000 5664 0000 3d2f 0000 6164 0000     ~...dV../=..da..
 800ea28:	6564 656c 6574 5d5b 0020 0000 6364 0000     delete[] ...dc..
 800ea38:	7964 616e 696d 5f63 6163 7473 0000 0000     dynamic_cast....
 800ea48:	6564 0000 002a 0000 6c64 0000 6564 656c     de..*...dl..dele
 800ea58:	6574 0020 7364 0000 2a2e 0000 002e 0000     te .ds...*......
 800ea68:	7664 0000 002f 0000 4f65 0000 3d5e 0000     dv../...eO..^=..
 800ea78:	6f65 0000 005e 0000 7165 0000 3d3d 0000     eo..^...eq..==..
 800ea88:	6567 0000 3d3e 0000 7467 0000 536c 0000     ge..>=..gt..lS..
 800ea98:	3c3c 003d 3d3c 0000 706f 7265 7461 726f     <<=.<=..operator
 800eaa8:	2222 0020 736c 0000 3c3c 0000 746c 0000     "" .ls..<<..lt..
 800eab8:	003c 0000 496d 0000 3d2d 0000 4c6d 0000     <...mI..-=..mL..
 800eac8:	3d2a 0000 696d 0000 002d 0000 6c6d 0000     *=..mi..-...ml..
 800ead8:	6d6d 0000 2d2d 0000 616e 0000 656e 5b77     mm..--..na..new[
 800eae8:	005d 0000 656e 0000 3d21 0000 746e 0000     ]...ne..!=..nt..
 800eaf8:	0021 0000 776e 0000 656e 0077 526f 0000     !...nw..new.oR..
 800eb08:	3d7c 0000 6f6f 0000 7c7c 0000 007c 0000     |=..oo..||..|...
 800eb18:	4c70 0000 3d2b 0000 6c70 0000 002b 0000     pL..+=..pl..+...
 800eb28:	6d70 0000 3e2d 002a 7070 0000 2b2b 0000     pm..->*.pp..++..
 800eb38:	7370 0000 3e2d 0000 003f 0000 4d72 0000     ps..->..?...rM..
 800eb48:	3d25 0000 5372 0000 3e3e 003d 6372 0000     %=..rS..>>=.rc..
 800eb58:	6572 6e69 6574 7072 6572 5f74 6163 7473     reinterpret_cast
 800eb68:	0000 0000 6d72 0000 0025 0000 7372 0000     ....rm..%...rs..
 800eb78:	3e3e 0000 6373 0000 7473 7461 6369 635f     >>..sc..static_c
 800eb88:	7361 0074 6973 657a 666f 0020 7a73 0000     ast.sizeof .sz..
 800eb98:	7274 0000 6874 6f72 0077 0000 7774 0000     tr..throw...tw..
 800eba8:	6874 6f72 2077 0000 6973 6e67 6465 6320     throw ..signed c
 800ebb8:	6168 0072 6f62 6c6f 0000 0000 6f62 6c6f     har.bool....bool
 800ebc8:	6165 006e 6863 7261 0000 0000 7962 6574     ean.char....byte
 800ebd8:	0000 0000 6f64 6275 656c 0000 6f6c 676e     ....double..long
 800ebe8:	6420 756f 6c62 0065 6c66 616f 0074 0000      double.float...
 800ebf8:	5f5f 6c66 616f 3174 3832 0000 6e75 6973     __float128..unsi
 800ec08:	6e67 6465 6320 6168 0072 0000 6e69 0074     gned char...int.
 800ec18:	6e75 6973 6e67 6465 6920 746e 0000 0000     unsigned int....
 800ec28:	6e75 6973 6e67 6465 0000 0000 6f6c 676e     unsigned....long
 800ec38:	0000 0000 6e75 6973 6e67 6465 6c20 6e6f     ....unsigned lon
 800ec48:	0067 0000 5f5f 6e69 3174 3832 0000 0000     g...__int128....
 800ec58:	6e75 6973 6e67 6465 5f20 695f 746e 3231     unsigned __int12
 800ec68:	0038 0000 6873 726f 0074 0000 6e75 6973     8...short...unsi
 800ec78:	6e67 6465 7320 6f68 7472 0000 6f76 6469     gned short..void
 800ec88:	0000 0000 6377 6168 5f72 0074 6f6c 676e     ....wchar_t.long
 800ec98:	6c20 6e6f 0067 0000 6e75 6973 6e67 6465      long...unsigned
 800eca8:	6c20 6e6f 2067 6f6c 676e 0000 6564 6963      long long..deci
 800ecb8:	616d 336c 0032 0000 6564 6963 616d 366c     mal32...decimal6
 800ecc8:	0034 0000 6564 6963 616d 316c 3832 0000     4...decimal128..
 800ecd8:	6168 666c 0000 0000 6863 7261 3631 745f     half....char16_t
 800ece8:	0000 0000 6863 7261 3233 745f 0000 0000     ....char32_t....
 800ecf8:	6564 6c63 7974 6570 6e28 6c75 706c 7274     decltype(nullptr
 800ed08:	0029 0000 0043 0000                         )...C...

0800ed10 <_global_impure_ptr>:
 800ed10:	004c 2000                                   L.. 

0800ed14 <__sf_fake_stdin>:
	...

0800ed34 <__sf_fake_stdout>:
	...

0800ed54 <__sf_fake_stderr>:
	...
 800ed74:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
 800ed84:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
 800ed94:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
 800eda4:	6665 0000                                   ef..
